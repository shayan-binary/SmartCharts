(window["webpackJsonpsmartcharts"] = window["webpackJsonpsmartcharts"] || []).push([["chartiq"],{

/***/ "./chartiq/chartiq.js":
/*!****************************!*\
  !*** ./chartiq/chartiq.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}/**
 *	6.2.3
 *	Generation date: 2018-12-24T13:19:47.048Z
 *	Client name: binary ltd
 *	License type: annual
 *	Expiration date: "2019/04/01"
 *	Domain lock: ["127.0.0.1","localhost","binary.com","binary.sx","binary.me","binary.bot"]
 *	iFrame lock: true
 */ /* Copyright 2014-2018 ChartIQ LLC */ /***************************************************************************/ /* Please note that manually changing the domain list or expiration dates  */ /*                                                                         */ /* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WILL NOT <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */ /*                                                                         */ /*   modify the library locking mechanism. Any changes must be requested   */ /*                          directly from chartIQ.                         */ /***************************************************************************/(function(){var trialExpiration=undefined;var licenseExpiration="2019/04/01";var domains=["127.0.0.1","localhost","binary.com","binary.sx","binary.me","binary.bot"];var filesystem=false;var expiration;if(trialExpiration)expiration=new Date(trialExpiration).getTime();else if(licenseExpiration)expiration=new Date(licenseExpiration).getTime();if(expiration){var now=new Date().getTime();if(expiration<=now){if(trialExpiration)alert("This license has expired!");console.error("This license has expired!");}else if(trialExpiration){var diffDays=Math.round((expiration-now)/(1000*60*60*24));if(diffDays<3){alert("This trial license expires in "+diffDays+" days!");console.log("WARNING: This trial license expires in "+diffDays+" days!");}}}if(filesystem===true&&document.location.protocol=='file:'){return;// valid environment, skip domain check
}if(domains&&domains.length>0){var href=document.location.href;var found=false;for(var i=0;i<domains.length;i++){if(href.indexOf(domains[i])>-1){found=true;break;}}if(!found){alert("ERROR: Not licensed for domain "+href);console.error("ERROR: Not licensed for domain "+href);}}})();;(function(root,factory){if(typeof define==='function'&&define.amd){define([],factory);}else if(( false?undefined:_typeof(exports))==='object'){module.exports=factory();}else{factory(root);}})(this,function(_exports){var __js_drawing_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_drawing_(_exports){var CIQ=_exports.CIQ,timezoneJS=_exports.timezoneJS;/**
	 * Base class for Drawing Tools. Use ciqInheritsFrom() to build a subclass for custom drawing tools.
	 * The name of the subclass should be CIQ.Drawing.yourname. Whenever CIQ.ChartEngine.vectorType==yourname, then
	 * your drawing tool will be the one that is enabled when the user begins a drawing. Capitalization of yourname
	 * must be an exact match otherwise the kernel will not be able to find your drawing tool.
	 *
	 * Each of the CIQ.Drawing prototype functions may be overridden. To create a functioning drawing tool
	 * you must override the functions below that create alerts.
	 *
	 * Drawing clicks are always delivered in *adjusted price*. That is, if a stock has experienced splits then
	 * the drawing will not display correctly on an unadjusted price chart unless this is considered during the rendering
	 * process. Follow the templates to assure correct rendering under both circumstances.
	 *
	 * If no color is specified when building a drawing then color will be set to "auto" and the chart will automatically display
	 * white or black depending on the background.
	 *
	 * **Permanent drawings:**<br>
	 * To make a particular drawing permanent, set its `permanent` property to `true` once created.
	 * <br>Example: <br>
	 * ```drawingObject.permanent=true;```
	 *
	 * See {@tutorial Using and Customizing Drawing Tools} for more details.
	 *
	 * @name  CIQ.Drawing
	 * @constructor
	 */CIQ.Drawing=function(){this.chartsOnly=false;// Set this to true to restrict drawing to panels containing charts (as opposed to studies)
this.penDown=false;// Set to true when in the midst of creating the object
};/**
	 * Since not all drawings have the same configuration parameters,
	 * this is a helper function intended to return the relevant drawing parameters and default settings for the requested drawing type.
	 *
	 * For example,  you can use the returning object as your template for creating the proper UI tool box for that particular drawing.
	 * Will you need a line width UI element, a fill color?, etc. Or you can use it to determine what values you should be setting if enabling
	 * a particular drawing type programmatically with specific properties.
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @param {string} drawingName Name of drawing, e.g. "ray", "segment"
	 * @returns {object} Map of parameters used in the drawing type, with their current values
	 * @memberOf CIQ.Drawing
	 * @since 3.0.0
	 */CIQ.Drawing.getDrawingParameters=function(stx,drawingName){var drawing;try{drawing=new CIQ.Drawing[drawingName]();}catch(e){}if(!drawing)return null;drawing.stx=stx;drawing.copyConfig(true);var result={};var confs=drawing.configs;for(var c=0;c<confs.length;c++){result[confs[c]]=drawing[confs[c]];}var style=stx.canvasStyle('stx_annotation');if(style&&result.font){result.font.size=style.fontSize;result.font.family=style.fontFamily;result.font.style=style.fontStyle;result.font.weight=style.fontWeight;}return result;};/**
	 * Static method for saving drawing parameters to preferences.
	 * 
	 * Values are stored in `stxx.preferences.drawings` and can be saved together with the rest of the chart preferences, 
	 * which by default are placed in the browser's local storage under "myChartPreferences". 
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @param {string} toolName Name of drawing tool, e.g. "ray", "segment", "fibonacci"
	 * @memberOf CIQ.Drawing
	 * @since 6.0.0
	 */CIQ.Drawing.saveConfig=function(stx,toolName){if(!toolName)return;var preferences=stx.preferences;if(!preferences.drawings)preferences.drawings={};preferences.drawings[toolName]={};var tempDrawing=new CIQ.Drawing[toolName]();tempDrawing.stx=stx;CIQ.Drawing.copyConfig(tempDrawing);tempDrawing.configs.forEach(function(config){preferences.drawings[toolName][config]=tempDrawing[config];});stx.changeOccurred("preferences");};/**
	 * Static method for restoring default drawing parameters, and removing custom preferences.
	 * 
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @param {string} toolName Name of active drawing tool, e.g. "ray", "segment", "fibonacci"
	 * @param {boolean} all True to restore default for all drawing objects.  Otherwise only the active drawing object's defaults are restored.
	 * @memberOf CIQ.Drawing
	 * @since 6.0.0
	 */CIQ.Drawing.restoreDefaultConfig=function(stx,toolName,all){if(all)stx.preferences.drawings=null;else stx.preferences.drawings[toolName]=null;stx.changeOccurred('preferences');stx.currentVectorParameters=CIQ.clone(CIQ.ChartEngine.currentVectorParameters);stx.currentVectorParameters.vectorType=toolName;};/**
	 * Static method to call optional initializeSettings instance method of the drawing whose name is passed in as an argument.
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @param {string} drawingName Name of drawing, e.g. "ray", "segment", "fibonacci"
	 * @memberOf CIQ.Drawing
	 * @since 5.2.0 Calls optional instance function instead of doing all the work internally
	 */CIQ.Drawing.initializeSettings=function(stx,drawingName){var drawing=CIQ.Drawing[drawingName];if(drawing){drawInstance=new drawing();if(drawInstance.initializeSettings)drawInstance.initializeSettings(stx);}};/**
	 * Instance function used to copy the relevant drawing parameters into itself.
	 * It just calls the static function.
	 * @param {boolean} withPreferences set to true to return previously saved preferences
	 * @memberOf CIQ.Drawing
	 * @since 3.0.0
	 */CIQ.Drawing.prototype.copyConfig=function(withPreferences){CIQ.Drawing.copyConfig(this,withPreferences);};/**
	 * Static function used to copy the relevant drawing parameters into the drawing instance.
	 * Use this when overriding the Instance function, to perform basic copy before performing custom operations.
	 * @param {CIQ.Drawing} drawingInstance to copy into
	 * @param {boolean} withPreferences set to true to return previously saved preferences
	 * @memberOf CIQ.Drawing
	 * @since 3.0.0
	 * @since 6.0.0 overwrites parameters with those stored in preferences.drawings
	 */CIQ.Drawing.copyConfig=function(drawingInstance,withPreferences){var cvp=drawingInstance.stx.currentVectorParameters;var configs=drawingInstance.configs;var c,conf;for(c=0;c<configs.length;c++){conf=configs[c];if(conf=="color"){drawingInstance.color=cvp.currentColor;}else if(conf=="parameters"){drawingInstance.parameters=CIQ.clone(cvp.fibonacci);}else if(conf=="font"){drawingInstance.font=CIQ.clone(cvp.annotation.font);}else{drawingInstance[conf]=cvp[conf];}}if(!withPreferences)return;var customPrefs=drawingInstance.stx.preferences;if(customPrefs&&customPrefs.drawings){CIQ.extend(drawingInstance,customPrefs.drawings[cvp.vectorType]);for(c=0;c<configs.length;c++){conf=configs[c];if(conf=="color"){cvp.currentColor=drawingInstance.color;}else if(conf=="parameters"){cvp.fibonacci=CIQ.clone(drawingInstance.parameters);}else if(conf=="font"){cvp.annotation.font=CIQ.clone(drawingInstance.font);}else{cvp[conf]=drawingInstance[conf];}}}};/**
	 * Used to set the user behavior for creating drawings.
	 * 
	 * By default, a drawing is created with this sequence:
	 * <br>`move crosshair to staring point` → `click` → `move crosshair to ending point` → `click`. 
	 * > On a touch device this would be: 
	 * > <br>q`move crosshair to staring point` → `tap` → `move crosshair to ending point` → `tap`. 
	 * 
	 * Set dragToDraw to `true` to create the drawing with the following alternate sequence:
	 * <br>`move crosshair to staring point` → `mousedown` → `drag` → `mouseup` 
	 * > On a touch device this would be:
	 * > <br>`move crosshair to staring point` → `press` → `drag` → `release`.
	 * 
	 * This parameter may be set for all drawings, for a specific drawing type, or for a specific drawing instance. See examples.
	 * @memberOf CIQ.Drawing
	 * @example
	 * // set drawing instance to dragToDraw. Only this one drawing will be affected
	 * drawing.dragToDraw=true;
	 * // Set particular drawing prototype to dragToDraw. All drawings to type "difference" will be affected
	 * CIQ.Drawing["difference"].prototype.dragToDraw=true;
	 * // Set all drawings to dragToDraw
	 * CIQ.Drawing.prototype.dragToDraw=true;
	 */CIQ.Drawing.prototype.dragToDraw=false;/**
	 * Set this to true to disable selection, repositioning and deletion by the end user.
	 * 
	 * This parameter may be set for all drawings, for a specific drawing type, or for a specific drawing instance. See examples.
	 * @memberOf CIQ.Drawing
	 * @example
	 * // set drawing instance to permanent. Only this one drawing will be affected
	 * drawing.permanent=true;
	 * // Set particular drawing prototype to permanent. All drawings to type "difference" will be affected
	 * CIQ.Drawing["difference"].prototype.permanent=true;
	 * // Set all drawings to permanent
	 * CIQ.Drawing.prototype.permanent=true;
	 */CIQ.Drawing.prototype.permanent=false;/**
	 * Set this to true to restrict drawing from being rendered on a study panel.
	 * 
	 * This parameter may be set for all drawings, for a specific drawing type, or for a specific drawing instance. See examples.
	 * @memberOf CIQ.Drawing
	 * @example
	 * // set drawing instance to chartsOnly. Only this one drawing will be affected
	 * drawing.chartsOnly=true;
	 * // Set particular drawing prototype to chartsOnly. All drawings to type "difference" will be affected
	 * CIQ.Drawing["difference"].prototype.chartsOnly=true;
	 * // Set all drawings to chartsOnly
	 * CIQ.Drawing.prototype.chartsOnly=true;
	 */CIQ.Drawing.prototype.chartsOnly=false;/**
	 * Is called to tell a drawing to abort itself. It should clean up any rendered objects such as DOM elements or toggle states. It
	 * does not need to clean up anything that it drew on the canvas.
	 * @param  {boolean} forceClear Indicates that the user explicitly has deleted the drawing (advanced usage)
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.abort=function(forceClear){};/**
	 * Should call this.stx.setMeasure() with the measurements of the drawing if supported
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.measure=function(){};/**
	 * Initializes the drawing
	 * @param  {CIQ.ChartEngine} stx   The chart object
	 * @param  {CIQ.ChartEngine.Panel} panel The panel reference
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.construct=function(stx,panel){this.stx=stx;this.panelName=panel.name;};/**
	 * Called to render the drawing
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.render=function(context){console.warn("must implement render function!");};/**
	 * Called when a user clicks while drawing.
	 * @param  {object} context               The canvas context
	 * @param  {number} tick                  The tick in the dataSet
	 * @param  {number} value - The value (price) of the click
	 * @return {boolean}                       Return true if the drawing is complete. Otherwise the kernel will continue accepting clicks.
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.click=function(context,tick,value){console.warn("must implement click function!");};/**
	 * Called when the user moves while creating a drawing.
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.move=function(context,tick,value){console.warn("must implement move function!");};/**
	 * Called when the user attempts to reposition a drawing. The repositioner is the object provided by {@link CIQ.Drawing.intersected}
	 * and can be used to determine which aspect of the drawing is being repositioned. For instance, this object may indicate
	 * which point on the drawing was selected by the user. It might also contain the original coordinates of the point or anything else
	 * that is useful to render the drawing.
	 * @param  {object} context      The canvas context
	 * @param  {object} repositioner The repositioner object
	 * @param  {number} tick         Current tick in the dataSet for the mouse cursor
	 * @param  {number} value        Current value in the datSet for the mouse cursor
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.reposition=function(context,repositioner,tick,value){};/**
	 * Called to determine whether the drawing is intersected by either the tick/value (pointer location) or box (small box surrounding the pointer).
	 * For line based drawings, box should be checked. For area drawings (rectangles, circles) the point should be checked
	 * @param  {number} tick               The tick in the dataSet representing the cursor point
	 * @param  {number} value              The value (price) representing the cursor point
	 * @param  {object} box				   x0,y0,x1,y1,r representing an area around the cursor and the radius
	 * @return {object}                    An object that contains information about the intersection.
	 *                                     This object is passed back to {@link CIQ.Drawing.reposition} when repositioning the drawing.
	 *                                     Return false or null if not intersected. Simply returning true will highlight the drawing.
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.intersected=function(tick,value,box){console.warn("must implement intersected function!");};/**
	 * Reconstruct this drawing type from a serialization object
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.reconstruct=function(stx,obj){console.warn("must implement reconstruct function!");};/**
	 * Serialize a drawing into an object.
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.serialize=function(){console.warn("must implement serialize function!");};/**
	 * Called whenever periodicity changes so that drawings can adjust their rendering.
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.adjust=function(){console.warn("must implement adjust function!");};/**
	 * Returns the highlighted state. Set this.highlighted to the highlight state.
	 * For simple drawings the highlighted state is just true or false. For complex drawings
	 * with pivot points for instance, the highlighted state may have more than two states.
	 * Whenever the highlighted state changes a draw() event will be triggered.
	 * @param {Boolean} highlighted True to highlight the drawing, false to unhighlight
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.prototype.highlight=function(highlighted){if(highlighted&&!this.highlighted){this.highlighted=highlighted;}else if(!highlighted&&this.highlighted){this.highlighted=highlighted;}return this.highlighted;};CIQ.Drawing.prototype.littleCircleRadius=function(){var radius=6;//Math.max(12, this.layout.candleWidth)/2;
return radius;};CIQ.Drawing.prototype.littleCircle=function(ctx,x,y,fill){if(this.permanent)return;var strokeColor=this.stx.defaultColor;var fillColor=CIQ.chooseForegroundColor(strokeColor);ctx.beginPath();ctx.lineWidth=1;ctx.arc(x,y,this.littleCircleRadius(),0,2*Math.PI,false);if(fill)ctx.fillStyle=strokeColor;else ctx.fillStyle=fillColor;ctx.strokeStyle=strokeColor;ctx.setLineDash([]);ctx.fill();ctx.stroke();ctx.closePath();};CIQ.Drawing.prototype.rotator=function(ctx,x,y,on){if(this.permanent)return;var circleSize=this.littleCircleRadius();var strokeColor=this.stx.defaultColor;ctx.beginPath();ctx.lineWidth=2;if(!on)ctx.globalAlpha=0.5;var radius=4+circleSize;ctx.arc(x,y,radius,0,3*Math.PI/2,false);ctx.moveTo(x+2+radius,y+2);ctx.lineTo(x+radius,y);ctx.lineTo(x-2+radius,y+2);ctx.moveTo(x-2,y+2-radius);ctx.lineTo(x,y-radius);ctx.lineTo(x-2,y-2-radius);ctx.strokeStyle=strokeColor;ctx.stroke();ctx.closePath();ctx.globalAlpha=1;};CIQ.Drawing.prototype.mover=function(ctx,x,y,on){if(this.permanent)return;var circleSize=this.littleCircleRadius();var strokeColor=this.stx.defaultColor;var length=5;var start=circleSize+1;ctx.save();ctx.lineWidth=2;ctx.strokeStyle=strokeColor;ctx.translate(x,y);if(!on)ctx.globalAlpha=0.5;for(var i=0;i<4;i++){ctx.rotate(Math.PI/2);ctx.beginPath();ctx.moveTo(0,start);ctx.lineTo(0,start+length);ctx.moveTo(-2,start+length-2);ctx.lineTo(0,start+length);ctx.lineTo(2,start+length-2);ctx.closePath();ctx.stroke();}ctx.globalAlpha=1;ctx.restore();};CIQ.Drawing.prototype.resizer=function(ctx,x,y,on){if(this.permanent)return;var circleSize=this.littleCircleRadius();var strokeColor=this.stx.defaultColor;var length=5*Math.sqrt(2);var start=circleSize+1;ctx.save();ctx.lineWidth=2;ctx.strokeStyle=strokeColor;ctx.translate(x,y);ctx.rotate(-(x*y)/Math.abs(x*y)*Math.PI/4);if(!on)ctx.globalAlpha=0.5;for(var i=0;i<2;i++){ctx.rotate(Math.PI);ctx.beginPath();ctx.moveTo(0,start);ctx.lineTo(0,start+length);ctx.moveTo(-2,start+length-2);ctx.lineTo(0,start+length);ctx.lineTo(2,start+length-2);ctx.closePath();ctx.stroke();}ctx.globalAlpha=1;ctx.restore();};/**
	 * Returns true if the tick and value are inside the box
	 * @param  {number} tick  The tick
	 * @param  {number} value The value
	 * @param  {object} box   The box
	 * @return {boolean}       True if the tick and value are within the box
	 * @memberOf CIQ.Drawing
	 */CIQ.Drawing.prototype.pointIntersection=function(tick,value,box){var panel=this.stx.panels[this.panelName];if(!panel)return false;if(tick>=box.x0&&tick<=box.x1&&value>=box.y1&&value<=box.y0)return true;return false;};/**
	 * Sets the internal properties of the drawing points where x is a tick or a date and y is a value.
	 * @param  {number} point    index to point to be converted (0,1)
	 * @param  {number|string} x    index of bar in dataSet (tick) or date of tick (string form)
	 * @param  {number} y    price
	 * @param  {CIQ.Chart} [chart] Optional chart object
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 * @since 04-2015
	 */CIQ.Drawing.prototype.setPoint=function(point,x,y,chart){var tick=null;var date=null;if(typeof x=="number")tick=x;else if(x.length>=8)date=x;else tick=Number(x);if(y||y===0)this["v"+point]=y;var d;if(tick!==null){d=this.stx.dateFromTick(tick,chart,true);this["tzo"+point]=d.getTimezoneOffset();this["d"+point]=CIQ.yyyymmddhhmmssmmm(d);this["p"+point]=[tick,y];}else if(date!==null){d=CIQ.strToDateTime(date);if(!this["tzo"+point]&&this["tzo"+point]!==0)this["tzo"+point]=d.getTimezoneOffset();this["d"+point]=date;var adj=this["tzo"+point]-d.getTimezoneOffset();d.setMinutes(d.getMinutes()+adj);var forward=false;// if no match, we advance on intraday when there is a no time portion
// except for free form which already handles time placement internally
if(this.name!="freeform"&&!CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)&&!d.getHours()&&!d.getMinutes()&&!d.getSeconds()&&!d.getMilliseconds())forward=true;this["p"+point]=[this.stx.tickFromDate(CIQ.yyyymmddhhmmssmmm(d),chart,null,forward),y];}};/**
	 * Compute the proper color to use when rendering lines in the drawing.
	 * Will use the color but if set to auto or transparent, will use the container's defaultColor.
	 * If drawing is highlighted will use the highlight color as defined in stx_highlight_vector style.
	 * @param {string} color Color string to check and use as a basis for setting.  If not supplied, uses this.color.
	 * @return {string} Color to use for the line drawing
	 * @memberOf CIQ.Drawing
	 * @since 4.0.0
	 * @example
	 * 		var trendLineColor=this.setLineColor();
	 *		this.stx.plotLine(x0, x1, y0, y1, trendLineColor, "segment", context, panel, parameters);
	 */CIQ.Drawing.prototype.setLineColor=function(color){if(!color)color=this.color;var lineColor=color;if(lineColor=="auto"||CIQ.isTransparent(lineColor))lineColor=this.stx.defaultColor;if(this.highlighted){lineColor=this.stx.getCanvasColor("stx_highlight_vector");}return lineColor;};/**
	 * Base class for drawings that require two mouse clicks. Override as required.
	 * @constructor
	 * @name  CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint=function(){this.p0=null;this.p1=null;this.color="";};CIQ.Drawing.BaseTwoPoint.ciqInheritsFrom(CIQ.Drawing);CIQ.Drawing.BaseTwoPoint.prototype.configs=[];/**
	 * Intersection is based on a hypothetical box that follows a user's mouse or finger around
	 * An intersection occurs when either the box crosses over the drawing.The type should be "segment", "ray" or "line" depending on whether
	 * the drawing extends infinitely in any or both directions. radius determines the size of the box in pixels and is
	 * determined by the kernel depending on the user interface (mouse, touch, etc)
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.lineIntersection=function(tick,value,box,type,p0,p1,isPixels){if(!p0)p0=this.p0;if(!p1)p1=this.p1;var stx=this.stx;if(!(p0&&p1))return false;var pixelBox=CIQ.convertBoxToPixels(stx,this.panelName,box);if(pixelBox.x0===undefined)return false;var pixelPoint={x0:p0[0],x1:p1[0],y0:p0[1],y1:p1[1]};if(!isPixels)pixelPoint=CIQ.convertBoxToPixels(stx,this.panelName,pixelPoint);return CIQ.boxIntersects(pixelBox.x0,pixelBox.y0,pixelBox.x1,pixelBox.y1,pixelPoint.x0,pixelPoint.y0,pixelPoint.x1,pixelPoint.y1,type);};/**
	 * Determine whether the tick/value lie within the theoretical box outlined by this drawing's two points
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.boxIntersection=function(tick,value,box){if(!this.p0||!this.p1)return false;if(box.x0>Math.max(this.p0[0],this.p1[0])||box.x1<Math.min(this.p0[0],this.p1[0]))return false;if(box.y1>Math.max(this.p0[1],this.p1[1])||box.y0<Math.min(this.p0[1],this.p1[1]))return false;return true;};/**
	 * Any two-point drawing that results in a drawing that is less than 10 pixels
	 * can safely be assumed to be an accidental click. Such drawings are so small
	 * that they are difficult to highlight and delete, so we won't allow them.
	 *
	 * <b>Note:</b> it is very important to use pixelFromValueAdjusted() rather than pixelFromPrice(). This will
	 * ensure that saved drawings always render correctly when a chart is adjusted or transformed for display
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.accidentalClick=function(tick,value){var panel=this.stx.panels[this.panelName];var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(tick,panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,tick,value);var h=Math.abs(x1-x0);var v=Math.abs(y1-y0);var length=Math.sqrt(h*h+v*v);if(length<10){this.penDown=false;if(this.dragToDraw)this.stx.undo();return true;}};/**
	 * Value will be the actual underlying, unadjusted value for the drawing. Any adjustments or transformations
	 * are reversed out by the kernel. Internally, drawings should store their raw data (date and value) so that
	 * they can be rendered on charts with different layouts, axis, etc
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.click=function(context,tick,value){this.copyConfig();var panel=this.stx.panels[this.panelName];if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value))return this.dragToDraw;this.setPoint(1,tick,value,panel.chart);this.penDown=false;return true;// kernel will call render after this
};/**
	 * Default adjust function for BaseTwoPoint drawings
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.adjust=function(){// If the drawing's panel doesn't exist then we'll check to see
// whether the panel has been added. If not then there's no way to adjust
var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);};/**
	 * Default move function for BaseTwoPoint drawings
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.move=function(context,tick,value){if(!this.penDown)return;this.copyConfig();this.p1=[tick,value];this.render(context);};/**
	 * Default measure function for BaseTwoPoint drawings
	 * @memberOf CIQ.Drawing.BaseTwoPoint
	 */CIQ.Drawing.BaseTwoPoint.prototype.measure=function(){if(this.p0&&this.p1){this.stx.setMeasure(this.p0[1],this.p1[1],this.p0[0],this.p1[0],true,this.name);}};CIQ.Drawing.BaseTwoPoint.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;if(repositioner.action=="move"){this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.setPoint(1,repositioner.p1[0]-tickDiff,repositioner.p1[1]-valueDiff,panel.chart);this.render(context);}else if(repositioner.action=="drag"){this[repositioner.point]=[tick,value];this.setPoint(0,this.p0[0],this.p0[1],panel.chart);this.setPoint(1,this.p1[0],this.p1[1],panel.chart);this.render(context);}};/**
	 * Annotation drawing tool. An annotation is a simple text tool. It uses the class stx_annotation
	 * to determine the font style and color for the annotation. Class stx_annotation_highlight_bg is used to
	 * determine the background color when highlighted.
	 *
	 * The controls controls.annotationSave and controls.annotationCancel are used to create HTMLElements for
	 * saving and canceling the annotation while editing. A textarea is created dynamically. The annotation tool
	 * attempts to draw the annotations at the same size and position as the textarea so that the effect is wysiwig.
	 * @constructor
	 * @name  CIQ.Drawing.annotation
	 * @see {@link CIQ.Drawing.BaseTwoPoint}
	 */CIQ.Drawing.annotation=function(){this.name="annotation";this.arr=[];this.w=0;this.h=0;this.padding=4;this.text="";this.ta=null;this.fontSize=0;this.font={};};CIQ.Drawing.annotation.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.annotation.prototype.getFontString=function(){this.fontDef={style:null,weight:null,size:"12px",family:null};var css=this.stx.canvasStyle("stx_annotation");if(css){if(css.fontStyle)this.fontDef.style=css.fontStyle;if(css.fontWeight)this.fontDef.weight=css.fontWeight;if(css.fontSize)this.fontDef.size=css.fontSize;if(css.fontFamily)this.fontDef.family=css.fontFamily;}if(this.font.style)this.fontDef.style=this.font.style;if(this.font.weight)this.fontDef.weight=this.font.weight;if(this.font.size)this.fontDef.size=this.font.size;if(this.font.family)this.fontDef.family=this.font.family;this.fontString="";var first=true;for(var n in this.fontDef){if(this.fontDef[n]){if(!first){this.fontString+=" ";}else{first=false;}this.fontString+=this.fontDef[n];}}};CIQ.Drawing.annotation.prototype.configs=["color","font"];CIQ.Drawing.annotation.prototype.measure=function(){};CIQ.Drawing.annotation.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);context.font=this.fontString;context.textBaseline="top";var x=x0;var y=y0;var w=this.w;var h=this.h;var color=this.setLineColor();if(this.stem){var sx0,sx1,sy0,sy1;if(this.stem.d){// absolute positioning of stem
sx0=this.stx.pixelFromTick(this.stem.t);// bottom of stem
sy0=this.stx.pixelFromValueAdjusted(panel,this.stem.t,this.stem.v);sx1=x+w/2;// center of text
sy1=y+h/2;}else if(this.stem.x){// stem with relative offset positioning
sx0=x;sy0=y;x+=this.stem.x;y+=this.stem.y;sx1=x+w/2;sy1=y+h/2;}context.beginPath();if(this.borderColor)context.strokeStyle=this.borderColor;else context.strokeStyle=color;context.moveTo(sx0,sy0);context.lineTo(sx1,sy1);context.stroke();}if(this.highlighted){this.stx.canvasColor("stx_annotation_highlight_bg",context);context.fillRect(x,y,w,h);}else{if(this.fillColor){context.fillStyle=this.fillColor;context.fillRect(x,y,w,h);}else if(this.stem){// If there's a stem then use the container color otherwise the stem will show through
context.fillStyle=this.stx.containerColor;context.fillRect(x,y,w,h);}}if(this.borderColor){context.beginPath();context.strokeStyle=this.borderColor;context.rect(x,y,w,h);context.stroke();}//this.stx.canvasFont("stx_annotation");
if(this.highlighted){this.stx.canvasColor("stx_annotation_highlight",context);}else{context.fillStyle=color;}y+=this.padding;for(var i=0;i<this.arr.length;i++){context.fillText(this.arr[i],x+this.padding,y);y+=this.fontSize;}context.textBaseline="alphabetic";};CIQ.Drawing.annotation.prototype.onChange=function(e){//no operation. Override if you want to capture the change.
};CIQ.Drawing.annotation.prototype.edit=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;// When mouse events are attached to the container then any dom objects on top
// of the container will intercept those events. In particular, the textarea for
// annotations gets in the way, so here we capture the mouseup that fires on the textarea
// and pass it along to the kernel if necessary
function handleTAMouseUp(stx){return function(e){if(stx.manageTouchAndMouse&&CIQ.ChartEngine.drawingLine){stx.mouseup(e);}};}function cancelAnnotation(self){return function(e){self.stx.editingAnnotation=false;self.stx.undo();self.stx.cancelTouchSingleClick=true;};}function saveAnnotation(self){return function(e){if(self.ta.value==="")return;self.stx.editingAnnotation=false;self.text=self.ta.value;self.adjust();self.stx.addDrawing(self);self.stx.changeOccurred("vector");self.stx.undo();self.stx.cancelTouchSingleClick=true;};}function resizeAnnotation(self){return function(e){if(e){var key=window.event?event.keyCode:e.keyCode;switch(key){case 27:self.stx.undo();return;}}var stx=self.stx;var ta=self.ta;var arr=ta.value.split('\n');var w=0;//stx.canvasFont("stx_annotation");
stx.chart.context.font=self.fontString;for(var i=0;i<arr.length;i++){var m=stx.chart.context.measureText(arr[i]).width;if(m>w)w=m;}var h=(arr.length+1)*(self.fontSize+3);if(w<50)w=50;ta.style.width=w+30+"px";// Leave room for scroll bar
ta.style.height=h+"px";var y=parseInt(CIQ.stripPX(ta.style.top),10);var x=CIQ.stripPX(ta.style.left);w=ta.clientWidth;h=ta.clientHeight;if(x+w+100<self.stx.chart.canvasWidth){save.style.top=y+"px";cancel.style.top=y+"px";save.style.left=x+w+10+"px";cancel.style.left=x+w+60+"px";}else if(y+h+30<self.stx.chart.canvasHeight){save.style.top=y+h+10+"px";cancel.style.top=y+h+10+"px";save.style.left=x+"px";cancel.style.left=x+50+"px";}else{save.style.top=y-35+"px";cancel.style.top=y-35+"px";save.style.left=x+"px";cancel.style.left=x+50+"px";}};}var save=this.stx.controls.annotationSave;var cancel=this.stx.controls.annotationCancel;if(!save||!cancel)return;this.stx.editingAnnotation=true;this.stx.undisplayCrosshairs();this.stx.openDialog="annotation";if(!this.ta){this.ta=document.createElement("TEXTAREA");this.ta.className="stx_annotation";this.ta.onkeyup=resizeAnnotation(this);this.ta.onmouseup=handleTAMouseUp(this.stx);this.ta.setAttribute("wrap","hard");if(CIQ.isIOS7or8)this.ta.setAttribute("placeholder","Enter Text");this.stx.chart.container.appendChild(this.ta);this.ta.style.position="absolute";this.ta.style.width="100px";this.ta.style.height="20px";if(CIQ.ipad||CIQ.iphone){this.ta.ontouchstart=function(e){e.stopPropagation();};/*var ta=this.ta;
				CIQ.safeClickTouch(this.ta, function(e){
					if(document.activeElement===ta){
							window.focus();
							CIQ.focus(ta, true);
					}
				});*/}}var self=this;this.ta.oninput=function(e){self.onChange(e);};this.ta.style.font=this.fontString;if(this.color){if(this.color=="transparent"||this.color=="auto"){var styles=getComputedStyle(this.ta);if(styles&&CIQ.isTransparent(styles.backgroundColor)){this.ta.style.color=this.stx.defaultColor;}else{this.ta.style.color="#000";// text area always has white background
}}else{this.ta.style.color=this.color;}}var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);//if the right edge of the ta is off of the screen, scootch it to the left.
this.ta.style.left=x0+140<this.stx.chart.canvasRight?x0+"px":this.stx.chart.canvasRight-200+"px";//if user clicks within 60 px of bottom of the chart,scootch it up.
this.ta.style.top=y0+60<this.stx.chart.canvasHeight?y0+"px":y0-60+"px";if(this.name=="callout"){this.ta.style.left=x0-(!isNaN(this.w)?this.w/2:this.defaultWidth)+"px";this.ta.style.top=y0-(!isNaN(this.h)?this.h/2:this.defaultHeight)+"px";}save.style.display="inline-block";cancel.style.display="inline-block";CIQ.safeClickTouch(save,saveAnnotation(this));CIQ.safeClickTouch(cancel,cancelAnnotation(this));resizeAnnotation(this)();/*var timeout=0;
		if(CIQ.ipad) timeout=400;
		if(!CIQ.isIOS7or8){
			CIQ.focus(this.ta,timeout);
		}*/this.ta.focus();if(CIQ.isAndroid&&!CIQ.is_chrome&&!CIQ.isFF){// Android soft keyboard will cover up the lower half of the browser so if our
// annotation is in that area we temporarily scroll the chart container upwards
// The style.bottom of the chart container is reset in abort()
this.priorBottom=this.stx.chart.container.style.bottom;var keyboardHeight=400;// hard coded. We could get this by measuring the change in innerHeight but timing is awkward because the keyboard scrolls
var screenLocation=this.stx.resolveY(y0)+100;// figure 100 pixels of height for text
if(screenLocation>CIQ.pageHeight()-keyboardHeight){var pixelsFromBottomOfScreen=CIQ.pageHeight()-screenLocation;var scrolledBottom=keyboardHeight-pixelsFromBottomOfScreen;this.stx.chart.container.style.bottom=scrolledBottom+"px";}}};CIQ.Drawing.annotation.prototype.click=function(context,tick,value){//don't allow user to add annotation on the axis.
if(this.stx.overXAxis||this.stx.overYAxis)return;var panel=this.stx.panels[this.panelName];this.copyConfig();//this.getFontString();
this.setPoint(0,tick,value,panel.chart);this.adjust();this.edit(context);return false;};CIQ.Drawing.annotation.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.render(context);};CIQ.Drawing.annotation.prototype.intersected=function(tick,value,box){var panel=this.stx.panels[this.panelName];if(!this.p0)return null;// in case invalid drawing (such as from panel that no longer exists)
var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var x1=x0+this.w;var y1=y0+this.h;if(this.stem&&this.stem.x){x0+=this.stem.x;x1+=this.stem.x;y0+=this.stem.y;y1+=this.stem.y;}var x=this.stx.pixelFromTick(tick,panel.chart);var y=this.stx.pixelFromValueAdjusted(panel,tick,value);if(x+box.r>=x0&&x-box.r<=x1&&y+box.r>=y0&&y-box.r<=y1){this.highlighted=true;return{p0:CIQ.clone(this.p0),tick:tick,value:value};}return false;};CIQ.Drawing.annotation.prototype.abort=function(){var save=this.stx.controls.annotationSave,cancel=this.stx.controls.annotationCancel;if(save)save.style.display="none";if(cancel)cancel.style.display="none";if(this.ta)this.stx.chart.container.removeChild(this.ta);this.ta=null;this.stx.openDialog="";this.stx.showCrosshairs();//document.body.style.cursor="crosshair"; //Was interfering with undisplayCrosshairs().
this.stx.editingAnnotation=false;CIQ.clearCanvas(this.stx.chart.tempCanvas,this.stx);if(CIQ.isAndroid&&!CIQ.is_chrome&&!CIQ.isFF){this.stx.chart.container.style.bottom=this.priorBottom;}CIQ.fixScreen();};/**
	 * Reconstruct an annotation
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object}[obj] A drawing descriptor
	 * @param {string} [obj.col] The text color for the annotation
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.d0] String form date or date time
	 * @param {number} [obj.v0] The value at which to position the annotation
	 * @param {string} [obj.text] The annotation text (escaped using encodeURIComponent())
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {string} [obj.bc] Border color
	 * @param {string} [obj.bg] Background color
	 * @param {string} [obj.lw] Line width
	 * @param {string} [obj.ptrn] Line pattern
	 * @param {object} [obj.fnt] Font
	 * @param {object} [obj.fnt.st] Font style
	 * @param {object} [obj.fnt.sz] Font size
	 * @param {object} [obj.fnt.wt] Font weight
	 * @param {object} [obj.fnt.fl] Font family
	 * @memberOf CIQ.Drawing.annotation
	 */CIQ.Drawing.annotation.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.d0=obj.d0;this.tzo0=obj.tzo0;this.v0=obj.v0;this.text=stx.escapeOnSerialize?decodeURIComponent(obj.text):obj.text;this.stem=obj.stem;this.borderColor=obj.bc;this.fillColor=obj.bg;this.lineWidth=obj.lw;this.pattern=obj.ptrn;this.font=CIQ.replaceFields(obj.fnt,{"st":"style","sz":"size","wt":"weight","fl":"family"});if(!this.font)this.font={};this.adjust();};CIQ.Drawing.annotation.prototype.serialize=function(){var obj={name:this.name,pnl:this.panelName,col:this.color,d0:this.d0,tzo0:this.tzo0,v0:this.v0,text:this.stx.escapeOnSerialize?encodeURIComponent(this.text):this.text};if(this.font){var fnt=CIQ.removeNullValues(CIQ.replaceFields(this.font,{"style":"st","size":"sz","weight":"wt","family":"fl"}));if(!CIQ.isEmpty(fnt))obj.fnt=fnt;}if(this.stem){obj.stem={"d":this.stem.d,"v":this.stem.v,"x":this.stem.x,"y":this.stem.y};}if(this.borderColor)obj.bc=this.borderColor;if(this.fillColor)obj.bg=this.fillColor;if(this.lineWidth)obj.lw=this.lineWidth;if(this.pattern)obj.ptrn=this.pattern;return obj;};CIQ.Drawing.annotation.prototype.renderText=function(){this.getFontString();var panel=this.stx.panels[this.panelName];if(!panel)return;this.arr=this.text.split('\n');var w=0;this.stx.chart.context.font=this.fontString;//this.stx.canvasFont("stx_annotation");
for(var i=0;i<this.arr.length;i++){var m=this.stx.chart.context.measureText(this.arr[i]).width;if(m>w)w=m;}if(w===0)w=2*this.defaultWidth;//this.fontSize=this.stx.getCanvasFontSize("stx_annotation");
this.fontSize=CIQ.stripPX(this.fontDef.size);var h=this.arr.length*this.fontSize;if(CIQ.touchDevice)h+=5;this.w=w+this.padding*2;this.h=h+this.padding*2;var x1=this.stx.pixelFromTick(this.p0[0],panel.chart)+w;var y1=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1])+h;this.p1=[this.stx.tickFromPixel(x1,panel.chart),this.stx.valueFromPixel(y1,panel)];if(this.stem&&this.stem.d){this.stem.t=this.stx.tickFromDate(this.stem.d,panel.chart);}};CIQ.Drawing.annotation.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.renderText();};/**
	 * segment is an implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing.
	 * @name CIQ.Drawing.segment
	 * @constructor
	 */CIQ.Drawing.segment=function(){this.name="segment";};CIQ.Drawing.segment.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.segment.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var width=this.lineWidth;var color=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:width};if(parameters.pattern=="none")parameters.pattern="solid";this.stx.plotLine(x0,x1,y0,y1,color,this.name,context,panel,parameters);if(this.axisLabel&&!this.repositioner){if(this.name=="horizontal"){this.stx.endClip();var txt=this.p0[1];if(panel.chart.transformFunc)txt=panel.chart.transformFunc(this.stx,panel.chart,txt);if(panel.yAxis.priceFormatter)txt=panel.yAxis.priceFormatter(this.stx,panel,txt);else txt=this.stx.formatYAxisPrice(txt,panel);this.stx.createYAxisLabel(panel,txt,y0,color);this.stx.startClip(panel.name);}else if(this.name=="vertical"&&this.p0[0]>=0&&!this.stx.chart.xAxis.noDraw){// don't try to compute dates from before dataSet
var dt,newDT;dt=this.stx.dateFromTick(this.p0[0],panel.chart,true);if(!CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)){var milli=dt.getSeconds()*1000+dt.getMilliseconds();if(this.stx.displayZone){// this converts from the quote feed timezone to the chart specified time zone
newDT=new timezoneJS.Date(dt.getTime(),this.stx.displayZone);dt=new Date(newDT.getFullYear(),newDT.getMonth(),newDT.getDate(),newDT.getHours(),newDT.getMinutes());dt=new Date(dt.getTime()+milli);}}else{dt.setHours(0,0,0,0);}var myDate=CIQ.mmddhhmm(CIQ.yyyymmddhhmm(dt));if(panel.chart.xAxis.formatter){myDate=panel.chart.xAxis.formatter(dt);}else if(this.stx.internationalizer){var str;if(dt.getHours()!==0||dt.getMinutes()!==0){str=this.stx.internationalizer.monthDay.format(dt);str+=" "+this.stx.internationalizer.hourMinute.format(dt);}else{str=this.stx.internationalizer.yearMonthDay.format(dt);}myDate=str;}this.stx.endClip();this.stx.createXAxisLabel(panel,myDate,x0,color,null,true);this.stx.startClip(panel.name);}}if(this.highlighted&&this.name!="horizontal"&&this.name!="vertical"){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};CIQ.Drawing.segment.prototype.abort=function(){this.stx.setMeasure(null,null,null,null,false);};CIQ.Drawing.segment.prototype.intersected=function(tick,value,box){if(!this.p0||!this.p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var name=this.name;if(name!="horizontal"&&name!="vertical"&&name!="gartley"){var pointsToCheck={0:this.p0,1:this.p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}}if(name=="horizontal"||name=="vertical")name="line";var isIntersected=this.lineIntersection(tick,value,box,name);if(isIntersected){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,// save original tick
value:value// save original value
};}return null;};CIQ.Drawing.segment.prototype.configs=["color","lineWidth","pattern"];CIQ.Drawing.segment.prototype.copyConfig=function(withPreferences){CIQ.Drawing.copyConfig(this,withPreferences);if(this.pattern=="none"&&this.configs.indexOf("fillColor")==-1)this.pattern="solid";};/**
	 * Reconstruct a segment
	 * @memberOf CIQ.Drawing.segment
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Optional line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 */CIQ.Drawing.segment.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.adjust();};CIQ.Drawing.segment.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1};};/**
	 * Continuous line drawing tool. Creates a series of connected line segments, each one completed with a user click.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}.
	 * @constructor
	 * @name  CIQ.Drawing.continuous
	 */CIQ.Drawing.continuous=function(){this.name="continuous";this.dragToDraw=false;this.maxSegments=null;};CIQ.Drawing.continuous.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.continuous.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value)){this.stx.undo();//abort
return true;}this.setPoint(1,tick,value,panel.chart);// render a segment
var Segment=CIQ.Drawing.segment;var segment=new Segment();var obj=this.serialize(this.stx);segment.reconstruct(this.stx,obj);this.stx.addDrawing(segment);this.stx.changeOccurred("vector");this.stx.draw();this.segment++;if(this.maxSegments&&this.segment>this.maxSegments)return true;this.setPoint(0,tick,value,panel.chart);// reset initial point for next segment, copy by value
return false;};/**
	 * Line drawing tool. A line is a vector defined by two points that is infinite in both directions.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}.
	 * @constructor
	 * @name  CIQ.Drawing.line
	 */CIQ.Drawing.line=function(){this.name="line";};CIQ.Drawing.line.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.line.prototype.dragToDraw=false;CIQ.Drawing.line.prototype.calculateOuterSet=function(panel){if(this.p0[0]==this.p1[0]||this.p0[1]==this.p1[1]||CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)){return;}var vector={x0:this.p0[0],y0:this.p0[1],x1:this.p1[0],y1:this.p1[1]};if(vector.x0>vector.x1){vector={x0:this.p1[0],y0:this.p1[1],x1:this.p0[0],y1:this.p0[1]};}var earlier=vector.x0-1000;var later=vector.x1+1000;this.v0B=CIQ.yIntersection(vector,earlier);this.v1B=CIQ.yIntersection(vector,later);this.d0B=this.stx.dateFromTick(earlier,panel.chart);this.d1B=this.stx.dateFromTick(later,panel.chart);};CIQ.Drawing.line.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}// if the user accidentally double clicks in rapid fashion
if(this.accidentalClick(tick,value))return this.dragToDraw;this.setPoint(1,tick,value,panel.chart);this.calculateOuterSet(panel);this.penDown=false;return true;// kernel will call render after this
};/**
	 * Reconstruct a line
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Optional line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.v0B] Computed outer Value (price) for the first point if original drawing was on intraday but now displaying on daily
	 * @param {number} [obj.v1B] Computed outer Value (price) for the second point if original drawing was on intraday but now displaying on daily
	 * @param {number} [obj.d0B] Computed outer Date (string form) for the first point if original drawing was on intraday but now displaying on daily
	 * @param {number} [obj.d1B] Computed outer Date (string form) for the second point if original drawing was on intraday but now displaying on daily
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @memberOf CIQ.Drawing.line
	 */CIQ.Drawing.line.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.v0=obj.v0;this.v1=obj.v1;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;if(obj.d0B){this.d0B=obj.d0B;this.d1B=obj.d1B;this.v0B=obj.v0B;this.v1B=obj.v1B;}this.adjust();};CIQ.Drawing.line.prototype.serialize=function(){var obj={name:this.name,pnl:this.panelName,col:this.color,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1};if(this.d0B){obj.d0B=this.d0B;obj.d1B=this.d1B;obj.v0B=this.v0B;obj.v1B=this.v1B;}return obj;};CIQ.Drawing.line.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);// Use outer set if original drawing was on intraday but now displaying on daily
if(CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)&&this.d0B){this.setPoint(0,this.d0B,this.v0B,panel.chart);this.setPoint(1,this.d1B,this.v1B,panel.chart);}};/**
	 * Ray drawing tool. A ray is defined by two points. It travels infinitely past the second point.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.line}.
	 * @constructor
	 * @name  CIQ.Drawing.ray
	 */CIQ.Drawing.ray=function(){this.name="ray";};CIQ.Drawing.ray.ciqInheritsFrom(CIQ.Drawing.line);CIQ.Drawing.ray.prototype.calculateOuterSet=function(panel){if(this.p0[0]==this.p1[0]||this.p0[1]==this.p1[1]||CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)){return;}var vector={x0:this.p0[0],y0:this.p0[1],x1:this.p1[0],y1:this.p1[1]};var endOfRay=vector.x1+1000;if(vector.x0>vector.x1){endOfRay=vector.x1-1000;}this.v0B=this.v0;this.v1B=CIQ.yIntersection(vector,endOfRay);this.d0B=this.d0;this.d1B=this.stx.dateFromTick(endOfRay,panel.chart);};CIQ.Drawing.ray.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);// Use outer set if original drawing was on intraday but now displaying on daily
if(CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)&&this.d0B){this.setPoint(1,this.d1B,this.v1B,panel.chart);}};/**
	 * Horizontal line drawing tool. The horizontal line extends infinitely in both directions.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}
	 * @constructor
	 * @name  CIQ.Drawing.horizontal
	 */CIQ.Drawing.horizontal=function(){this.name="horizontal";};CIQ.Drawing.horizontal.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.horizontal.prototype.dragToDraw=false;CIQ.Drawing.horizontal.prototype.measure=function(){};CIQ.Drawing.horizontal.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();this.setPoint(0,tick,value,panel.chart);return true;// kernel will call render after this
};// skips point interection and forces positioner points inside of the dataSet
CIQ.Drawing.horizontal.prototype.intersected=function(tick,value,box){if(this.lineIntersection(tick,value,box,"line")){var stx=this.stx;var t0=stx.chart.dataSet.length;var v0=this.p0[1];this.highlighted=true;return{action:"move",p0:[t0-2,v0],p1:[t0-1,v0],tick:tick,value:value};}return null;};/**
	 * Reconstruct a horizontal
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Optional line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {boolean} [obj.al] True to include an axis label
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @memberOf CIQ.Drawing.horizontal
	 */CIQ.Drawing.horizontal.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.v0=obj.v0;this.d0=obj.d0;this.tzo0=obj.tzo0;this.axisLabel=obj.al;this.adjust();};CIQ.Drawing.horizontal.prototype.serialize=function(){var obj={name:this.name,pnl:this.panelName,col:this.color,ptrn:this.pattern,lw:this.lineWidth,v0:this.v0,d0:this.d0,tzo0:this.tzo0,al:this.axisLabel};return obj;};CIQ.Drawing.horizontal.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.p1=[this.p0[0]+100,this.p0[1]];};CIQ.Drawing.horizontal.prototype.configs=["color","lineWidth","pattern","axisLabel"];/**
	 * Vertical line drawing tool. The vertical line extends infinitely in both directions.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.horizontal}.
	 * @constructor
	 * @name  CIQ.Drawing.vertical
	 */CIQ.Drawing.vertical=function(){this.name="vertical";};CIQ.Drawing.vertical.ciqInheritsFrom(CIQ.Drawing.horizontal);CIQ.Drawing.vertical.prototype.measure=function(){};// override specialized horizontal method
CIQ.Drawing.vertical.prototype.intersected=CIQ.Drawing.segment.prototype.intersected;CIQ.Drawing.vertical.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.p1=[this.p0[0],this.p0[1]+1];};/**
	 * Measure tool.
	 * It inherits its properties from {@link CIQ.Drawing.segment}.
	 * @constructor
	 * @name  CIQ.Drawing.measure
	 */CIQ.Drawing.measure=function(){this.name="measure";};CIQ.Drawing.measure.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.measure.prototype.click=function(context,tick,value){this.copyConfig();if(!this.penDown){this.p0=[tick,value];this.penDown=true;return false;}this.stx.undo();this.penDown=false;return true;};/**
	 * rectangle is an implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing
	 * @constructor
	 * @name  CIQ.Drawing.rectangle
	 */CIQ.Drawing.rectangle=function(){this.name="rectangle";};CIQ.Drawing.rectangle.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.rectangle.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var x=Math.round(Math.min(x0,x1))+0.5;var y=Math.min(y0,y1);var width=Math.max(x0,x1)-x;var height=Math.max(y0,y1)-y;var edgeColor=this.color;if(this.highlighted){edgeColor=this.stx.getCanvasColor("stx_highlight_vector");}var fillColor=this.fillColor;if(fillColor&&!CIQ.isTransparent(fillColor)&&fillColor!="auto"){context.beginPath();context.rect(x,y,width,height);context.fillStyle=fillColor;context.globalAlpha=0.2;context.fill();context.closePath();context.globalAlpha=1;}var parameters={pattern:this.pattern,lineWidth:this.lineWidth};if(this.highlighted&&parameters.pattern=="none"){parameters.pattern="solid";if(parameters.lineWidth==0.1)parameters.lineWidth=1;}// We extend the vertical lines by .5 to account for displacement of the horizontal lines
// HTML5 Canvas exists *between* pixels, not on pixels, so draw on .5 to get crisp lines
this.stx.plotLine(x0,x1,y0,y0,edgeColor,"segment",context,panel,parameters);this.stx.plotLine(x1,x1,y0-0.5,y1+0.5,edgeColor,"segment",context,panel,parameters);this.stx.plotLine(x1,x0,y1,y1,edgeColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x0,y1+0.5,y0-0.5,edgeColor,"segment",context,panel,parameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};CIQ.Drawing.rectangle.prototype.intersected=function(tick,value,box){if(!this.p0||!this.p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:this.p0,1:this.p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}if(this.boxIntersection(tick,value,box)){this.highlighted=true;return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,value:value};}return null;};CIQ.Drawing.rectangle.prototype.configs=["color","fillColor","lineWidth","pattern"];/**
	 * Reconstruct an rectangle
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The border color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Optional line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @memberOf CIQ.Drawing.rectangle
	 */CIQ.Drawing.rectangle.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.adjust();};CIQ.Drawing.rectangle.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1};};/**
	 * Ellipse drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.BaseTwoPoint}.
	 * @constructor
	 * @name  CIQ.Drawing.ellipse
	 */CIQ.Drawing.ellipse=function(){this.name="ellipse";};CIQ.Drawing.ellipse.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.ellipse.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var left=x0-(x1-x0);var right=x1;var middle=y0;var bottom=y1;var top=y0-(y1-y0);var weight=(bottom-top)/6;var lineWidth=this.lineWidth;if(!lineWidth)lineWidth=1.1;var edgeColor=this.color;if(edgeColor=="auto"||CIQ.isTransparent(edgeColor))edgeColor=this.stx.defaultColor;if(this.highlighted){edgeColor=this.stx.getCanvasColor("stx_highlight_vector");if(lineWidth==0.1)lineWidth=1.1;}var fillColor=this.fillColor;context.beginPath();context.moveTo(left,middle);context.bezierCurveTo(left,bottom+weight,right,bottom+weight,right,middle);context.bezierCurveTo(right,top-weight,left,top-weight,left,middle);if(fillColor&&!CIQ.isTransparent(fillColor)&&fillColor!="auto"){context.fillStyle=fillColor;context.globalAlpha=0.2;context.fill();context.globalAlpha=1;}if(edgeColor&&this.pattern!="none"){context.strokeStyle=edgeColor;context.lineWidth=lineWidth;if(context.setLineDash){context.setLineDash(CIQ.borderPatternToArray(lineWidth,this.pattern));context.lineDashOffset=0;//start point in array
}context.stroke();}context.closePath();if(this.highlighted){var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x1,y1,p1Fill);}};CIQ.Drawing.ellipse.prototype.intersected=function(tick,value,box){if(!this.p0||!this.p1)return null;// in case invalid drawing (such as from panel that no longer exists)
if(this.pointIntersection(this.p1[0],this.p1[1],box)){this.highlighted="p1";return{action:"drag",point:"p1"};}var left=this.p0[0]-(this.p1[0]-this.p0[0]);var right=this.p1[0];var bottom=this.p1[1];var top=this.p0[1]-(this.p1[1]-this.p0[1]);if(box.x0>Math.max(left,right)||box.x1<Math.min(left,right))return false;if(box.y1>Math.max(top,bottom)||box.y0<Math.min(top,bottom))return false;this.highlighted=true;return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,value:value};};CIQ.Drawing.ellipse.prototype.configs=["color","fillColor","lineWidth","pattern"];/**
	 * Reconstruct an ellipse
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The border color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Optional pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Optional line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the center point
	 * @param {number} [obj.v1] Value (price) for the outside point
	 * @param {number} [obj.d0] Date (string form) for the center point
	 * @param {number} [obj.d1] Date (string form) for the outside point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @memberOf CIQ.Drawing.ellipse
	 */CIQ.Drawing.ellipse.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.adjust();};CIQ.Drawing.ellipse.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1};};/**
	 * Fibonacci drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.BaseTwoPoint}
	 * @constructor
	 * @name  CIQ.Drawing.fibonacci
	 */CIQ.Drawing.fibonacci=function(){this.name="fibonacci";this.configurator="fibonacci";};CIQ.Drawing.fibonacci.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.fibonacci.mapping={"trend":"t","color":"c","parameters":"p","pattern":"pt","opacity":"o","lineWidth":"lw","level":"l","extendLeft":"e","printLevels":"pl","printValues":"pv","timezone":"tz","display":"d"};/**
	 * Levels to enable by default.
	 * @memberOf CIQ.Drawing.fibonacci
	 * @default
	 * @since 5.2.0
	 */CIQ.Drawing.fibonacci.prototype.recommendedLevels=[-0.618,-0.382,0,0.382,0.5,0.618,1,1.382,1.618];CIQ.Drawing.fibonacci.prototype.configs=["color","fillColor","lineWidth","pattern","parameters"];/**
	 * Set the default fib settings for the type of fib tool selected.  References {@link CIQ.Drawing.fibonacci#recommendedLevels}. 
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @memberOf CIQ.Drawing.fibonacci
	 * @since 5.2.0
	 */CIQ.Drawing.fibonacci.prototype.initializeSettings=function(stx){var recommendedLevels=this.recommendedLevels;if(recommendedLevels){var fibs=stx.currentVectorParameters.fibonacci.fibs;for(var index=0;index<fibs.length;index++){delete fibs[index].display;for(var rIndex=0;rIndex<recommendedLevels.length;rIndex++){if(fibs[index].level==recommendedLevels[rIndex])fibs[index].display=true;}}}};/*
	 * Calculate the outer points of the fib series, which are used to detect highlighting
	 */CIQ.Drawing.fibonacci.prototype.setOuter=function(){var stx=this.stx,panel=stx.panels[this.panelName];if(!panel)return;var max=Math.max(this.p0[1],this.p1[1]);var min=Math.min(this.p0[1],this.p1[1]);var dist=max-min;this.outer={p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1)};var y0=stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var x0=stx.pixelFromTick(this.p0[0],panel.chart);var x1=stx.pixelFromTick(this.p1[0],panel.chart);var minFib=0;var maxFib=1;for(var i=0;i<this.parameters.fibs.length;i++){var fib=this.parameters.fibs[i];if(fib.level>=minFib&&fib.level<=maxFib||!fib.display)continue;var y=stx.pixelFromValueAdjusted(panel,this.p0[0],y1<y0?max-dist*fib.level:min+dist*fib.level);var x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},y);if(fib.level<minFib){minFib=fib.level;this.outer.p1[1]=stx.valueFromPixel(y,panel);this.outer.p1[0]=stx.tickFromPixel(x,panel.chart);}else if(fib.level>maxFib){maxFib=fib.level;this.outer.p0[1]=stx.valueFromPixel(y,panel);this.outer.p0[0]=stx.tickFromPixel(x,panel.chart);}}};CIQ.Drawing.fibonacci.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value))return this.dragToDraw;this.setPoint(1,tick,value,panel.chart);this.setOuter();this.parameters=CIQ.clone(this.parameters);// separate from the global object
this.penDown=false;return true;// kernel will call render after this
};CIQ.Drawing.fibonacci.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var yAxis=panel.yAxis;if(!this.p1)return;var max=Math.max(this.p0[1],this.p1[1]);var min=Math.min(this.p0[1],this.p1[1]);var dist=max-min;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var top=Math.min(y1,y0);var bottom=Math.max(y1,y0);var height=bottom-top;var isUpTrend=(y1-y0)/(x1-x0)>0;//old drawings missing parameters.trend
var trend={color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}};if(!this.parameters.trend)this.parameters.trend=trend;var trendLineColor=this.setLineColor(this.parameters.trend.color);context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var w=context.measureText("161.8%").width+10;// give it extra space so it does not overlap with the price labels.
var minX=Number.MAX_VALUE,minY=Number.MAX_VALUE,maxX=Number.MAX_VALUE*-1,maxY=Number.MAX_VALUE*-1;var txtColor=this.color;if(txtColor=="auto"||CIQ.isTransparent(txtColor))txtColor=this.stx.defaultColor;this.rays=[];for(var i=0;i<this.parameters.fibs.length;i++){context.textAlign="left";context.fillStyle=txtColor;var fib=this.parameters.fibs[i];if(!fib.display)continue;var y=this.stx.pixelFromValueAdjusted(panel,this.p0[0],y1<y0?max-dist*fib.level:min+dist*fib.level);var x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},y);var nearX=this.parameters.extendLeft?0:x;var farX=panel.left+panel.width;if(this.parameters.printLevels){var txt=Math.round(fib.level*1000)/10+"%";farX-=w;if(this.parameters.printValues){context.fillStyle=txtColor;// the price labels screw up the color and font size...so reset before rendering the text
this.stx.canvasFont("stx_yaxis",context);// use the same context as the y axis so they match.
}if(farX<nearX)context.textAlign="right";context.fillText(txt,farX,y);if(farX<nearX)farX+=5;else farX-=5;}if(this.parameters.printValues){if(x<panel.width){// just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
var price=this.stx.transformedPriceFromPixel(y,panel);if(yAxis.priceFormatter){price=yAxis.priceFormatter(this.stx,panel,price);}else{price=this.stx.formatYAxisPrice(price,panel);}if(context==this.stx.chart.context)this.stx.endClip();this.stx.createYAxisLabel(panel,price,y,txtColor,null,context);if(context==this.stx.chart.context)this.stx.startClip(panel.name);}}var fibColor=fib.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.stx.defaultColor;var fillColor=fib.color;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;var fibParameters=CIQ.clone(fib.parameters);if(this.highlighted)fibParameters.opacity=1;this.stx.plotLine(nearX,farX,y,y,this.highlighted?trendLineColor:fibColor,"segment",context,panel,fibParameters);this.rays.push([[nearX,y],[farX,y]]);context.globalAlpha=0.05;context.beginPath();context.moveTo(farX,y);context.lineTo(nearX,y);if(nearX)context.lineTo(x1,y1);else context.lineTo(nearX,y1);context.lineTo(farX,y1);if(typeof fillColor!="undefined")context.fill();// so legacy fibs continue to have no fill color.
context.globalAlpha=1;if(y<minY){minX=x;minY=y;}if(y>maxY){maxX=x;maxY=y;}}// ensure we at least draw trend line from zero to 100
for(var level=0;level<=1;level++){var yy=isUpTrend?bottom-height*level:top+height*level;yy=Math.round(yy);if(yy<minY){minX=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},yy);minY=yy;}if(yy>maxY){maxX=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},yy);maxY=yy;}}var trendParameters=CIQ.clone(this.parameters.trend.parameters);if(this.highlighted)trendParameters.opacity=1;this.stx.plotLine(minX,maxX,minY,maxY,trendLineColor,"segment",context,panel,trendParameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};CIQ.Drawing.fibonacci.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;CIQ.Drawing.BaseTwoPoint.prototype.reposition.apply(this,arguments);this.adjust();};CIQ.Drawing.fibonacci.prototype.intersected=function(tick,value,box){var p0=this.p0,p1=this.p1;if(!p0||!p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}var outer=this.outer,rays=this.rays;var isIntersected=outer&&this.lineIntersection(tick,value,box,"segment",outer.p0,outer.p1);if(!isIntersected){for(var i=0;i<rays.length;i++){if(this.lineIntersection(tick,value,box,"ray",rays[i][0],rays[i][1],true)){isIntersected=true;break;}}}if(isIntersected){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,// save original tick
value:value// save original value
};}return null;};/**
	 * Reconstruct a fibonacci
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The border color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.v2] Value (price) for the third point (if used)
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.d2] Date (string form) for the third point (if used)
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @param {number} [obj.tzo2] Offset of UTC from d2 in minutes (if used)
	 * @param {object} [obj.parameters] Configuration parameters
	 * @param {object} [obj.parameters.trend] Describes the trend line
	 * @param {string} [obj.parameters.trend.color] The color for the trend line (Defaults to "auto")
	 * @param {object} [obj.parameters.trend.parameters] Line description object (pattern, opacity, lineWidth)
	 * @param {array} [obj.parameters.fibs] A fib description object for each fib (level, color, parameters, display)
	 * @param {boolean} [obj.parameters.extendLeft] True to extend the fib lines to the left of the screen. Defaults to false.
	 * @param {boolean} [obj.parameters.printLevels] True (default) to print text for each percentage level
	 * @param {boolean} [obj.parameters.printValues] True to print text for each price level
	 * @memberOf CIQ.Drawing.fibonacci
	 */CIQ.Drawing.fibonacci.prototype.reconstruct=function(stx,obj){obj=CIQ.replaceFields(obj,CIQ.reverseObject(CIQ.Drawing.fibonacci.mapping));this.stx=stx;this.parameters=obj.parameters;if(!this.parameters)this.parameters=CIQ.clone(this.stx.currentVectorParameters.fibonacci);// For legacy fibs that didn't include parameters
this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.d0=obj.d0;this.d1=obj.d1;this.d2=obj.d2;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.tzo2=obj.tzo2;this.v0=obj.v0;this.v1=obj.v1;this.v2=obj.v2;this.adjust();};CIQ.Drawing.fibonacci.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);this.setOuter();};CIQ.Drawing.fibonacci.prototype.serialize=function(){var obj={name:this.name,parameters:this.parameters,pnl:this.panelName,col:this.color,fc:this.fillColor,d0:this.d0,d1:this.d1,d2:this.d2,tzo0:this.tzo0,tzo1:this.tzo1,tzo2:this.tzo2,v0:this.v0,v1:this.v1,v2:this.v2};return CIQ.replaceFields(obj,CIQ.Drawing.fibonacci.mapping);};/**
	 * Retracement drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.fibonacci}
	 * @constructor
	 * @name  CIQ.Drawing.retracement
	 */CIQ.Drawing.retracement=function(){this.name="retracement";};CIQ.Drawing.retracement.ciqInheritsFrom(CIQ.Drawing.fibonacci);/**
	 * Function to determine which drawing tools are available.
	 * @param  {object} excludeList Exclusion list of tools in object form ( e.g. {"vertical":true,"annotation":true})
	 * @returns {object} Map of tool names and types
	 * @memberof CIQ.Drawing
	 * @since 3.0.0
	 */CIQ.Drawing.getDrawingToolList=function(excludeList){var map={};var excludedDrawings={ciqInheritsFrom:true,stxInheritsFrom:true,copyConfig:true,getDrawingParameters:true,getDrawingToolList:true,initializeSettings:true,restoreDefaultConfig:true,saveConfig:true,BaseTwoPoint:true,shape:true};CIQ.extend(excludedDrawings,excludeList);for(var drawing in CIQ.Drawing){if(!excludedDrawings[drawing])map[new CIQ.Drawing[drawing]().name]=drawing;}return map;};return _exports;};var __js_i18n_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_i18n_(_exports){var CIQ=_exports.CIQ,$$=_exports.$$;/**
	 * Namespace for Internationalization API.
	 * See {@tutorial Localization} for more details.
	 * @namespace
	 * @name CIQ.I18N
	 */CIQ.I18N=function(){};// Hack code to make a multi line string easy cut & paste from a spreadsheet
CIQ.I18N.hereDoc=function(f){return f.toString().replace(/^[^/]+\/\*!?/,'').replace(/\*\/[^/]+$/,'');};/**
	 * Must be set to the desired language. Defaults to english "en"
	 * @memberOf CIQ.I18N
	 * @type {string}
	 */CIQ.I18N.language="en";/**
	 * Sets the languages that that don't support shortening
	 * Translation will print entire month from locale for these languages
	 * @memberOf CIQ.I18N
	 * @type {Object}
	 */CIQ.I18N.longMonths={"zh":true};/**
	 * Maintains the list of locales used by {@link CIQ.I18N.localize} to decide if the up/down colors should be reversed and can be updated as outlined on the example.
	 *
	 * Defaults to : {"zh":true,"ja":true};
	 * @type {Object}
	 * @memberOf CIQ.I18N
	 * @since 4.0.0
	 * @example
	 * CIQ.I18N.reverseColorsByLocale={
	 * 		"zh":true,
	 * 		"ja":true,
	 * 		"fr":true,
	 * 		"de":true,
	 * 		"hu":true,
	 * 		"it":true,
	 * 		"pt":true
	 * };
	 */CIQ.I18N.reverseColorsByLocale={"zh":true,"ja":true};/** Returns a word list containing unique words. Each word references an array of DOM
	 *  nodes that contain that word. This can then be used for translation.
	 *  Text nodes and placeholders which are found in the document tree will be wrapped by this function
	 *  within a <translate> tag for easy translation back and forth.
	 * @param  {HTMLElement} [root] root for the TreeWalker.  If omitted, document.body assumed.
	 * @return {object}      A word list containing unique words.
	 *  @memberOf CIQ.I18N
	 */CIQ.I18N.findAllTextNodes=function(root){if(!root)root=document.body;// Get all the words from the placeholders
// We'll create text nodes for them and stash them in a hidden div so we can access them in the future
if(root==document.body){if(!$$("stashedTextNodes")){var stashedTextNodes=document.createElement("div");stashedTextNodes.id="stashedTextNodes";stashedTextNodes.style.display="none";root.appendChild(stashedTextNodes);var fields=document.querySelectorAll("input,textarea,.editable_content");for(var f=0;f<fields.length;f++){var placeHolder=fields[f].getAttribute("placeholder");if(placeHolder){var wrapper=stashedTextNodes.appendChild(document.createElement("translate"));wrapper.setAttribute("original",placeHolder);wrapper.placeholderFor=fields[f];wrapper.appendChild(document.createTextNode(placeHolder));}}}}var walker=document.createTreeWalker(root,NodeFilter.SHOW_TEXT,null,false);var node=walker.nextNode();var ws=new RegExp("^\\s*$");var line=new RegExp("\n|\t|\f","g");var wordList={};var dontTranslate={"SCRIPT":true,"STYLE":true,"TEXTAREA":true};while(node){var key=node.nodeValue;if(!ws.test(key)){var parentNode=node.parentNode;var parentTag=parentNode.tagName;if(!dontTranslate[parentTag]){if(parentTag!="TRANSLATE"){var wrapper2=parentNode.insertBefore(document.createElement("translate"),node);wrapper2.setAttribute("original",key);//must do getAttribute so it will clone
wrapper2.appendChild(node);}else{key=parentNode.getAttribute("original");}if(line.test(key))key=key.replace(line,'');// strips out new lines in text
if(!wordList[key])wordList[key]=[];wordList[key].push(node);}}node=walker.nextNode();}if(root==document.body){// For missing word list collation only:
// Get all the words from the study library that are used to populate the study dialogs.
// These will have an empty array since they aren't associated with any nodes
var studyLibrary=CIQ.Studies?CIQ.Studies.studyLibrary:null;if(studyLibrary){for(var study in studyLibrary){if(wordList[study]===null)wordList[study]=[];var s=studyLibrary[study];if(s.inputs){for(var input in s.inputs){if(!wordList[input])wordList[input]=[];}}if(s.outputs){for(var output in s.outputs){if(!wordList[output])wordList[output]=[];}}}}}return wordList;};/**
	 * CIQ.I18N.missingWordList will scan the UI by walking all the text elements. It will determine which
	 * text elements have not been translated for the given language and return those as a JSON object.
	 * @param {string} [language] The language to search for missing words. Defaults to whatever language CIQ.I18N.language has set.
	 * @return {object} Words that are undefined with values set to empty strings
	 * @memberOf CIQ.I18N
	 * @since 4.0.0 Iterates over the studyLibrary entry name, inputs, & outputs
	 */CIQ.I18N.missingWordList=function(language){if(!language)language=CIQ.I18N.language;var wordsInUI=CIQ.I18N.findAllTextNodes();var missingWords={};var languageWordList=CIQ.I18N.wordLists[language];if(!languageWordList)languageWordList={};var addIfMissing=function addIfMissing(x){if(typeof languageWordList[x]=='undefined'){missingWords[x]='';}};for(var word in wordsInUI){addIfMissing(word);}if(!(CIQ.Studies&&CIQ.Studies.studyLibrary)){return missingWords;}var study;var value;for(var id in CIQ.Studies.studyLibrary){study=CIQ.Studies.studyLibrary[id];addIfMissing(study.name);for(var input in study.inputs){addIfMissing(input);value=study.inputs[input];switch(Object.prototype.toString.call(value)){case'[object String]':addIfMissing(value);break;case'[object Array]':for(var i=0;i<value.length;++i){addIfMissing(value[i]);}break;}}for(var output in study.outputs){addIfMissing(output);}}// studyOverZones input fields
addIfMissing('Show Zones');addIfMissing('OverBought');addIfMissing('OverSold');return missingWords;};/**
	 * A convenient function for creating a human readable JSON object suitable for delivery to a translator.
	 * @param {string} [language] language. Defaults to CIQ.I18N.language.
	 * @return {string} String of missing words.
	 * @memberOf CIQ.I18N
	 */CIQ.I18N.printableMissingWordList=function(language){var missingWords=JSON.stringify(CIQ.I18N.missingWordList(language));missingWords=missingWords.replace(/","/g,'",\n"');return missingWords;};/**
	 * Passes through the UI (DOM elements) and translates all of the text for the given language.
	 *
	 * It is important to note that if you are dynamically creating UI content and adding it to the DOM after you have set the language,
	 * you must either call this function again after the new content is added,
	 * or ensure your code explicitly translates the new content using {@link CIQ.translatableTextNode} or {@link CIQ.ChartEngine#translateIf}.
	 *
	 * @param {string} [language] language. Defaults to CIQ.I18N.language.
	 * @param {HTMLElement} [root] root for the TreeWalker to prevent the entire page from being translated.  If omitted, document.body assumed.
	 * @memberOf CIQ.I18N
	 * @since 4.0.0 Language code for Portuguese is "pt" (formerly "pu"; maintained for backwards compatibility)
	 */CIQ.I18N.translateUI=function(language,root){if(language=="pu")language="pt";// backward compatibility.
if(!CIQ.I18N.wordLists)return;if(!language)language=CIQ.I18N.language;var wordsInUI=CIQ.I18N.findAllTextNodes(root);var languageWordList=CIQ.I18N.wordLists[language];if(!languageWordList)return;for(var word in wordsInUI){var translation=CIQ.I18N.translateSections(word,languageWordList);var nodes=wordsInUI[word];for(var i=0;i<nodes.length;i++){var node=nodes[i],parentNode=node.parentNode,originalText=parentNode.getAttribute("original");// Two scenarios where we don't want to use translation, when undefined or word is not in the translation files
if(translation===','||!translation)translation=originalText;var elemWithPlaceholder=parentNode.placeholderFor;if(elemWithPlaceholder){elemWithPlaceholder.placeholder=translation;}else{node.data=translation;}}}};/**
	 * Translates an individual word for a given language. Set stxx.translationCallback to this function
	 * in order to automatically translate all textual elements on the chart itself.
	 * @param {string} word The word to translate
	 * @param {string} [language] language. Defaults to CIQ.I18N.language.
	 * @return {string} Translation of the given word, or the word itself if no translation was found.
	 * @memberOf CIQ.I18N
	 */CIQ.I18N.translate=function(word,language){if(!language)language=CIQ.I18N.language;if(!CIQ.I18N.wordLists){console.log("Must include translations.js in order to use CIQ.I18N.translate()");return word;}var languageWordList=CIQ.I18N.wordLists[language];var translation=null;if(languageWordList)translation=CIQ.I18N.translateSections(word,languageWordList)||word;// Lastly check and see if the translation is blank in the CSV source (no translation for given language) which is parsed as ',' and if so fall back to English default
return translation===","?word:translation;};/**
	 * Translates a phrase which may have untranslatable parts (like a study id).
	 * The translatable pieces are delimited left and right with a non-printable character Zero-Width-Non_Joiner.
	 * @param {string} word The word to translate
	 * @param {object} [languageWordList] Map of words and translations in the desired language
	 * @return {string} Translation of the given phrase
	 * @memberOf CIQ.I18N
	 * @since 4.0.0
	 */CIQ.I18N.translateSections=function(word,languageWordList){// Test here for word phrases, delimited by the zero-width-non-breaking character
// we'll split the text into pieces, filtering out the parentheses and commas to generate phrases
var zwnb="\u200C";// https://en.wikipedia.org/wiki/Zero-width_non-joiner
if(typeof word=="string"&&word.indexOf(zwnb)!=-1){word=word.replace(/([(),])/g,zwnb+"$1"+zwnb);var sections=word.split(zwnb);sections.forEach(function(val,i,arr){var padding=val.match(/^(\s*).*\S(\s*)$/);var translation=languageWordList[val.trim()];if(translation){if(padding)translation=padding[1]+translation+padding[2];arr[i]=translation;}});return sections.join("");}return languageWordList[word];};/**
	 * Converts a 'CSV formatted' string of translations into the required JSON format and set to {@link CIQ.I18N.wordLists}
	 * You can output {@link CIQ.I18N.wordLists} to the console and paste back in if desired.
	 * @param {string} [csv] Translation spreadsheet in csv format **as a single long string**.
	 * Make sure there are no leading tabs, trailing commas or spaces.
	 * Assumes that the header row of the CSV is the language codes and that the first column is the key language (English).
	 * Assumes non-quoted words, data is comma delimited and lines separated by '\n'. Default is CIQ.I18N.csv
	 * @memberOf CIQ.I18N
	 * @example
var csv="en,ar,fr,de,hu,it,pt,ru,es,zh,ja\nChart,الرسم البياني,Graphique,Darstellung,Diagram,Grafico,Gráfico,График,Gráfica,图表,チャート\nChart Style,أسلوب الرسم البياني,Style de graphique,Darstellungsstil,Diagram stílusa,Stile grafico,Estilo do gráfico,Тип графика,Estilo de gráfica,图表类型,チャート形式\nCandle,الشموع,Bougie,Kerze,Gyertya,Candela,Vela,Свеча,Vela,蜡烛,ローソク足\nShape,شكل,Forme,Form,Alak,Forma,Forma,Форма,Forma,形状,パターン";
CIQ.I18N.convertCSV(csv);
	 */CIQ.I18N.convertCSV=function(csv){var curly=new RegExp("[\u201C\u201D]|[\u2018\u2019]","g");var quotation=new RegExp("^(\")|(\")$","g");var wordLists=CIQ.I18N.wordLists;if(!csv)csv=CIQ.I18N.csv;var lines=csv.split("\n");var headerRow=lines[0];var languages=headerRow.split(",");for(var j=0;j<languages.length;j++){var lang=languages[j];if(!wordLists[lang]){wordLists[lang]={};}}for(var i=1;i<lines.length;i++){var words=lines[i].match(/(".*?"|[^",]+)(?=\s*,|\s*$)|(,(?=,))/g)||[];var key=words[0];if(quotation.test(key))key=key.replace(quotation,"");if(curly.test(key))key=key.replace(curly,"\"");for(var k=1;k<words.length;k++){var word=words[k];if(quotation.test(word))word=word.replace(quotation,"");wordLists[languages[k]][key]=word;}}};/**
	 * Convenience function to set up translation services for a chart and its surrounding GUI.
	 * It automatically sets CIQ.I18N.language, loads all translations and translates the chart.
	 *
	 * Uses/sets (in execution order):
	 *  - {@link CIQ.I18N.convertCSV}
	 *  - {@link CIQ.I18N.language}
	 *  - {@link CIQ.I18N.translateUI}
	 *  - {@link CIQ.I18N.translate}
	 *
	 * Feel free to create your own convenience function if required to explicitly set CIQ.I18N.wordLists instead of using the CIQ.I18N.hereDoc copy-paste spreadsheet in `translations.js`.
	 *
	 * It is important to note that if you are dynamically creating UI content and adding it to the DOM after you have set the language,
	 * you must either call {@link CIQ.I18N.translateUI} after the new content is added,
	 * or ensure your code explicitly translates the new content using {@link CIQ.translatableTextNode} or {@link CIQ.ChartEngine#translateIf}.
	 *
	 * @param {CIQ.ChartEngine} stx A chart object
	 * @param {string} language  A language in your CSV file. For instance 'en' from CIQ.I18N.csv
	 * @param {string} [translationCallback]  Function to perform Canvas Built-in word translations . Default is CIQ.I18N.translate
	 * @param {string} [csv] Translation spreadsheet in csv format **as a single long string**. Make sure no leading tabs, trailing commas or spaces. Default is CIQ.I18N.csv. See {@link CIQ.I18N.convertCSV} for format sample
	 * @param {HTMLElement} [root] root for the TreeWalker to prevent the entire page from being translated.  If omitted, document.body assumed.
	 * @memberOf CIQ.I18N
	 * @since 04-2015
     * <br>&bull; 3.0.0 'root' parameter added.
     * <br>&bull; 4.0.0 Language code for Portuguese is "pt" (formerly "pu"; maintained for backwards compatibility)
	 */CIQ.I18N.setLanguage=function(stx,language,translationCallback,csv,root){if(language=="pu")language="pt";// backward compatibility.
CIQ.I18N.convertCSV(csv);CIQ.I18N.language=language;CIQ.I18N.translateUI(language,root);if(!translationCallback)translationCallback=CIQ.I18N.translate;stx.translationCallback=translationCallback;};/**
	 * This method will set the chart locale using Intl natively or for unsupported browsers dynamically loads the locale using JSONP.
	 * Once the locale is loaded then the chart widget itself is updated for that locale. Use this function when a user can select a locale dynamically so as to avoid
	 * having to include specific locale entries as `script` tags.
	 * The optional callback will be called when the locale has been set.
	 * The Intl library includes JSONP for each locale. A zip of these locales can be requested and should be placed in the locale-data directory of your server.
	 *
	 * Localization formatting is done by {@link CIQ.ChartEngine#setLocale} and can be overwritten as outlined on the example.
	 * @param {CIQ.ChartEngine} stx A chart object
	 * @param {string} locale A valid locale, for instance en-IN
	 * @param {Function} [cb] Callback when locale has been loaded. This function will be passed an error message if it cannot be loaded.
	 * @param {string} [url] url for where to fetch the jsonp data. Defaults to "locale-data/jsonp"
	 * @param {number} [maxDecimals] maximum number of decimal places to allow on number conversions. Defaults to 5. See {@link CIQ.ChartEngine#setLocale} for more details.
	 * @since 3.0.0 maxDecimals was added to the signature
	 * @memberOf CIQ.I18N
	 * @example
	 * CIQ.I18N.setLocale(stxx, "zh");	// set localization services -- before any UI or chart initialization is done
	 * // override time formatting to enable 12 hour clock (hour12:true)
	 * stxx.internationalizer.hourMinute=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", hour12:true});
	 * stxx.internationalizer.hourMinuteSecond=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", second:"numeric", hour12:true});

	 */CIQ.I18N.setLocale=function(stx,locale,cb,url,maxDecimals){if(!Intl.__addLocaleData){// Intl built into browser
stx.setLocale(locale,maxDecimals);if(cb)cb(null);return;}url=typeof url=="undefined"?"locale-data/jsonp":url;var localeFileURL=url+"/"+locale+".js";var script=document.createElement("SCRIPT");script.async=true;script.src=localeFileURL;var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(script,s.nextSibling);script.onload=function(){stx.setLocale(locale,maxDecimals);if(cb)cb(null);};script.onerror=function(){if(cb)cb("cannot load script");};};/**
	 * Extract the name of the month from the locale. We do this by creating a
	 * localized date for the first date of each month. Then we extract the alphabetic characters.
	 * MonthLetters then becomes the first letter of the month. Note that in the current Intl.js locale, chinese and
	 * japanese months are implemented as 1月 through 12月 which causes this algorithm to fail. Hopefully real months
	 * will be available when Intl becomes a browser standard, otherwise this method or the locale will need to
	 * be modified for those or other special cases. The arrays are stored in stx.monthAbv and stx.monthLetters which
	 * will then override the global arrays CIQ.monthAbv and CIQ.monthLetters.
	 * @param  {CIQ.ChartEngine} stx       Chart object
	 * @param  {object} formatter An Intl compatible date formatter
	 * @param  {string} locale    A valid Intl locale, such as en-IN
	 * @memberOf CIQ.I18N
	 */CIQ.I18N.createMonthArrays=function(stx,formatter,locale){stx.monthAbv=[];stx.monthLetters=[];var dt=new Date();var shortenMonth=true;if(CIQ.I18N.longMonths&&CIQ.I18N.longMonths[locale])shortenMonth=false;for(var i=0;i<12;i++){dt.setDate(1);dt.setMonth(i);var str=formatter.format(dt);if(shortenMonth){var month="";for(var j=0;j<str.length;j++){var c=str.charAt(j);var cc=c.charCodeAt(0);if(cc<65)continue;month+=c;}stx.monthAbv[i]=month;stx.monthLetters[i]=month[0];}else{stx.monthAbv[i]=str;stx.monthLetters[i]=str;}}};/**
	 * A convenience function that sets locale and language at once and checks to see if candle colors should be reversed.
 	 * Each of these grouped functions are called with default arguments. If you require custom parameters you will need to call each separately.
 	 *
 	 * {@link CIQ.I18N.reverseColorsByLocale}  is used to determine if the colors should be reversed.
 	 *
 	 * It is important to note that if you are dynamically creating UI content and adding it to the DOM after you have set the language,
	 * you must either call {@link CIQ.I18N.translateUI} after the new content is added,
	 * or ensure your code explicitly translates the new content using {@link CIQ.translatableTextNode} or {@link CIQ.ChartEngine#translateIf}.
 	 *
 	 * Functions are called in the following order:
 	 * - {@link CIQ.I18N.setLocale}
	 * - {@link CIQ.I18N.setLanguage}
	 * - {@link CIQ.I18N.reverseCandles} - Called only if colors need to be reversed.
 	 *
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @param  {string} locale    A valid Intl locale, such as en-IN
	 * @memberOf CIQ.I18N
	 * @since 4.0.0
	 * @example
	 * CIQ.I18N.localize(stxx, "zh");	// set translation and localization services -- before any UI or chart initialization is done
	 * // override time formatting to enable 12 hour clock (hour12:true)
	 * stxx.internationalizer.hourMinute=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", hour12:true});
	 * stxx.internationalizer.hourMinuteSecond=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", second:"numeric", hour12:true});

	 */CIQ.I18N.localize=function(stx,locale){var prevLocale=stx.locale;// checks to see if we're switching from a locale with reversed candles
var reverseLocale=this.reverseColorsByLocale[locale];var reversePrevLocale=this.reverseColorsByLocale[prevLocale];this.setLocale(stx,locale);this.setLanguage(stx,locale);if(reverseLocale&&reversePrevLocale)return;if(reverseLocale||reversePrevLocale)this.reverseCandles(stx);};/**
	 * Some locales prefer candle colors reversed. This will reverse candle colors without changing CSS.
	 * @param {CIQ.ChartEngine} stx Chart object
	 * @memberOf CIQ.I18N
	 * @since 4.0.0
 	 */CIQ.I18N.reverseCandles=function(stx){var styles=stx.styles;var candleDown=stx.cloneStyle(styles.stx_candle_down);var candleUp=stx.cloneStyle(styles.stx_candle_up);styles.stx_candle_up=candleDown;styles.stx_candle_down=candleUp;};return _exports;};var __js_markers_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_markers_(_exports){var CIQ=_exports.CIQ;/**
	 * The markerHelper is a private object that we use for placeholder values, primarily as a performance aid
	 * @private
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.makeMarkerHelper=function(){this.markerHelper={chartMap:{},classMap:{}};};/**
	 * Adds a marker to the chart
	 * @private
	 * @memberOf CIQ.ChartEngine
	 * @param {CIQ.Marker} marker The marker to add
	 */CIQ.ChartEngine.prototype.addToHolder=function(marker){var panel=this.panels[marker.params.panelName];if(!panel)return;// Switcheroo. If a NodeCreator is passed in, then we change the marker
// to reference the actual DOM node and then we add stxNodeCreator to the
// marker so that we can reference it if need be
if(CIQ.derivedFrom(marker.params.node,CIQ.Marker.NodeCreator)){marker.stxNodeCreator=marker.params.node;marker.node=marker.stxNodeCreator.node;}else{marker.node=marker.params.node;}if(!this.markerHelper)this.makeMarkerHelper();if(marker.params.chartContainer){this.container.appendChild(marker.node);}else if(marker.params.includeAxis){panel.holder.appendChild(marker.node);}else{panel.subholder.appendChild(marker.node);}var label=marker.params.label;if(!this.markers[label])this.markers[label]=[];this.markers[label].push(marker);marker.chart=panel.chart;// Put it in the map of charts
if(!this.markerHelper.chartMap[marker.chart.name]){this.markerHelper.chartMap[marker.chart.name]={dataSetLength:0,markers:[]};}this.markerHelper.chartMap[marker.chart.name].markers.push(marker);// Put it in the map of placement functions
if(!marker.className){console.log("Marker objects must have a member className");}var classMap=this.markerHelper.classMap[marker.className];if(!classMap)classMap=this.markerHelper.classMap[marker.className]={};if(!classMap[marker.params.panelName])classMap[marker.params.panelName]=[];classMap[marker.params.panelName].push(marker);this.setMarkerTick(marker);};/**
	 * Gets an array of markers
	 * @private
	 * @param {string} type The type of comparison "panelName","label","all"
	 * @param {string} comparison The value to compare to
	 * @return {array} The marker array
	 */CIQ.ChartEngine.prototype.getMarkerArray=function(type,comparison){var arr=[];for(var label in this.markers){for(var i=0;i<this.markers[label].length;i++){var marker=this.markers[label][i];if(type=="panelName"){if(marker.params.panelName==comparison)arr.push(marker);}else if(type=="label"){if(label==comparison)arr.push(marker);}else if(type=="all"){arr.push(marker);}}}return arr;};/**
	 * Removes the marker from the chart
	 * @private
	 * @param  {CIQ.Marker} marker The marker to remove
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.removeFromHolder=function(marker){var panel=this.panels[marker.params.panelName];if(panel){if(marker.node.parentNode==panel.holder)panel.holder.removeChild(marker.node);else if(marker.node.parentNode==panel.subholder)panel.subholder.removeChild(marker.node);else if(marker.node.parentNode==this.container)this.container.removeChild(marker.node);}// Remove from label map
var labels=this.markers[marker.params.label];if(!labels)return;var i;for(i=0;i<labels.length;i++){if(labels[i]===marker){labels.splice(i,1);break;}}// remove from chart map
var chartMap=this.markerHelper.chartMap[marker.chart.name];if(chartMap){for(i=0;i<chartMap.markers.length;i++){if(chartMap.markers[i]===marker){chartMap.markers.splice(i,1);break;}}}// remove from class map
var classMap=this.markerHelper.classMap[marker.className];if(classMap){var panelArray=classMap[marker.params.panelName];if(panelArray){for(i=0;i<panelArray.length;i++){if(panelArray[i]===marker){panelArray.splice(i,1);break;}}}}};/**
	 * Moves the markers from one panel to another
	 * Useful when renaming panels
	 * @param  {string} fromPanelName The panel to move markers from
	 * @param  {string} toPanelName The panel to move markers to
	 * @memberOf CIQ.ChartEngine
	 * @since 2016-07-16
	 */CIQ.ChartEngine.prototype.moveMarkers=function(fromPanelName,toPanelName){var arr=this.getMarkerArray("panelName",fromPanelName);for(var i=0;i<arr.length;i++){arr[i].params.panelName=toPanelName;}for(var className in this.markerHelper.classMap){var tmp=this.markerHelper.classMap[className][fromPanelName];if(tmp){this.markerHelper.classMap[className][toPanelName]=tmp;delete this.markerHelper.classMap[className][fromPanelName];}}};/**
	 * Establishes the tick value for any markers that have a "date" specified. It tries to be efficient, not recalculating
	 * unless the size of the dataSet for a chart has actually changed
	 * @private
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.establishMarkerTicks=function(){if(!this.markerHelper)this.makeMarkerHelper();var chartMap=this.markerHelper.chartMap;for(var chart in chartMap){var chartEntry=chartMap[chart];if(chartEntry.dataSetLength==this.charts[chart].dataSet.length)continue;for(var i=0;i<chartEntry.markers.length;i++){this.setMarkerTick(chartEntry.markers[i]);}}};/**
	 * Figures out the position of a future marker but only if it is displayed on the screen.
	 * @param  {CIQ.Marker} marker The marker to check
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.futureTickIfDisplayed=function(marker){var chart=marker.chart;if(chart.dataSet.length<1)return;var xaxisDT=chart.xaxis[chart.xaxis.length-1].DT;xaxisDT=new Date(xaxisDT.getTime()-this.timeZoneOffset*60000);if(marker.params.x>xaxisDT)return;// not displayed on screen yet
// It should be displayed on the screen now so find the exact tick
var futureTicksOnScreen=chart.maxTicks-chart.dataSegment.length;var ticksToSearch=chart.dataSet.length+futureTicksOnScreen;var pms,qms;var dt=new Date(+chart.dataSet[chart.dataSet.length-1].DT);var iter=this.standardMarketIterator(dt,null,chart);var dms=marker.params.x.getTime();for(var j=chart.dataSet.length;j<ticksToSearch;j++){pms=dt.getTime();dt=iter.next();qms=dt.getTime();// If the event lands on that day, or if the event landed between bars
if(qms==dms){marker.tick=j;return;}else if(qms>dms&&pms<dms){marker.tick=Math.max(j-1,0);return;}}};/**
	 * Establishes the tick value for the specified marker. We do this to avoid calculating the date every time we want
	 * to place the marker. Converting date to tick is a very expensive operation!
	 * @param {CIQ.Marker} marker The marker for which to establish the tick
	 * @private
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setMarkerTick=function(marker){var chart=marker.chart;if(marker.params.xPositioner=="master"&&marker.params.x){marker.tick=Math.floor(marker.params.x/this.layout.periodicity);return;}else if(marker.params.xPositioner=="date"&&marker.params.x){var pms,qms;// TODO, use binary search for finding date
var dms=marker.params.x.getTime();for(var i=0;i<chart.dataSet.length;i++){var quotes=chart.dataSet[i];qms=quotes.DT.getTime();pms=qms;if(i>0)pms=chart.dataSet[i-1].DT.getTime();// If the event lands on that day, or if the event landed between bars
if(qms==dms){marker.tick=i;return;}else if(qms>dms&&pms<dms){marker.tick=Math.max(i-1,0);return;}else if(dms<qms){marker.tick=null;// marker date is in distant past, shortcircuit the logic for performance.
return;}}if(chart.dataSet.length<1)return;var dt=new Date(+chart.dataSet[i-1].DT);if(dt.getTime()<dms)marker.params.future=true;marker.tick=null;// reset in case we had figured it out with an earlier dataset
}};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Iterates trough all marker handlers, calling their corresponding custom `placementFunction` or {@link CIQ.ChartEngine#defaultMarkerPlacement} if none defined.
	 * @memberOf CIQ.ChartEngine.AdvancedInjectable#
	 * @alias positionMarkers
	 */CIQ.ChartEngine.prototype.positionMarkers=function(){var self=this;if(!self.markerHelper)return;function draw(){if(self.runPrepend("positionMarkers",arguments))return;self.markerTimeout=null;for(var className in self.markerHelper.classMap){for(var panelName in self.markerHelper.classMap[className]){var arr=self.markerHelper.classMap[className][panelName];var panel=self.panels[panelName];if(arr.length){var params={stx:self,arr:arr,panel:panel};params.firstTick=panel.chart.dataSet.length-panel.chart.scroll;params.lastTick=params.firstTick+panel.chart.dataSegment.length;var fn=arr[0].constructor.placementFunction;// Some magic, this gets the static member "placementFunction" of the class (not the instance)
if(fn){fn(params);}else{self.defaultMarkerPlacement(params);}}}}self.runAppend("positionMarkers",arguments);}if(this.markerDelay||this.markerDelay===0){if(!this.markerTimeout)this.markerTimeout=setTimeout(draw,this.markerDelay);}else{draw();}};/**
	 * A marker is a DOM object that is managed by the chart. Makers are placed in "holders" which are
	 * DIV elements whose placement and size corresponds with a panel on the chart.
	 * A holder exists for each panel.
	 * Markers are placed by date, tick or bar to control their position on the x-axis.
	 * They are placed by value (price) to control their position on the y-axis.
	 * Markers will be repositioned when the user scrolls or zooms the chart.
	 *
	 * The default placement function for any markers is {@link CIQ.ChartEngine#defaultMarkerPlacement}, but custom placement functions can be created as needed.
	 *
	 * If markers must be part of an exported image generated using the {@link CIQ.Share} plug-in, you need to draw them on the actual canvas instead using [Canvas Markers](tutorial-Popular%20API%20Injections.html#marker).
	 *
	 * See the {@tutorial Markers} tutorials for additional implementation instruction, and details for managing  performance on deployments requiring a large number of markers.
	 *
	 * @name CIQ.Marker
	 * @param {Object} params Parameters that describe the marker
	 * @param {CIQ.ChartEngine} params.stx The chart to attach the marker
	 * @param {*} params.x A valid date, date string, tick or bar (depending on selected xPositioner) to select a candle to attach to.
	 * @param {Number} params.y A valid value for positioning on the y-axis (depending on selected yPositioner, if missing the marker will be set "above_candle" as long as a valid candle is selected by `params.x`)
	 * @param {HTMLElement} [params.node] The HTML element. This should be detached from the DOM! If none passed then a blank div will be created.
	 * @param {string} params.panelName="chart" The name of the panel to attach the holder. Defaults to the main chart panel.
	 * @param {string} [params.xPositioner="date"] Determines the x position.
	 * Values are:
	 * - "date" (`params.x` must be set to a JavaScript date)
	 * - "master" (`params.x` must be set to a masterData position)
	 * - "bar" (`params.x` must be set to a dataSegment position)
	 * - "none" (use CSS positioning, `params.x` will not be used)
	 * @param {string} [params.yPositioner="value"] Determines the y position.
	 * Values are:
	 * - "value" (`params.y` must be set to an exact y axis value.  If `params.y` is omitted, the y position will default to above_candle)
	 * - "above_candle" (right above the candle or line. If more than one on same position, they will align upwards from the first. `params.y` will not be used)
	 * - "under_candle" (right under the candle or line. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
	 * - "on_candle" (in the center or the candle or line - covering it. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
	 * - "top" (on top of the chart, right under the margin. If more than one on same position, they will align downwards from the first. `params.y` will not be used)
	 * - "bottom" ( on the bottom of the chart, right over the margin. If more than one on same position, they will align upwards from the first. `params.y` will not be used)
	 * - "none" (use CSS positioning. `params.y` will not be used)
	 * @param {boolean} [params.permanent=false] Stays on the chart even when chart is re-initialized (symbol change, newChart(), initializeChart())
	 * @param {string} [params.label="generic"] A label for the marker. Multiple markers can be assigned the same label. This allows them to be deleted in one fell swoop.
	 * @param {boolean} [params.includeAxis=false] If true then the marker can display on the x or y axis. Otherwise it will be cropped at the axis edges.
	 * @param {Boolean} [params.chartContainer] If true then the marker will be put directly in the chart container as opposed to in a holder. When placing
	 * markers directly in the chart container, the z-index setting for the marker should be set vis a vis the z-index of the holders in order to place
	 * the markers below or above those inside the holders.
	 * @constructor
	 * @since
	 * <br> 15-07-01 Class added
	 * <br> 05-2016-10 It now takes the following `params.yPositioner` values: "value", "above_candle", "under_candle","on_candle","top","bottom"
	 * @version ChartIQ Advanced Package
	 * @example
	 * new CIQ.Marker({
     * 	stx: stxx,
     * 	xPositioner: "date",
     *  yPositioner: "value",
     * 	x: someDate,
	 * 	label: "events",
     * 	node: newNode
     * });
	 */CIQ.Marker=function(params){this.params={xPositioner:"date",yPositioner:"value",panelName:"chart",permanent:false,label:"generic",includeAxis:false};CIQ.extend(this.params,params);if(!this.params.node){this.params.node=document.createElement("DIV");}if(!this.params.stx){console.log("Marker created without specifying stx");return;}if(!this.className)this.className="CIQ.Marker";this.params.stx.addToHolder(this);};/**
	 * Removes the marker from the chart object
	 * @memberOf CIQ.Marker
	 * @since  15-07-01
	 */CIQ.Marker.prototype.remove=function(){this.params.stx.removeFromHolder(this);};/**
	 * Normally the chart will take care of positioning the marker automatically but you can
	 * force a marker to render itself by calling this method. This will cause the marker to
	 * call its placement function. You might want to do this for instance if your marker morphs
	 * or changes position outside of the animation loop.
	 */CIQ.Marker.prototype.render=function(){var arr=[this];var params={stx:this.params.stx,arr:arr,panel:this.params.stx.panels[this.params.panelName],showClass:this.showClass};this.constructor.placementFunction(params);};/**
	 * Removes all markers with the specified label from the chart object
	 * @param  {CIQ.ChartEngine} stx   The chart object
	 * @param  {string} label The label
	 * @memberOf CIQ.Marker
	 * @since  15-07-01
	 */CIQ.Marker.removeByLabel=function(stx,label){var arr=stx.getMarkerArray("label",label);for(var i=0;i<arr.length;i++){stx.removeFromHolder(arr[i]);}};/**
	 *
	* Content positioner for any markers using the 'stx-marker-expand' class,
	* this will consider the marker node's loction within its container and determine where to
	* place the content, be it to the left or right/top or bottom of the marker node (so it is all showing)
	* @memberOf CIQ.Marker
	* @param {HTMLElement} node The HTML element representing the marker which has content
	* @since 5.1.2
	*/CIQ.Marker.positionContentVerticalAndHorizontal=function(node){var content_node=node.querySelectorAll('.stx-marker-expand')[0];if(content_node){var offsetWidth=content_node.offsetWidth,offsetHeight=content_node.offsetHeight;if(!offsetWidth||!offsetHeight)return;var nodeStyle=content_node.style;nodeStyle.left=nodeStyle.right="";// reset content to right of node
nodeStyle.bottom=nodeStyle.top="";// reset content to bottom of node
var contentLeft=getComputedStyle(content_node).left;var contentBottom=getComputedStyle(content_node).bottom;var contentHeight=getComputedStyle(content_node).height;var leftPxOfContent=node.offsetLeft+parseInt(contentLeft,10);var bottomContentInt=parseInt(contentBottom,10);var heightInt=parseInt(contentHeight,10);var topPxOfContent=node.offsetTop+bottomContentInt-heightInt;var offsetMaxWidth=node.parentNode.offsetWidth;var offsetMaxHeight=node.parentNode.offsetHeight;//switch content to left of node if node is off the left of the chart or content will not fit to the right of the node
if(leftPxOfContent+offsetWidth>offsetMaxWidth){nodeStyle.right=contentLeft;nodeStyle.left="auto";}if(node.offsetTop-heightInt<offsetMaxHeight){//node not off the top of the chart
//switch content to the bottom of the node if node is off the top of the chart
if(node.offsetTop-node.offsetHeight<0){nodeStyle.top=contentBottom;nodeStyle.bottom="auto";}else if(topPxOfContent+offsetHeight>offsetMaxHeight){//switch content to top of node if node is off the top of the chart
nodeStyle.top="auto";//Since the "middle" placement has a bottom content of 30px, if we want to move above the marker
//we have to make this number larger than the default (otherwise it'll be back in the middle)
nodeStyle.bottom=bottomContentInt*3+"px";}}}};/**
	 * The above_candle and below_candle y-positioner will usually use the high and low to place the marker.
	 * However, some chart renderings will draw the extent of the bar either inside or outside the high/low range.
	 * For those chart types, this function will return the actual high/low to be used by the marker placement function.
	 * This is only valid when {@link CIQ.Renderer#highLowBars} is true.
	 * Currently this function will handle p&f and histogram chart types.
	 * For any other chart type, define "markerHigh" and "markerLow" for each bar in the dataSet/dataSegment
	 * and these will be honored and returned.
	 * Note: This function may be used with any markerPlacement function to give the lowest and highest point of the bar.
	 *
	 * @memberOf CIQ.ChartEngine
	 * @param {Object} quote The bar's data.  This can come from the chart.dataSet
	 * @return {Object}        The high and low for the marker
	 * @since 
	 * <br>&bull; 3.0.0
	 * <br>&bull; 6.2.0 Will consider `Open` and `Close` if `High` and/or `Low` are missing from quote
	 */CIQ.ChartEngine.prototype.getBarBounds=function(quote){var type=this.layout.chartType,aggregation=this.layout.aggregationType;var bounds;if(aggregation=="pandf")bounds={high:Math.max(quote.pfOpen,quote.pfClose),low:Math.min(quote.pfOpen,quote.pfClose)};else bounds={high:quote.High,low:quote.Low};if(quote.markerHigh)bounds.high=quote.markerHigh;if(quote.markerLow)bounds.low=quote.markerLow;var O,H,L;if(quote.Open===undefined)O=quote.Close;if(quote.High===undefined)H=Math.max(quote.Open||O,quote.Close);if(quote.Low===undefined)L=Math.min(quote.Open||O,quote.Close);if(!bounds.high&&bounds.high!==0)bounds.high=H;if(!bounds.low&&bounds.low!==0)bounds.low=L;return bounds;};/**
	 * Placement functions are responsible for positioning markers in their holder according to each marker's settings.
	 * They are called directly form the draw() function in the animation loop.
	 * Each Marker placement handler must have a corresponding `placementFunction` or this method will be used.
	 *
	 * `firstTick` and `lastTick` can be used as a hint as to whether to display a marker or not.
	 *
	 * See {@link CIQ.Marker} and {@tutorial Markers} for more details
	 * @memberOf CIQ.ChartEngine
	 * @param {Object} params The parameters
	 * @param {Array} params.arr The array of markers
	 * @param {Object} params.panel The panel to display
	 * @param {Number} params.firstTick The first tick displayed on the screen
	 * @param {Number} params.lastTick The last tick displayed on the screen
	 * @since
	 * <br> 2015-09-01 On prior versions you must define your own default function. Example: CIQ.ChartEngine.prototype.defaultMarkerPlacement = yourPlacementFunction;
	 */CIQ.ChartEngine.prototype.defaultMarkerPlacement=function(params){var panel=params.panel;var yAxis=params.yAxis?params.yAxis:params.panel.yAxis;var chart=panel.chart;var stx=params.stx;var showsHighs=stx.chart.highLowBars||stx.highLowBars[stx.layout.chartType];var plotField=chart.defaultPlotField;if(!plotField||showsHighs)plotField="Close";var placementMap={};for(var i=0;i<params.arr.length;i++){var marker=params.arr[i],mparams=marker.params;var node=marker.node;// Getting clientWidth and clientHeight is a very expensive operation
// so we'll cache the results. Don't use this function if your markers change
// shape or size dynamically!
if(!marker.clientWidth)marker.clientWidth=node.clientWidth;if(!marker.clientHeight)marker.clientHeight=node.clientHeight;var quote=null;// X axis positioning logic
var xPositioner=mparams.xPositioner,yPositioner=mparams.yPositioner,tick=marker.tick,dataSet=chart.dataSet,clientWidth=marker.clientWidth;if(xPositioner!="none"){if(xPositioner=="bar"&&mparams.x){if(mparams.x<chart.xaxis.length){var xaxis=chart.xaxis[mparams.x];if(xaxis)quote=xaxis.data;}node.style.left=Math.round(stx.pixelFromBar(mparams.x,chart)-clientWidth/2)+1+"px";}else{// This is a section of code to hide markers if they are off screen, and also to figure out
// the position of markers "just in time"
// the tick is conditionally pre-set by CIQ.ChartEngine.prototype.setMarkerTick depending on marker.params.xPositioner
if(!tick&&tick!==0){// if tick is not defined then hide, probably in distant past
if(mparams.future&&chart.scroll<chart.maxTicks){// In future
stx.futureTickIfDisplayed(marker);// Just in time check for tick
tick=marker.tick;//copy new tick from prior function
if(!tick&&tick!==0){node.style.left="-1000px";continue;}}else{node.style.left="-1000px";continue;}}if(tick<dataSet.length)quote=dataSet[tick];marker.leftpx=Math.round(stx.pixelFromTick(tick,chart)-chart.left-clientWidth/2);marker.rightEdge=marker.leftpx+clientWidth;node.style.left=marker.leftpx+"px";if(tick<params.firstTick&&marker.rightEdge<chart.left-50)continue;// off screen, no need to reposition the marker (accounting 50px for any visual effects)
}if(!quote)quote=dataSet[dataSet.length-1];// Future ticks based off the value of the current quote
}else if(yPositioner.indexOf("candle")>-1){// candle positioning, find the quote
left=getComputedStyle(node).left;if(left){var bar=stx.barFromPixel(parseInt(left,10),chart);if(bar>=0){quote=chart.xaxis[bar].data;if(!quote)quote=dataSet[dataSet.length-1];// Future ticks based off the value of the current quote
}}}// Y axis positioning logic
var y=mparams.y,clientHeight=node.clientHeight,val;if(yPositioner!="none"){var placementKey=yPositioner+'-'+node.style.left;var height=mparams.chartContainer?stx.height:panel.yAxis.bottom;var bottom=0,bottomAdjust=0;if(typeof placementMap[placementKey]=="undefined"){placementMap[placementKey]=0;}bottomAdjust=placementMap[placementKey];placementMap[placementKey]+=clientHeight;if(yPositioner=="value"&&y){bottom=Math.round(height-stx.pixelFromPrice(y,panel,yAxis)-clientHeight/2)+"px";}else if(yPositioner=="under_candle"&&quote){val=quote[plotField];if(showsHighs)val=stx.getBarBounds(quote).low;bottom=Math.round(height-stx.pixelFromPrice(val,panel,yAxis)-clientHeight-bottomAdjust)+"px";}else if(yPositioner=="on_candle"&&quote){val=quote[plotField];if(showsHighs)val=(quote.Low+quote.High)/2;bottom=Math.round(height-stx.pixelFromPrice(val,panel,yAxis)-clientHeight/2-bottomAdjust)+"px";}else if(yPositioner=="top"){bottom=Math.round(height-clientHeight-bottomAdjust)+"px";}else if(yPositioner=="bottom"){bottom=Math.round(bottomAdjust)+"px";}else if(quote){//above_candle
val=quote[plotField];if(showsHighs)val=stx.getBarBounds(quote).high;bottom=Math.round(height-stx.pixelFromPrice(val,panel,yAxis)+bottomAdjust)+"px";}if(node.style.bottom!=bottom)node.style.bottom=bottom;}CIQ.Marker.positionContentVerticalAndHorizontal(node);}};/**
	 * Base class to create an empty marker node that can then be styled. Used by {@link CIQ.Marker.Simple}
	 * See {@tutorial Markers} tutorials for additional implementation instructions.
	 * @name CIQ.Marker.NodeCreator
	 * @constructor
	 */CIQ.Marker.NodeCreator=function(){};CIQ.Marker.NodeCreator.toNode=function(){return this.node;};/**
	 * Constructor for basic built-in markers.
	 * See {@tutorial Markers} tutorials for additional implementation instructions.
	 * @name CIQ.Marker.Simple
	 * @constructor
	 * @param {Object} params Parameters to describe the marker
	 * @param {string} params.type The marker type "circle", "square", "callout"
	 * @param {string} params.headline The headline text to display
	 * @param {string} [params.category] The category "news", "earningsUp", "earningsDown", "dividend", "filing", "split"
	 * @param {string} [params.story] The story to display when hovered
	 */CIQ.Marker.Simple=function(params){var node=this.node=document.createElement("div");node.className="stx-marker";CIQ.appendClassName(node,params.type);if(params.category)CIQ.appendClassName(node,params.category);var visual=CIQ.newChild(node,"div","stx-visual");CIQ.newChild(node,"div","stx-stem");var expand;if(params.type=="callout"){var content=CIQ.newChild(visual,"div","stx-marker-content");CIQ.newChild(content,"h4",null,params.headline);expand=CIQ.newChild(content,"div","stx-marker-expand");CIQ.newChild(expand,"p",null,params.story);}else{expand=CIQ.newChild(node,"div","stx-marker-expand");CIQ.newChild(expand,"h4",null,params.headline);CIQ.newChild(expand,"p",null,params.story);CIQ.safeClickTouch(expand,function(e){CIQ.toggleClassName(node,"highlight");});}function cb(){CIQ.Marker.positionContentVerticalAndHorizontal(node);}CIQ.safeClickTouch(visual,function(e){CIQ.toggleClassName(node,"highlight");setTimeout(cb,10);});};CIQ.Marker.Simple.ciqInheritsFrom(CIQ.Marker.NodeCreator,false);return _exports;};var __js_quoteFeed_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_quoteFeed_(_exports){if(!_exports.CIQ)_exports.CIQ={};if(!_exports.CIQ.ChartEngine)_exports.CIQ.ChartEngine=function(){};var CIQ=_exports.CIQ;/**
	 * See tutorial [Data Integration : Quotefeeds]{@tutorial DataIntegrationQuoteFeeds} for a complete overview and
	 * step by step source code for implementing a quotefeed
	 *
	 * Interface for classes that implement a quotefeed. You define a quotefeed object and attach it to
	 * the chart using {@link CIQ.ChartEngine#attachQuoteFeed}. Each member "fetch..." method is optional. The chart
	 * will call your member method if it exists, and will skip if it does not.
	 *
	 * Also see {@link CIQ.ChartEngine#dontRoll} if your feed aggregates weekly and monthly bars and you do not wish the chart to roll them from daily bars.
	 *
	 * @name quotefeed
	 * @namespace
	 * @property {number} maxTicks The maximum number of ticks a quoteFeed should request at a single time. This value will be overridden if the {@link CIQ.ChartEngine.Driver} has a behavior.maximumTicks set.
	 */function quotefeed(){}/**
	 * Each of your quotefeed's "fetch..."" methods must call this callback to return data results to the chart.
	 *
	 * @callback quotefeed~dataCallback
	 * @param response
	 * @param {string} [response.error]			An error message, if one occurred.
	 * @param {array} [response.quotes]			An array of Quotes in required JSON format.
	 * @param {boolean} [response.moreAvailable]	Set this to false if you know that no older data is available (to stop pagination requests).
	 * @param {object} [response.attribution]		This object will be assigned to `stx.chart.attribution`. Your UI can use this to display attribution messages. See example.
	 *
	 * @example <caption>Returning quotes in the dataCallback object</caption>
	 * cb({quotes:[--array of quote elements here--]});
	 *
	 * @example <caption>Returning an error in the dataCallback object</caption>
	 * cb({error:"Your error message here"});
	 *
	 * @example <caption>Setting attribution through the dataCallback object</caption>
	 *
	 * // Set up a callback to be called whenever fetchInitialData is called
	 *  stxx.attachQuoteFeed(yourQuoteFeed, {callback: showAttribution});
	 *
	 * // after very data call, the attribution function will be called and you can then use it to display any message regarding the quote feed
		function showAttribution(params){
			var message=params.stx.chart.attribution.message;
			// add your code here to display the message on your screen.
		}
	 *
	 * // In your quotefeed's fetchInitialData method, set the attribution object
	 * cb({quotes:[--array of quote elements here--], attribution:{message:"Data is delayed by 15 minutes"}});
	 */ /**
	 * See [Data Integration : Quotefeeds]{@tutorial DataIntegrationQuoteFeeds}
	 *
	 * The charting engine calls this quotefeed function whenever the chart is wiped clean and created again with new data.
	 * This typically occurs when {@link CIQ.ChartEngine#newChart} is called but can also occur from other methods such as {@link CIQ.ChartEngine#setPeriodicity}
	 * or {@link CIQ.ChartEngine#importLayout}.
	 *
	 * @param {string} symbol The ticker symbol of the data being fetched
	 * @param {Date} suggestedStartDate A suggested starting date for the fetched data (based on how much can be displayed)
	 * @param {Date} suggestedEndDate A suggested starting date for the fetched data (based on how much can be displayed)
	 * @param {object} params						-Provides additional information on the data requested by the chart.
	 * @param {Boolean}	params.series 				-If true then the request is for series/comparison data (i.e. not the the main symbol)
	 * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
	 * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initialized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
	 * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicity}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
	 * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
	 * @param {number} params.ticks 				-The suggested number of data points to return. This is calculated as twice the number of bars displayed on the chart. This can be used as an alternative to suggestedStartDate.
	 * @param {number} [params.timeout=10000]		-This may be used to set the timeout in msec of the remote server request.
	 * @param  {quotefeed~dataCallback} cb			-Call this function with the results (or error) of your data request.
	 * @since 4.1.2 Added timeout parameter.
	 * @memberOf quotefeed
	 */quotefeed.fetchInitialData=function(symbol,suggestedStartDate,suggestedEndDate,params,cb){};/**
	 * See [Data Integration : Quotefeeds]{@tutorial DataIntegrationQuoteFeeds}
	 *
	 * The charting engine calls this quotefeed function periodically (poll) to request updated data.
	 * The polling frequency is determined by the `refreshInterval` that you provided when you called {@link CIQ.ChartEngine#attachQuoteFeed}.
	 *
	 * @param {string} symbol The ticker symbol of the data being fetched
	 * @param {Date} startDate The starting date for the fetched data (based on how much can be displayed)
	 * @param {object} params						-Provides additional information on the data requested by the chart.
	 * @param {Boolean}	params.series 				-If true then the request is for series/comparison data (i.e. not the main symbol)
	 * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
	 * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initialized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
	 * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicity}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
	 * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @param {number} [params.timeout=10000]		-This may be used to set the timeout in msec of the remote server request.
	 * @param  {quotefeed~dataCallback} cb			-Call this function with the results (or error) of your data request.
	 * @since 4.1.2 Added timeout parameter.
	 * @memberOf quotefeed
	 */quotefeed.fetchUpdateData=function(symbol,startDate,params,cb){};/**
	 * See [Data Integration : Quotefeeds]{@tutorial DataIntegrationQuoteFeeds}
	 *
	 * The charting engine calls this quotefeed function whenever the chart requires older data.
	 * Usually this is because a user has scrolled or zoomed past the end of the data.
	 * *Note: This method may be called during initial load if your fetchInitialData didn't provide enough data to fill the visible chart.*
	 *
	 * @param {string} symbol The ticker symbol of the data being fetched
	 * @param {Date} suggestedStartDate A suggested starting data for the fetched data (based on how much can be displayed)
	 * @param {Date} endDate The date of the last data point currently available in the chart. You should return data from this point and then backward in time.
	 * @param {object} params						-Provides additional information on the data requested by the chart.
	 * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
	 * @param {string} [params.symbolObject] 		-The symbol to fetch in object format; if a symbolObject is initialized ( see {@link CIQ.ChartEngine#newChart}, {@link CIQ.ChartEngine#addSeries}, {@link CIQ.Comparison.add} )
	 * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicity}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
	 * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @param {Boolean} [params.fetchMaximumBars]	-If set to true, the chart requires as much historical data as is available from the feed (params.ticks may also be set to 20,000 to set a safety max), regardless of start date. This is needed for some chart types since they aggregate data (kagi,renko, or linebreak, for example). Developers implementing fetch, should override params.tick and use a smaller number if their feed can't support that much data being sent back. The engine will then make multiple smaller calls to get enough data to fill the screen.
	 * @param {number} params.ticks 				-The suggested number of data points to return. This is calculated as twice the number of bars displayed on the chart. This can be used as an alternative to suggestedStartDate.
	 * @param {number} [params.timeout=10000]		-This may be used to set the timeout in msec of the remote server request.
	 * @param {Boolean} [params.future]             -If set to true, the chart is scrolling in a 'forward' direction
	 * @param  {quotefeed~dataCallback} cb			-Call this function with the results (or error) of your data request.
	 * @since 4.1.2 Added timeout parameter.
	 * @since 6.0.0 Added params.future
	 * @memberOf quotefeed
	 */quotefeed.fetchPaginationData=function(symbol,suggestedStartDate,endDate,params,cb){};/**
	 * See [Data Integration : Advanced]{@tutorial DataIntegrationAdvanced}
	 *
	* Although not a core quotefeed function, the charting engine calls this optional function each time the chart encounters a new symbol or a particular periodicity for that symbol.
	* This could happen when a user changes periodcity, changes a symbol, adds a comparison symbol, or a new study is added that requires an underlying symbol.
	*
    * Use this along with unsubscribe() to keep track of symbols on the chart.
    * Use cases include: maintaining legends, lists of securities, or adding/removing subscriptions to streaming connections.
    *
    * If using a push stream, subscribe and then have the push streamer push updates using {@link CIQ.ChartEngine#updateChartData}.
    *
	 * @param {object} params						-Provides additional information on the data requested by the chart.
	 * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
	 * @param {string} params.symbol 				-The symbol being added
	 * @param {string} params.symbolObject 			-The symbol being added in object form
	 * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicity}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
	 * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @memberOf quotefeed
	 * @since 4.0.0 Changes to periodicity (period/interval) will now also cause subscribe calls
	 */quotefeed.subscribe=function(params){};/**
	 * See [Data Integration : Advanced]{@tutorial DataIntegrationAdvanced}
	 *
	* Although not a core quotefeed function, the charting engine calls this optional function each time the chart no longer requires a symbol or a particular periodicity for that symbol.
	*
	 * @param {object} params						-Provides additional information on the data requested by the chart.
	 * @param {CIQ.ChartEngine} params.stx 			-The chart object requesting data
	 * @param {string} params.symbol				-The symbol being removed
	 * @param {string} params.symbolObject 			-The symbol being removed in object form
	 * @param {number} params.period 				-The timeframe each returned object represents. For example, if using interval "minute", a period of 30 means your feed must return ticks (objects) with dates 30 minutes apart; where each tick represents the aggregated activity for that 30 minute period. **Note that this will not always be the same as the period set in {@link CIQ.ChartEngine#setPeriodicity}, since it represents the aggregation of the raw data to be returned by the feed server, rather than the final data to be displayed.**
	 * @param {string} params.interval 				-The type of data your feed will need to provide. Allowable values: "millisecond,"second","minute","day","week","month". (This is **not** how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @memberOf quotefeed
	 * @since 4.0.0 Changes to periodicity (period/interval) will now also cause unsubscribe calls
	 */quotefeed.unsubscribe=function(params){};/**
	 * See tutorial [Data Integration : Quotefeeds]{@tutorial DataIntegrationQuoteFeeds} for a complete overview and
	 * step by step source code for implementing a quotefeed
	 *
	 * @namespace
	 * @name CIQ.QuoteFeed
	 * @deprecated
	 */CIQ.QuoteFeed=function(){};/**
	 * @private
	 * @param {object} params
	 * @param {function} cb Callback
	 * @deprecated
	 */CIQ.QuoteFeed.prototype.fetch=function(params,cb){if(!this.v2QuoteFeed){console.log("You must implement CIQ.QuoteFeed.[yourfeedname].prototype.fetch()");}};/**
	 * Whenever an error occurs the params and dataCallback from fetch will be automatically passed to this method by the quote engine.
	 * Use this to alert the user if desired.
	 * Override this with your own alerting mechanisms.
	 * @param  {object} params The params originally passed into fetch()
	 * @param {object} dataCallback The data returned to fetch
	 * @memberOf CIQ.QuoteFeed
	 * @example
	 * 	CIQ.MyQuoteFeed.prototype.announceError=function(params, dataCallback){
	 *		if(params.startDate){
	 *			// Perhaps some sort of "disconnected" message on screen
	 *		}else if(params.endDate){
	 *			// Perhaps something indicating the end of the chart
	 *		}else{
	 *			CIQ.alert("Error fetching quote:" + dataCallback.error);	// Probably a not found error?
	 *		}
	 *	};
	 *	@private
	 *	@deprecated
	 */CIQ.QuoteFeed.prototype.announceError=function(params,dataCallback){if(params.suppressErrors||dataCallback.suppressAlert)return;if(params.startDate){// Perhaps some sort of "disconnected" message on screen
}else if(params.endDate){// Perhaps something indicating the end of the chart
}else if(dataCallback.error){CIQ.alert("Error fetching quote:"+dataCallback.error);}else{//CIQ.alert("Error fetching quote:" + params.symbol);	// Probably a not found error?
}};/**
	 * Fetches multiple quotes asynchronously, possibly from various data sources. This method is used to update a chart with multiple symbols
	 * such as a comparison chart.
	 * @param  {array}   arr Array of stock symbols
	 * @param  {Function} cb  Function to callback when quotes are fetched. Will be passed an array of results. Each result is an object {dataCallback, params}.
	 * @memberOf CIQ.QuoteFeed
	 * @private
	 */CIQ.QuoteFeed.prototype.multiFetch=function(arr,cb){if(arr.length===0)cb([]);var tracker={counter:0,finished:arr.length,results:[]};function handleResponse(params,tracker,cb){return function(dataCallback){tracker.results.push({dataCallback:dataCallback,params:params});tracker.counter++;if(tracker.counter>=tracker.finished){var results=tracker.results;tracker.results=[];cb(results);}};}for(var i=0;i<arr.length;i++){var params=arr[i];if(params.stx.isEquationChart(params.symbol)){//equation chart
CIQ.fetchEquationChart(params,handleResponse(params,tracker,cb));}else{CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.SERIES,this,params,handleResponse(params,tracker,cb));}}};/**
	 * QuoteFeed for managing streaming data
	 * @constructor
	 * @private
	 */CIQ.QuoteFeed.Subscriptions=function(){this.subscriptions=[];};CIQ.QuoteFeed.Subscriptions.ciqInheritsFrom(CIQ.QuoteFeed);/**
	 * Used by the QuoteFeed Driver to create subscribe and unsubscribe calls as needed.
	 *
	 * @param {CIQ.ChartEngine} stx engine instance
	 * @since 4.0.0 Changes to periodicity (period/interval) will cause subscribe/unsubscribe calls
	 */CIQ.QuoteFeed.Subscriptions.prototype.checkSubscriptions=function(stx){var sub,need;var chartNeeds=stx.getSymbols({"breakout-equations":true});// reset subscription match status
for(var s=0;s<this.subscriptions.length;s++){this.subscriptions[s].match=false;}for(var i=0;i<chartNeeds.length;i++){// Convert kernel periodicity/interval/timeUnit to feed format
need=chartNeeds[i];var interval=need.interval;// If we're rolling our own months or weeks then we should ask for days from the quote feed
if((interval=="month"||interval=="week")&&!stx.dontRoll){interval="day";}need.interval=interval;need.period=1;need.match=false;if(!isNaN(need.interval)){// normalize numeric intervals into "minute" form
need.period=need.interval;need.interval=need.timeUnit;if(!need.interval)need.interval="minute";}delete need.periodicity;// to avoid confusion
delete need.timeUnit;// to avoid confusion
delete need.setSpan;// to avoid confusion
for(s=0;s<this.subscriptions.length;s++){sub=this.subscriptions[s];if(sub.symbol==need.symbol&&sub.period==need.period&&sub.interval==need.interval){need.match=true;sub.match=true;break;}else if(sub.symbol!=need.symbol){if(need.reason!='period')need.reason='symbol';sub.reason='symbol';}else{need.reason='period';sub.reason='period';}}}//console.log(this.subscriptions);
//console.log(chartNeeds);
var self=this;// unsubscribe to any symbols no longer matched, and remove them from subscriptions
this.subscriptions=this.subscriptions.filter(function(c){if(!c.match){if(!c.stx)c.stx=stx;self.unsubscribe(c);}return c.match;});chartNeeds.forEach(function(c){if(!c.match){if(!c.stx)c.stx=stx;if(!c.reason)c.reason='initialize';self.subscribe(c);self.subscriptions.push(c);}});};/**
	 * Calls fetchFromSource and checks for subscription updates when successful.
	 *
	 * @param {Object} params
	 * @param {Function} cb
	 */CIQ.QuoteFeed.Subscriptions.prototype.fetch=function(params,cb){var self=this;this.fetchFromSource(params,function(results){if(!results.error){self.checkSubscriptions(params.stx);}cb(results);});};/**
	 * Implement this method. Start your streaming here.
	 *
	 * @param {Object} params
	 */CIQ.QuoteFeed.Subscriptions.prototype.subscribe=function(params){console.log("subscribe",params);};/**
	 * Implement this method. End your streaming here.
	 *
	 * @param {Object} params
	 */CIQ.QuoteFeed.Subscriptions.prototype.unsubscribe=function(params){console.log("unsubscribe",params);};/**
	 * The charting engine will call this method whenever it needs data from your feed.
	 * Override this with your implementation to fetch data from your server.
	 * Uses same parameters and format as {@link CIQ.QuoteFeed#fetch}.
	 * @param {object} params
	 * @param {function} cb Callback
	 * @memberOf CIQ.QuoteFeed.Subscriptions
	 * @private
	 * @deprecated
	 */CIQ.QuoteFeed.Subscriptions.prototype.fetchFromSource=function(params,cb){console.log("Please provide implementation of fetchFromSource");};/**
	 * Return true if your quote feed should make an immediate refresh after initial load. For instance if your
	 * initial load is EOD and then you need to immediately load a real-time bar
	 * @param  {object} params The same parameters that are passed to fetch()
	 * @return {boolean}       Return true if a refresh is required immediately
	 * @memberOf CIQ.QuoteFeed
	 * @private
	 */CIQ.QuoteFeed.prototype.requiresImmediateRefresh=function(params){return false;};/**
	 * Attaches a quote feed to the charting engine. This causes the chart to pull data from the quotefeed as needed.
	 * @param  {object} [quoteFeed] your quoteFeed object.
	 * @param  {object} [behavior] Optional behavior object to initialize quotefeed
	 * @param {number} [behavior.refreshInterval] If non null, then sets the frequency for fetchUpdates (if null or zero then fetchUpdate will not be called)
	 * @param {number} [behavior.bufferSize] Set to the minimum number of undisplayed historical ticks always buffered in the masterData. Useful to prevent temporary gaps on studies while paginating.
	 * 							This forces pagination fetch requests to be triggered ahead of reaching the edge of the chart; if the number of already loaded bars is less than the required buffer size.
	 * 							This parameter can be reset at any time by manipulating 'stxx.quoteDriver.behavior.bufferSize'; it will then become active on the very next loading check.
	 * 							It is used on both left and right side pagination requests.
	 * @param {Function} [behavior.callback] Optional callback after any fetch to enhance functionality. It will be called with the params object used with the fetch call.
	 * @param {number} [behavior.noLoadMore] If true, then the chart will not attempt to load any more data after the initial load.
	 * @param {boolean} [behavior.loadMoreReplace] If true, then when paginating, the driver will replace the masterData instead of prepending. Set this if your feed can only provide a full data set of varying historical lengths.
	 * @param {string} [behavior.adjustmentMethod] Set to override the quotefeed's default dividend/split adjustment method.  The value will depend on the particular quotefeed implementation.
	 * @param {number} [behavior.maximumTicks=20000] Limiter on maximum number of ticks to request from a quoteFeed. Setting a value in the quoteDriver's behavior will override an individual quoteFeed's maximumTicks value.
	 * @param {boolean} [behavior.ignoreUpdateError] Optionally used within the specific quotefeed, to indicate that an update which fails should be treated as no data found rather than an error
	 * @memberOf CIQ.ChartEngine
	 *
	 * @example <caption>Attach a quotefeed and have the driver call fetchUpdateData once per second</caption>
	 * stxx.attachQuoteFeed(yourQuotefeed, {refreshInterval: 1});
	 * @since
	 * <br>&bull; 2016-12-01 added
	 * <br>&bull; 5.0.0 behavior.bufferSize is now available.
	 * <br>&bull; 5.1.1 added maximumTicks to behavior
	 * <br>&bull; 6.2.3 added ignoreUpdateError to behavior
	 */CIQ.ChartEngine.prototype.attachQuoteFeed=function(quoteFeed,behavior){if(!behavior)behavior={};if(this.quoteDriver){this.quoteDriver.die();}// Legacy QuoteFeeds
if(typeof quoteFeed.fetchInitialData!=="function"&&typeof quoteFeed.fetchUpdateData!=="function"&&typeof quoteFeed.fetchPaginationData!=="function"){this.quoteDriver=new CIQ.ChartEngine.Driver(this,quoteFeed,behavior);return;}// New "duck typed" v2 quotefeed
if(typeof quoteFeed.fetchPaginationData!=="function"&&typeof quoteFeed.fetchUpdateData!=="function"){behavior.noLoadMore=true;}quoteFeed.v2QuoteFeed=true;// store flag in quotefeed to single new version of quotefeed
["multiFetch","announceError","requiresImmediateRefresh"].forEach(function(prop){if(!quoteFeed[prop]&&quoteFeed[prop]!==false)quoteFeed[prop]=CIQ.QuoteFeed.prototype[prop];// no inheritance so add function
});if(typeof quoteFeed.subscribe==="function"){// if subscription quotefeed
quoteFeed.checkSubscriptions=CIQ.QuoteFeed.Subscriptions.prototype.checkSubscriptions;// no inheritance so add checkSubscriptions function
quoteFeed.subscriptions=[];}this.quoteDriver=new CIQ.ChartEngine.Driver(this,quoteFeed,behavior);};/**
	 * ** Deprecated. ** Use {@link CIQ.ChartEngine#attachQuoteFeed} instead
	 * Attaches a quote feed to the charting engine. This causes the chart to pull data from the quotefeed as needed.
	 *
	 * @param  {object} [quoteFeed] your quoteFeed object.
	 * @param  {object} [behavior] Optional behavior object to initialize quotefeed
	 * @param {number} [behavior.refreshInterval] If non null, then sets the frequency for fetchUpdates (if null or zero then fetchUpdate will not be called)
	 * @param {Function} [behavior.callback] Optional callback after any fetch to enhance functionality. It will be called with the params object used with the fetch call.
	 * @param {number} [behavior.noLoadMore] If true, then the chart will not attempt to load any more data after the initial load.
	 * @param {boolean} [behavior.loadMoreReplace] If true, then when paginating, the driver will replace the masterData instead of prepending. Set this if your feed can only provide a full data set of varying historical lengths.
	 * @memberOf CIQ.ChartEngine
	 *
	 * @example <caption>Attach a quotefeed and have the driver call fetchUpdateData once per second</caption>
	 * stxx.attachEngineQuoteFeed(yourQuotefeed, {refreshInterval: 1});
	 * @since 2016-12-01
	 * @deprecated
	 *
	 */CIQ.ChartEngine.prototype.attachEngineQuoteFeed=function(quoteFeed,behavior){console.log('CIQ.ChartEngine.attachEngineQuoteFeed is now Deprecated. Use CIQ.ChartEngine.attachQuoteFeed instead');this.attachQuoteFeed(quoteFeed,behavior);};/**
	 * Drives the Chart's relationship with the quotefeed object provided to the chart
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {object} quoteFeed
	 * @param {object} behavior
	 * @param {number} [behavior.refreshInterval] Defines how frequently in seconds the chart looks for an update
	 * @param {number} [behavior.buffer] A value of ticks that acts as a buffer before pagination
	 * @param {number} [behavior.maximumTicks=20000] Limiter on maximum number of ticks to request from a quoteFeed. Setting a value in the quoteDriver's behavior will override an individual quoteFeed's maximumTicks value.
	 * @property {boolean} loadingNewChart=false READ ONLY boolean telling when a new chart is loading
	 * @property {boolean} updatingChart=false READ ONLY boolean telling when a chart is updating
	 * @property {?number} intervalTimer=null intervalTimer a set interval which can be cleared to stop the update loop
	 * @constructor
	 * @name  CIQ.ChartEngine.Driver
	 * @since 5.1.1 added maximumTicks to behavior
	 */CIQ.ChartEngine.Driver=function(stx,quoteFeed,behavior){this.stx=stx;this.quoteFeed=quoteFeed;if(!behavior.maximumTicks)behavior.maximumTicks=quoteFeed.maxTicks?quoteFeed.maxTicks:20000;// Historically this is the safest limit of ticks to fetch for response time
if(!behavior.bufferSize||behavior.bufferSize<0)behavior.bufferSize=0;behavior.bufferSize=Math.round(behavior.bufferSize);this.behavior=behavior;this.loadingNewChart=false;// This gets set to true when loading a new chart in order to prevent refreshes while waiting for data back from the server
this.intervalTimer=null;// This is the setInterval which can be cleared to stop the updating loop
this.updatingChart=false;// This gets set when the chart is being refreshed
this.updateChartLoop();};CIQ.ChartEngine.Driver.prototype.die=function(){if(this.intervalTimer){clearInterval(this.intervalTimer);this.intervalTimer=-1;// this means it was stopped by the die function and should not be started again in the event of an async call back from the fetch coming back after it was killed.
}};/**
	 * Call this whenever the kernel knows that the symbols being used have changed
	 * @private
	 */CIQ.ChartEngine.Driver.prototype.updateSubscriptions=function(){if(this.quoteFeed.checkSubscriptions)this.quoteFeed.checkSubscriptions(this.stx);};CIQ.ChartEngine.Driver.prototype.loadDependents=function(params,cb,fetchType){var field;var syms={};var stx=params.stx;var chart=params.chart;var seriesList=chart.series;var masterData=stx.masterData;var series,symbolObject;var self=this;// Create a master list of all symbols we need from our various dependencies: series and studySymbols
var allSymbols=[],ranges={};var isUpdate=fetchType==CIQ.QuoteFeed.UPDATE;var isPaginate=fetchType==CIQ.QuoteFeed.PAGINATION;for(field in seriesList){series=seriesList[field];var sp=series.parameters;if(!params.future&&!isUpdate&&series.moreAvailable===false)continue;// skip series that no longer have historical data.
if(series.loading)continue;// skip series that are presently loading data
if(sp.loadData===false)continue;// skip series that do not load data
if(isUpdate||isPaginate){if(!series.endPoints||!Object.keys(series.endPoints).length)continue;// skip series which have not set range in master data yet
}if(sp.data&&!sp.data.useDefaultQuoteFeed)continue;// legacy
symbolObject=sp.symbolObject;if(!symbolObject.symbol)continue;// skip series that are really just fields already loaded, like "High".
var isUnique=true;if(!isUpdate)series.loading=true;for(var j=0;j<allSymbols.length;j++){if(CIQ.symbolEqual(allSymbols[j],symbolObject))isUnique=false;}if(isUnique){allSymbols.push(symbolObject);ranges[symbolObject.symbol]=series.endPoints;}}var arr=[];for(var k=0;k<allSymbols.length;k++){symbolObject=allSymbols[k];var seriesParam=CIQ.shallowClone(params.originalState);seriesParam.symbol=symbolObject.symbol;seriesParam.symbolObject=symbolObject;if(seriesParam.update||seriesParam.future){if(!seriesParam.endDate)seriesParam.endDate=params.endDate;seriesParam.startDate=ranges[symbolObject.symbol].end;}else{if(!seriesParam.startDate)seriesParam.startDate=params.startDate;// for comparisons, you must fetch enough data on the new Comparison to match the beginning of the masterData until the current tick.
// The current tick may be newer than master data last tick, so set the end Date to right now.
seriesParam.endDate=isPaginate&&!params.future?ranges[symbolObject.symbol].begin:params.endDate;seriesParam.ticks=params.ticks;}arr.push(seriesParam);}if(!arr.length&&isUpdate){// we need this because in updateChart we don't create and let the dependents do it.
stx.createDataSet(null,null,{appending:params.appending||params.originalState.update});if(!params.nodraw)stx.draw();if(cb)cb(null);return;}function MFclosure(isUpdate){return function(results){var earliestDate=null;for(var i=0;i<results.length;i++){var result=results[i];var error=result.dataCallback.error;if(!error&&error!==0){var symbolObject=result.params.symbolObject;var dataCallback=result.dataCallback,quotes=dataCallback.quotes,moreAvailable=dataCallback.moreAvailable;var arr=stx.getSeries({symbolObject:symbolObject});var fillGaps=false;for(var j=0;j<arr.length;j++){series=arr[j];if(!isUpdate){// only reset the moreAvailable on pagination or initial fetch, never on updates.
if(!params.future)series.moreAvailable=moreAvailable===false?false:moreAvailable||quotes.length>(result.params.endDate?1:0);else if(stx.isHistoricalModeSet&&quotes.length<2)series.mostRecentForwardAttempt=new Date();series.loading=false;}// Once fillGaps is set, do not unset it.
fillGaps=series.parameters.fillGaps||fillGaps;}quotes=self.cleanup(stx,series,quotes,fetchType,params,fillGaps);stx.updateChartData(quotes,chart,{secondarySeries:symbolObject.symbol,noCreateDataSet:true,noCleanupDates:true,allowReplaceOHL:true});if(quotes&&quotes.length&&(!earliestDate||earliestDate>quotes[0].DT))earliestDate=quotes[0].DT;}}if(results.length){stx.createDataSet(null,null,{appending:params.originalState.update||params.future,appendToDate:earliestDate});if(!params.nodraw)stx.draw();}if(cb)cb(null);};}this.quoteFeed.multiFetch(arr,MFclosure(isUpdate));};/**
	 * Cleans up the dates and the gaps
	 * @memberOf CIQ.ChartEngine.Driver
	 * @private
	 * @since 5.2.0
	 */CIQ.ChartEngine.Driver.prototype.cleanup=function(stx,series,quotes,mode,params,fillGaps){stx.doCleanupDates(quotes,stx.layout.interval);if(!params.missingBarsCreated&&quotes.length&&stx.cleanupGaps&&fillGaps!==false){var removalMethod,field;var chartOrSeries=params.chart;if(!series)field=chartOrSeries.defaultPlotField;else{chartOrSeries=series;field=series.parameters.symbol||series.id;}if(mode==CIQ.QuoteFeed.PAGINATION&&!params.loadMoreReplace){//add bar for end date so we can close gaps
if(chartOrSeries.endPoints.begin&&chartOrSeries.endPoints.begin>quotes[quotes.length-1].DT){var endingRecord=stx.getFirstLastDataRecord(stx.masterData,field,false);if(series)endingRecord=endingRecord[field];quotes.push(endingRecord);removalMethod="pop";}}else if(mode==CIQ.QuoteFeed.UPDATE){//add bar for begin date so we can close gaps
if(chartOrSeries.endPoints.end&&chartOrSeries.endPoints.end<quotes[0].DT){var beginningRecord=stx.getFirstLastDataRecord(stx.masterData,field,true);if(series)beginningRecord=beginningRecord[field];quotes.unshift(beginningRecord);removalMethod="shift";}}quotes=stx.doCleanupGaps(quotes,params.chart,{cleanupGaps:fillGaps,noCleanupDates:true});if(removalMethod)quotes[removalMethod]();}return quotes;};/**
	 * Updates the chart as part of the chart loop
	 * @memberOf CIQ.ChartEngine.Driver
	 * @private
	 */CIQ.ChartEngine.Driver.prototype.updateChart=function(){if(this.updatingChart)return;if(this.loadingNewChart)return;var howManyToGet=CIQ.objLength(this.stx.charts);var howManyReturned=0;var stx=this.stx;var interval=stx.layout.interval;var timeUnit=stx.layout.timeUnit;function closure(self,params,symbol){if(self.behavior.prefetchAction)self.behavior.prefetchAction("updateChart");return function(dataCallback){howManyReturned++;var chart=params.chart,masterData=chart.masterData;if(symbol==chart.symbol&&interval==stx.layout.interval&&timeUnit==stx.layout.timeUnit&&!stx.isHistoricalMode()){// Make sure user hasn't changed symbol while we were waiting on a response
if(!dataCallback.error){var quotes=dataCallback.quotes;quotes=self.cleanup(stx,null,quotes,CIQ.QuoteFeed.UPDATE,params);stx.updateChartData(quotes,chart,{noCreateDataSet:true,noCleanupDates:true});chart.attribution=dataCallback.attribution;}else{self.quoteFeed.announceError(params.originalState,dataCallback);}}else{self.updatingChart=false;return;}if(howManyReturned==howManyToGet){self.updatingChart=false;}if(self.behavior.callback){self.behavior.callback(params);}self.loadDependents(params,null,CIQ.QuoteFeed.UPDATE);// createDataSet(),draw() will be handled in here
};}//TODO, change this to multi-fetch?
for(var chartName in stx.charts){var chart=stx.charts[chartName];if(!chart.symbol)continue;// Removed below line.  It's possible IPO has no quotes from newChart but a BATS update will return data.
//if(!chart.masterData /*|| !chart.masterData.length*/) continue;	 // sometimes there is no data but it is not an error, and we want to let the refresh try again. If don't go in here, self.updatingChart will never be set to true and we will never refresh.
var params=this.makeParams(chart.symbol,chart.symbolObject,chart);if(chart.masterData&&chart.masterData.length){params.startDate=chart.endPoints.end;// if there is no data, then let the fetch treat an in initial load without start or end dates.
}params.update=true;params.originalState=CIQ.shallowClone(params);this.updatingChart=true;var closureCB=closure(this,params,chart.symbol);if(stx.isEquationChart(params.symbol)){//equation chart
CIQ.fetchEquationChart(params,closureCB);}else{CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.UPDATE,this.quoteFeed,params,closureCB);}}};CIQ.ChartEngine.Driver.prototype.updateChartLoop=function(newInterval){if(this.intervalTimer==-1)return;// the driver was killed. This was probably an async call from a feed response sent before it was killed.
if(this.intervalTimer)clearInterval(this.intervalTimer);// stop the timer
if(this.behavior.noUpdate)return;function closure(self){return function(){if(self.behavior.noUpdate)return;self.updateChart();};}if(!newInterval&&newInterval!==0)newInterval=this.behavior.refreshInterval;if(newInterval)this.intervalTimer=setInterval(closure(this),newInterval*1000);};/**
	 * Convenience function to change the refresh interval that was set during attachQuoteFeed.
	 * @param  {number} newInterval The new refresh interval in seconds
	 * @memberOf CIQ.ChartEngine.Driver
	 * @since 07/01/2015
	 */CIQ.ChartEngine.Driver.prototype.resetRefreshInterval=function(newInterval){this.behavior.refreshInterval=newInterval;// set to your new interval
this.updateChartLoop();// restart the timer in the new interval
};/**
	 * Loads all available data
	 * @param {CIQ.ChartEngine.Chart} [chart] The chart to adjust. If left undefined, adjust the main symbol chart.
	 * @param {function} cb The callback function. Will be called with the error returned by the quotefeed, if any.
	 * @memberOf CIQ.ChartEngine.Driver
	 * @since 07/01/2015
	 */CIQ.ChartEngine.Driver.prototype.loadAll=function(chart,cb){var self=this;var count=0;function closure(){return function(response){if(response){// error
cb(response);}else if(!chart.moreAvailable){// no more data
cb(null);//}else if(chart.loadingMore){  // something else is loading past data, abort this
//	cb(null);
}else if(++count>20){// we'll allow up to 20 fetches
cb("error, moreAvailable not implemented correctly in QuoteFeed");}else{// get some more
chart.loadingMore=false;self.checkLoadMore(chart,true,true,closure(),true);}};}closure()();};/**
	 * If the quote feed has indicated there is more data available it will create and execute a fetch() call,
	 * load the data into the masterData array, and create a new dataSet. Called internally as needed to keep the chart data up to date.
	 * Finally it will re-draw the chart to display the new data
	 *
	 * @param  {CIQ.ChartEngine.Chart} [chart] The chart to adjust. Otherwise adjusts the main symbol chart.
	 * @param {boolean} forceLoadMore set to true to force a fetch() call.
	 * @param {boolean} fetchMaximumBars	set to true to request the maximum amount of data available from the feed.
	 * @param {function} cb The callback function. Will be called with the error returned by the quotefeed, if any.
	 * @param {boolean} nodraw Set to true to skip over the draw() call
	 * @memberOf CIQ.ChartEngine.Driver
	 * @private
	 */CIQ.ChartEngine.Driver.prototype.checkLoadMore=function(chart,forceLoadMore,fetchMaximumBars,cb,nodraw){var stx=this.stx,driver=this;var isHistoricalData=stx.isHistoricalMode();if(!isHistoricalData)stx.isHistoricalModeSet=false;if(chart.loadingMore||this.loadingNewChart){chart.initialScroll=chart.scroll;if(cb)cb(null);return;}var params;function finish(err){chart.loadingMore=false;if(cb)cb(err);}if(stx.currentlyImporting){if(cb)cb(null);return;}var dataSet=chart.dataSet;function needsBackFill(which){return!which.endPoints.begin||dataSet.length-chart.scroll<driver.behavior.bufferSize||dataSet.length-chart.scroll-stx.tickFromDate(which.endPoints.begin,chart)<driver.behavior.bufferSize;}function needsFrontFill(which){return!which.endPoints.end||chart.scroll-chart.maxTicks+1<driver.behavior.bufferSize||stx.tickFromDate(which.endPoints.end,chart,null,true)-dataSet.length+chart.scroll-chart.maxTicks+2<driver.behavior.bufferSize;}// The following var will be used to determine if it's ok to retry a forward pagination.  Without this delay, a chart which ends in the past (delisted) or a chart with data coming in slowly
// will never exit historical mode, so we need to prevent repeated requests from the draw() loop.  So we buffer using the behavior forwardPaginationRetryInterval.
var forwardFetchDoARetry;var forwardPaginationRetryIntervalMS=1000*(this.behavior.forwardPaginationRetryInterval||5);var seriesNeedsBackFill=false,seriesNeedsFrontFill=false;// see if series need loading
if(chart.dataSet.length){for(var key in chart.series){var series=chart.series[key];if(series.loading)continue;// exclude this series
if(series.parameters.loadData===false)continue;// exclude series loaded thru masterData
forwardFetchDoARetry=!series.mostRecentForwardAttempt||series.mostRecentForwardAttempt.getTime()+forwardPaginationRetryIntervalMS<Date.now();if(series.moreAvailable!==false&&needsBackFill(series))seriesNeedsBackFill=true;if(forwardFetchDoARetry&&needsFrontFill(series))seriesNeedsFrontFill=true;}}forwardFetchDoARetry=!chart.mostRecentForwardAttempt||chart.mostRecentForwardAttempt.getTime()+forwardPaginationRetryIntervalMS<Date.now();// Now we determine which type of pagination we need
var mainPastFetch=(needsBackFill(chart)||forceLoadMore)&&chart.moreAvailable!==false;var mainForwardFetch=(needsFrontFill(chart)||forceLoadMore)&&forwardFetchDoARetry;var isPastPagination=mainPastFetch||seriesNeedsBackFill;var isForwardPagination=stx.isHistoricalModeSet&&!isPastPagination&&(mainForwardFetch||seriesNeedsFrontFill);var interval=stx.layout.interval;var timeUnit=stx.layout.timeUnit;function closure(self,params){if(self.behavior.prefetchAction)self.behavior.prefetchAction("checkLoadMore");return function(dataCallback){var stx=self.stx,chart=params.chart;if(params.symbol==chart.symbol&&interval==stx.layout.interval&&timeUnit==stx.layout.timeUnit){// Make sure user hasn't changed symbol while we were waiting on a response
if(!params.loadMore){params.chart.loadingMore=false;}if(!dataCallback.error){if(!dataCallback.quotes)dataCallback.quotes=[];var quotes=dataCallback.quotes,masterData=chart.masterData;quotes=self.cleanup(stx,null,quotes,CIQ.QuoteFeed.PAGINATION,params);if(quotes.length&&chart.masterData&&chart.masterData.length){// remove possible dup with master data's first record
if(params.future){// remove possible dup with master data's first record
var firstQuote=quotes[0];if(firstQuote.DT&&firstQuote.DT==chart.masterData[chart.masterData.length-1].DT)masterData.pop();}else{// remove possible dup with master data's last record
var lastQuote=quotes[quotes.length-1];if(lastQuote.DT&&+lastQuote.DT==+chart.masterData[0].DT)quotes.pop();}}if(!params.future){// set moreAvailable before we call draw or we can create an infinite loop if the feed servers runs out of data in the middle of a draw
// if dataCallback.moreAvailable is set to either true or false, set chart.moreAvailable to that value
// if dataCallback.moreAvailable is not set at all (null or undefined), then set chart.moreAvailable to dataCallback.quotes.length!==0
if(dataCallback.moreAvailable)chart.moreAvailable=true;else if(dataCallback.moreAvailable===false||!quotes.length)chart.moreAvailable=false;// Can't be more available if we got nothing back
else chart.moreAvailable=true;}else{if(stx.isHistoricalModeSet&&quotes.length<2)chart.mostRecentForwardAttempt=new Date();// no quotes for future query, so timestamp this query
}self.tickMultiplier=quotes.length?2:self.tickMultiplier*2;// Better to set this early, in case a draw() is called from one of the functions below and checkLoadMore is retriggered.  We need to know where we left off!
if(quotes.length){if(!chart.endPoints.begin||chart.endPoints.begin>quotes[0].DT)chart.endPoints.begin=quotes[0].DT;if(!chart.endPoints.end||chart.endPoints.end<quotes[quotes.length-1].DT)chart.endPoints.end=quotes[quotes.length-1].DT;}chart.loadingMore=false;// this has to be set before draw() so we may call another pagination from it
if(params.loadMoreReplace){stx.setMasterData(quotes,chart,{noCleanupDates:true});}else if(params.future){stx.updateChartData(quotes,chart,{noCreateDataSet:true,noCleanupDates:true});}else{CIQ.addMemberToMasterdata({stx:stx,chart:chart,data:quotes,fields:["*"],noCleanupDates:true});}stx.createDataSet(undefined,undefined,{appending:params.future});if(!nodraw)stx.draw();if(self.behavior.callback){self.behavior.callback(params);}self.loadDependents(params,cb,CIQ.QuoteFeed.PAGINATION);}else{self.quoteFeed.announceError(params.originalState,dataCallback);params.chart.loadingMore=false;if(cb)cb(dataCallback.error);}}else{//console.log("orphaned loadMore",params);
return;}};}var fetching=false;if(!this.behavior.noLoadMore){if(isForwardPagination||!stx.maxDataSetSize||chart.dataSet.length<stx.maxDataSetSize){if(isPastPagination||isForwardPagination){chart.initialScroll=chart.scroll;chart.loadingMore=true;params=this.makeParams(chart.symbol,chart.symbolObject,chart);params.future=isForwardPagination;if(chart.masterData&&chart.masterData.length){if(isForwardPagination)params.startDate=chart.endPoints.end;else params.endDate=chart.endPoints.begin;var firstLast;// fallback on masterData endpoints
if(isForwardPagination&&!params.startDate){firstLast=stx.getFirstLastDataRecord(chart.masterData,"DT",true);if(firstLast)params.startDate=firstLast.DT;}else if(isPastPagination&&!params.endDate){firstLast=stx.getFirstLastDataRecord(chart.masterData,"DT");if(firstLast)params.endDate=firstLast.DT;}}else{params.endDate=new Date();}params.originalState=CIQ.shallowClone(params);params.nodraw=nodraw;if(!mainPastFetch&&seriesNeedsBackFill||!mainForwardFetch&&seriesNeedsFrontFill){this.loadingMore=true;this.loadDependents(params,finish,CIQ.QuoteFeed.PAGINATION);if(cb)cb(null);return;}if(stx.fetchMaximumBars[stx.layout.aggregationType]){params.fetchMaximumBars=true;if(!stx.maxMasterDataSize||this.behavior.maximumTicks<stx.maxMasterDataSize)params.ticks=this.behavior.maximumTicks;else params.ticks=stx.maxMasterDataSize;}var closureCB=closure(this,params);if(stx.isEquationChart(params.symbol)){//equation chart
CIQ.fetchEquationChart(params,closureCB);}else{if(isForwardPagination)params.appending=true;CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.PAGINATION,this.quoteFeed,params,closureCB);}fetching=true;}}}if(!fetching&&cb)cb(null);};/**
	 * Returns how many bars should be fetched. If we're fetching a series then it's simply the number
	 * of bars already in the chart. Otherwise it's twice the number of bars to fetch to fill up the screen.
	 * If we're rolling our own months or weeks from daily ticks it will return the number of daily ticks to fetch.
	 *
	 * @param  {object} params Parameters
	 * @param  {object} params.stx	  The chart object
	 * @return {number}		   Number of bars to fetch
	 * @memberOf CIQ.ChartEngine.Driver
	 * @private
	 */CIQ.ChartEngine.Driver.prototype.barsToFetch=function(params){if(!CIQ.isValidNumber(this.tickMultiplier))this.tickMultiplier=2;// used to determine params.ticks
if(params.isSeries)return params.stx.masterData.length;var interval=this.stx.layout.interval;var p=params.stx.layout.periodicity;// Rough calculation, this will account for 24x7 securities
// If we're rolling our own months or weeks then adjust to daily bars
if((interval=="month"||interval=="week")&&!this.stx.dontRoll){p*=interval=="week"?7:30;}var bars=params.stx.chart.maxTicks*p;return bars*this.tickMultiplier;};/**
	 * Calculates the suggestedStartDate for a query to a quoteFeed. Will either do a quick estimation if fetchMaximimBars is true for effiency or use a market iterator to find the exact start date.
	 * This should only be called after the correct ticks have been determined.
	 * @param {object} params
	 * @param {object} iterator
	 * @param {number} ticks
	 * @return {Date} suggestedStartDate
	 * @memberof CIQ.ChartEngine.Driver
	 * @private
	 * @since 5.1.1
	 */CIQ.ChartEngine.Driver.determineStartDate=function(params,iterator,ticks){return this.determineStartOrEndDate(params,iterator,ticks,true);};/**
	 * Calculates either the suggestedStartDate or suggestedEndDate for a query to a quoteFeed. Will either do a quick estimation if fetchMaximimBars is true for effiency or use a market iterator to find the exact end date.
	 * When passing in a truthy boolean will  calcluate the suggestedStartDate.
	 * This should only be called after the correct ticks have been determined.
	 * @param {object} params Params object used by the QuoteDriver in fetching data
	 * @param {object} iterator Market iterator to used to advance and find a date
	 * @param {number} ticks Ticks to fetch
	 * @param {boolean} direction Direction to check date from
	 * @return {Date} determinedDate (or present day)
	 * @memberof CIQ.ChartEngine.Driver
	 * @private
	 * @since 6.0.0
	 */CIQ.ChartEngine.Driver.determineStartOrEndDate=function(params,iterator,ticks,isStart){var interval=params.interval,period=params.stx.layout.periodicity,multiplier=CIQ.Market.Symbology.isForexSymbol(params.symbol)?1.3:4;var determinedDate,base;if(interval==="millisecond"||interval==="second")base=CIQ.SECOND*period*multiplier;else if(interval==="minute")base=CIQ.MINUTE*period*multiplier;else base=CIQ.DAY*multiplier;if(params.fetchMaximumBars){var offset=ticks*base,begin=iterator.begin.getTime();determinedDate=isStart?new Date(begin-offset):new Date(begin+offset);}else if(isStart){determinedDate=params.startDate||iterator.previous(ticks);}else{determinedDate=params.future?iterator.next(ticks):new Date();}return determinedDate;};CIQ.ChartEngine.Driver.prototype.makeParams=function(symbol,symbolObject,chart){var stx=this.stx;var interval=stx.layout.interval;var ticks=this.barsToFetch({stx:stx});// If we're rolling our own months or weeks then we should ask for days from the quote feed
if((interval=="month"||interval=="week")&&!stx.dontRoll){interval="day";}var params=CIQ.shallowClone(this.behavior);var extended=false,sessions=chart.market.getSessionNames();if(stx.extendedHours){if(stx.extendedHours.filter){extended=true;}else{extended=stx.layout.extended;// filter out unwanted sessions
sessions=sessions.filter(function(el){return el.enabled||stx.layout.marketSessions[el.name];});}}else{sessions=sessions.filter(function(el){return el.enabled;});}for(var sess=0;sess<sessions.length;sess++){sessions[sess]=sessions[sess].name;// remove "enabled" bit
}CIQ.extend(params,{stx:stx,symbol:symbol,symbolObject:symbolObject,chart:chart,interval:interval,extended:extended,period:1,ticks:ticks,additionalSessions:sessions},true);if(!params.symbolObject)params.symbolObject={symbol:symbol};if(!isNaN(params.interval)){// normalize numeric intervals into "minute", "second" or "millisecond" form as required by fetch()
params.period=parseInt(params.interval,10);// in case it was a string, which is allowed in setPeriodicity.
params.interval=stx.layout.timeUnit;if(!params.interval)params.interval="minute";}return params;};CIQ.ChartEngine.Driver.prototype.newChart=function(params,cb){var stx=this.stx;var symbol=params.symbol;var interval=stx.layout.interval;var timeUnit=stx.layout.timeUnit;var chart=params.chart;chart.moreAvailable=null;chart.loadingMore=false;chart.attribution=null;var qparams=this.makeParams(symbol,params.symbolObject,chart);CIQ.extend(qparams,params,true);// Some aggregation types potentially require a lot of data. We set the flag "fetchMaximumBars"
// but also take a guess and say 20,000 bars should cover most situations
if(stx.fetchMaximumBars[stx.layout.aggregationType]||params.fetchMaximumBars){if(!stx.maxMasterDataSize||this.behavior.maximumTicks<stx.maxMasterDataSize)qparams.ticks=this.behavior.maximumTicks;else qparams.ticks=stx.maxMasterDataSize;qparams.fetchMaximumBars=true;}function closure(self,qparams){if(self.behavior.prefetchAction)self.behavior.prefetchAction("newChart");return function(dataCallback){var chart=qparams.chart,quotes=dataCallback.quotes,success=false;self.loadingNewChart=false;// this has to be set before home() so we may call a pagination from it
if(symbol==chart.symbol&&interval==stx.layout.interval&&timeUnit==stx.layout.timeUnit){// Make sure user hasn't changed symbol while we were waiting on a response
if(!dataCallback.error){quotes=self.cleanup(stx,null,quotes,CIQ.QuoteFeed.INITIAL,qparams);stx.setMasterData(quotes,chart,{noCleanupDates:true});chart.endPoints={};if(quotes.length){chart.endPoints.begin=quotes[0].DT;chart.endPoints.end=quotes[quotes.length-1].DT;}// Note, quotes.length==0 will not set moreAvailable to false, just in case the stock is thinly traded
// We'll rely on checkLoadMore to make the definitive decision
if(!quotes)chart.moreAvailable=false;else chart.moreAvailable=dataCallback.moreAvailable===false?false:true;chart.attribution=dataCallback.attribution;if(params.initializeChart)stx.initializeChart();stx.createDataSet();success=true;}else{self.quoteFeed.announceError(qparams.originalState,dataCallback);}}else{//console.log("orphaned request", qparams);
if(cb)cb("orphaned");return;}// new data means that all series could potentially have historical data. So reset them all.
for(var key in chart.series){chart.series[key].endPoints={};chart.series[key].moreAvailable=null;}// We've now responded to the newChart() callback. Please note that dependents are now being loaded in parallel!
var masterData=chart.masterData;if(masterData&&masterData.length){qparams.startDate=masterData[0].DT;qparams.endDate=masterData[masterData.length-1].DT;}if(self.behavior.callback){self.behavior.callback(qparams);}self.loadDependents(qparams,function(){if(success&&!qparams.nodraw)self.stx.home();// by default the white space is maintained now, so no need to include the {maintainWhitespace:true} parameter
if(cb)cb(dataCallback.error);self.stx.dispatch("newChart",{stx:self.stx,symbol:self.stx.chart.symbol,symbolObject:self.stx.chart.symbolObject,moreAvailable:self.stx.chart.moreAvailable,quoteDriver:self});self.resetRefreshInterval(self.behavior.refreshInterval);},CIQ.QuoteFeed.INITIAL);};}this.loadingNewChart=true;this.updatingChart=false;qparams.originalState=CIQ.shallowClone(qparams);var closureCB=closure(this,qparams);if(this.stx.isEquationChart(qparams.symbol)){//equation chart
CIQ.fetchEquationChart(qparams,closureCB);}else{CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.INITIAL,this.quoteFeed,qparams,closureCB);}};///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// Below code supports new quotefeed architecture
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//Quotefeed constants defining fetchData's context parameter
CIQ.QuoteFeed.INITIAL=1;CIQ.QuoteFeed.UPDATE=2;CIQ.QuoteFeed.PAGINATION=3;CIQ.QuoteFeed.SERIES=4;// ALL quotefeed-fetch calls (old and new versions) go through this function
CIQ.ChartEngine.Driver.fetchData=function(context,quoteFeed,params,cb){if(quoteFeed.v2QuoteFeed){// if new version of quotefeed
if(typeof quoteFeed.subscribe!=="function"){// if no subscribe function defined then this is a typical quotefeed
CIQ.ChartEngine.Driver.fetchDataInContext(context,quoteFeed,params,cb);}else{// else this is a "subscription" quotefeed
CIQ.ChartEngine.Driver.fetchDataInContext(context,quoteFeed,params,function(results){if(!results.error){quoteFeed.checkSubscriptions(params.stx);}cb(results);});}}else{// old version of quotefeed
params.stx.convertToDataZone(params.startDate);params.stx.convertToDataZone(params.endDate);quoteFeed.fetch(params,cb);}};// if not a "subscription" quotefeed, then this function is always called for new quotefeed -- here the user's quotefeed is invoked;
// functions not defined in quotefeed are skipped over
CIQ.ChartEngine.Driver.fetchDataInContext=function(context,quoteFeed,params,cb){var iterator_parms,iterator,suggestedStartDate,suggestedEndDate;var stx=params.stx;// When dealing with a series, we need to look at the original params in order to figure out
// what type of request we really need to make
if(context===CIQ.QuoteFeed.SERIES){params.series=true;context=CIQ.QuoteFeed.INITIAL;if(params.endDate&&!params.startDate||params.future)context=CIQ.QuoteFeed.PAGINATION;else if(params.startDate&&!params.endDate)context=CIQ.QuoteFeed.UPDATE;}var ticks=Math.min(params.ticks,stx.quoteDriver.behavior.maximumTicks);if(quoteFeed.maxTicks)ticks=Math.min(ticks,quoteFeed.maxTicks);switch(context){case CIQ.QuoteFeed.UPDATE:if(stx.isHistoricalModeSet){stx.quoteDriver.updatingChart=false;return;}var startDate;if(params.startDate){startDate=params.startDate;}else{startDate=new Date();// occurs if initial fetch returned no data
startDate.setHours(0,0,0,0);}if(typeof quoteFeed.fetchUpdateData==="function"){quoteFeed.fetchUpdateData(params.symbol,stx.convertToDataZone(startDate),params,cb);}break;case CIQ.QuoteFeed.INITIAL://Now need to calculate suggested dates
suggestedEndDate=params.endDate||new Date();iterator_parms={"begin":suggestedEndDate,"interval":params.interval,"periodicity":params.interval=='tick'?stx.chart.xAxis.futureTicksInterval:params.period,"outZone":stx.dataZone};iterator=stx.chart.market.newIterator(iterator_parms);suggestedStartDate=CIQ.ChartEngine.Driver.determineStartDate(params,iterator,ticks);if(params.endDate)suggestedEndDate=params.endDate;if(typeof quoteFeed.fetchInitialData==="function"){quoteFeed.fetchInitialData(params.symbol,suggestedStartDate,stx.convertToDataZone(suggestedEndDate),params,cb);}break;case CIQ.QuoteFeed.PAGINATION:iterator_parms={"begin":params.endDate||params.startDate,"interval":params.interval,"periodicity":params.interval=='tick'?stx.chart.xAxis.futureTicksInterval:params.period,"outZone":stx.dataZone};iterator=stx.chart.market.newIterator(iterator_parms);var suggestedDate=CIQ.ChartEngine.Driver.determineStartOrEndDate(params,iterator,ticks,!params.future);suggestedStartDate=params.startDate||suggestedDate;suggestedEndDate=params.endDate||suggestedDate;if(!params.startDate)params.stx.convertToDataZone(suggestedEndDate);else params.stx.convertToDataZone(suggestedStartDate);if(typeof quoteFeed.fetchPaginationData==="function"){if(stx.maxMasterDataSize&&stx.maxMasterDataSize<=stx.masterData.length)return;if(suggestedEndDate>=Date.now())this.isHistoricalModeSet=false;// exit historical mode if we request (future) data up to present or beyond
quoteFeed.fetchPaginationData(params.symbol,suggestedStartDate,suggestedEndDate,params,cb);}break;default:console.error("Illegal fetchData constant");}};return _exports;};var __js_span_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_span_(_exports){var CIQ=_exports.CIQ;/**
	 * Sets a chart to the requested date range.
	 *
	 * When a quotefeed is attached to the chart (ver 04-2015 and up), and not enough data is available in masterData to render the requested range, setRange will request more from the feed.
	 * Also, if no periodicity (params.periodicity) is supplied in the parameters, **it may	 override the current periodicity** and automatically choose the best periodicity to use for the requested range using the {@link CIQ.ChartEngine#dynamicRangePeriodicityMap} when {@link CIQ.ChartEngine#autoPickCandleWidth} is enabled,
	 * or the use of the {@link CIQ.ChartEngine#staticRangePeriodicityMap} object when {@link CIQ.ChartEngine#autoPickCandleWidth} is **NOT** enabled.
	 * So depending on your UI, **you may need to use the callback to refresh the periodicity displayed on your menu**.
	 *
	 * Therefore, if you choose to let setRange set the periodicity, you should **not** call setPeriodicity before or after calling this method.
	 *
	 * **For details on how this method can affect the way daily data is rolled up, see {@link CIQ.ChartEngine#createDataSet} **
	 * 
	 * **If the chart is in `tick` periodicity, the periodicity will be automatically selected even if one was provided because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.**
	 *
	 * If there is no quotefeed attached (or using a version prior to 04-2015), then setRange will use whatever data is available in the masterData. So you must ensure you have preloaded enough to display the requested range.
	 *
	 * This function must be called after newChart() creates a dataSet.
	 *
	 * ** Layout preservation and the range **
	 * <br>The selected range will be recorded in the chart {@link CIQ.ChartEngine#layout} when it is requested through {@link CIQ.ChartEngine#newChart}, or when you call setRange directly.
	 * <br>It is then used in {@link CIQ.ChartEngine#importLayout} and {@link CIQ.ChartEngine#newChart} to reset that range, until a new range is selected.
	 *
	 * @param {object} params  Parameters for the request
	 * @param {Date} [params.dtLeft] Date to set left side of chart. If no left date is specified then the right edge will be flushed, and the same interval and period will be kept causing the chart to simply scroll to the right date indicated.<BR> **Must be in the exact same time-zone as the `masterdata`.** See {@link CIQ.ChartEngine#setTimeZone} and {@link CIQ.ChartEngine#convertToDataZone} for more details. <BR> If the left date is not a valid market date/time, the next valid market period forward will be used.
	 * @param {Date} [params.dtRight] Date to set right side of chart. Defaults to right now. <BR> **Must be in the exact same time-zone as the `masterdata`.** See {@link CIQ.ChartEngine#setTimeZone} and {@link CIQ.ChartEngine#convertToDataZone} for more details. <BR> If the right date is not a valid market date/time, the next valid market period backwards will be used.
	 * @param {number} [params.padding] Whitespace padding in pixels to apply to right side of chart after sizing for date range. If not present then 0 will be used.
	 * @param {CIQ.ChartEngine.Chart} [params.chart] Which chart, defaults to "chart"
	 * @param {boolean} [params.goIntoFuture] If true then the right side of the chart will be set into the future if dtRight is greater than last tick. See {@link CIQ.ChartEngine#staticRange} if you wish to make this your default behavior.
	 * @param {boolean} [params.goIntoPast] If true then the left side of the chart will be set into the past if dtLeft is less than first tick. See {@link CIQ.ChartEngine#staticRange} if you wish to make this your default behavior.
	 * @param {object} [params.periodicity] Override a specific periodicity combination to use with the range. Only available if a quoteFeed is attached to the chart. Note: if the chart is in tick periodicity, the periodicity will be automatically selected even if one was provided because in tick periodicity we have no way to know how many ticks to get to fulfill the requested range. If used, all 3 elements of this object must be set.
	 * @param {Number} params.periodicity.period Period as used by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param {string} params.periodicity.interval An interval as used by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param {string} params.periodicity.timeUnit A timeUnit as used by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param {Number} params.pixelsPerBar] Optionally override this value so that the auto-periodicity selected chooses different sized candles.
	 * @param {boolean} params.dontSaveRangeToLayout If true then the range won't be saved to the layout.
	 * @param {boolean} [params.forceLoad] Forces a complete load (used by newChart)
	 * @param {Function} [cb] Callback method. Will be called with the error returned by the quotefeed, if any.
	 * @memberOf CIQ.ChartEngine
	 * @since
	 * <br>&bull; 04-2015 params.rangePeriodicityMap and params.periodicity added as well as automatic integration with {@link CIQ.QuoteFeed}
	 * <br>&bull; 2016-05-10 params.rangePeriodicityMap deprecated in favor of new automatic algorithm
	 * <br>&bull; m-2016-12-01 restored logic to reference a periodicity map. Similar to previous `params.rangePeriodicityMap` . See {@link CIQ.ChartEngine#staticRangePeriodicityMap} for details
	 * <br>&bull; m-2016-12-01 modified automatic periodicity algorithm. See {@link CIQ.ChartEngine#dynamicRangePeriodicityMap} and {@link CIQ.ChartEngine#autoPickCandleWidth} for details
	 * <br>&bull; 4.0.0 now uses {@link CIQ.ChartEngine#needDifferentData} to determine if new data should be fetched.
	 * <br>&bull; 4.0.0 No longer defaulting padding to current value of preferences.whiteSpace
	 * <br>&bull; 5.1.0 params.dontSaveRangeToLayout added
	 * <br>&bull; 5.1.0 The selected range will be recorded in the chart {@link CIQ.ChartEngine#layout} when it is requested through {@link CIQ.ChartEngine#newChart}, or when you call setRange directly.
	 * <br>&bull; 5.2.0 params.forceLoad is now an option to force loading of new data.
	 * @example
	 * // this will display all of the available data in the current chart periodicity
	    stxx.setRange({
	        dtLeft: stxx.chart.dataSet[0].DT,
	        dtRight: stxx.chart.dataSet[stxx.chart.dataSet.length - 1].DT,
	        periodicity:{period:stxx.layout.periodicity,interval:stxx.layout.interval,timeUnit:stxx.layout.timeUnit}
	    });
	 */CIQ.ChartEngine.prototype.setRange=function(params,cb){if(CIQ.isEmpty(params)){// Handle legacy argument list implementation
params={dtLeft:arguments[0],dtRight:arguments[1],padding:arguments[2],chart:arguments[3]};cb=arguments[4];}if(this.staticRange){params.goIntoPast=params.goIntoFuture=true;}if(!params.chart)params.chart=this.chart;if(typeof params.padding=="undefined"){// if no whitespace sent in, maintain existing ( different than sending 0 which will set to no whitespace )
params.padding=0;}var dontChangePeriodicity=false;var chart=params.chart;var lt=typeof params.dtLeft==='string'?new Date(params.dtLeft):params.dtLeft;// just in case a string date is passed in
var rt=new Date();if(params.dtRight)rt=typeof params.dtRight==='string'?new Date(params.dtRight):params.dtRight;var iter;if(!lt){// If no left date then we want to just flush the right edge, and keep the same interval,period
iter=this.standardMarketIterator(rt,null,chart);lt=iter.previous(chart.maxTicks);if(!params.periodicity)dontChangePeriodicity=true;}chart.inflectionPoint=lt;//  this is where consolidation originates in either direction
this.layout.range={dtLeft:lt,dtRight:rt};var self=this;function showTheRange(err){if(typeof err=="undefined")err=null;var l=0,r=0;var todaysDate=new Date();var base=params.base;var periodicity=params.periodicity;var layout=self.layout;if(params.goIntoFuture&&(!chart.masterData.length||lt>chart.masterData[chart.masterData.length-1].DT)){// we're displaying entirely in the future, fill gap
var leftmost=chart.masterData.length?chart.masterData.pop():{DT:lt};var gapData=self.doCleanupGaps([leftmost,{DT:rt}],chart,{cleanupGaps:"gap",noCleanupDates:true});self.setMasterData(chart.masterData.concat(gapData),chart,{noCleanupDates:true});self.createDataSet(null,null,{appending:true});}var dataSet=chart.dataSet;var dsLength=dataSet.length;if(!dataSet||dsLength===0){if(cb)cb(err);return;}var leftBar;// range is day and interval is day
if(base==='day'&&periodicity&&periodicity.interval==='day'){var multiplier=params.multiplier;// left bar is how many days the range is, or beginning of dataset
l=dsLength<multiplier?0:dsLength-multiplier;r=dsLength-1;}// if intraday range and last day in dataSet doesn't equal current day then show previous day's data
else if(base==='today'&&dataSet[dsLength-1].DT.getDate()!=todaysDate.getDate()){var leftDT=new Date(dataSet[dsLength-1].DT.getTime());var rightDT=leftDT.getTime();// copy starting time
leftBar=0;for(var d=dsLength-1;d>=0;d--){if(dataSet[d]&&dataSet[d].DT.getDate()!=leftDT.getDate()){leftDT=new Date(+dataSet[d+1].DT);leftBar=d+1;break;}}l=leftBar;r=dsLength-1;}else{if(params.base!="all"&&(lt.getTime()>=dataSet[0].DT.getTime()||params.goIntoPast)){l=self.tickFromDate(lt,chart,null,true);}else{l=0;}if(params.base!="all"&&(rt.getTime()<=dataSet[dsLength-1].DT.getTime()||params.goIntoFuture)){r=self.tickFromDate(rt,chart);if(r>dsLength-1)r--;// do not include tick from any end date
}else{r=dsLength-1;}}var ticks=r-l+1;if(ticks<1){if(cb)cb(err);return;}var padding=params.padding||0;if(r<dsLength-1)padding=0;//var barsHaveWidth=self.mainSeriesRenderer && self.mainSeriesRenderer.barsHaveWidth;
var newCandleWidth=(chart.width-padding)/ticks;//*(barsHaveWidth?1:(1-1/(2*ticks)));  // deduct 1/2 the proposed candlewidth for the micropixel offset for line type charts
self.setCandleWidth(newCandleWidth,chart);chart.scroll=ticks-(r-dsLength)-1;self.micropixels=1;// this is done to allow crosshairs over first tick when candles are small
// line-type charts go center-to-center in the data point space, so we end up with 1/2 a candle empty on the left and the right..
//if(!barsHaveWidth) self.micropixels+=newCandleWidth/2; // line charts display to middle of candle
for(var p in self.panels){self.calculateYAxisMargins(self.panels[p].yAxis);}// only save the range for direct calls to setRange
if(!params.dontSaveRangeToLayout){delete params.chart;// having the chart in there causes an issue with cloning
delete layout.setSpan;// range and setSpan are mutually exclusive
layout.range=params;// save the range in the layout to be able to restore
}else{// setRange called from setSpan, remove range from layout
delete layout.range;}self.draw();self.changeOccurred("layout");if(cb)cb(err);}var loadMoreCount=0;// safety valve to eliminate infinite loop
function loadTheRange(err){if(err&&loadMoreCount===0){// change the periodicity, scroll and candle width back to original chart values
// if our initial fetch from the quotedriver failed.
chart.scroll=previousScroll;self.setCandleWidth(previousCandleWidth);self.layout.interval=previousInterval;self.layout.periodicity=previousPeriodicity;self.layout.timeUnit=previousTimeUnit;if(cb)cb(err);return;}loadMoreCount++;if(loadMoreCount>10){console.log("CIQ.ChartEngine.setRange(): Too many loads (10) from server. Stopping. Check periodicity logic.");showTheRange();return;}// Removed - we should never need to fetch more data after requesting a span
// Moreover, this created issues when setting a date only and fetching an intraday span - 
// code was being entered anyway since the masterData[0] was market open and lt was midnight.
/*if(chart.moreAvailable && chart.masterData[0] && chart.masterData[0].DT>lt){
				self.quoteDriver.checkLoadMore(chart, true, false, function(err){
					if(!err)
						loadTheRange();
					else
						showTheRange(err); // if there was an error on a subsequent fetch, then show as much as we were able to get.
				},true);
			}else{*/showTheRange();//}
}function estimateMaxTicks(rtMS,ltMS,interval,period,timeUnit,dontRoll){// how many ticks do we need at the requested periodicity to fill the screen
var ticks=0;var ms=rtMS-ltMS;if(CIQ.ChartEngine.isDailyInterval(interval)){if(interval=="month"){ticks=ms/CIQ.MONTH/period;}else if(interval=="week"){ticks=ms/CIQ.WEEK/period;}else{ticks=ms/CIQ.DAY/period;}}else{if(!isNaN(interval)){if(timeUnit=="millisecond")ticks=ms/(period*interval);else if(timeUnit=="second")ticks=ms/CIQ.SECOND/(period*interval);else ticks=ms/CIQ.MINUTE/(period*interval);}}return Math.round(ticks);// rough estimation...
}if(this.quoteDriver){var intervalToUse,periodToUse,timeUnitToUse;if(dontChangePeriodicity){intervalToUse=this.layout.interval;timeUnitToUse=this.layout.timeUnit;periodToUse=this.layout.periodicity;}else if(params.periodicity){// If the caller specifies the periodicity then we use that
var internalPeriodicity=CIQ.cleanPeriodicity(params.periodicity.period,params.periodicity.interval,params.periodicity.timeUnit);intervalToUse=internalPeriodicity.interval;timeUnitToUse=internalPeriodicity.timeUnit;periodToUse=internalPeriodicity.period;}else{// Set the periodicity according to the staticRangePeriodicityMap
// This will check the milliseconds of each range and choose the proper width
var rangeInMS=rt.getTime()-lt.getTime();if(!this.autoPickCandleWidth.turnOn){var periodicityMap=this.staticRangePeriodicityMap;var entryToUse=null;// Cycle through the periodicity map looking for the closest fit
for(var i=0;i<periodicityMap.length;i++){var mapEntry=periodicityMap[i];if(rangeInMS/mapEntry.rangeInMS<1.001){// inexact due to quote updates
entryToUse=mapEntry;break;}}intervalToUse=entryToUse.interval;periodToUse=entryToUse.periodicity;timeUnitToUse=entryToUse.timeUnit;}else{// Calculate the best periodicity dynamically according to the intervals
// set in dynamicRangePeriodicityMap
var pixelsPerBar=0;// use candlewidth set in the chart
if(this.autoPickCandleWidth.candleWidth){pixelsPerBar=this.autoPickCandleWidth.candleWidth;}// else choose candlewidth according to chart type
else{pixelsPerBar=this.barsHaveWidth[this.layout.chartType]?5:2;}var numBars=chart.width/pixelsPerBar;var possibleIntervals=this.dynamicRangePeriodicityMap;// default
intervalToUse=possibleIntervals[0].interval;periodToUse=1;var numBarsLastInterval;for(var j=0;j<possibleIntervals.length;j++){var numBarsThisInterval=rangeInMS/possibleIntervals[j].rangeInMS;if(numBarsThisInterval<numBars){if(possibleIntervals[j-1]){intervalToUse=possibleIntervals[j-1].interval;timeUnitToUse=possibleIntervals[j-1].timeUnit;periodToUse=Math.ceil(numBarsLastInterval/numBars);}else{intervalToUse=possibleIntervals[j].interval;timeUnitToUse=possibleIntervals[j].timeUnit;periodToUse=1;}break;}numBarsLastInterval=numBarsThisInterval;}}}// maintain the previous values just in case an error is thrown when getting new data
var previousScroll=this.chart.scroll;var previousCandleWidth=this.layout.candleWidth;var previousInterval=this.layout.interval;var previousPeriodicity=this.layout.periodicity;var previousTimeUnit=this.layout.timeUnit;// to prevent multiple fetches trying to get enough ticks for the selected range;
// maxticks,scroll and  candleWidth are used in CIQ.ChartEngine.Driver.barsToFetch and checkLoadMore() to deduce the number of ticks to fill the screen.
// So we need to set it here to prevent us from using the pre-setRange  values which are not going to be right.
// these are estimated, for the fetch, but will be properly recalculated by showTheRange();
this.chart.scroll=this.chart.maxTicks=estimateMaxTicks(rt.getTime(),lt.getTime(),intervalToUse,periodToUse,timeUnitToUse,this.dontRoll);this.layout.candleWidth=this.chart.width/this.chart.maxTicks;// logic to determine whether we have the right interval for what is needed
var needDifferentData=this.needDifferentData({period:periodToUse,interval:intervalToUse,timeUnit:timeUnitToUse});// if we need data from before what we have, fetch new data
if(Object.keys(this.chart.endPoints).length&&(this.chart.endPoints.begin>lt||this.chart.endPoints.end<rt))needDifferentData=true;if(!this.chart.masterData||!this.chart.masterData.length||needDifferentData||params.forceLoad){this.layout.interval=intervalToUse;this.layout.periodicity=periodToUse;this.layout.timeUnit=timeUnitToUse;if(!this.layout.timeUnit){if(CIQ.ChartEngine.isDailyInterval(this.layout.interval))this.layout.timeUnit=null;else if(this.layout.interval=="second")this.layout.timeUnit="second";// backward compatibility with heatmap
else if(this.layout.interval!="tick")this.layout.timeUnit="minute";}var qparams={symbol:chart.symbol,symbolObject:chart.symbolObject,chart:chart,nodraw:true};if(this.layout.interval=="tick"){// for 'tick' periodicity we have to request a specific range instead of # of ticks,
//since we can never be sure how many ticks will be in a particular range.
qparams.startDate=lt;qparams.endDate=rt;}if(!this.displayInitialized)qparams.initializeChart=true;//TODO, this is confusing to developers. They think it means newChart()
var minOffset=Math.max(this.quoteDriver.behavior.bufferSize+50,200);// ensure we have some data off page for continuity sake and ease of scrolling, while also accounting for about 50 possible gaps in the buffer zone.  Otherwise we end up paginating if there's a gap.
iter=this.standardMarketIterator(lt,null,chart);qparams.startDate=new Date(iter.previous(minOffset).getTime());iter=this.standardMarketIterator(rt,null,chart);qparams.endDate=new Date(iter.next(minOffset).getTime());if(qparams.endDate<Date.now())this.isHistoricalModeSet=true;else qparams.endDate=rt;this.clearCurrentMarketData(this.chart);this.quoteDriver.newChart(qparams,loadTheRange);}else{if(this.layout.interval!=intervalToUse||this.layout.periodicity!=periodToUse||this.layout.timeUnit!=timeUnitToUse||!this.chart.dataSegment||!this.chart.dataSegment[0]||this.chart.dataSegment[0].DT!=chart.inflectionPoint){this.layout.interval=intervalToUse;this.layout.periodicity=periodToUse;this.layout.timeUnit=timeUnitToUse;this.createDataSet();}loadTheRange();}}else{showTheRange();}};/**
	 * Sets the chart to display the requested time span.
	 *
	 * setSpan makes use of {@link CIQ.ChartEngine#setRange} by converting the span requested into a date range.
	 * All parameters in setSpan will be sent into setRange (except if 'all' is requested), so you can pre-load things like `params.periodicity` in setSpan for setRange to use.
	 *
	 * Example:
	 * <pre>
	 * stxx.setSpan ({
     *   multiplier: 5,
     *   base: "day",
     *   padding: 30,
     *   // pre load a parameter for setRange
     *   periodicity:{
     *   	period:1,
     *   	interval:5,
     *   	timeUnit:'minute'
     *   }
     * });
     * </pre>
     *
	 * Just keep in mind that if passing `periodicity.period` , `periodicity.timeUnit` and `periodicity.interval` to be used in {@link CIQ.ChartEngine#setRange} , then **DO NOT** set `maintainPeriodicity`. Otherwise, the requested periodicity will be ignored.
	 *
	 * If a quotefeed is attached to the chart (ver 04-2015 and up), setSpan will attempt to gather more data from the feed (IF NEEDED) to fulfill the requested range AND **may override the periodicity** to provide the most optimal chart display.
	 * So depending on your UI, **you may need to use the callback to refresh the periodicity displayed on your menu**.
	 * Please see {@link CIQ.ChartEngine#setRange} and {@link CIQ.ChartEngine#displayAll} for complete details on how the periodicity is calculated.
	 * <br>If there is no quotefeed attached (or using a version prior to 04-2015), then setStan will use whatever data is available in the masterData. So you must ensure you have preloaded enough to display the requested range.
	 *
	 * Calling {@link CIQ.ChartEngine#setPeriodicity} immediately after setting a span may cause all of the data to be re-fetched at a different periodicity than the one used by the requested span. Once you have set your initial periodicity for the chart, there is no need to manually change it when setting a new span unless you are using the `params.maintainPeriodicity` flag; in which case you want to call `setPeriodicity` **before** you set the span, so the setSpan call will use the pre-set periodicity.
	 * <br>Setting a span to `params.multiplier:7` `params.base:'days'` or `params.multiplier:1` `params.base:'week'`, for example, is really the same thing; same span of time. If what you are trying to do is tell the chart how you want the raw data to be fetched, that is done with {@link CIQ.ChartEngine#setPeriodicity} or by letting setSpan figure it out as described above.
	 * <br>Remember that by default, weekly and monthly data is calculated using daily raw ticks. If your feed returns data already rolled up in monthly or weekly ticks, you can override this behavior by setting `stxx.dontRoll` to `true` ( see {@link CIQ.ChartEngine#dontRoll}  and the {@tutorial Periodicity} tutorial)
	 *
	 * This function must be called **after** newChart() completes and creates a dataSet, or together with newChart() by setting the proper parameter values.
	 * If calling separately right after newChart(), be sure to call it in the newChart() callback!.
	 * See example in this section and {@link CIQ.ChartEngine#newChart} for more details and compatibility with your current version.
	 *
	 * **Note: ** versions prior to '2015-05-01' must use the legacy arguments : setSpan(multiplier, base, padding, char,useMarketTZ,cb), and related example in this section.
	 *
	 * ** Layout preservation and the span **
	 * <br>If `maintainPeriodicity` is not set, the selected span will be recorded in the chart {@link CIQ.ChartEngine#layout} when it is requested through {@link CIQ.ChartEngine#newChart}, or when you call setSpan directly.
	 * <br>It is then used in {@link CIQ.ChartEngine#importLayout} and {@link CIQ.ChartEngine#newChart} to reset that span, until a new periodicity is selected.
	 *
	 * @param {object} params Parameter for the function
	 * @param {number} params.multiplier   Number of base units to show. To show 3 weeks of data, for example, set this to 3 and `params.base` to 'week'.
	 * @param {string} params.base The base span to show. "minute","hour","day","week","month","year","all", "ytd" or "today".
	 * <br>This span will be combined with the multiplier. Example 2 days, 4 months.
	 * <br>** These spans are market hours sensitive **, so if you ask for 1 hour, for example, at the time the markets are close,
	 * the span will find the last time the markets where open for the active symbol, and include the last market hour in the span.
	 * It will also exclude days when the market is closed.
	 * <br>&bull; If 'all' data is requested, {@link CIQ.ChartEngine#displayAll} is called first to ensure all quotefeed data for that particular instrument is loaded. Note that 'all' will display the data in `monthly` periodicity unless otherwise specified. Please note that "all" will attempt to load all of the data the quotefeed has available for that symbol. Use this span with caution.
	 * <br>&bull; If 'today' is requested, the chart will display the current market day but extend the chart all the way to market close (as per market hours set in the active market definition - see {@link CIQ.Market})
	 * <br>&bull; If 1 'day' is requested --on market days--,the chart will start from same time on the previous market day, wich may be over a weekend. Example from 3:30 PM Friday to 3:30 PM Monday, if the market is closed Saturday and Sunday.
	 * <br>&bull; If 1 'day' is requested --on weekends and holidays-- or if 2 or more days are requested, the chart will will always start from market open of prior days.
	 * @param {boolean} [params.maintainPeriodicity] If set to true, it will maintain the current periodicity for the chart instead of trying to select the most optimal periodicity for the selected range. See {@link CIQ.ChartEngine#setRange} for details.
	 * <br>**Note:** if the chart is in `tick` periodicity, the periodicity will be automatically selected even if it was requested to be maintained because in `tick` periodicity we have no way to know how many ticks to get to fulfill the requested range.
	 * @param {number} [params.padding] Whitespace padding in pixels to apply to right side of chart after sizing for date range. If not set will default whitespace to 0.
	 * @param {boolean} [params.forceLoad] Forces a complete load (used by newChart)
	 * @param {CIQ.ChartEngine.Chart} [params.chart] Which chart, defaults to "chart"
	 * @param {Function} cb Optional callback
	 * @memberOf CIQ.ChartEngine
	 * @example
	 * // this displays 5 days. It can be called anywhere including buttons on the UI
	 *	stxx.setSpan ({
	 *		multiplier: 5,
	 *		base: "day",
	 *		padding: 30
	 *	});
	 * @example
	 * // using embedded span requirements on a newChart() call.
     * stxx.newChart(
     *      {symbol:newSymbol,other:'stuff'},
     *      null,
     *      null,
     *      callbackFunction(),
     *      {
     *           span:{base:'day',multiplier:2},
     *      }
     * );
	 * @example
	 * // Calling setSpan in the newChart() callback to ensure synchronicity.
     * stxx.newChart(
     *      {symbol:newSymbol,other:'stuff'},
     *      null,
     *      null,
     *      function(){
     *		 	stxx.setSpan ({
	 *				multiplier: 5,
	 *				base: "day",
	 *				padding: 30
	 *			});
     *      }
     * );
	 * @since
	 * <br>&bull; 04-2015: added "all", "today", "ytd" and automatic integration with {@link CIQ.QuoteFeed}
	 * <br>&bull; 15-07-01: params.period changed to params.multiplier for clarity
	 * <br>&bull; 15-07-01: params.interval changed to params.base for clarity
	 * <br>&bull; 05-2016-10: saves the set span in stxx.layout to be restored with the layout between sessions
	 * <br>&bull; 4.0.3 saves all parameters of the requested span in stxx.layout to be restored with the layout between sessions. Previously only `multiplier` and `base` were saved.
	 * <br>&bull; 5.0.0 when 1 'day' is requested data displayed will differ if current day is market day or the market is closed to ensure the span will have enough data.
	 */CIQ.ChartEngine.prototype.setSpan=function(params,cb){var period=arguments[0];var interval=arguments[1];var padding=arguments[2];var chart=arguments[3];if(_typeof(params)=="object"){period=params.period?params.period:params.multiplier?params.multiplier:1;interval=params.interval?params.interval:params.base?params.base:params.span?params.span:params.period;padding=params.padding;chart=params.chart;}else{params={period:period,interval:interval,padding:padding,chart:chart};cb=arguments[5];}// Do not force padding to 0 on setSpan
//if(!params.padding) params.padding=0;
if(!chart)chart=this.chart;var market=chart.market;interval=interval.toLowerCase();if(interval=="all"){params.dontSaveRangeToLayout=true;this.displayAll(params,cb);return;}var iter;var iterInterval=interval;var iterPeriod=1;if(interval=="today"){iterInterval="day";}else if(interval=="year"){iterInterval="month";iterPeriod=12;}var parms_copy=CIQ.shallowClone(params);var iter_parms={'begin':market.marketZoneNow(),'interval':iterInterval,'period':iterPeriod};var leftDT=iter_parms.begin;function zeroDT(dt){dt.setHours(0);dt.setMinutes(0);dt.setSeconds(0);dt.setMilliseconds(0);return dt;}var isForex=CIQ.Market.Symbology.isForexSymbol(chart.symbol);function forexAdjust(dt,advance){// The whole point of this function is to get a 1 day or today chart to start showing forex at 5pm the prior day instead of midnight,
// without breaking the whole market class in the process.
if(!isForex)return dt;var forexOffset=7;// 7 hours from open to midnight
if(advance)dt.setHours(dt.getHours()+forexOffset);// get it to the next day if it's after 5pm
else{// it's assumed dt time is midnight if code gets in here
dt.setHours(dt.getHours()-forexOffset);// start at 5pm prior trading day
if(!market.isMarketDate(dt))dt.setDate(dt.getDate()-2);// For the weekend
}return dt;}if(interval==='ytd'){leftDT=zeroDT(leftDT);leftDT.setMonth(0);leftDT.setDate(1);}else if(interval==="month"){leftDT=zeroDT(new Date());leftDT.setMonth(leftDT.getMonth()-period);}else if(interval==="year"){leftDT=zeroDT(new Date());leftDT.setFullYear(leftDT.getFullYear()-period);}else if(interval==="week"){leftDT=zeroDT(new Date());leftDT.setDate(leftDT.getDate()-period*7);}else if(interval==="day"&&period==1&&market.isMarketDay()){// Special case, 1 "day" --on market days-- will start from same time on previous market day
// 1 day in weekends and holidays or 2 or more days will always start from market open of prior days (last else)
var h=leftDT.getHours();var m=leftDT.getMinutes();var s=leftDT.getSeconds();var mm=leftDT.getMilliseconds();iter=market.newIterator(iter_parms);leftDT=iter.previous();leftDT.setHours(h,m,s,mm);leftDT=market._convertFromMarketTZ(leftDT);}else if(interval==="today"){iter_parms.begin=forexAdjust(leftDT,true);// forward and then back will land us on the most current valid market day
iter=market.newIterator(iter_parms);if(market.isOpen()||market.getPreviousOpen().getDate()==leftDT.getDate()){// if market opened, go ahead a day (we'll go back a day right after)
iter.next();}leftDT=iter.previous();forexAdjust(leftDT);parms_copy.goIntoFuture=true;parms_copy.dtRight=new Date(+leftDT);parms_copy.dtRight.setDate(leftDT.getDate()+1);parms_copy.dtRight=market._convertFromMarketTZ(parms_copy.dtRight);if(!isForex){leftDT.setHours(iter.market.zopen_hour);leftDT.setMinutes(iter.market.zopen_minute);leftDT.setSeconds(0);}leftDT=market._convertFromMarketTZ(leftDT);}else{if(interval=="day")iter_parms.begin=forexAdjust(leftDT,true);iter=market.newIterator(iter_parms);if(period==1)period++;leftDT=iter.previous(period-1);if(interval=="day")leftDT=market._convertFromMarketTZ(forexAdjust(leftDT));}parms_copy.dtLeft=leftDT;if(parms_copy.maintainPeriodicity){parms_copy.periodicity={};parms_copy.periodicity.interval=this.layout.interval;parms_copy.periodicity.period=this.layout.periodicity;}chart.spanLock=false;// unlock left edge
parms_copy.dontSaveRangeToLayout=true;// don't do certain things in setRange when being called from setSpan
var self=this;this.setRange(parms_copy,function(err){self.layout.setSpan=params;self.changeOccurred("layout");if(interval=="today"){chart.spanLock=true;// lock left edge of screen, in callback after we have fetched!
}if(cb)cb(err);});};//@private
// Foobarred function.  Does not handle today or all properly.  Assumes daily data.  Not called from anywhere.
CIQ.ChartEngine.prototype.getSpanCandleWidth=function(span){if(!span||!span.base||!span.multiplier)return;var num=parseFloat(span.multiplier);var base=span.base;var now=new Date();var prev=new Date();if(base=="year"){prev.setFullYear(prev.getFullYear()-num);}else if(base=="month"){prev.setMonth(prev.getMonth()-num);}else if(base=="day"){prev.setDate(prev.getDate()-num);}else if(base=="week"){prev.setDate(prev.getDate()-7*num);}else if(base=="YTD"){prev.setMonth(0);prev.setDate(1);}var diff=(now.getTime()-prev.getTime())/1000/60/60/24;diff=diff*5/7;var candleWidth=this.chart.width/diff;return candleWidth;};/**
	 * Sets a chart to display all data for a security.
	 *
	 * If no feed is attached, it will simply display all the data loaded in the present periodicity.
	 * <br>If the chart is driven by a QuoteFeed and no periodicity is requested, it will default to 'monthly'.
	 * It will then call QuoteDriver.loadAll() which makes multiple queries to ensure all data available from the quote feed is loaded.
	 * Once all the data is loaded, the chart will be set to cover that range using {@link CIQ.ChartEngine#setRange}
	 * @param {object} [params] Optional parameters in same format as {@link CIQ.ChartEngine#setSpan}.
	 * @param {Function} [cb] Callback, is called when chart is displayed.
	 * @since  04-2015
	 * @memberOf CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.displayAll=function(params,cb){var chart=this.chart;if(params&&params.chart)chart=params.chart;var self=this;function displayTheResults(){if(!chart.masterData||!chart.masterData.length)return;var p=CIQ.clone(params);p.dtLeft=chart.masterData[0].DT;p.dtRight=chart.masterData[chart.masterData.length-1].DT;// we already have the data, we just want to show it now. So make sure we maintain the periodicity so it won't fetch new one data
p.periodicity={};p.periodicity.interval=self.layout.interval;p.periodicity.period=self.layout.periodicity;p.periodicity.timeUnit=self.layout.timeUnit;self.setRange(p,function(err){self.layout.setSpan={base:params.base,multiplier:params.multiplier};self.changeOccurred("layout");for(var p in self.panels){self.calculateYAxisMargins(self.panels[p].yAxis);}self.draw();if(cb)cb(err);});}function loadAllTheData(err){if(!err)self.quoteDriver.loadAll(chart,displayTheResults);}// Case 1: no quoteFeed so display what we have
if(!this.quoteDriver){displayTheResults();return;}var periodicity=params.maintainPeriodicity?{period:this.layout.periodicity,interval:this.layout.interval}:{period:1,interval:"month"};periodicity=params.periodicity?params.periodicity:periodicity;periodicity=CIQ.cleanPeriodicity(periodicity.period,periodicity.interval,periodicity.timeUnit);var needDifferentData=this.needDifferentData(periodicity);this.layout.periodicity=periodicity.period;this.layout.interval=periodicity.interval;this.layout.timeUnit=periodicity.timeUnit;// Case 2: new symbol or new periodicity
if(params.forceLoad||needDifferentData){this.clearCurrentMarketData(this.chart);this.quoteDriver.newChart({noDraw:true,symbol:this.chart.symbol,symbolObject:this.chart.symbolObject,chart:this.chart,initializeChart:true,fetchMaximumBars:true},loadAllTheData);}else{// Case 3, the right interval is set but we don't have all the data
if(chart.moreAvailable){loadAllTheData();}else{// Case 4, the right interval is set and we have all the data
this.createDataSet();// Just in case the interval changed from month to day or vice versa
displayTheResults();}}};return _exports;};var __js_studies_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_studies_(_exports){//
// Type definitions
//
/**
	 * @typedef {object} minMax
	 * @property {number} min The minimum data point
	 * @property {number} max The maximum data point
	 */ /**
	 * @typedef {object} studyDescriptor
	 * @property {string} name The study's id.
			     * 
			     * ** Please note: ** To facilitate study name translations, study names use zero-width non-joiner (unprintable) characters to delimit the general study name from the specific study parameters. 
			     * Example: "\u200c"+Aroon+"\u200c"+(14). 
			     * At translation time, the library will split the text into pieces using the ZWNJ characters, parentheses and commas to just translate the required part of a study name. 
			     * For more information on ZWNJ characters see: [Zero-width_non-joiner](https://en.wikipedia.org/wiki/Zero-width_non-joiner). 
			     * Please be aware of these ZWNJ characters, which will now be present in all study names and corresponding panel names; including the `layout.studies` study keys. 
			     * Affected fields in the study descriptors could be `id	`, `display`, `name` and `panel`. 
			     * <br>To prevent issues, always use the names returned in the **study descriptor**. This will ensure compatibility between versions.
			     * >Example:
			     * ><br>Correct reference: 
			     * ><br>	`stxx.layout.studies["\u200c"+Aroon+"\u200c"+(14)];`
			     * ><br>Incorrect reference:
			     * ><br>	`stxx.layout.studies["Aroon (14)"];`
	 * @property {object} inputs Keys for each possible study input with descriptors for the set and default values
	 * @property {number} min The minimum data point
	 * @property {number} max The maximum data point
	 * @property {object} outputs Keys for each possible study output option
	 * @property {string} panel ID of the panel element the study is attached to
	 * @property {parameters} parameters Keys for each of the study's possible plot parameters
	 * @property {string} type The study type
	 */ //
// (end definitions)
//
// initialization for server-side studies
if(!_exports.CIQ)_exports.CIQ={};var CIQ=_exports.CIQ;/**
	 * Namespace for functionality related to studies (aka indicators). See {@tutorial Using and Customizing Studies} for additional details and a general overview about studies.
	 * @namespace
	 * @name  CIQ.Studies
	 */CIQ.Studies=function(){};/**
	 * Constants for when no inputs or outputs specified in studies.
	 * Values can be changed but do not change keys.
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.DEFAULT_INPUTS={"Period":14};CIQ.Studies.DEFAULT_OUTPUTS={"Result":"auto"};/**
	 * Array of study outputs which should be considered valid fields in the study dialog "Field" dropdown".
	 * This is autopopulated from {@link CIQ.Studies.displayStudies}.
	 * @type {Array}
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.actualOutputs=[];/**
	 * Maps the names of studies to the panel that they are drawn on. For instance, a moving average may be drawn on an RSI panel
	 * @type {Object}
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.studyPanelMap={};CIQ.Studies.colorPickerDiv=null;/**
	 * A study descriptor contains all of the information necessary to handle a study. READ ONLY.
	 *
	 * Do not try to manually create your own study descriptor, but rather always use the one returned by {@link CIQ.Studies.addStudy}
	 *
	 * @param {string} name	   The name of the study. This should be unique to the chart. For instance if there are two RSI panels then they should be of different periods and named accordingly. Usually this is determined automatically by the library.
	 * @param {string} type	   The type of study, which can be used as a look up in the StudyLibrary
	 * @param {string} panel	  The name of the panel that contains the study
	 * @param {object} inputs	 Names and values of input fields
	 * @param {object} outputs	Names and values (colors) of outputs
	 * @param {object} parameters Additional parameters that are unique to the particular study
	 * @memberOf CIQ.Studies
	 * @private
	 */CIQ.Studies.StudyDescriptor=function(name,type,panel,inputs,outputs,parameters){this.name=name;this.type=type;this.panel=panel;this.inputs=inputs;this.outputs=outputs;this.parameters=parameters;// Optional parameters, i.e. zones
this.outputMap={};// Maps dataSet label to outputs label "RSI (14)" : "RSI", for the purpose of figuring color
this.min=null;this.max=null;this.startFrom=0;this.subField="Close";// In case study is off a series
var libraryEntry=CIQ.Studies.studyLibrary[type];if(!libraryEntry){libraryEntry={};if(panel=="chart"||!panel&&parameters&&parameters.chartName=="chart")this.overlay=true;}if(typeof libraryEntry.inputs=="undefined")libraryEntry.inputs=CIQ.clone(CIQ.Studies.DEFAULT_INPUTS);if(typeof libraryEntry.outputs=="undefined")libraryEntry.outputs=CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS);this.study=libraryEntry;this.libraryEntry=libraryEntry;// deprecated, backwards compatibility
};/**
	 * Automatically generates a unique name for the study instance. If a translation callback has been associated with the chart
	 * object then the name of the study will be translated.
	 * @param  {CIQ.ChartEngine} stx A chart engine instance
	 * @param  {string} studyName Type of study
	 * @param  {object} inputs The inputs for this study instance
	 * @param {string} [replaceID] If it matches then return the same id
	 * @param {string} [customName] If this is supplied, use it to form the full study name. Otherwise `studyName` will be used. <br>ie: if custom name is 'SAMPLE', the unique name returned would resemble "SAMPLE(paam1,param2,param3,...)-X".
	 * @return {string} A unique name for the study
	 * @memberOf CIQ.Studies
	 * @since 5.1.1 added customName argument, if supplied, use it to form the full study name. Otherwise `studyName` will be used.
	 */CIQ.Studies.generateID=function(stx,studyName,inputs,replaceID,customName){var libraryEntry=CIQ.Studies.studyLibrary[studyName];var translationPiece="\u200C"+(customName||studyName)+"\u200C";// zero-width non-joiner (unprintable) to delimit translatable phrase
var id=translationPiece;if(libraryEntry){// only one instance can exist at a time if custom removal, so return study name
if(libraryEntry.customRemoval)return id;}if(!CIQ.isEmpty(inputs)){id+=" (";var first=false;for(var field in inputs){if(field=="id"||field=="display")continue;//skip these!
if(field=="Shading")continue;//this does not merit being in the studyname
var val=inputs[field];if(val=="field")continue;// skip default, usually means "Close"
val=val.toString();if(CIQ.Studies.prettify[val]!==undefined)val=CIQ.Studies.prettify[val];if(!first){first=true;}else{if(val)id+=",";}id+=val;}id+=")";}//this tests if replaceID is just a warted version of id, in that case keep the old id
if(replaceID&&replaceID.indexOf(id)===0)return replaceID;// If the id already exists then we'll wart it by adding -N
if(stx.layout.studies&&stx.layout.studies[id]){for(var i=2;i<50;i++){var warted=id+"-"+i;if(!stx.layout.studies[warted]){id=warted;break;}}}return id;};/**
	 * Generates an object that can be used to create a dialog for creating or modifying a study.
	 * The object will then contain arrays for inputs, outputs and parameters. Each
	 * input will describe a form field that should be generated. Each output will describe a color
	 * swatch that should be generated. The results of the dialog would then be passed to {@link CIQ.Studies.addStudy}.
	 * @param {object} params Object containing the following:
	 * @param  {string} [params.name] The libraryEntry key for the study to add.
	 * The [libraryEntry]{@link CIQ.Studies.studyLibrary} is the object that defines the prototype for a study.
	 * May contain attributes which are used to help construct the input fields of the study dialog.
	 * See documentation of {@link CIQ.Studies.studyLibrary} and [DialogHelper Object](tutorial-Using and Customizing Studies - Advanced.html#DialogHelper).
	 * Not needed if `params.sd` is present.
	 * @param  {studyDescriptor} [params.sd] A study descriptor; when requesting values for an existing study. If present, takes precedence over `params.name`. You may set the 'panelName' parameter to "panel" (sd.parameters.panelName), and this method will provide in the parameters object an array of valid panels, which you can present to the user as options to move the study to a different panel.
	 * @param  {CIQ.CIQ.ChartEngine} params.stx A chart object
	 * @name  CIQ.Studies.DialogHelper
	 * @constructor
	 * @example
	 * var helper=new CIQ.Studies.DialogHelper({name:"stochastics",stx:stxx});
	 * console.log('Inputs:',JSON.stringify(helper.inputs));
	 * console.log('Outputs:',JSON.stringify(helper.outputs));
	 * console.log('Parameters:',JSON.stringify(helper.parameters));
	 * @example
	 * // how to set 'panelName' to get a list of all available panels as part of the parameters object
	 * var sd = CIQ.Studies.addStudy(stxx, "Aroon");
	 * sd.parameters.panelName='panel';
	 * var dialogHelper = new CIQ.Studies.DialogHelper({"stx":stxx,"sd":sd});
	 * console.log('Parameters:',JSON.stringify(dialogHelper.parameters));
	 */CIQ.Studies.DialogHelper=function(params){var stx=this.stx=params.stx;var sd=this.sd=params.sd;this.name=sd?sd.type:params.name;this.inputs=[];this.outputs=[];this.parameters=[];var libraryEntry=this.libraryEntry=sd?sd.study:CIQ.Studies.studyLibrary[params.name];if(typeof libraryEntry.inputs=="undefined")libraryEntry.inputs=CIQ.clone(CIQ.Studies.DEFAULT_INPUTS);if(typeof libraryEntry.outputs=="undefined")libraryEntry.outputs=CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS);var panel=sd&&stx.panels[sd.panel]?stx.panels[sd.panel]:{chart:stx.chart};var chart=panel.chart;this.title=stx.translateIf(libraryEntry.name);this.attributes=libraryEntry.attributes;if(!this.attributes)this.attributes={};function hideTheField(fieldName,condition){if(!this.attributes[fieldName])this.attributes[fieldName]={};if(condition)this.attributes[fieldName].hidden=true;}/*
		This code loops through the acceptable inputs for the study in question. The format of the input default in the studyLibrary determines what type of input
		is required. For instance a number requires an input field. A string will produce a select box, of moving averages for instance if the string is "ma".
		If the string is "field" then a select box of acceptable fields is displayed. Likewise, an array will show up as a select box.
		 */for(var i in libraryEntry.inputs){var input={};this.inputs.push(input);input.name=i;input.heading=stx.translateIf(i);var acceptedData=libraryEntry.inputs[i];if(sd&&sd.inputs&&typeof sd.inputs[i]!="undefined"&&sd.inputs[i]!==null)input.value=sd.inputs[i];else input.value=libraryEntry.inputs[i];input.defaultInput=libraryEntry.inputs[i];if(!this.attributes[i])this.attributes[i]=CIQ.Studies.inputAttributeDefaultGenerator(input.defaultInput);if(acceptedData.constructor==Number){input.type="number";}else if(acceptedData.constructor==String){var isMA=CIQ.Studies.movingAverageHelper(stx,input.defaultInput);if(isMA){input.type="select";input.defaultInput=isMA;var converted=CIQ.Studies.movingAverageHelper(stx,input.value);if(!converted)converted=input.value;input.value=converted;input.options=CIQ.Studies.movingAverageHelper(stx,"options");}else if(acceptedData=="field"){input.type="select";input.options={};nextField:for(var field in chart.dataSet[chart.dataSet.length-1]){if(["Open","High","Low","Close","Adj_Close","hl/2","hlc/3","hlcc/4","ohlc/4",chart.defaultPlotField].indexOf(field)==-1){// field not an actual output but rather is just an intermediate value, so skip
if(CIQ.Studies.actualOutputs.indexOf(field)==-1)continue;// can't modify study basing it on its own output data, which is changing due to the same modify (infinite loop)
// can't modify study A basing it on another study B which uses study A data, this causes infinite loop as well
if(params.sd){for(var out in params.sd.outputMap){// here we make sure that the output, and not a warted version of it, is in the field before skipping it.
if(field.indexOf(out)!=-1&&field.indexOf(out+"-")==-1)continue nextField;}}}input.options[field]=stx.translateIf(field);}if(input.value=="field"){input.value="Close";}if(input.defaultInput=="field"){input.defaultInput="Close";}}else{input.type="text";}}else if(acceptedData.constructor==Boolean){input.type="checkbox";if(input.value===true||input.value=="true"||input.value=="on")input.value=true;}else if(acceptedData.constructor==Array){input.type="select";input.options={};for(var ii=0;ii<acceptedData.length;ii++){input.options[acceptedData[ii]]=stx.translateIf(acceptedData[ii]);}if(input.value.constructor==Array){input.value=input.value[0];}input.defaultInput=acceptedData[0];}}/*
		Outputs are much simpler than inputs. Outputs are simply a list of available outputs and the selected color for that output. So here
		we print a line item in the dialog for each output and attach a color picker to it. The color picker is obtained from the Context.
		 */for(i in libraryEntry.outputs){var output={name:i,heading:stx.translateIf(i)};if(!stx.defaultColor)stx.getDefaultColor();output.color=output.defaultOutput=libraryEntry.outputs[i];if(sd&&sd.outputs&&sd.outputs[i])output.color=sd.outputs[i];if(output.color=="auto")output.color=stx.defaultColor;this.outputs.push(output);}/* And now the parameters */var obj;var parameters=sd?sd.parameters:null;if(parameters){var myAxis=stx.getYAxisByName(panel,sd.name);var panelParameters={"Panel Name":{panelName:parameters.panelName,value:sd.overlay||sd.underlay?sd.panel:"Own panel"},"Underlay":{underlay:parameters.underlayEnabled,value:sd.underlay},"Y-Axis":{yaxisDisplay:parameters.yaxisDisplay,value:myAxis&&myAxis.position||(sd.overlay||sd.underlay?"shared":panel.yAxis.position||"default"),color:myAxis&&myAxis.textStyle?myAxis.textStyle:null}};for(var label in panelParameters){for(var name in panelParameters[label]){if(name=="value"||name=="color")continue;var defaults=panelParameters[label][name];if(defaults=="panel"){defaults=[];for(var pnl in stx.panels){if(pnl!=sd.name)defaults.push(pnl);}defaults.push("Own panel");}if(defaults&&defaults.constructor==Array){var options={};for(var pp=0;pp<defaults.length;pp++){options[defaults[pp]]=stx.translateIf(defaults[pp]);}obj={name:name,heading:stx.translateIf(label),defaultValue:defaults[0],value:panelParameters[label].value,options:options};if(panelParameters[label].color!==undefined){obj.defaultColor=stx.defaultColor;obj.color=panelParameters[label].color;parameters[name+"Value"]=obj.value;parameters[name+"Color"]=obj.color;}else{parameters[name]=obj.value;}obj.type='select';this.parameters.push(obj);}else if((defaults||defaults===false)&&defaults.constructor==Boolean){obj={name:name,heading:stx.translateIf(label),defaultValue:false,value:panelParameters[label].value};parameters[name+"Enabled"]=obj.value;obj.type='checkbox';this.parameters.push(obj);}}}hideTheField.call(this,"underlayEnabled",libraryEntry.underlay);hideTheField.call(this,"panelName",libraryEntry.seriesFN===null);hideTheField.call(this,"yaxisDisplayValue",libraryEntry.seriesFN===null||libraryEntry.yAxis&&libraryEntry.yAxis.noDraw);}if(libraryEntry.parameters){var init=libraryEntry.parameters.init;if(init){var libParameters=[];if(libraryEntry.parameters.template=="studyOverZones"){obj={name:"studyOverZones",heading:stx.translateIf("Show Zones"),defaultValue:init.studyOverZonesEnabled,value:init.studyOverZonesEnabled};if(parameters&&(parameters.studyOverZonesEnabled||parameters.studyOverZonesEnabled===false)){obj.value=parameters.studyOverZonesEnabled;}obj.type='checkbox';libParameters.push(obj);obj={name:"studyOverBought",heading:stx.translateIf("OverBought"),defaultValue:init.studyOverBoughtValue,value:init.studyOverBoughtValue,defaultColor:init.studyOverBoughtColor,color:init.studyOverBoughtColor};if(parameters&&parameters.studyOverBoughtValue)obj.value=parameters.studyOverBoughtValue;if(parameters&&parameters.studyOverBoughtColor)obj.color=parameters.studyOverBoughtColor;if(obj.color=="auto")obj.color=stx.defaultColor;obj.type='text';libParameters.push(obj);obj={name:"studyOverSold",heading:stx.translateIf("OverSold"),defaultValue:init.studyOverSoldValue,value:init.studyOverSoldValue,defaultColor:init.studyOverSoldColor,color:init.studyOverSoldColor};if(parameters&&parameters.studyOverSoldValue)obj.value=parameters.studyOverSoldValue;if(parameters&&parameters.studyOverSoldColor)obj.color=parameters.studyOverSoldColor;if(obj.color=="auto")obj.color=stx.defaultColor;obj.type='text';libParameters.push(obj);if(!this.attributes.studyOverBoughtValue)this.attributes.studyOverBoughtValue={};if(!this.attributes.studyOverSoldValue)this.attributes.studyOverSoldValue={};this.parameters=libParameters.concat(this.parameters);// lib parameters come first
}}}};/**
	 * Update (or add) the study attached to the DialogHelper.
	 * 
	 * Once added or modified, the new study descriptor will be stored in the `sd` object of the DialogHelper.
	 * 
	 * @param  {Object} updates If updating, it should contain an object with updates to the `inputs`, `outputs` and `parameters` object used in {@link CIQ.Studies.addStudy}.  A new study ID will be created using the default format or parameters.replaceID, if provided.
	 * @memberOf CIQ.Studies.DialogHelper
	 * @example
	 * var helper=new CIQ.Studies.DialogHelper({sd:sd, stx:stx});
	 * helper.updateStudy({inputs:{Period:60}});
	 * var updatedStudy = helper.sd;
	 * @example
	 * // add the study
	 * var initialStudy = CIQ.Studies.addStudy(stxx, "Aroon");
	 * 
	 * // move it to the primary (chart) panel
	 * var dialogHelper = new CIQ.Studies.DialogHelper({"stx":stxx,"sd": initialStudy});
	 * dialogHelper.updateStudy({"parameters":{"panelName":"chart"}});
	 * 
	 * // capture the updated study descriptor for future use ( the initialStudy can not be used any more as the actual study has changed when it was moved )
	 * var updatedStudy = dialogHelper.sd;
	 * 
	 * // move the updated study back to its own panel
	 * var dialogHelper = new CIQ.Studies.DialogHelper({"stx":stxx,"sd":updatedStudy});
	 * dialogHelper.updateStudy({"parameters":{"panelName":"Own panel"}});
	 */CIQ.Studies.DialogHelper.prototype.updateStudy=function(updates){var newParams={};var sd=this.sd;var libraryEntry=this.libraryEntry;if(!libraryEntry)libraryEntry={};if(!sd)sd=libraryEntry;newParams.inputs=CIQ.shallowClone(sd.inputs);newParams.outputs=CIQ.clone(sd.outputs);newParams.parameters=CIQ.shallowClone(sd.parameters);CIQ.extend(newParams,updates);if(!newParams.parameters)newParams.parameters={};if(newParams.inputs&&newParams.inputs.id){this.sd=CIQ.Studies.replaceStudy(this.stx,newParams.inputs.id,this.name,newParams.inputs,newParams.outputs,newParams.parameters,null,sd.study);}else{this.sd=CIQ.Studies.addStudy(this.stx,this.name,newParams.inputs,newParams.outputs,newParams.parameters,null,sd.study);}};/**
	 * Prepares a study descriptor for use by assigning default calculation or display functions if required and configuring the outputMap
	 * which is used internally to determine the color for each output. This method also places any overlays into the stx.overlays array for
	 * future reference. Finally it is responsible for rebuilding any derived studies when replacing an underlying study.
	 * @private
	 * @param  {CIQ.ChartEngine} stx A chart object
	 * @param  {object} study The study library entry
	 * @param  {studyDescriptor} sd The study descriptor being prepared
	 * @param  {object} [parameters] Object containing any of the following options:
	 * @param  {boolean} [parameters.replaceID] Remove any overlays that relies on the old panel ID name
	 * @param  {boolean} [parameters.calculateOnly] If true, do not draw the study, just calculate its values
	 * @memberOf CIQ.Studies
	 * @since 6.2.0 added calculateOnly parameter
	 */CIQ.Studies.prepareStudy=function(stx,study,sd,parameters){if(typeof study.calculateFN=="undefined")study.useRawValues=true;//if(typeof(study.seriesFN)=="undefined") study.seriesFN=CIQ.Studies.displaySeriesAsLine;
if(parameters&&parameters.replaceID){// Remove any overlays that relied on the old panel ID name, for instance a moving average on RSI(14) is no
CIQ.Studies.rejiggerDerivedStudies(stx,parameters.replaceID,sd.inputs.id,sd.panel);delete parameters.replaceID;}// Unless overridden by the calculation function we assume the convention that the dataSet entries
// will begin with the output name such as "RSI rsi (14)"
if(CIQ.isEmpty(sd.outputMap)){for(var i in sd.outputs){if(study.useRawValues){sd.outputMap[i]=i;}else{sd.outputMap[i+" "+sd.name]=i;}}}if(sd.overlay||sd.underlay){stx.addOverlay(sd);}if(!stx.currentlyImporting&&!(parameters&&parameters.calculateOnly)){// silent mode while importing
if(sd.chart.dataSet)stx.createDataSet();stx.draw();}};/**
	 * Fixes any derived studies that were based off of a study that has just changed.
	 * For instance a moving average on another overlay, or a moving average on an RSI.
	 * The panel name needs to change and the input "Field".
	 * @param  {CIQ.ChartEngine} stx	   The stx instance
	 * @param  {string} replaceID The old ID for the underlying study e.g. RSI (14)
	 * @param  {string} newID	 The new ID for the underlying study
	 * @since 5.2.0 removed panelID argument
	 */CIQ.Studies.rejiggerDerivedStudies=function(stx,replaceID,newID){var studies=stx.layout.studies;for(var s in studies){var st=studies[s];if(st.panel==replaceID)st.panel=newID;var inputs=st.inputs;var derivedID=inputs.id;if(inputs.id.indexOf(replaceID)!=-1&&inputs.id.indexOf(replaceID+"-")==-1){//check if exact field (and not warted one) exists in input
var newDerivedID=inputs.id.replace(replaceID,newID);// The new ID, naively accomplished with string replace
var stNeedsReplacement=false;var fieldInputs=CIQ.Studies.getFieldInputs(st);for(var f=0;f<fieldInputs.length;f++){if(inputs[fieldInputs[f]].indexOf(replaceID)!=-1){// Yuck, we should implement actual parent
var oldName=st.name;inputs[fieldInputs[f]]=inputs[fieldInputs[f]].replace(replaceID,newID);// Adjust the field name, tricky because the field name is "output (id)" and we don't really know the outputs
inputs.id=inputs.id.replace(replaceID,newID);inputs.display=inputs.display.replace(replaceID,newID);st.name=st.name.replace(replaceID,newID);st.outputMap={};for(var i in st.outputs){if(st.study.useRawValues){st.outputMap[i]=i;}else{st.outputMap[i+" "+st.name]=i;}}stNeedsReplacement=true;}}if(stNeedsReplacement)CIQ.Studies.replaceStudy(stx,derivedID,st.type,st.inputs,st.outputs,st.parameters);}}};/**
	 * Removes any series that the study is referencing
	 * @param {object} sd 			Study descriptor
	 * @param {CIQ.ChartEngine} stx The chart engine
	 * @memberOf CIQ.Studies
	 * @since 3.0.0
	 * @since  3.0.7 changed "name" argument to take a study descriptor
	 * @since  3.0.7 added required stx argument
	 */CIQ.Studies.removeStudySymbols=function(sd,stx){if(sd.series){for(var s in sd.series){stx.deleteSeries(sd.series[s],null,{action:"remove-study"});}}//stx.draw();
};/**
	 * Replaces an existing study with new inputs, outputs and parameters. When using this method
	 * a study's position in the stack will remain the same. Derived (child) studies will shift to
	 * use the new study as well
	 * @param {CIQ.ChartEngine} stx		The chart object
	 * @param {string} id 		The id of the current study. If set, then the old study will be replaced
	 * @param {string} type	   The name of the study (out of the studyLibrary)
	 * @param {object} [inputs]	 Inputs for the study instance. Default is those defined in the studyLibrary.
	 * @param {object} [outputs]	Outputs for the study instance. Default is those defined in the studyLibrary.
	 * @param {object} [parameters] additional custom parameters for this study if supported or required by that study
	 * @param {string} [panelName] Optionally specify the panel. If not specified then an attempt will be made to locate a panel based on the input id or otherwise created if required.
	 * @param {object} [study] Optionally supply a study definition, overriding what may be found in the study library
	 * @return {object} A study descriptor which can be used to remove or modify the study.
	 * @since 3.0.0 added study argument
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.replaceStudy=function(stx,id,type,inputs,outputs,parameters,panelName,study){if(!parameters)parameters={};if(id)parameters.replaceID=id;if(inputs.id==inputs.display)delete inputs.display;delete inputs.id;var sd=stx.layout.studies[parameters.replaceID];CIQ.Studies.removeStudySymbols(sd,stx);if(stx.quoteDriver)stx.quoteDriver.updateSubscriptions();return CIQ.Studies.addStudy(stx,type,inputs,outputs,parameters,panelName,study);};/**
	 * Adds or replace a study on the chart. A layout change event is triggered when this occurs. See {@tutorial Using and Customizing Studies} for more details.
	 * <P>Example: <iframe width="800" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/5y4a0kry/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 * Optionally you can define an event listener to call a custom function that can handle initialization of a dialog box for editing studies.
	 * If there is no listener set, the edit study buttons/functionality will not appear.
	 * The 'Study Edit' feature is standard functionality in the advanced package.
	 * See Examples for exact function parameters and return value requirements.
	 * Please note that these listeners must be set **before** you call importLayout. Otherwise your imported studies will not have an edit capability.
	 *
	 * @param {CIQ.ChartEngine} stx		The chart object
	 * @param {string} type	   The name of the study (object key on the {@link CIQ.Studies.studyLibrary})
	 * @param {object} [inputs]	 Inputs for the study instance. Default is those defined in the studyLibrary. Note that if you specify this object, it will be combined with (override) the library defaults. To bypass a library default, set that field to null.
	 * @param {string} [inputs.id] The id of the current study. If set, then the old study will be replaced
	 * @param {string} [inputs.display] The display name of the current study. If not set, a name generated by {@link CIQ.Studies.prettyDisplay} will be used. Note that if the study descriptor defines a `display` name, the study descriptor name will allays override this parameter.
	 * @param {object} [outputs]	Outputs for the study instance. Default is those defined in the studyLibrary. Values specified here will override those in the studyLibrary.
	 * @param {object} [parameters] Additional custom parameters for this study if supported or required by that study. Default is those defined in the {@link CIQ.Studies.studyLibrary}.
	 * @param {object} [parameters.replaceID] If `inputs.id` is specified, this value can be used to set the new ID for the modified study( will display as the study name on the study panel). If omitted the existing ID will be preserved.
	 * @param {object} [parameters.display] If this is supplied, use it to form the full study name. Otherwise `studyName` will be used. Is both `inputs.display` and `parameters.display` are set, `inputs.display` will always take precedence.<br>ie: if custom name is 'SAMPLE', the unique name returned would resemble "SAMPLE(param1,param2,param3,...)-X".
	 * @param {object} [parameters.calculateOnly] Only setup the study for calculations and not display.  If this is supplied, UI elements will not be added.
	 * @param {string} [panelName] Optionally specify the panel. The relationship between studies and their panels is kept in {@link CIQ.Studies.studyPanelMap}. If not specified then an attempt will be made to locate a panel based on the input id or otherwise created if required. Multiple studies can be overlaid on any panel.
	 * @param {object} [study] Optionally supply a study definition, overriding what may be found in the study library
	 * @return {studyDescriptor} A study descriptor which can be used to remove or modify the study.
	 * @since
	 * <br>&bull; 3.0.0 added study argument
	 * <br>&bull; 5.1.1 `parameters.display` added. If this is supplied, use it to form the full study name.
	 * <br>&bull; 5.2.0 multiple studies can be overlaid on any panel using the `panelName` parameter.
	 * @memberOf CIQ.Studies
	 * @example <caption>Add a volume underlay study with custom colors:</caption>
	 * CIQ.Studies.addStudy(stxx, "vol undr", {}, {"Up Volume":"#8cc176","Down Volume":"#b82c0c"});
	 * @example <caption>This is an example of the expected stxx.editCallback function for version prior to version 2015-07-01:</caption>
	 * stxx.editCallback=function(stx, sd){
	 *	// your code here
	 *	return $$("studyDialog"); // This is a reference to the actual HTML dialog container that can be filled by studyDialog.
	 * };
	 * @example <caption>Define the edit function for study Panels:</caption>
	 * var params={stx:stx,sd:sd,inputs:inputs,outputs:outputs, parameters:parameters};
	 * stxx.addEventListener("studyOverlayEdit", function(studyData){
	 *		// your code here
	 * });
	 * @example <caption>Define the edit function for study overlays:</caption>
	 * stxx.addEventListener("studyOverlayEdit", function(studyData){
	 *	  CIQ.alert(studyData.sd.name);
	 *	  var helper=new CIQ.Studies.DialogHelper({name:studyData.sd.type,stx:studyData.stx});
	 *	  console.log('Inputs:',JSON.stringify(helper.inputs));
	 *	  console.log('Outputs:',JSON.stringify(helper.outputs));
	 *	  console.log('Parameters:',JSON.stringify(helper.parameters));
	 *	  // call your menu here with the  data returned in helper
	 *	  // modify parameters as needed and call addStudy or replaceStudy 
	 * });
	 * @example <caption>Add an Aroon study with a custom display name:</caption>
	 * CIQ.Studies.addStudy(stxx, "Aroon",null,null,{display:'Custom Name'});
	*/CIQ.Studies.addStudy=function(stx,type,inputs,outputs,parameters,panelName,study){var libraryEntry=study?study:CIQ.Studies.studyLibrary[type];if(!parameters)parameters={};if(libraryEntry){if(libraryEntry.inputs){// Default to the library inputs
var libraryInputs=CIQ.shallowClone(libraryEntry.inputs);for(var i in libraryInputs){// But set any arrays to the default (the first item in the array)
if(libraryInputs[i]instanceof Array)libraryInputs[i]=libraryInputs[i][0];}// Now override the library inputs with anything the user passed in
inputs=CIQ.extend(libraryInputs,inputs);}if(libraryEntry.outputs){outputs=CIQ.extend(CIQ.clone(libraryEntry.outputs),outputs);}var libraryParameters=libraryEntry.parameters;if(libraryParameters&&libraryParameters.init){parameters=CIQ.extend(CIQ.shallowClone(libraryParameters.init),parameters);}if(libraryParameters&&!parameters.display){parameters.display=libraryParameters.display;}}if(!inputs)inputs=CIQ.clone(CIQ.Studies.DEFAULT_INPUTS);if(!outputs)outputs=CIQ.clone(CIQ.Studies.DEFAULT_OUTPUTS);if(!parameters.chartName)parameters.chartName="chart";if(inputs.Period<1)inputs.Period=1;// periods can't be less than one candle. This is a general safety check. Each study should have a check or add input validation.
if(!inputs.id){inputs.id=CIQ.Studies.generateID(stx,type,inputs,parameters.replaceID,parameters.display);}var sd=null;if(libraryEntry&&libraryEntry.initializeFN){sd=libraryEntry.initializeFN(stx,type,inputs,outputs,parameters,panelName,study);}else{sd=CIQ.Studies.initializeFN(stx,type,inputs,outputs,parameters,panelName,study);}if(!sd){console.log("CIQ.Studies.addStudy: initializeFN() returned null for "+type);return;}study=sd.study;sd.chart=stx.charts[parameters.chartName];if(!stx.layout.studies)stx.layout.studies={};// removed following line because it causes modified studies to be re-added out of sequence causing issues if there are dependencies
// so instead of deleting and adding to the end of the array, we just replace the data with the new sd
//delete stx.layout.studies[sd.inputs.id]; // for good measure, in case of orphaned studies
stx.layout.studies[sd.inputs.id]=sd;sd.type=type;sd.permanent=study.permanent;sd.customLegend=study.customLegend;var panel=stx.panels[sd.panel];CIQ.Studies.prepareStudy(stx,study,sd,parameters);//if(!stx.currentlyImporting) CIQ.Studies.checkSymbolChanged(stx, sd, "add-study");
if(stx.quoteDriver)stx.quoteDriver.updateSubscriptions();stx.changeOccurred("layout");var hasEditCallback=false;var isPanelStudy=!(sd.overlay||sd.underlay);if(isPanelStudy&&study.horizontalCrosshairFieldFN){panel.horizontalCrosshairField=study.horizontalCrosshairFieldFN(stx,sd);}if(stx.editCallback){hasEditCallback=true;}else if(isPanelStudy){if(stx.callbacks.studyPanelEdit||stx.callbackListeners.studyPanelEdit&&stx.callbackListeners.studyPanelEdit.length)hasEditCallback=true;}else{if(stx.callbacks.studyOverlayEdit||stx.callbackListeners.studyOverlayEdit&&stx.callbackListeners.studyOverlayEdit.length)hasEditCallback=true;}if(hasEditCallback){parameters.editMode=true;var hasInput=false;for(var input in sd.inputs){if(input=="id")continue;if(input=="display")continue;hasInput=true;break;}if(!hasInput){for(var output in sd.outputs){hasInput=true;break;}}if(hasInput){var editFunction;if(typeof sd.study.edit!="undefined"){if(sd.study.edit){editFunction=function(stx,sd,inputs,outputs){return function(){CIQ.clearCanvas(stx.chart.tempCanvas,stx);// clear any drawing in progress
sd.study.edit(sd,{stx:stx,inputs:inputs,outputs:outputs,parameters:parameters});};}(stx,sd,inputs,outputs,parameters);stx.setPanelEdit(panel,editFunction);sd.editFunction=editFunction;}}else if(!isPanelStudy){editFunction=function(stx,sd,inputs,outputs,parameters){return function(forceEdit){CIQ.clearCanvas(stx.chart.tempCanvas,stx);// clear any drawing in progress
stx.dispatch("studyOverlayEdit",{stx:stx,sd:sd,inputs:inputs,outputs:outputs,parameters:parameters,forceEdit:forceEdit});};}(stx,sd,inputs,outputs,parameters);sd.editFunction=editFunction;}else{if(stx.editCallback){// deprecated legacy support
editFunction=function(stx,sd,inputs,outputs){return function(){var dialogDiv=stx.editCallback(stx,sd);CIQ.clearCanvas(stx.chart.tempCanvas,stx);// clear any drawing in progress
CIQ.Studies.studyDialog(stx,type,dialogDiv,{inputs:inputs,outputs:outputs,parameters:parameters});};}(stx,sd,inputs,outputs,parameters);if(panel.name!="chart"){stx.setPanelEdit(panel,editFunction);}}else{editFunction=function(stx,sd,inputs,outputs,parameters){return function(){CIQ.clearCanvas(stx.chart.tempCanvas,stx);// clear any drawing in progress
stx.dispatch("studyPanelEdit",{stx:stx,sd:sd,inputs:inputs,outputs:outputs,parameters:parameters});};}(stx,sd,inputs,outputs,parameters);if(panel.name!="chart"){stx.setPanelEdit(panel,editFunction);sd.editFunction=editFunction;}}}}}if(!parameters.calculateOnly)stx.draw();// we put this extra draw here in case of study parameters which affect the appearance of the y-axis, since adding a y-axis calls draw() but before the layout has changed.
return sd;};/** @deprecated **/CIQ.Studies.quickAddStudy=CIQ.Studies.addStudy;/**
	 * Removes a study from the chart (and panel if applicable)
	 * @param  {CIQ.ChartEngine} stx A chart object
	 * @param  {studyDescriptor} sd  A study descriptor returned from {@link CIQ.Studies.addStudy}
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.removeStudy=function(stx,sd){if(sd.overlay||sd.underlay){stx.removeOverlay(sd.name);stx.draw();}else{var panel=stx.panels[sd.panel];if(panel)stx.panelClose(panel);}};/**
	 * <span class="animation">Animation Loop</span>
	 * This method displays all of the studies for a chart. It is called from within the chart draw() loop.
	 * @param  {CIQ.ChartEngine} stx The charting object
	 * @param {CIQ.ChartEngine.Chart} chart Which chart to display studies for
	 * @param {Boolean} [underlays=false] If set to true then underlays only will be displayed, otherwise underlays will be skipped
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.displayStudies=function(stx,chart,underlays){var s=stx.layout.studies;if(!s)return;if(underlays)CIQ.Studies.actualOutputs=[];var permanentPanel={};// local map of permanent panels
permanentPanel[chart.name]=true;// no X on chart panel
for(var n in s){var sd=s[n];var study=sd.study;if(!study)continue;if(underlays){if(!sd.underlay)continue;}else{if(sd.underlay)continue;}var rendererConfigs=CIQ.clone(study.renderer);if(rendererConfigs&&!(rendererConfigs instanceof Array))rendererConfigs=[rendererConfigs];var panel=stx.panels[sd.panel];if(panel){if(panel.chart!=chart)continue;//TODO: get rid of orphaned overlay study?
if(panel.hidden)continue;if(!permanentPanel[panel.name]){var permanent=sd.permanent||!stx.manageTouchAndMouse;if(panel.closeX){if(permanent)panel.closeX.style.display="none";}else if(panel.close){if(permanent)panel.close.style.display="none";}if(panel.edit){if(permanent)panel.edit.style.display="none";}permanentPanel[panel.name]=permanent;}}else{//orphaned panel study, kill it
delete s[n];continue;}var quotes=sd.chart.dataSegment;// Find the appropriate data to drive this study
for(var i in sd.outputMap){CIQ.Studies.actualOutputs.push(i);CIQ.Studies.studyPanelMap[i]=sd;}// change the panel if it's an overlay and the underlying field has changed
var fieldInputs=CIQ.Studies.getFieldInputs(sd);if(sd.panel==sd.parameters.chartName&&(!sd.parameters||!sd.parameters.panelName)){for(var f=0;f<fieldInputs.length;f++){if(sd.inputs[fieldInputs[f]]){var mapEntry=CIQ.Studies.studyPanelMap[sd.inputs[fieldInputs[f]]];if(mapEntry){sd.panel=mapEntry.panel;break;}}}}if(typeof study.seriesFN=="undefined"){// null means don't display, undefined means display by default as a series
if(rendererConfigs){if(!sd.overlay)CIQ.Studies.createYAxis(stx,sd,quotes,panel);for(var r=0;r<rendererConfigs.length;r++){var params=rendererConfigs[r];// Get the input-specific output name from the outputMap.  At this point params.field is just the output name,
// without any inputs. For example, "RSI" vs "RSI (14)".  Here we set it to the actual name used in dataSegment.
for(var om in sd.outputMap){if(sd.outputMap[om]==params.field)params.field=om;}if(!params.field)continue;params.panel=sd.panel;var binding=params.binding;// Binding is the ability to attach the color chosen by the user to a particular renderer property.
if(binding){for(var m in binding){var color=CIQ.Studies.determineColor(sd.outputs[binding[m]]);if(color&&color!="auto")params[m]=color;/*For future implementation
								if(typeof(sd.outputs[binding[m]])=="object"){
									params.pattern=sd.outputs[binding[m]].pattern;
									params.width=sd.outputs[binding[m]].width;
								}*/}}params.yAxis=null;// not allowed to specify y axis in these renderers
var renderer=CIQ.Renderer.produce(params.type,params);renderer.stx=stx;renderer.attachSeries(null,params).draw();}}else{CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);}if(panel)CIQ.Studies.displayError(stx,sd);}else{if(study.seriesFN){if(panel){study.seriesFN(stx,sd,quotes);CIQ.Studies.displayError(stx,sd);}}}}};/**
	 * This method displays a watermark on a panel for a study with sd.error set.
	 * The sd.error property can be set to true, which will display the default message "Not enough data to compute XXX"
	 * or it can be set to a custom string which will be displayed as supplied.
	 * @param  {CIQ.ChartEngine} stx The charting object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {Object} [params]	additional options to customize the watermark
	 * @param  {string} [params.panel]	name of the panel on which to display the error, defaults to sd.panel
	 * @param  {string} [params.h]	watermark horizontal position
	 * @param  {string} [params.v]	watermark vertical position
	 * @memberOf CIQ.Studies
	 * @since
	 * <br>&bull; 3.0.0
	 * <br>&bull; 4.0.0 Displays one error per panel, added params argument
	 */CIQ.Studies.displayError=function(stx,sd,params){var panel=params&&params.panel?params.panel:sd.panel,state=stx.panels[panel].state;if(state.studyError||!sd.error||typeof practiceMode!=='undefined'&&practiceMode)return;params=params||{h:'center',v:'bottom'};params.text=state.studyError=sd.error===true?stx.translateIf('Not enough data to compute ')+stx.translateIf(sd.study.name):stx.translateIf(sd.error);stx.watermark(panel,params);};/**
	 * Convenience function for determining the min and max for a given data point
	 * @param {CIQ.ChartEngine} stx The chart
	 * @param {string} name The field to evaluate
	 * @param {array} quotes The array of quotes to evaluate (typically dataSet, scrubbed or dataSegment)
	 * @memberOf CIQ.Studies
	 * @return {minMax} Object containing the min and max data point values
	 */CIQ.Studies.calculateMinMaxForDataPoint=function(stx,name,quotes){var min=Number.MAX_VALUE;var max=Number.MAX_VALUE*-1;for(var i=0;i<quotes.length;i++){var m=quotes[i][name];if(m===null||typeof m=="undefined")continue;if(isNaN(m))continue;min=Math.min(m,min);max=Math.max(m,max);}return{"min":min,"max":max};};/**
	 * Method to determine the minimum and maximum points in a study panel.
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {array} quotes The set of quotes to evaluate
	 * @memberOf CIQ.Studies
	 * @deprecated Since 5.2.0. This calculation is done in {@link CIQ.ChartEngine.AdvancedInjectable#initializeDisplay} and is no longer a separate function.
	 */CIQ.Studies.determineMinMax=function(stx,sd,quotes){};/**
	 * Retrieves parameters to be used to draw the Y Axis, retrieved from the study library.
	 * If a range is set in the study library, the yAxis high and low properties are set.
	 * Invoked by {@link CIQ.ChartEngine.renderYAxis} before createYAxis
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {CIQ.ChartEngine.YAxis} yAxis	 The axis to act upon
	 * @return {object} y-axis parameters such as noDraw, range, and ground
	 * @memberOf CIQ.Studies
	 * @since 5.2.0
	 *
	 */CIQ.Studies.getYAxisParameters=function(stx,yAxis){var parameters={};var sd=stx.layout.studies&&stx.layout.studies[yAxis.name];if(sd){var study=sd.study;if(study.yaxis||study.yAxisFN){parameters.noDraw=true;}else{// If zones are enabled then we don't want to draw the yAxis
if(study.parameters&&study.parameters.excludeYAxis)parameters.noDraw=true;parameters.ground=study.yAxis&&study.yAxis.ground;if(yAxis){if(study.range!="bypass"){if(study.range=="0 to 100")parameters.range=[0,100];else if(study.range=="-1 to 1")parameters.range=[-1,1];else{if(study.range=="0 to max"){parameters.range=[0,Math.max(0,yAxis.high)];}else if(study.centerline||study.centerline===0){parameters.range=[Math.min(study.centerline,yAxis.low),Math.max(study.centerline,yAxis.high)];}}}if(parameters.range){yAxis.low=parameters.range[0];yAxis.high=parameters.range[1];}if(sd.min)yAxis.min=sd.min;if(sd.max)yAxis.max=sd.max;if(sd.parameters&&sd.parameters.studyOverZonesEnabled)parameters.noDraw=true;}}}return parameters;};// <code>init:{studyOverZonesEnabled:true, studyOverBoughtValue:70, studyOverBoughtColor:"auto", studyOverSoldValue:30, studyOverSoldColor:"auto"}</code>
//
/**
	 * studyOverZones will be displayed and Peaks & Valleys will be filled if corresponding thresholds are set in the study library as follows:
	 * Invoked by {@link CIQ.ChartEngine.renderYAxis} after createYAxis
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {CIQ.ChartEngine.YAxis} yAxis	 The axis to draw upon
	 * @memberOf CIQ.Studies
	 * @since 5.2.0
	 *
	 */CIQ.Studies.doPostDrawYAxis=function(stx,yAxis){for(var s in stx.layout.studies){var sd=stx.layout.studies[s];var panel=stx.panels[sd.panel];if(!panel||panel.hidden)continue;var studyAxis=stx.getYAxisByName(sd.panel,sd.name)||panel.yAxis;if(studyAxis!=yAxis)continue;var study=sd.study;if(yAxis.name==sd.name){// only draw the custom yAxis for a panel study, not an overlay
if(study.yaxis)study.yaxis(stx,sd);// backward compatibility
if(study.yAxisFN)study.yAxisFN(stx,sd);// Use yAxisFN for forward compatibility
}CIQ.Studies.drawZones(stx,sd);if(!sd.error){var centerline=study.centerline;if(centerline||centerline===0||centerline!==null&&yAxis.highValue>0&&yAxis.lowValue<0){CIQ.Studies.drawHorizontal(stx,sd,null,centerline||0,yAxis);}}}};/**
	 * Creates the yAxis for a study panel.
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {array} quotes The set of quotes (representing dataSegment)
	 * @param  {CIQ.ChartEngine.Panel} panel  A reference to the panel
	 * @memberOf CIQ.Studies
	 * @deprecated Since 5.2.0. yAxis is now created automatically via {@link CIQ.ChartEngine#renderYAxis}
	 */CIQ.Studies.createYAxis=function(stx,sd,quotes,panel){};/**
	 * Displays a single or group of series as lines in the study panel.
	 * One series per output field declared in the study library will be displayed.
	 * It expects the 'quotes' array to have data fields for each series with keys in the outputMap format: 'output name from study library'+ " " + sd.name.
	 * For most custom studies this function will do the work for you.
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {array} quotes The set of quotes (dataSegment)
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.displaySeriesAsLine=function(stx,sd,quotes){if(!quotes.length)return;var panel=stx.panels[sd.panel];if(!panel||panel.hidden)return;for(var i in sd.outputMap){CIQ.Studies.displayIndividualSeriesAsLine(stx,sd,panel,i,quotes);}};/**
	 * Displays a single or group of series as histogram in the study panel.
	 * It expects the 'quotes' array to have data fields for each series with keys in the outputMap format: 'output name from study library'+ " " + sd.name.
	 *
	 * It takes into account the following study input fields (see {@link CIQ.ChartEngine#drawHistogram} for details ) :
	 * - sd.inputs.HistogramType ("overlaid", "clustered", "stacked") - Default "overlaid"
	 * - sd.inputs.HeightPercentage - Default ".25"
	 * - sd.inputs.WidthFactor - Default ".5"
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {array} quotes The set of quotes (dataSegment)
	 * @memberOf CIQ.Studies
	 * @example
	 *
		// this adds a study panel that will display the High and Low values from the masterData as a stacked histogram study
		CIQ.Studies.studyLibrary["Plot High Low"]={
		 	"seriesFN": CIQ.Studies.displaySeriesAsHistogram,
		 	inputs:{"HistogramType":"stacked"},
			outputs:{"High":"blue","Low":"red"}
		};
		CIQ.Studies.addStudy(stxx, "Plot High Low");
	 */CIQ.Studies.displaySeriesAsHistogram=function(stx,sd,quotes){if(!quotes.length)return;var panel=stx.panels[sd.panel];if(!panel)return;if(panel.hidden)return;var seriesParam=[];for(var i in sd.outputMap){var output=sd.outputs[sd.outputMap[i]];if(!output)continue;var opacity=0.3;if(_typeof(output)=="object"){opacity=output.opacity;output=output.color;}var series={field:i,fill_color_up:output,border_color_up:output,fill_color_down:output,border_color_down:output};if(sd.underlay){series.opacity_up=series.opacity_down=opacity||0.3;}seriesParam.push(series);}var inputs=sd.inputs;var yAxis=stx.getYAxisByName(panel,sd.name);var params={name:sd.name,type:inputs.HistogramType?inputs.HistogramType:"overlaid",panel:sd.panel,yAxis:yAxis,heightPercentage:inputs.HeightPercentage?inputs.HeightPercentage:yAxis?1:0.25,widthFactor:inputs.WidthFactor?inputs.WidthFactor:0.5,bindToYAxis:yAxis.position!="none"};stx.drawHistogram(params,seriesParam);};/**
	 * Displays multiple data-points as series on a panel. This is the default display function for an indicator and will
	 * work for 90% of custom indicators.
	 * It also inserts the study results into the studyPanelMap to be selected as the basis for another study.
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {CIQ.ChartEngine.Panel} panel  A reference to the study panel
	 * @param  {string} name   The name of this study instance (should match field from 'quotes' needed to render this line)
	 * @param  {array} quotes The array of quotes (dataSegment)
	 * @memberOf CIQ.Studies
	 * @since 5.2.0 decimalPlaces for y axis determined by distance between ticks as opposed to shadow
	 */CIQ.Studies.displayIndividualSeriesAsLine=function(stx,sd,panel,name,quotes){if(!panel.height)panel.height=panel.bottom-panel.top;var context=stx.chart.context;var output=sd.outputs[sd.outputMap[name]];if(!output)return;// save the original context settings
stx.chart.context.save();// backwards compatibility if the output is just a color string
if(typeof output==='string'){output={color:output,width:1};}var lineWidth=output.width||1;context.lineWidth=sd.highlight?lineWidth+2:lineWidth;var color=output.color;if(color=="auto")color=stx.defaultColor;// This is calculated and set by the kernel before draw operation.
context.strokeStyle=color;var pattern=output.pattern;context.setLineDash(CIQ.borderPatternToArray(context.lineWidth,pattern));context.lineDashOffset=0;var labelDecimalPlaces=0;var study=sd.study,yAxis=stx.getYAxisByName(panel,sd.name)||panel.yAxis;labelDecimalPlaces=stx.decimalPlacesFromPriceTick(yAxis.priceTick);if(sd.overlay||sd.underlay)labelDecimalPlaces=null;// will end up using the same as the chart itself
if(yAxis.decimalPlaces||yAxis.decimalPlaces===0)labelDecimalPlaces=yAxis.decimalPlaces;var label=null;if(sd.parameters)label=sd.parameters.label;var libParams=study.parameters;if(!libParams)libParams={};var step=libParams.plotType=="step";if(sd.series){// not even sure why this is here but leaving for "backward compatibility"
for(var s in sd.series){var ser=sd.series[s].parameters.type;if(ser)step=ser=="step";}}// backwards compatibility
if(libParams.noLabels)label=false;if(!sd.noSlopes&&sd.noSlopes!==false)sd.noSlopes=libParams.noSlopes;if(!sd.extendToEnd&&sd.extendToEnd!==false)sd.extendToEnd=libParams.extendToEnd;var showLabel=label||stx.preferences.labels&&label!==false;var gaplines=sd.gaplines;if(gaplines===false)gaplines="transparent";var symbol=sd.inputs.Symbol;var colorFunction=gaplines?stx.getGapColorFunction(symbol,name,output,gaplines):null;stx.plotDataSegmentAsLine(name,panel,{yAxis:yAxis,skipTransform:stx.panels[sd.panel].name!=sd.chart.name,label:showLabel,labelDecimalPlaces:labelDecimalPlaces,noSlopes:sd.noSlopes,step:step,extendToEndOfDataSet:sd.extendToEnd,gapDisplayStyle:gaplines},colorFunction);if(study.appendDisplaySeriesAsLine)study.appendDisplaySeriesAsLine(stx,sd,quotes,name,panel);// restore the original context settings
stx.chart.context.restore();};/**
	 * Draws a horizontal line on the study.
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {studyDescriptor} sd	 The study descriptor
	 * @param  {array} quotes The array of quotes (unused)
	 * @param  {number} price  The price (value) to draw the horizontal line
	 * @param  {CIQ.ChartEngine.YAxis} yAxis  The axis to use when drawing the line
	 * @param  {object} color  Optional color to use when drawing line.  Can be a string or an object like {color:#334455, opacity:0.5}
	 * @memberOf CIQ.Studies
	 * @since 5.2.0 Added yAxis and color parameters
	 */CIQ.Studies.drawHorizontal=function(stx,sd,quotes,price,yAxis,color){var panel=stx.panels[sd.panel];if(!panel)return;if(!color)color=yAxis.textStyle;var y=stx.pixelFromPrice(price,panel,yAxis);if(y>yAxis.top&&y<yAxis.bottom)stx.plotLine(panel.left,panel.right,y,y,color,"segment",stx.chart.context,false,{opacity:color&&color.opacity?color.opacity:0.5});};/**
	 * Study display function used to show a histogram with overlaid series, such as on the "MACD" or "Klinger Volume Oscillator". 
	 * 
	 * This function creates the yAxis, draws **a single** histogram and then plots the series.
	 * Note that to differentiate between a regular series and the histogram series there is a convention to use sd.name+"_hist" for histogram values on a study</b> See {@link CIQ.Studies.createHistogram} for details</p>
	 * @param  {CIQ.ChartEngine} stx	  The chart object
	 * @param  {studyDescriptor} sd	   The study descriptor
	 * @param  {array} quotes   The quotes (dataSegment)
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.displayHistogramWithSeries=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var opacity=0.5;if(sd.underlay)opacity=0.3;CIQ.Studies.createHistogram(stx,sd,quotes,false,opacity);CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);};/**
	 * Plots over/under zones for indicators that support them, and when the user selects them. This method will draw its own
	 * yAxis which will not have a scale, but merely the over under points.
	 * Shading will be performed between the zone lines and the study plot.
	 * @param  {CIQ.ChartEngine} stx	  The chart object
	 * @param  {studyDescriptor} sd	   The study descriptor
	 * @param  {array} quotes   unused
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.drawZones=function(stx,sd,quotes){if(!sd.parameters||!sd.parameters.studyOverZonesEnabled)return;var low=parseFloat(sd.parameters.studyOverSoldValue);var high=parseFloat(sd.parameters.studyOverBoughtValue);var lowColor=sd.parameters.studyOverSoldColor;var highColor=sd.parameters.studyOverBoughtColor;var output=sd.zoneOutput;if(!output)output="Result";var zoneColor=CIQ.Studies.determineColor(sd.outputs[output]);if(!zoneColor||zoneColor=="auto"||CIQ.isTransparent(zoneColor))zoneColor=stx.defaultColor;if(!lowColor)lowColor=zoneColor;if(!lowColor||lowColor=="auto"||CIQ.isTransparent(lowColor))lowColor=stx.defaultColor;if(!highColor)highColor=zoneColor;if(!highColor||highColor=="auto"||CIQ.isTransparent(highColor))highColor=stx.defaultColor;var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name)||panel.yAxis;var drawBorders=yAxis.displayBorder;if(stx.axisBorders===false)drawBorders=false;if(stx.axisBorders===true)drawBorders=true;if(yAxis.width===0)drawBorders=false;var yaxisPosition=stx.getYAxisCurrentPosition(yAxis,panel);var leftAxis=yaxisPosition=="left",rightJustify=yAxis.justifyRight;if(!rightJustify&&rightJustify!==false){if(stx.chart.yAxis.justifyRight||stx.chart.yAxis.justifyRight===false){rightJustify=stx.chart.yAxis.justifyRight;}else rightJustify=leftAxis;}var borderEdge=Math.round(yAxis.left+(leftAxis?yAxis.width:0))+0.5;var tickWidth=drawBorders?3:0;// pixel width of tick off edge of border
var ctx=stx.chart.context;var color=ctx.fillStyle;stx.chart.context.globalAlpha=0.2;stx.startClip(panel.name,true);ctx.beginPath();var ph=Math.round(stx.pixelFromPrice(high,panel,yAxis))+0.5;ctx.strokeStyle=highColor;ctx.moveTo(panel.left,ph);ctx.lineTo(panel.right,ph);ctx.stroke();ctx.closePath();stx.chart.context.beginPath();var pl=Math.round(stx.pixelFromPrice(low,panel,yAxis))+0.5;ctx.strokeStyle=lowColor;ctx.moveTo(panel.left,pl);ctx.lineTo(panel.right,pl);ctx.stroke();ctx.closePath();var yAxisPlotter=new CIQ.Plotter();yAxisPlotter.newSeries("border","stroke",stx.canvasStyle("stx_grid_border"));if(drawBorders){var tickLeft=leftAxis?borderEdge-tickWidth:borderEdge-0.5;var tickRight=leftAxis?borderEdge+0.5:borderEdge+tickWidth;yAxisPlotter.moveTo("border",tickLeft,ph);yAxisPlotter.lineTo("border",tickRight,ph);yAxisPlotter.moveTo("border",tickLeft,pl);yAxisPlotter.lineTo("border",tickRight,pl);}ctx.fillStyle=color;var params={skipTransform:stx.panels[sd.panel].name!=sd.chart.name,panelName:sd.panel,band:output+" "+sd.name,yAxis:yAxis};CIQ.preparePeakValleyFill(stx,CIQ.extend(params,{threshold:high,direction:1,color:highColor}));CIQ.preparePeakValleyFill(stx,CIQ.extend(params,{threshold:low,direction:-1,color:lowColor}));ctx.globalAlpha=1;if(!sd.study||!sd.study.yaxis){if(drawBorders){var b=Math.round(yAxis.bottom)+0.5;yAxisPlotter.moveTo("border",borderEdge,yAxis.top);yAxisPlotter.lineTo("border",borderEdge,b);yAxisPlotter.draw(stx.chart.context,"border");}if(yAxis.width!==0){// Draw the y-axis with high/low
stx.canvasFont("stx_yaxis");stx.canvasColor("stx_yaxis");ctx.textAlign=rightJustify?"right":"left";if(leftAxis){textX=yAxis.left+3;if(rightJustify)textX=yAxis.left+yAxis.width-tickWidth-3;}else{textX=yAxis.left+tickWidth+3;if(rightJustify)textX=yAxis.left+yAxis.width;}ctx.fillStyle=highColor;ctx.fillText(high,textX,ph);ctx.fillStyle=lowColor;ctx.fillText(low,textX,pl);ctx.fillStyle=color;}}stx.endClip();ctx.globalAlpha=1;if(yAxis.name==sd.name)yAxis.yAxisPlotter=new CIQ.Plotter();};/**
	 * Draws a histogram on the study.
	 * Initial bar color is defined in stx-chart.css under '.stx_histogram'. If using the default UI, refer to provided css files under '.stx_histogram' and '.ciq-night .stx_histogram' style sections.
	 * If sd.outputs["Decreasing Bar"] and sd.outputs["Increasing Bar"] are present, their corresponding colors will be used instead.
	 * <p><b>Note the convention to use sd.name+"_hist" for histogram values on a study</b></p>
	 *
	 * @param  {CIQ.ChartEngine} stx	  The chart object
	 * @param  {studyDescriptor} sd	   The study descriptor
	 * @param  {array} quotes   The quotes (dataSegment)
	 * @param  {boolean} centered If true then the histogram will be physically centered on the yAxis, otherwise it will be centered at the zero value on the yAxis
	 * @param  {number} [opacity=1] Optionally set the opacity
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.createHistogram=function(stx,sd,quotes,centered,opacity){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name),myAxis=yAxis||panel.yAxis;stx.startClip(panel.name);var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;var y=stx.pixelFromPrice(0,panel,yAxis);if(myAxis.min>0)y=stx.pixelFromPrice(myAxis.min,panel,yAxis);// Don't draw below the bottom of the chart. If zero isn't on the chart then make it behave like a bar graph.
if(centered){y=Math.floor(panel.top+panel.height/2);}var context=stx.chart.context;var field=sd.name+"_hist";if(!sd.outputs["Decreasing Bar"]&&!sd.outputs["Negative Bar"])stx.canvasColor("stx_histogram");else context.globalAlpha=opacity?opacity:1;var y0=null,y1=null;var outputs=sd.outputs;for(var i=0;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));var x0=Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2);var x1=Math.floor(myWidth);if(y0===null){var tick=stx.tickFromPixel(x0,panel.chart)-1;if(tick<0)y0=y1;else y0=stx.pixelFromPrice(stx.chart.dataSet[tick][field],panel,yAxis)-y;}else{y0=y1;}y1=stx.pixelFromPrice(quote[field],panel,yAxis)-y;var decreasingBarColor=CIQ.Studies.determineColor(outputs["Decreasing Bar"]);var increasingBarColor=CIQ.Studies.determineColor(outputs["Increasing Bar"]);var positiveBarColor=CIQ.Studies.determineColor(outputs["Positive Bar"]);var negativeBarColor=CIQ.Studies.determineColor(outputs["Negative Bar"]);if(decreasingBarColor&&y1>y0)context.fillStyle=decreasingBarColor;else if(increasingBarColor&&y1<y0)context.fillStyle=increasingBarColor;else if(positiveBarColor&&y1<0)context.fillStyle=positiveBarColor;else if(negativeBarColor&&y1>0)context.fillStyle=negativeBarColor;context.fillRect(x0,y,x1,Math.floor(y1));}context.globalAlpha=1;stx.endClip();};/**
	 * Convenience function for creating a volume style chart that supports multiple colors
	 * of volume bars. If borderMap (border colors) is passed in then the chart will display in a format where bars are flush against
	 * one another so that there is no white space between bars. If however a borderMap is not specified then white space will be left
	 * between the bars.
	 * @param  {CIQ.ChartEngine} stx	  The chart object
	 * @param  {studyDescriptor} sd	   The study descriptor
	 * @param  {object} colorMap Map of colors to arrays. Each array should contain entries for each dataSegment bar mapped to that color.
	 * It should contain null values for any bar that shouldn't be drawn
	 * @param {object} borderMap Map of border colors for each color. If null then no borders will be drawn.
	 * @example
	 * var colorMap={};
	 * colorMap["#FF0000"]=[56,123,null,null,45];
	 * colorMap["#00FF00"]=[null,null,12,13,null];
	 *
	 * var borderMap={
	 *	"#FF0000": "#FFFFFF",
	 *	"#00FF00": "#FFFFDD"
	 * };
	 * CIQ.Studies.volumeChart(stx, sd, colorMap, borderMap);
	 * @memberOf CIQ.Studies
	 * @deprecated since 6.0.0 Use {@link CIQ.ChartEngine#drawHistogram} instead.
	 */CIQ.Studies.volumeChart=function(stx,sd,colorMap,borderMap){// Determine min max
var maximum=Number.MAX_VALUE*-1;var color,value;for(color in colorMap){for(var c=0;c<colorMap[color].length;c++){value=colorMap[color][c];if(!value)continue;if(value>maximum)maximum=value;}}// determine calculation ratios
var panel=stx.panels[sd.panel];var b=Math.floor(panel.yAxis.bottom)+0.5;var t=Math.floor(panel.yAxis.top)+0.5;var h=b-t;var candleWidth=stx.layout.candleWidth;var borderColor=null;if(!sd.parameters||!sd.parameters.displayBorder)borderMap=null;var offset=0;if(!borderMap)offset=(candleWidth-stx.chart.tmpWidth)/2;var context=stx.chart.context;context.lineWidth=1;stx.startClip(sd.panel);for(color in colorMap){if(borderMap)borderColor=borderMap[color];context.fillStyle=color;if(borderColor)context.strokeStyle=borderColor;context.beginPath();var prevTop=b+0.5;var farLeft=Math.floor(stx.pixelFromBar(0,panel.chart));var prevRight;for(var i=0;i<colorMap[color].length;i++){if(stx.chart.dataSegment[i]&&stx.chart.dataSegment[i].candleWidth){candleWidth=stx.chart.dataSegment[i].candleWidth;if(!borderMap)offset=candleWidth/4;}else{candleWidth=stx.layout.candleWidth;if(!borderMap)offset=(candleWidth-stx.chart.tmpWidth)/2;}if(i===0){farLeft-=candleWidth/2;prevRight=farLeft;}value=colorMap[color][i];if(!value){prevTop=b;prevRight+=candleWidth;//if(borderMap) prevRight-=0.5;
continue;}var y=value*(h/maximum);var top=Math.min(Math.floor(b-h+(h-y))+0.5,b);var x0,x1;x0=Math.floor(prevRight+offset);x1=Math.floor(prevRight+candleWidth-offset);x0=Math.max(x0,farLeft);context.moveTo(x0,b);context.lineTo(x1,b);context.lineTo(x1,top);context.lineTo(x0,top);if(borderMap){if(prevTop>top||i===0)context.lineTo(x0,prevTop);// draw down to the top of the previous bar, so that we don't overlap strokes
}else{context.lineTo(x0,b);}prevTop=top;prevRight+=candleWidth;//if(borderMap) prevRight-=0.5;
}context.fill();context.strokeStyle=borderColor;if(borderMap&&stx.layout.candleWidth>=2)context.stroke();context.closePath();}stx.endClip();};/**
	 * Used to reduce certain common fields to abbreviated form for display in study panel labels
	 * @type {Object}
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.prettify={"Close":"C","Open":"O","High":"H","Low":"L","simple":"ma","exponential":"ema","time series":"tsma","triangular":"tma","variable":"vma","VIDYA":"vdma","weighted":"wma","welles wilder":"smma","true":"y","false":"n"};CIQ.Studies.prettyRE=/^.*\((.*?)\).*$/;/**
	 * Convert a study ID into a displayable format
	 * @param  {string} id The ID
	 * @return {string}	A pretty (shortened) ID
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.prettyDisplay=function(id){var match=CIQ.Studies.prettyRE.exec(id);if(!match)return id;var guts=match[1];if(guts){for(var i in CIQ.Studies.prettify){guts=guts.replace(i,CIQ.Studies.prettify[i]);}id=id.replace(match[1],guts);}return id;};/**
	 * Returns an array of input field names which are used  to specify the field for the study.
	 * In most cases, this field is called "Field", but it does not have to be, nor does there need to be only one.
	 *
	 * @param  {studyDescriptor} sd	   The study descriptor
	 * @return {array}		   Input fields used to specify the field
	 * @since 3.0.0
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.getFieldInputs=function(sd){var res=[];var defaultInputs=sd.study.inputs;for(var input in defaultInputs){if(defaultInputs[input]=="field")res.push(input);}return res;};/**
	 * The default initialize function for a study. It creates the study descriptor. It creates the panel if one is required.
	 *
	 * @param  {CIQ.ChartEngine} stx		The chart object
	 * @param  {string} type	   The type of study (from studyLibrary)
	 * @param  {object} inputs	 The inputs for the study instance
	 * @param  {object} outputs	The outputs for the study instance
	 * @param  {object} [parameters] Optional parameters if required or supported by this study
	 * @param {string} [panelName] Optional panel. If not provided then the panel will be determined dynamically.
	 * @param {object} [study]	Optionally supply a study definition to use in lieu of the study library entry
	 * @return {studyDescriptor}		The newly initialized study descriptor
	 * @since 3.0.0 added study argument
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.initializeFN=function(stx,type,inputs,outputs,parameters,panelName,study){function determinePanelForOverlay(inputs,parameters,panels){var panel=null;var fieldInputs=CIQ.Studies.getFieldInputs(sd);var highLowBars=stx.chart.highLowBars||stx.highLowBars[stx.layout.chartType];for(var f=0;f<fieldInputs.length;f++){var st=CIQ.Studies.studyPanelMap[inputs[fieldInputs[f]]];if(st){panel=st.panel;break;}}if(!panel)panel=parameters.chartName;// If a panel isn't specified then this is an overlay on the chart itself
return panel;}if(!inputs)inputs={id:type};if(!parameters)parameters={};if(!inputs.display)inputs.display=inputs.id;var sd=new CIQ.Studies.StudyDescriptor(inputs.id,type,inputs.id,inputs,outputs,parameters);if(inputs.Period)sd.days=Math.max(1,parseInt(sd.inputs.Period,10));// you can't have fractional or non-positive day periods
if(study){if(!study.inputs)study.inputs=sd.study.inputs;if(!study.outputs)study.outputs=sd.study.outputs;sd.study=study;}else study=sd.study;if(study.display)inputs.display=study.display;// override what is displayed in the label
if(!panelName)panelName=inputs.id;var isOverlay=false,isUnderlay=false;if(parameters.panelName=="Own panel"){sd.underlay=sd.overlay=false;}else{isOverlay=sd.overlay||study.overlay||inputs.Overlay||!!parameters.panelName;isUnderlay=sd.underlay||study.underlay||inputs.Underlay||parameters.panelName&&parameters.underlayEnabled;if(isUnderlay)sd.underlay=true;if(isOverlay)sd.overlay=true;}var oldStudy=parameters.replaceID?stx.layout.studies[parameters.replaceID]:null;if(parameters.calculateOnly){// don't setup panel, return now
return sd;}else if(oldStudy&&(stx.panelExists(parameters.replaceID)||isOverlay||isUnderlay)){if(isOverlay||isUnderlay){if(parameters.replaceID!=sd.inputs.id){// delete the old study if using a different id (not modifying the same study )
delete stx.layout.studies[parameters.replaceID];delete stx.overlays[parameters.replaceID];}CIQ.deleteRHS(CIQ.Studies.studyPanelMap,oldStudy);if(stx.panelExists(parameters.replaceID)){// Note this also removes any overlays on the removed panel
stx.panelClose(stx.panels[parameters.replaceID]);// This can happen if oldStudy was a panel
}if(stx.panels[parameters.panelName])sd.panel=parameters.panelName;else sd.panel=determinePanelForOverlay(inputs,parameters,stx.panels);}else{sd.panel=panelName;var newPanels={};for(var p in stx.panels){if(p==parameters.replaceID){// swap the name/id of the old panel
var tmp=stx.panels[p];tmp.name=panelName;if(tmp.yAxis)tmp.yAxis.name=panelName;tmp.display=inputs.display;newPanels[panelName]=tmp;if(parameters.replaceID!=panelName){//delete stx.panels[parameters.replaceID];
CIQ.deleteRHS(CIQ.Studies.studyPanelMap,oldStudy);}if(stx.moveMarkers)stx.moveMarkers(parameters.replaceID,panelName);}else{newPanels[p]=stx.panels[p];}}stx.panels=newPanels;// we want to preserve the order so we keep it unless the ID changed. Otherwise it will attempt to draw the depending study before the base study
if(parameters.replaceID!=sd.inputs.id)delete stx.layout.studies[parameters.replaceID];// delete the old study if using a different id (not modifying the same)
}}else if(stx.panelExists(panelName)){sd.panel=panelName;if(!isOverlay&&!isUnderlay)stx.panels[panelName].yAxis.name=sd.name;if(!sd.underlay&&sd.panel==stx.chart.name)isOverlay=sd.overlay=true;//set to overlay if the panel name is "chart"
}else if(!isOverlay&&!isUnderlay){var panelHeight=study.panelHeight?study.panelHeight:null;var yAxis=new CIQ.ChartEngine.YAxis(study.yAxis);yAxis.name=sd.name;if(oldStudy){// This can happen if oldStudy was an overlay
if(parameters.replaceID!=sd.inputs.id){CIQ.Studies.removeStudy(stx,oldStudy);}else{delete stx.overlays[parameters.replaceID];}}stx.createPanel(inputs.display,inputs.id,panelHeight,parameters.chartName,yAxis);}else{sd.panel=determinePanelForOverlay(inputs,parameters,stx.panels);}var panel=stx.panels[sd.panel];var needsNewYAxis=true;if(oldStudy){var oldPanel=stx.panels[oldStudy.panel];var oldYAxis=stx.getYAxisByName(oldPanel,oldStudy.name);if(oldPanel&&oldYAxis){oldYAxis.name=sd.name;needsNewYAxis=oldPanel!=panel||oldYAxis.position!=parameters.yaxisDisplayValue;if(needsNewYAxis)stx.deleteYAxisIfUnused(oldPanel,oldYAxis);else if(!parameters.yaxisDisplayColor||parameters.yaxisDisplayColor=="auto")delete oldYAxis.textStyle;else oldYAxis.textStyle=CIQ.colorToHex(parameters.yaxisDisplayColor);}}if(needsNewYAxis){var syAxis=study?CIQ.clone(study.yAxis):null;if(syAxis)CIQ.extend(syAxis,parameters.yAxis);else syAxis=parameters.yAxis;if(isOverlay||isUnderlay){if((syAxis||parameters.yaxisDisplayValue)&&parameters.yaxisDisplayValue!="shared"){var yAxisParams={name:sd.name,position:parameters.yaxisDisplayValue=="default"?"":parameters.yaxisDisplayValue};if(syAxis)yAxisParams=CIQ.extend(syAxis,yAxisParams);var proposedYAxis=new CIQ.ChartEngine.YAxis(yAxisParams);if(proposedYAxis.position=="none")proposedYAxis.width=0;// nasty trick to bind study to a hidden axis
var newYAxis=stx.addYAxis(panel,proposedYAxis);if(proposedYAxis.position=="none")newYAxis.width=0;// just in case axis existed already
newYAxis.displayGridLines=false;if(parameters.yaxisDisplayColor&&parameters.yaxisDisplayColor!="auto")newYAxis.textStyle=CIQ.colorToHex(parameters.yaxisDisplayColor);}}else{if(syAxis){syAxis=CIQ.extend(panel.yAxis,syAxis);if(syAxis.ground)syAxis.initialMarginBottom=0;if(syAxis.ground||syAxis.initialMarginTop||syAxis.initialMarginTop===0||syAxis.initialMarginBottom||syAxis.initialMarginBottom===0){stx.calculateYAxisMargins(syAxis);}}else{var sparameters=study?study.parameters:null;if(sparameters&&(sparameters.zoom||sparameters.zoom===0)){// LEGACY, instead add a yAxis to the study
panel.yAxis.zoom=sparameters.zoom;// Optionally set the default zoom in the "parameters" in the study library
}else if(!panel.yAxis.zoom){panel.yAxis.zoom=10;// Default to slight zoom when adding study panels so that studies are not up on the edge
}}if(parameters.yaxisDisplayValue&&parameters.yaxisDisplayValue!="shared"){panel.yAxis.position=parameters.yaxisDisplayValue=="default"?"":parameters.yaxisDisplayValue;panel.yAxis.width=parameters.yaxisDisplayValue=="none"?0:CIQ.ChartEngine.YAxis.prototype.width;panel.yAxis.justifyRight=null;if(!parameters.yaxisDisplayColor||parameters.yaxisDisplayColor=="auto")delete panel.yAxis.textStyle;else panel.yAxis.textStyle=CIQ.colorToHex(parameters.yaxisDisplayColor);stx.calculateYAxisPositions();}else if(syAxis&&syAxis.position){stx.calculateYAxisPositions();}}}if(!study.yAxis&&stx.panels[inputs.id]){stx.panels[inputs.id].yAxis.displayGridLines=stx.displayGridLinesInStudies;}return sd;};/**
	 * @deprecated Since 5.2.0. Use {@link CIQ.Studies.drawZones} instead.
	 */CIQ.Studies.overZones=CIQ.Studies.drawZones;/**
	 * Default display function used on 'ATR Trailing Stop' and 'Parabolic SAR' studies to display a series of 'dots' at the required price-date coordinates.
	 * 
	 * Visual Reference:<br>
	 * ![displayPSAR2](img-displayPSAR2.png "displayPSAR2")
	 * 
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd
	 * @param {array} quotes Array of quotes
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.displayPSAR2=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var sharingChartAxis=panel.name==panel.chart.name&&!yAxis;stx.startClip(panel.name);var ctx=stx.chart.context;var squareWave=sd.inputs["Plot Type"]=="squarewave";for(var output in sd.outputs){var field=output+" "+sd.name;ctx.beginPath();var candleWidth=stx.layout.candleWidth;var pointWidth=Math.max(3,Math.floor(stx.chart.tmpWidth/2));for(var x=0;x<quotes.length;x++){var quote=quotes[x];if(!quote||!quote[field]&&quote[field]!==0)continue;if(quote.candleWidth)candleWidth=quote.candleWidth;if(sharingChartAxis&&quote.transform)quote=quote.transform;var x0=stx.pixelFromBar(x,panel.chart);if(squareWave)x0-=candleWidth/2;var y0=stx.pixelFromTransformedValue(quote[field],panel,yAxis);if(x===0||!quotes[x-1]||!quotes[x-1][field]&&quotes[x-1][field]!==0){ctx.moveTo(x0,y0);}if(squareWave){ctx.lineTo(x0,y0);ctx.lineTo(x0+candleWidth,y0);if(quotes[x+1]){var quote_1=quotes[x+1];if(sharingChartAxis&&quote_1.transform)quote_1=quote_1.transform;if(!quote_1[field]&&quote_1[field]!==0){ctx.lineTo(x0+candleWidth,stx.pixelFromTransformedValue(quote_1[sd.referenceOutput+" "+sd.name],stx.panels[sd.panel],yAxis));}}}else{ctx.moveTo(x0-pointWidth/2,y0);ctx.lineTo(x0+pointWidth/2,y0);}}ctx.lineWidth=1;if(sd.highlight)ctx.lineWidth=3;var color=CIQ.Studies.determineColor(sd.outputs[output]);if(color=="auto")color=stx.defaultColor;// This is calculated and set by the kernel before draw operation.
ctx.strokeStyle=color;ctx.stroke();ctx.closePath();ctx.lineWidth=1;}stx.endClip();};/**
	 * Default initialization function for the 'Stochastics' study. 
	 * 
	 * In this case we simply customize the input display
	 * but otherwise call the default {@link CIQ.Studies.initializeFN}
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {*} type Type to pass to initialization function
	 * @param {object} inputs Study inputs
	 * @param {object} outputs Study ouptuts
	 * @return {*} Initialization callback's data
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.initializeStochastics=function(stx,type,inputs,outputs){inputs.display=stx.translateIf("Stoch")+" ("+inputs.Period+")";return CIQ.Studies.initializeFN.apply(null,arguments);};/**
	 * Default Volume calculation function.
 
	 * Volume is already obtained, so all that is done here is setting colors.
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd Study to calculate volume for
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateVolume=function(stx,sd){if(sd.type=="vol undr"){if(!stx||!stx.chart.dataSet)return;var layout=stx.layout;var remove=sd.parameters.removeStudy;var previous=layout.volumeUnderlay;layout.volumeUnderlay=!remove;if(previous!=layout.volumeUnderlay)stx.changeOccurred("layout");if(remove){CIQ.Studies.removeStudy(stx,sd);}}};/**
	 * Moving Average convenience function
	 * @param  {string}   type	The type of moving average, e.g. simple, exponential, triangular, etc
	 * @param  {number}   periods Moving average period
	 * @param  {string}   field   The field in the data array to perform the moving average on
	 * @param  {number}   offset  Periods to offset the result by
	 * @param  {string}   name	String to prefix to the name of the output.  Full name of output would be name + " " + sd.name, for instance "Signal MACD"
	 * @param  {CIQ.ChartEngine} stx	 Chart object
	 * @param  {object}   sd	  Study Descriptor
	 * @param  {string}   subField	  Subfield within field to perform moving average on, if applicable.  For example, IBM.Close: field:"IBM", subField:"Close"
	 * @memberOf CIQ.Studies
	 * @since 04-2015
	 */CIQ.Studies.MA=function(type,periods,field,offset,name,stx,sd,subField){var ma=new CIQ.Studies.StudyDescriptor(name+" "+sd.name,"ma",sd.panel);ma.chart=sd.chart;ma.days=parseInt(periods,10);ma.startFrom=sd.startFrom;if(subField)ma.subField=subField;ma.inputs={};if(type)ma.inputs.Type=type;if(field)ma.inputs.Field=field;if(offset)ma.inputs.Offset=parseInt(offset,10);CIQ.Studies.calculateMovingAverage(stx,ma);};// Moving average data; add to it if adding moving average functionality
CIQ.Studies.movingAverage={//conversions: mapping of study type to moving average type name
conversions:{"ma":"simple","sma":"simple","ema":"exponential","tsma":"time series","tma":"triangular","vma":"variable","vdma":"vidya","wma":"weighted","smma":"welles wilder"},//translations: mapping of moving average type name to display name
translations:{"simple":"Simple","exponential":"Exponential","time series":"Time Series","triangular":"Triangular","variable":"Variable","vidya":"VIDYA","weighted":"Weighted","welles wilder":"Welles Wilder"},//typeMap: mapping of both study type and type name to calculation function suffix
//i.e., calculateMovingAverageXXX
typeMap:{"ema":"Exponential","exponential":"Exponential","tsma":"TimeSeries","time series":"TimeSeries","tma":"Triangular","triangular":"Triangular","vma":"Variable","variable":"Variable","vdma":"VIDYA","vidya":"VIDYA","wma":"Weighted","weighted":"Weighted","smma":"Exponential","welles wilder":"Exponential"}};/**
	 * Does conversions for valid moving average types
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {string} input String to test if a moving average type or "options" to return the list of ma options.
	 * @return {Object} The name of the moving average or a list of options
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.movingAverageHelper=function(stx,input){if(input=="options"){var translations={};for(var t in CIQ.Studies.movingAverage.translations){translations[t]=stx.translateIf(CIQ.Studies.movingAverage.translations[t]);}return translations;}return CIQ.Studies.movingAverage.conversions[input];};/**
	 * Creates a volume underlay for the chart.
	 * The underlay height is a % of the chart height as determined by the `HeightPercentage` study parameter.
	 * Each bar width will be determined by `widthFactor` study parameter.
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @param {array} quotes Array of quotes
	 * @memberOf CIQ.Studies
	 * @deprecated use {@link CIQ.Studies.createVolumeChart}
	 * @example
	 *  // default study library entry with required parameters
		"vol undr": {
			"name": "Volume Underlay",
			"underlay": true,
			"seriesFN": CIQ.Studies.createVolumeChart,
			"calculateFN": CIQ.Studies.calculateVolume,
			"inputs": {},
			"outputs": {"Up Volume":"#8cc176","Down Volume":"#b82c0c"},
			"customRemoval": true,
			"removeFN": function(stx, sd){
					stx.layout.volumeUnderlay=false;
					stx.changeOccurred("layout");
				},
			"parameters": {
				"init":{heightPercentage: 0.25},
				"widthFactor":1
			}
		}
	 */CIQ.Studies.volUnderlay=function(stx,sd,quotes){CIQ.Studies.createVolumeChart(stx,sd,quotes);};/**
	 *
	 * Creates a volume chart.
	 * If no volume is available on the screen then the panel will be watermarked "Volume Not Available" (translated if a translate function is attached to the kernel object).
	 * Each bar width will be determined by `widthFactor` study parameter.
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @param {array} quotes Array of quotes
	 * @memberOf CIQ.Studies
	 * @example
	 *  // default study library entry with required parameters
		"volume": {
			"name": "Volume Chart",
			"range": "0 to max",
			"yAxis": {"ground":true, "initialMarginTop":0},
			"seriesFN": CIQ.Studies.createVolumeChart,
			"calculateFN": CIQ.Studies.calculateVolume,
			"inputs": {},
			"outputs": {"Up Volume":"#8cc176","Down Volume":"#b82c0c"},
			"parameters": {
				"zoom": 0,
				"widthFactor":1
			}
		}
	 */CIQ.Studies.createVolumeChart=function(stx,sd,quotes){var panel=sd.panel,inputs=sd.inputs,underlay=sd.underlay,overlay=sd.overlay;var inAnotherPanel=underlay||overlay;var colorUp=CIQ.Studies.determineColor(sd.outputs["Up Volume"]);var colorDown=CIQ.Studies.determineColor(sd.outputs["Down Volume"]);var style=underlay?"stx_volume_underlay":"stx_volume";stx.setStyle(style+"_up","color",colorUp);stx.setStyle(style+"_down","color",colorDown);var seriesParam=[{field:"Volume",fill_color_up:stx.canvasStyle(style+"_up").color,border_color_up:stx.canvasStyle(style+"_up").borderLeftColor,opacity_up:stx.canvasStyle(style+"_up").opacity,fill_color_down:stx.canvasStyle(style+"_down").color,border_color_down:stx.canvasStyle(style+"_down").borderLeftColor,opacity_down:stx.canvasStyle(style+"_down").opacity}];var seriesParam0=seriesParam[0];// Major backward compatibility hack. If the border color is the same as our standard color
// then most likely the customer is missing border: #000000 style on stx_volume_up and stx_volume_down
if(!underlay&&seriesParam0.border_color_down==="rgb(184, 44, 12)"){seriesParam0.border_color_down="#000000";seriesParam0.border_color_up="#000000";}var yAxis=stx.getYAxisByName(panel,sd.name);var params={name:"Volume",panel:panel,yAxis:yAxis,heightPercentage:inputs.HeightPercentage?inputs.HeightPercentage:inAnotherPanel?0.25:null,widthFactor:1,bindToYAxis:!yAxis||yAxis.position!="none"};CIQ.extend(params,sd.study.parameters);CIQ.extend(params,sd.parameters);if(stx.colorByCandleDirection){seriesParam0.color_function=function(quote){var O=quote.Open,C=quote.Close;//if((!O && O!==0) || (!C && C!==0) || O===C) return stx.defaultColor;
return{fill_color:O>C?seriesParam0.fill_color_down:seriesParam0.fill_color_up,border_color:O>C?seriesParam0.border_color_down:seriesParam0.border_color_up,opacity:O>C?seriesParam0.opacity_down:seriesParam0.opacity_up};};}sd.outputMap.Volume=null;stx.drawHistogram(params,seriesParam);};/**
	 * Default study calculation function for RSI study. 
	 * 
	 * Note how sd.chart.scrubbed is used instead of dataSet. 
	 * Also note the naming convention for the outputs.
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateRSI=function(stx,sd){var quotes=sd.chart.scrubbed;function computeRSI(avgGain,avgLoss){if(avgLoss===0)return 100;var rs=avgGain/avgLoss;return 100-100/(1+rs);}if(quotes.length<sd.days+1){sd.error=true;return;}for(var i=sd.startFrom;i<quotes.length;i++){if(!i)continue;var quote=quotes[i];var quote1=quotes[i-1];var change=quote.Close-quote1.Close;var num=Math.min(i,sd.days);var avgGain=quote1["_avgG "+sd.name];if(!avgGain)avgGain=0;avgGain-=avgGain/num;var avgLoss=quote1["_avgL "+sd.name];if(!avgLoss)avgLoss=0;avgLoss-=avgLoss/num;if(change>0){avgGain+=change/num;}else{avgLoss-=change/num;}if(i>=sd.days)quote["RSI "+sd.name]=computeRSI(avgGain,avgLoss);//intermediates
quote["_avgG "+sd.name]=avgGain;quote["_avgL "+sd.name]=avgLoss;}sd.zoneOutput="RSI";};/**
	 * Calculate function for MACD study
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateMACD=function(stx,sd){var quotes=sd.chart.scrubbed;var inputs=sd.inputs,name=sd.name;if(!sd.macd1Days)sd.macd1Days=parseFloat(inputs["Fast MA Period"]);if(!sd.macd2Days)sd.macd2Days=parseFloat(inputs["Slow MA Period"]);if(!sd.signalDays)sd.signalDays=parseFloat(inputs["Signal Period"]);if(!sd.days)sd.days=Math.max(sd.macd1Days,sd.macd2Days,sd.signalDays);if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var maType=inputs["Moving Average Type"];if(!maType)maType="exponential";CIQ.Studies.MA(maType,sd.macd1Days,field,0,"_MACD1",stx,sd);CIQ.Studies.MA(maType,sd.macd2Days,field,0,"_MACD2",stx,sd);var i,quote,start=Math.max(sd.startFrom,sd.days-1);for(i=start;i<quotes.length;i++){quote=quotes[i];quote["MACD "+name]=quote["_MACD1 "+name]-quote["_MACD2 "+name];}var sigMaType=inputs["Signal MA Type"];if(!sigMaType)sigMaType="exponential";CIQ.Studies.MA(sigMaType,sd.signalDays,"MACD "+name,0,"Signal",stx,sd);var histogram=name+"_hist";for(i=start;i<quotes.length;i++){quote=quotes[i];var signal=quote["Signal "+name];if(!signal&&signal!==0)continue;// don't create histogram before the signal line is valid
quote[histogram]=quote["MACD "+name]-quote["Signal "+name];}};/**
	 * Calculate function for standard deviation.
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateStandardDeviation=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var type=sd.inputs["Moving Average Type"];if(!type)type=sd.inputs.Type;CIQ.Studies.MA(type,sd.days,field,sd.inputs.Offset,"_MA",stx,sd);var acc1=0;var acc2=0;var ma=0;var mult=Number(sd.inputs["Standard Deviations"]);if(mult<0)mult=2;var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var i,val,its;for(i=sd.startFrom-1,its=0;i>=0&&its<sd.days;i--,its++){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(isNaN(val))val=0;acc1+=Math.pow(val,2);acc2+=val;}for(i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(isNaN(val))val=0;acc1+=Math.pow(val,2);acc2+=val;if(i<sd.days-1)continue;if(i>=sd.days){var val2=quotes[i-sd.days][field];if(val2&&_typeof(val2)=="object")val2=val2[sd.subField];if(isNaN(val2))val2=0;acc1-=Math.pow(val2,2);acc2-=val2;}ma=quote["_MA "+sd.name];quote[name]=Math.sqrt((acc1+sd.days*Math.pow(ma,2)-2*ma*acc2)/sd.days)*mult;}};/**
	 * Calculate function for moving averages. sd.inputs["Type"] can be used to request a specific type of moving average.
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @return {undefined}
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateMovingAverage=function(stx,sd){if(!sd.chart.scrubbed)return;var type=sd.inputs.Type;if(type=="ma"||type=="sma"||!type)type="simple";// handle when the default inputs are passed in
var typeMap=CIQ.Studies.movingAverage.typeMap;if(type in typeMap){return CIQ.Studies["calculateMovingAverage"+typeMap[type]](stx,sd);}else if(type!=="simple"){return;}var quotes=sd.chart.scrubbed;var acc=0;var vals=[];var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val,start=sd.startFrom;// backload the past data into the array
var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;start=i;continue;}if(vals.length==sd.days-1)break;acc+=val;vals.unshift(val);}if(vals.length<sd.days-1){vals=[];start=0;// not enough records to continue where left off
}for(i=start;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];var notOverflowing=i+offset>=0&&i+offset<quotes.length;var offsetQuote=notOverflowing?quotes[i+offset]:null;if(!val&&val!==0){if(offsetQuote)offsetQuote[name]=null;continue;}acc+=val;vals.push(val);if(vals.length>sd.days)acc-=vals.shift();if(offsetQuote)offsetQuote[name]=vals.length==sd.days?acc/sd.days:null;}};/**
	 * Calculate function for exponential moving average
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateMovingAverageExponential=function(stx,sd){var type=sd.inputs.Type;var quotes=sd.chart.scrubbed;var acc=0;var ma=0;var ii=0;var multiplier=2/(sd.days+1);if(type==="welles wilder"||type==="smma")multiplier=1/sd.days;var emaPreviousDay=null;var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var start=sd.startFrom;// find emaPreviousDay
var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][name];if(!val&&val!==0)continue;if(emaPreviousDay===null)emaPreviousDay=val;ii=sd.days;if(offsetBack<=0)break;offsetBack--;start=i;}if(emaPreviousDay===null){emaPreviousDay=start=0;}for(i=start;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];var notOverflowing=i+offset>=0&&i+offset<quotes.length;var offsetQuote=notOverflowing?quotes[i+offset]:null;if(!val&&val!==0){if(offsetQuote)offsetQuote[name]=null;continue;}if(ii==sd.days-1){acc+=val;ma=acc/sd.days;if(offsetQuote)offsetQuote[name]=ma;}else if(ii<sd.days-1){acc+=val;ma=acc/(ii+1);if(offsetQuote)offsetQuote[name]=null;}else if(ii===0){acc+=val;ma=acc;if(offsetQuote)offsetQuote[name]=null;}else if(emaPreviousDay||emaPreviousDay===0){ma=(val-emaPreviousDay)*multiplier+emaPreviousDay;if(offsetQuote)offsetQuote[name]=ma;}emaPreviousDay=ma;ii++;}};/**
	 * Calculate function for variable moving average
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 * @since 5.2.1 moved VIYDA to calculateMovingAverageVIDYA
	 */CIQ.Studies.calculateMovingAverageVariable=function(stx,sd){var type=sd.inputs.Type;var quotes=sd.chart.scrubbed;var alpha=2/(sd.days+1);var vmaPreviousDay=null;var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
sd.cmo=new CIQ.Studies.StudyDescriptor(sd.name,"cmo",sd.panel);sd.cmo.chart=sd.chart;sd.cmo.days=9;sd.cmo.inputs={"Field":field};sd.cmo.startFrom=sd.startFrom;sd.cmo.outputs={"_CMO":null};CIQ.Studies.calculateChandeMomentum(stx,sd.cmo);var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var start=sd.startFrom;// find vmaPreviousDay
var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][name];if(!val&&val!==0)continue;if(vmaPreviousDay===null)vmaPreviousDay=val;if(offsetBack<=0)break;offsetBack--;start=i;}if(vmaPreviousDay===null){vmaPreviousDay=start=0;}for(i=start;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];var notOverflowing=i+offset>=0&&i+offset<quotes.length;var offsetQuote=notOverflowing?quotes[i+offset]:null;if(!val&&val!==0){if(offsetQuote)offsetQuote[name]=null;continue;}if(!quote["_CMO "+sd.name]&&quote["_CMO "+sd.name]!==0)continue;var vi=Math.abs(quote["_CMO "+sd.name])/100;var vma=alpha*vi*val+(1-alpha*vi)*vmaPreviousDay;vmaPreviousDay=vma;if(i<sd.days)vma=null;if(offsetQuote)offsetQuote[name]=vma;}};/**
	 * Calculate function for VI Dynamic MA (VIDYA)
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 * @since 5.2.1
	 */CIQ.Studies.calculateMovingAverageVIDYA=function(stx,sd){var type=sd.inputs.Type;var quotes=sd.chart.scrubbed;var alpha=2/(sd.days+1);var vmaPreviousDay=null;var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
sd.std=new CIQ.Studies.StudyDescriptor(sd.name,"sdev",sd.panel);sd.std.chart=sd.chart;sd.std.days=5;sd.std.startFrom=sd.startFrom;sd.std.inputs={"Field":field,"Standard Deviations":1,"Type":"ma"};sd.std.outputs={"_STD":null};CIQ.Studies.calculateStandardDeviation(stx,sd.std);CIQ.Studies.MA("ma",20,"_STD "+sd.name,0,"_MASTD",stx,sd);var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var start=sd.startFrom;// find vmaPreviousDay
var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][name];if(!val&&val!==0)continue;if(vmaPreviousDay===null)vmaPreviousDay=val;if(offsetBack<=0)break;offsetBack--;start=i;}if(vmaPreviousDay===null){vmaPreviousDay=start=0;}for(i=start;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];var notOverflowing=i+offset>=0&&i+offset<quotes.length;var offsetQuote=notOverflowing?quotes[i+offset]:null;if(!val&&val!==0){if(offsetQuote)offsetQuote[name]=null;continue;}if(!quote["_MASTD "+sd.name]&&quote["_MASTD "+sd.name]!==0)continue;var vi=quote["_STD "+sd.name]/quote["_MASTD "+sd.name];var vma=alpha*vi*val+(1-alpha*vi)*vmaPreviousDay;vmaPreviousDay=vma;if(i<sd.days)vma=null;if(offsetQuote)offsetQuote[name]=vma;}};/**
	 * Calculate function for time series moving average
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateMovingAverageTimeSeries=function(stx,sd){sd.ma=new CIQ.Studies.StudyDescriptor(sd.name,"ma",sd.panel);sd.ma.chart=sd.chart;sd.ma.days=sd.days;sd.ma.startFrom=sd.startFrom;sd.ma.inputs=sd.inputs;CIQ.Studies.calculateLinearRegressionIndicator(stx,sd.ma);var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var quotes=sd.chart.scrubbed;// find start
var offsetBack=offset;for(var i=sd.startFrom-1;i>=0;i--){var val=quotes[i][name];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;continue;}break;}for(i++;i<quotes.length;i++){var quote=quotes[i];if(i+offset>=0&&i+offset<quotes.length)quotes[i+offset][name]=quote["Forecast "+sd.name];}};/**
	 * Calculate function for triangular moving average
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateMovingAverageTriangular=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
var days=Math.ceil(sd.days/2);CIQ.Studies.MA("simple",days,field,0,"TRI1",stx,sd);if(sd.days%2===0)days++;CIQ.Studies.MA("simple",days,"TRI1 "+sd.name,0,"TRI2",stx,sd);var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;// find start
var offsetBack=offset;for(var i=sd.startFrom-1;i>=0;i--){var val=quotes[i][name];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;continue;}break;}for(i++;i<quotes.length;i++){if(i+offset>=0&&i+offset<quotes.length)quotes[i+offset][name]=quotes[i]["TRI2 "+sd.name];}return;};/**
	 * Calculate function for weighted moving average
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 */CIQ.Studies.calculateMovingAverageWeighted=function(stx,sd){var quotes=sd.chart.scrubbed;var accAdd=0;var accSubtract=0;var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
var divisor=sd.days*(sd.days+1)/2;var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var vals=[];var start=sd.startFrom;// backload the past data into the array
var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;start=i;continue;}if(vals.length==sd.days-1)break;vals.unshift(val);}if(vals.length<sd.days-1){vals=[];start=0;// not enough records to continue where left off
}for(i=0;i<vals.length;i++){accAdd+=(i+1)*vals[i];accSubtract+=vals[i];}for(i=start;i<quotes.length;i++){var quote=quotes[i];val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];var notOverflowing=i+offset>=0&&i+offset<quotes.length;var offsetQuote=notOverflowing?quotes[i+offset]:null;if(!val&&val!==0){if(offsetQuote)offsetQuote[name]=null;continue;}vals.push(val);if(vals.length>sd.days){accAdd-=accSubtract;accSubtract-=vals.shift();}accAdd+=vals.length*val;accSubtract+=val;if(i<sd.days-1){if(offsetQuote)offsetQuote[name]=null;}else{if(offsetQuote)offsetQuote[name]=accAdd/divisor;}}};/**
	 * Calculate function for klinger
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateKlinger=function(stx,sd){var quotes=sd.chart.scrubbed;var shortCycle=Number(sd.inputs["Short Cycle"]);var longCycle=Number(sd.inputs["Long Cycle"]);if(quotes.length<Math.max(shortCycle,longCycle)+1){sd.error=true;return;}var field=sd.name+"_hist",klinger="Klinger "+sd.name,klingerSignal="KlingerSignal "+sd.name,signedVolume="_SV "+sd.name,shortEMA="_EMA-S "+sd.name,longEMA="_EMA-L "+sd.name,i;for(i=Math.max(1,sd.startFrom);i<quotes.length;i++){var sv=quotes[i].Volume;if(quotes[i]["hlc/3"]<quotes[i-1]["hlc/3"])sv*=-1;quotes[i][signedVolume]=sv;}CIQ.Studies.MA("exponential",shortCycle,signedVolume,0,"_EMA-S",stx,sd);CIQ.Studies.MA("exponential",longCycle,signedVolume,0,"_EMA-L",stx,sd);for(i=Math.max(longCycle,sd.startFrom);i<quotes.length;i++){quotes[i][klinger]=quotes[i][shortEMA]-quotes[i][longEMA];}CIQ.Studies.MA("exponential",Number(sd.inputs["Signal Periods"]),klinger,0,"KlingerSignal",stx,sd);for(i=sd.startFrom;i<quotes.length;i++){quotes[i][field]=quotes[i][klinger]-quotes[i][klingerSignal];}};/**
	 * Calculate function for stochastics
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateStochastics=function(stx,sd){if(!sd.smooth)sd.smooth=sd.inputs.Smooth;var field=sd.inputs.Field;if(!field||field=="field")field="Close";var fastPeriod=sd.inputs["%K Periods"];if(!fastPeriod)fastPeriod=sd.days;var quotes=sd.chart.scrubbed;if(quotes.length<Math.max(fastPeriod,sd.days)+1){sd.error=true;return;}var smoothingPeriod=sd.inputs["%K Smoothing Periods"];if(smoothingPeriod)sd.smooth=true;else if(sd.smooth)smoothingPeriod=3;var slowPeriod=sd.inputs["%D Periods"];if(!slowPeriod)slowPeriod=3;function computeStochastics(position,field,days){var beg=position-days+1;var high=Number.MAX_VALUE*-1,low=Number.MAX_VALUE;for(var i=beg;i<=position;i++){low=Math.min(low,quotes[i].Low);high=Math.max(high,quotes[i].High);}var k=high==low?0:(quotes[position][field]-low)/(high-low)*100;return k;}sd.outputMap={};sd.outputMap["%K "+sd.name]="Fast";sd.outputMap["%D "+sd.name]="Slow";for(var i=Math.max(fastPeriod,sd.startFrom);i<quotes.length;i++){quotes[i][sd.name]=computeStochastics(i,field,fastPeriod);}CIQ.Studies.MA("simple",sd.smooth?smoothingPeriod:1,sd.name,0,"%K",stx,sd);CIQ.Studies.MA("simple",slowPeriod,"%K "+sd.name,0,"%D",stx,sd);};CIQ.Studies.calculateStudyATR=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;if(quotes.length<period+1){sd.error=true;return;}var total=0;var name=sd.name;for(var i=Math.max(sd.startFrom,1);i<quotes.length;i++){var prices=quotes[i];var pd=quotes[i-1];var trueRange=prices.trueRange;if(pd["Sum True Range "+name])total=pd["Sum True Range "+name];total+=trueRange;if(i>period)total-=quotes[i-period]["True Range "+name];prices["True Range "+name]=trueRange;prices["Sum True Range "+name]=total;if(i==period)prices["ATR "+name]=total/period;else if(i>period)prices["ATR "+name]=(pd["ATR "+name]*(period-1)+trueRange)/period;}};CIQ.Studies.calculatePSAR=function(stx,sd){var quotes=sd.chart.scrubbed;var af=0;var ep=null;var lasttrend=false;var SAR=0;var step=parseFloat(sd.inputs["Minimum AF"]);var maxStep=parseFloat(sd.inputs["Maximum AF"]);function doReset(){af=0;ep=null;lasttrend=!lasttrend;}if(sd.startFrom>0){SAR=quotes[sd.startFrom-1]["Result "+sd.name];var state=quotes[sd.startFrom-1]["_state "+sd.name];if(state&&state.length==3){af=state[0];ep=state[1];lasttrend=state[2];}}for(var i=sd.startFrom-1;i<quotes.length-1;i++){if(i<0)continue;var priorSAR=SAR;if(lasttrend){if(!ep||ep<quotes[i].High){ep=quotes[i].High;af=Math.min(af+step,maxStep);}SAR=priorSAR+af*(ep-priorSAR);var lowestPrior2Lows=Math.min(quotes[Math.max(1,i)-1].Low,quotes[i].Low);if(SAR>quotes[i+1].Low){SAR=ep;doReset();}else if(SAR>lowestPrior2Lows){SAR=lowestPrior2Lows;}}else{if(!ep||ep>quotes[i].Low){ep=quotes[i].Low;af=Math.min(af+step,maxStep);}SAR=priorSAR+af*(ep-priorSAR);var highestPrior2Highs=Math.max(quotes[Math.max(1,i)-1].High,quotes[i].High);if(SAR<quotes[i+1].High){SAR=ep;doReset();}else if(SAR<highestPrior2Highs){SAR=highestPrior2Highs;}}quotes[i+1]["Result "+sd.name]=SAR;quotes[i+1]["_state "+sd.name]=[af,ep,lasttrend];}};CIQ.Studies.calculateTRIX=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var name=sd.name;var fields=["Close","_MA1 "+name,"_MA2 "+name,"_MA3 "+name];for(var e=0;e<fields.length-1;e++){CIQ.Studies.MA("exponential",sd.days,fields[e],0,"_MA"+(e+1).toString(),stx,sd);}var ma3=fields[3];for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var q0=quotes[i-1][ma3];if(!q0)continue;quotes[i]["Result "+name]=100*(quotes[i][ma3]/q0-1);}};CIQ.Studies.calculateIntradayMomentum=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;if(quotes.length<period+1){sd.error=true;return;}var totalUp=0;var totalDown=0;if(sd.startFrom>1){totalUp=quotes[sd.startFrom-1]["_totUp "+sd.name];totalDown=quotes[sd.startFrom-1]["_totDn "+sd.name];}for(var i=sd.startFrom;i<quotes.length;i++){var diff=quotes[i].Close-quotes[i].Open;if(diff>0)totalUp+=diff;else totalDown-=diff;if(i>=period){var pDiff=quotes[i-period].Close-quotes[i-period].Open;if(pDiff>0)totalUp-=pDiff;else totalDown+=pDiff;}quotes[i]["Result "+sd.name]=100*totalUp/(totalUp+totalDown);quotes[i]["_totUp "+sd.name]=totalUp;quotes[i]["_totDn "+sd.name]=totalDown;}};CIQ.Studies.calculateQStick=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}for(var i=sd.startFrom;i<quotes.length;i++){quotes[i]["_Close-Open "+sd.name]=quotes[i].Close-quotes[i].Open;}CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"_Close-Open "+sd.name,0,"Result",stx,sd);};CIQ.Studies.calculateSchaff=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;var shortCycle=Number(sd.inputs["Short Cycle"]);var longCycle=Number(sd.inputs["Long Cycle"]);if(quotes.length<Math.max(period,shortCycle,longCycle)+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var factor=0.5;CIQ.Studies.MA(sd.inputs["Moving Average Type"],shortCycle,field,0,"_MACD1",stx,sd);CIQ.Studies.MA(sd.inputs["Moving Average Type"],longCycle,field,0,"_MACD2",stx,sd);function getLLVHHV(p,x,n){var l=null,h=null;for(var j=x-p+1;j<=x;j++){var d=quotes[j][n+" "+sd.name];if(!d)continue;l=l===null?d:Math.min(l,d);h=h===null?d:Math.max(h,d);}return[l,h];}var f1=0,f2=0;for(var i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];quote["Result "+sd.name]=f2;if(i<longCycle-1)continue;quote["_MACD "+sd.name]=quote["_MACD1 "+sd.name]-quote["_MACD2 "+sd.name];if(i<longCycle+(period-1))continue;var lh=getLLVHHV(period,i,"_MACD");f1=lh[1]>lh[0]?100*(quote["_MACD "+sd.name]-lh[0])/(lh[1]-lh[0]):f1;quote["_PF "+sd.name]=quotes[i-1]["_PF "+sd.name]?quotes[i-1]["_PF "+sd.name]+factor*(f1-quotes[i-1]["_PF "+sd.name]):f1;if(i<longCycle+2*(period-1))continue;lh=getLLVHHV(period,i,"_PF");f2=lh[1]>lh[0]?100*(quote["_PF "+sd.name]-lh[0])/(lh[1]-lh[0]):f2;quote["Result "+sd.name]=quotes[i-1]["Result "+sd.name]?quotes[i-1]["Result "+sd.name]+factor*(f2-quotes[i-1]["Result "+sd.name]):f2;}};CIQ.Studies.calculateStochMomentum=function(stx,sd){var pKPeriods=Number(sd.inputs["%K Periods"]);var pKSmoothPeriods=Number(sd.inputs["%K Smoothing Periods"]);var pK2SmoothPeriods=Number(sd.inputs["%K Double Smoothing Periods"]);var pDPeriods=Number(sd.inputs["%D Periods"]);var quotes=sd.chart.scrubbed;if(quotes.length<pKPeriods+pKSmoothPeriods+pK2SmoothPeriods-1||quotes.length<pDPeriods){sd.error=true;return;}function getLLVHHV(p,x){var l=null,h=null;for(var j=x-p+1;j<=x;j++){l=l===null?quotes[j].Low:Math.min(l,quotes[j].Low);h=h===null?quotes[j].High:Math.max(h,quotes[j].High);}return[l,h];}var i;for(i=Math.max(pKPeriods,sd.startFrom)-1;i<quotes.length;i++){var quote=quotes[i];var lh=getLLVHHV(pKPeriods,i);quote["_H "+sd.name]=quote.Close-(lh[0]+lh[1])/2;quote["_DHL "+sd.name]=lh[1]-lh[0];}CIQ.Studies.MA("exponential",pKSmoothPeriods,"_H "+sd.name,0,"_HS1",stx,sd);CIQ.Studies.MA("exponential",pK2SmoothPeriods,"_HS1 "+sd.name,0,"_HS2",stx,sd);CIQ.Studies.MA("exponential",pKSmoothPeriods,"_DHL "+sd.name,0,"_DHL1",stx,sd);CIQ.Studies.MA("exponential",pK2SmoothPeriods,"_DHL1 "+sd.name,0,"_DHL2",stx,sd);for(i=pKPeriods-1;i<quotes.length;i++){quotes[i]["%K "+sd.name]=quotes[i]["_HS2 "+sd.name]/(0.5*quotes[i]["_DHL2 "+sd.name])*100;}CIQ.Studies.MA(sd.inputs["%D Moving Average Type"],pDPeriods,"%K "+sd.name,0,"%D",stx,sd);sd.zoneOutput="%K";};CIQ.Studies.calculateEhlerFisher=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}function getLLVHHV(p,x){var l=Number.MAX_VALUE,h=Number.MAX_VALUE*-1;for(var j=x-p+1;j<=x;j++){var d=(quotes[j].High+quotes[j].Low)/2;l=Math.min(l,d);h=Math.max(h,d);}return[l,h];}var n=0;if(sd.startFrom>1)n=quotes[sd.startFrom-1]["_n "+sd.name];for(var i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];if(i<sd.days-1){quote["EF "+sd.name]=quote["EF Trigger "+sd.name]=n;continue;}var lh=getLLVHHV(sd.days,i);n=0.33*2*(((quotes[i].High+quotes[i].Low)/2-lh[0])/Math.max(0.000001,lh[1]-lh[0])-0.5)+0.67*n;if(n>0)n=Math.min(n,0.9999);else if(n<0)n=Math.max(n,-0.9999);var previous=i?quotes[i-1]["EF "+sd.name]:0;quote["EF "+sd.name]=0.5*Math.log((1+n)/(1-n))+0.5*previous;quote["EF Trigger "+sd.name]=previous;quote["_n "+sd.name]=n;}};CIQ.Studies.calculatePrettyGoodOscillator=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}CIQ.Studies.MA("exponential",sd.days,"trueRange",0,"_EMA",stx,sd);CIQ.Studies.MA("simple",sd.days,"Close",0,"_SMA",stx,sd);for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){if(!quotes[i]["_SMA "+sd.name]||!quotes[i]["_EMA "+sd.name])continue;quotes[i]["Result "+sd.name]=(quotes[i].Close-quotes[i]["_SMA "+sd.name])/quotes[i]["_EMA "+sd.name];}};CIQ.Studies.calculateUltimateOscillator=function(stx,sd){var quotes=sd.chart.scrubbed;var cycle=[sd.inputs["Cycle 1"],sd.inputs["Cycle 2"],sd.inputs["Cycle 3"]];var start=Math.max(cycle[0],cycle[1],cycle[2]);if(quotes.length<start+1){sd.error=true;return;}var c01=cycle[0]*cycle[1];var c02=cycle[0]*cycle[2];var c12=cycle[1]*cycle[2];var accbp=[0,0,0];var acctr=[0,0,0];if(sd.startFrom){if(quotes[sd.startFrom-1]["_accbp "+sd.name])accbp=quotes[sd.startFrom-1]["_accbp "+sd.name].slice();if(quotes[sd.startFrom-1]["_acctr "+sd.name])acctr=quotes[sd.startFrom-1]["_acctr "+sd.name].slice();}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var minLC=Math.min(quotes[i].Low,quotes[i-1].Close);var bp=quotes[i].Close-minLC;var tr=Math.max(quotes[i].High,quotes[i-1].Close)-minLC;for(var x=0;x<cycle.length;x++){accbp[x]+=bp;acctr[x]+=tr;if(i>cycle[x]){var p_minLC=Math.min(quotes[i-cycle[x]].Low,quotes[i-cycle[x]-1].Close);var p_bp=quotes[i-cycle[x]].Close-p_minLC;var p_tr=Math.max(quotes[i-cycle[x]].High,quotes[i-cycle[x]-1].Close)-p_minLC;accbp[x]-=p_bp;acctr[x]-=p_tr;}}quotes[i]["_accbp "+sd.name]=accbp.slice();quotes[i]["_acctr "+sd.name]=acctr.slice();if(i<start)continue;var numerator=c12*accbp[0]/acctr[0]+c02*accbp[1]/acctr[1]+c01*accbp[2]/acctr[2];var denominator=c12+c02+c01;quotes[i]["Result "+sd.name]=100*numerator/denominator;}};CIQ.Studies.calculatePriceVolumeTrend=function(stx,sd){var field=sd.inputs.Field;if(!field||field=="field")field="Close";var quotes=sd.chart.scrubbed;var total=0;if(sd.startFrom>1){total=quotes[sd.startFrom-1]["Result "+sd.name];}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){if(!quotes[i][field])continue;if(!quotes[i-1][field])continue;total+=quotes[i].Volume*(quotes[i][field]-quotes[i-1][field])/quotes[i-1][field];quotes[i]["Result "+sd.name]=total;}};CIQ.Studies.calculateOnBalanceVolume=function(stx,sd){var field=sd.inputs.Field;if(!field||field=="field")field="Close";var minTick=sd.inputs["Min Tick Value"];var obv=false;if(!minTick&&minTick!==0){obv=true;minTick=0;}var quotes=sd.chart.scrubbed,direction=0;var quote,quote1;for(var i=sd.startFrom;i<quotes.length;i++){quote=quotes[i];if(!i||!quote[field])continue;if(quotes[i-1][field])quote1=quotes[i-1];if(!quote1)continue;if(quote[field]-quote1[field]>minTick)direction=1;else if(quote1[field]-quote[field]>minTick)direction=-1;else if(obv)direction=0;var total=quote1["Result "+sd.name];if(!total)total=0;total+=quote.Volume*direction;quote["Result "+sd.name]=total;}};CIQ.Studies.calculateVolumeIndex=function(stx,sd){var field=sd.inputs.Field;if(!field||field=="field")field="Close";var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var total=100;if(sd.startFrom>1)total=quotes[sd.startFrom-1]["Index "+sd.name];for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var val=quotes[i][field],vol=quotes[i].Volume;if(val&&_typeof(val)=="object"){vol=val.Volume;val=val[sd.subField];}var val1=quotes[i-1][field],vol1=quotes[i-1].Volume;if(val1&&_typeof(val1)=="object"){vol1=val1.Volume;val1=val1[sd.subField];}if(!val)continue;if(!val1)continue;if(sd.type=="Pos Vol"&&vol>vol1||sd.type=="Neg Vol"&&vol<vol1){total*=val/val1;}quotes[i]["Index "+sd.name]=total;}CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"Index "+sd.name,0,"MA",stx,sd);};CIQ.Studies.calculateHistoricalVolatility=function(stx,sd){function intFactor(days){if(isNaN(days))days=365;if(stx.layout.interval=="day")return days;else if(stx.layout.interval=="week")return 52;else if(stx.layout.interval=="month")return 12;return days;}var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var mult=sd.inputs["Standard Deviations"];if(mult<0)mult=1;var annualizingFactor=100*Math.sqrt(intFactor(sd.inputs["Days Per Year"]))*mult;var arr=[];var accum=0;if(sd.startFrom>1){accum=quotes[sd.startFrom-1]["_state "+sd.name][0];arr=quotes[sd.startFrom-1]["_state "+sd.name][1].slice();}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var denom=quotes[i-1][field];if(denom){var ln=Math.log(quotes[i][field]/denom);arr.push(ln);accum+=ln;if(i>=sd.days){var d2=0;accum/=sd.days;for(var j=0;j<arr.length;j++){d2+=Math.pow(arr[j]-accum,2);}accum*=sd.days;accum-=arr.shift();quotes[i]["Result "+sd.name]=Math.sqrt(d2/sd.days)*annualizingFactor;}}quotes[i]["_state "+sd.name]=[accum,arr.slice()];}};CIQ.Studies.calculateSwingIndex=function(stx,sd){var T=sd.inputs["Limit Move Value"];if(T===null||isNaN(T))T=99999;var quotes=sd.chart.scrubbed;var total=0;if(sd.startFrom>1)total=quotes[sd.startFrom-1]["Result "+sd.name];for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var A=Math.abs(quotes[i].High-quotes[i-1].Close);var B=Math.abs(quotes[i].Low-quotes[i-1].Close);var C=Math.abs(quotes[i].High-quotes[i].Low);var D=Math.abs(quotes[i-1].Close-quotes[i-1].Open);var K=Math.max(A,B);var M=Math.max(C,K);var R=M+0.25*D;if(M==A)R-=0.5*B;else if(M==B)R-=0.5*A;var swing=50*(quotes[i].Close-quotes[i-1].Close+0.5*(quotes[i].Close-quotes[i].Open)+0.25*(quotes[i-1].Close-quotes[i-1].Open))/R*(K/T);if(R===0||T===0)swing=0;if(sd.type=="Swing")total=0;total+=swing;quotes[i]["Result "+sd.name]=total;}};CIQ.Studies.calculateADX=function(stx,sd){CIQ.Studies.calculateStudyATR(stx,sd);var quotes=sd.chart.scrubbed;var period=sd.days;var smoothing=parseInt(sd.inputs["Smoothing Period"],10);if(!smoothing&&smoothing!==0)smoothing=period;if(quotes.length<sd.days+1){sd.error=true;return;}var smoothTR=0;var smoothPlusDM=0;var smoothMinusDM=0;var runningDX=0;var quote;for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){quote=quotes[i];var plusDM=Math.max(0,quote.High-quotes[i-1].High);var minusDM=Math.max(0,quotes[i-1].Low-quote.Low);if(plusDM>minusDM)minusDM=0;else if(minusDM>plusDM)plusDM=0;else plusDM=minusDM=0;if(i<=period){smoothPlusDM+=plusDM;smoothMinusDM+=minusDM;smoothTR+=quote["True Range "+sd.name];}else{smoothPlusDM=quotes[i-1]["_sm+DM "+sd.name]*(period-1)/period+plusDM;smoothMinusDM=quotes[i-1]["_sm-DM "+sd.name]*(period-1)/period+minusDM;smoothTR=quotes[i-1]["_smTR "+sd.name]*(period-1)/period+quote["True Range "+sd.name];}quote["_sm+DM "+sd.name]=smoothPlusDM;quote["_sm-DM "+sd.name]=smoothMinusDM;quote["_smTR "+sd.name]=smoothTR;if(i<period)continue;var plusDI=100*smoothPlusDM/smoothTR;var minusDI=100*smoothMinusDM/smoothTR;var DX=100*Math.abs(plusDI-minusDI)/(plusDI+minusDI);quote["+DI "+sd.name]=plusDI;quote["-DI "+sd.name]=minusDI;if(sd.inputs.Series!==false&&smoothing){if(i<period+smoothing-1){if(i==sd.startFrom){for(var j=period;j<sd.startFrom;j++){runningDX+=100*Math.abs(quotes[j]["+DI "+sd.name]-quotes[j]["-DI "+sd.name])/(quotes[j]["+DI "+sd.name]+quotes[j]["-DI "+sd.name]);}}runningDX+=DX;}else if(i==period+smoothing-1){quote["ADX "+sd.name]=runningDX/smoothing;}else{quote["ADX "+sd.name]=(quotes[i-1]["ADX "+sd.name]*(smoothing-1)+DX)/smoothing;}}if(sd.inputs.Histogram){var histogram=sd.name+"_hist";if(!quote["+DI "+sd.name]&&quote["+DI "+sd.name]!==0)continue;if(!quote["-DI "+sd.name]&&quote["-DI "+sd.name]!==0)continue;quote[histogram]=quote["+DI "+sd.name]-quote["-DI "+sd.name];if(sd.inputs.Series===false){//delete these so yAxis computes max/min correctly
quote["+DI "+sd.name]=null;quote["-DI "+sd.name]=null;}}}};CIQ.Studies.calculateRandomWalk=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}for(var i=Math.max(2,sd.startFrom);i<quotes.length;i++){var ttr=0;var high=quotes[i].High;var low=quotes[i].Low;var maxHigh=0;var maxLow=0;for(var j=1;j<=sd.days;j++){if(i<=j){maxHigh=maxLow=0;break;}ttr+=quotes[i-j].trueRange;var denom=ttr/j*Math.sqrt(j);if(denom){// skip if denominator is 0 --
var cH=(high-quotes[i-j].Low)/denom;var cL=(quotes[i-j].High-low)/denom;maxHigh=Math.max(maxHigh,cH);maxLow=Math.max(maxLow,cL);}}quotes[i]["Random Walk High "+sd.name]=maxHigh;quotes[i]["Random Walk Low "+sd.name]=maxLow;}};CIQ.Studies.calculateRateOfChange=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";if(sd.parameters.isVolume)field="Volume";var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var offset=sd.inputs["Center Line"];if(!offset)offset=0;else offset=parseInt(offset,10);for(var i=Math.max(sd.startFrom,sd.days);i<quotes.length;i++){var currentVal=quotes[i][field];if(currentVal&&_typeof(currentVal)=="object")currentVal=currentVal[sd.subField];var pastVal=quotes[i-sd.days][field];if(pastVal&&_typeof(pastVal)=="object")pastVal=pastVal[sd.subField];if(sd.type=="Momentum")quotes[i][name]=currentVal-pastVal+offset;else{var denom=pastVal;if(denom){// skip if denominator is 0 --
quotes[i][name]=100*(currentVal/denom-1)+offset;}}}};CIQ.Studies.calculateTypicalPrice=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;if(quotes.length<period+1){if(!sd.overlay)sd.error=true;return;}var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var field="hlc/3";if(sd.type=="Med Price")field="hl/2";else if(sd.type=="Weighted Close")field="hlcc/4";var total=0;if(sd.startFrom<=period)sd.startFrom=0;for(var i=sd.startFrom;i<quotes.length;i++){if(i&&quotes[i-1][name])total=quotes[i-1][name]*period;total+=quotes[i][field];if(i>=period){total-=quotes[i-period][field];quotes[i][name]=total/period;}}};CIQ.Studies.calculateElderRay=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}CIQ.Studies.MA("exponential",sd.days,"Close",0,"_EMA",stx,sd);for(var i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){quotes[i][sd.name+"_hist1"]=quotes[i].High-quotes[i]["_EMA "+sd.name];quotes[i][sd.name+"_hist2"]=quotes[i].Low-quotes[i]["_EMA "+sd.name];}};CIQ.Studies.calculateElderForce=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){quotes[i]["_EF1 "+sd.name]=quotes[i].Volume*(quotes[i].Close-quotes[i-1].Close);}CIQ.Studies.MA("exponential",sd.days,"_EF1 "+sd.name,0,"Result",stx,sd);};CIQ.Studies.calculateCenterOfGravity=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";for(var i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){var num=0,den=0;for(var j=0;j<sd.days;j++){num-=(j+1)*quotes[i-j][field];den+=quotes[i-j][field];}if(den)quotes[i]["Result "+sd.name]=num/den;}};CIQ.Studies.calculateEaseOfMovement=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var avgCurrent=(quotes[i].High+quotes[i].Low)/2;var avgPrior=(quotes[i-1].High+quotes[i-1].Low)/2;var dm=avgCurrent-avgPrior;var br=quotes[i].Volume/100000000/(quotes[i].High-quotes[i].Low);var result=dm/br;if(!isFinite(result))quotes[i]["_EOM1 "+sd.name]=NaN;//With NaN, the study plotter will plot from the previous point
//directly to the next point after the current tick. Infinity was making the
//study not plot in the panel at all while the data point was in dataSegement.
else quotes[i]["_EOM1 "+sd.name]=result;}CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"_EOM1 "+sd.name,0,"Result",stx,sd);};CIQ.Studies.calculateChaikinVolatility=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}var i;for(i=sd.startFrom;i<quotes.length;i++){quotes[i]["_High-Low "+sd.name]=quotes[i].High-quotes[i].Low;}CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"_High-Low "+sd.name,0,"_MA",stx,sd);var roc=sd.inputs["Rate Of Change"];if(!roc)roc=sd.days;for(i=Math.max(sd.startFrom,roc);i<quotes.length;i++){if(!quotes[i-roc]["_MA "+sd.name])continue;quotes[i]["Result "+sd.name]=100*(quotes[i]["_MA "+sd.name]/quotes[i-roc]["_MA "+sd.name]-1);}};CIQ.Studies.calculateChaikinMoneyFlow=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}var sumMoneyFlow=0,sumVolume=0;var startQuote=quotes[sd.startFrom-1];if(startQuote){if(startQuote["_sumMF "+sd.name])sumMoneyFlow=startQuote["_sumMF "+sd.name];if(startQuote["_sumV "+sd.name])sumVolume=startQuote["_sumV "+sd.name];}for(var i=sd.startFrom;i<quotes.length;i++){if(quotes[i].High==quotes[i].Low)quotes[i]["_MFV "+sd.name]=0;else quotes[i]["_MFV "+sd.name]=quotes[i].Volume*(2*quotes[i].Close-quotes[i].High-quotes[i].Low)/(quotes[i].High-quotes[i].Low);sumMoneyFlow+=quotes[i]["_MFV "+sd.name];sumVolume+=quotes[i].Volume;if(i>sd.days-1){sumMoneyFlow-=quotes[i-sd.days]["_MFV "+sd.name];sumVolume-=quotes[i-sd.days].Volume;if(sumVolume)quotes[i]["Result "+sd.name]=sumMoneyFlow/sumVolume;}quotes[i]["_sumMF "+sd.name]=sumMoneyFlow;quotes[i]["_sumV "+sd.name]=sumVolume;}};CIQ.Studies.calculateTwiggsMoneyFlow=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days){sd.error=true;return;}var sumMoneyFlow=0,sumVolume=0;var startQuote=quotes[sd.startFrom-1];if(startQuote){if(startQuote["_sumMF "+sd.name])sumMoneyFlow=startQuote["_sumMF "+sd.name];if(startQuote["_sumV "+sd.name])sumVolume=startQuote["_sumV "+sd.name];}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var trh=Math.max(quotes[i-1].Close,quotes[i].High);var trl=Math.min(quotes[i-1].Close,quotes[i].Low);quotes[i]["_MFV "+sd.name]=quotes[i].Volume*(2*quotes[i].Close-trh-trl)/(trh-trl===0?999999:trh-trl);if(i>sd.days-1){sumMoneyFlow*=(sd.days-1)/sd.days;sumVolume*=(sd.days-1)/sd.days;}sumMoneyFlow+=quotes[i]["_MFV "+sd.name];sumVolume+=quotes[i].Volume;if(i>sd.days-1){if(sumVolume)quotes[i]["Result "+sd.name]=sumMoneyFlow/(sumVolume>0?sumVolume:999999);}quotes[i]["_sumMF "+sd.name]=sumMoneyFlow;quotes[i]["_sumV "+sd.name]=sumVolume;}};CIQ.Studies.calculateMassIndex=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<Math.max(9,sd.days+1)){sd.error=true;return;}for(var i=sd.startFrom;i<quotes.length;i++){quotes[i]["_High-Low "+sd.name]=quotes[i].High-quotes[i].Low;}CIQ.Studies.MA("exponential",9,"_High-Low "+sd.name,0,"_EMA",stx,sd);CIQ.Studies.MA("exponential",9,"_EMA "+sd.name,0,"_EMA2",stx,sd);var total=0;if(quotes[sd.startFrom-1]&&quotes[sd.startFrom-1]["_total "+sd.name])total=quotes[sd.startFrom-1]["_total "+sd.name];for(var j=Math.max(17,sd.startFrom);j<quotes.length;j++){total+=quotes[j]["_EMA "+sd.name]/quotes[j]["_EMA2 "+sd.name];if(j>=17+sd.days-1){quotes[j]["Result "+sd.name]=total;total-=quotes[j-sd.days+1]["_EMA "+sd.name]/quotes[j-sd.days+1]["_EMA2 "+sd.name];}quotes[j]["_total "+sd.name]=total;}};CIQ.Studies.calculateMoneyFlowIndex=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var cumPosMF=0,cumNegMF=0;var startQuote=quotes[sd.startFrom-1];var rawMFLbl="_rawMF "+sd.name;var cumMFLbl="_cumMF "+sd.name;var resultLbl="Result "+sd.name;if(startQuote&&startQuote[cumMFLbl]){cumPosMF=startQuote[cumMFLbl][0];cumNegMF=startQuote[cumMFLbl][1];}for(var i=sd.startFrom;i<quotes.length;i++){var typPrice=quotes[i]["hlc/3"];if(i>0){var lastTypPrice=quotes[i-1]["hlc/3"];var rawMoneyFlow=typPrice*quotes[i].Volume;if(typPrice>lastTypPrice){cumPosMF+=rawMoneyFlow;}else if(typPrice<lastTypPrice){rawMoneyFlow*=-1;cumNegMF-=rawMoneyFlow;}else{rawMoneyFlow=0;}if(i>sd.days){var old=quotes[i-sd.days][rawMFLbl];if(old>0)cumPosMF-=old;else cumNegMF+=old;if(cumNegMF===0)quotes[i][resultLbl]=100;else quotes[i][resultLbl]=100-100/(1+cumPosMF/cumNegMF);}quotes[i][rawMFLbl]=rawMoneyFlow;quotes[i][cumMFLbl]=[cumPosMF,cumNegMF];}}};CIQ.Studies.calculateChandeMomentum=function(stx,sd){var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";// only used when called from VMA
var sumMomentum=0,absSumMomentum=0;var history=[];for(var i=sd.startFrom-sd.days+1;i<quotes.length;i++){if(i<1)continue;var q=quotes[i][field],q1=quotes[i-1][field];if(q&&_typeof(q)=="object")q=q.Close;if(q1&&_typeof(q1)=="object")q1=q1.Close;if(q1===undefined)continue;// the field is not defined yet
var diff=q-q1;history.push(diff);sumMomentum+=diff;absSumMomentum+=Math.abs(diff);if(history.length==sd.days){quotes[i][name]=100*sumMomentum/absSumMomentum;var old=history.shift();sumMomentum-=old;absSumMomentum-=Math.abs(old);}}};CIQ.Studies.calculateChandeForecast=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";CIQ.Studies.MA("time series",sd.days,field,0,"MA",stx,sd);for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){var val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];quotes[i]["Result "+sd.name]=100*(1-quotes[i]["MA "+sd.name]/val);}};CIQ.Studies.calculateDetrendedPrice=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var offset=Math.floor(sd.days/2+1);CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,field,-offset,"MA",stx,sd);for(var i=Math.max(sd.days-offset-1,sd.startFrom-offset);i<quotes.length-offset;i++){var val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];quotes[i]["Result "+sd.name]=val-quotes[i]["MA "+sd.name];}};CIQ.Studies.calculateAroon=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var daysSinceHigh=0,daysSinceLow=0;var xDayHigh=null,xDayLow=null;if(sd.startFrom>0){var state=quotes[sd.startFrom-1]["_state "+sd.name];if(state){daysSinceHigh=state[0];daysSinceLow=state[1];xDayHigh=state[2];xDayLow=state[3];}}var j;for(var i=sd.startFrom;i<quotes.length;i++){if(xDayHigh===null)xDayHigh=quotes[i].High;if(xDayLow===null)xDayLow=quotes[i].Low;xDayHigh=Math.max(xDayHigh,quotes[i].High);if(xDayHigh==quotes[i].High){daysSinceHigh=0;}else{daysSinceHigh++;if(daysSinceHigh>sd.days){xDayHigh=quotes[i].High;daysSinceHigh=0;for(j=1;j<=sd.days;j++){xDayHigh=Math.max(xDayHigh,quotes[i-j].High);if(xDayHigh==quotes[i-j].High){daysSinceHigh=j;}}}}xDayLow=Math.min(xDayLow,quotes[i].Low);if(xDayLow==quotes[i].Low){daysSinceLow=0;}else{daysSinceLow++;if(daysSinceLow>sd.days){xDayLow=quotes[i].Low;daysSinceLow=0;for(j=1;j<=sd.days;j++){xDayLow=Math.min(xDayLow,quotes[i-j].Low);if(xDayLow==quotes[i-j].Low){daysSinceLow=j;}}}}quotes[i]["Aroon Up "+sd.name]=100*(1-daysSinceHigh/sd.days);quotes[i]["Aroon Down "+sd.name]=100*(1-daysSinceLow/sd.days);quotes[i]["Aroon Oscillator "+sd.name]=quotes[i]["Aroon Up "+sd.name]-quotes[i]["Aroon Down "+sd.name];quotes[i]["_state "+sd.name]=[daysSinceHigh,daysSinceLow,xDayHigh,xDayLow];}};CIQ.Studies.calculatePrimeNumber=function(stx,sd){var primes=[];function isPrime(x){if(x<=0)return false;else if(x!=Math.floor(x))return false;//assume x is an int
else if(primes[x]===true||primes[x]===false)return primes[x];var q=parseInt(Math.sqrt(x),10);for(var i=2;i<=q;i++){if(x%i===0){primes[x]=false;return false;}}primes[x]=true;return true;}var quotes=sd.chart.scrubbed;for(var i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;var high=quote.High;//high=Math.ceil(high);
for(var h=0;high>0&&high<=10;h++){high*=10;}if(isPrime(high))high+=2;high=Math.ceil(high);if(high%2===0)high++;while(!isPrime(high)){high+=2;}high/=Math.pow(10,h);var low=quote.Low;//low=Math.floor(low);
for(var l=0;low>0&&low<=10;l++){low*=10;}if(isPrime(low))low-=2;low=Math.floor(low);if(low%2===0)low--;if(low>0){while(!isPrime(low)){low-=2;}low/=Math.pow(10,l);}if(sd.type=="Prime Number Bands"){quote["Prime Bands Top "+sd.name]=high;quote["Prime Bands Bottom "+sd.name]=Math.max(0,low);}else{var value=0;var tolerance=sd.inputs["Tolerance Percentage"]*(high-low)/100;var skew=high+low-2*quote.Close;if(skew<tolerance)value=1;else if(skew>tolerance)value=-1;if(value)quote["Result "+sd.name]=value;}}};CIQ.Studies.calculateVerticalHorizontalFilter=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}sd.mhml=new CIQ.Studies.StudyDescriptor(sd.name,sd.type,sd.panel);sd.mhml.chart=sd.chart;sd.mhml.days=sd.days;sd.mhml.startFrom=sd.startFrom;sd.mhml.inputs={};sd.mhml.outputs={"_MHML":null};CIQ.Studies.calculateMaxHighMinLow(stx,sd.mhml);var sumChanges=0;var changes=[];for(var i=Math.max(1,sd.startFrom-sd.days);i<quotes.length;i++){var change=Math.abs(quotes[i].Close-quotes[i-1].Close);changes.push(change);sumChanges+=change;if(changes.length==sd.days){quotes[i]["Result "+sd.name]=quotes[i]["_MHML "+sd.name]/sumChanges;sumChanges-=changes.shift();}}};CIQ.Studies.calculatePriceOscillator=function(stx,sd){var quotes=sd.chart.scrubbed;var short=Number(sd.inputs["Short Cycle"]);var long=Number(sd.inputs["Long Cycle"]);if(quotes.length<Math.max(short,long)+1){sd.error=true;return;}var field=sd.inputs.Field;var maType=sd.inputs["Moving Average Type"];if(!maType)maType="simple";if(!field||field=="field")field="Close";if(sd.parameters.isVolume){field="Volume";maType="exponential";}var pts=sd.inputs["Points Or Percent"];if(!pts)pts="Percent";CIQ.Studies.MA(maType,short,field,0,"_Short MA",stx,sd);CIQ.Studies.MA(maType,long,field,0,"_Long MA",stx,sd);for(var i=Math.max(long,sd.startFrom);i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(pts=="Points")quote["Result "+sd.name]=quote["_Short MA "+sd.name]-quote["_Long MA "+sd.name];else quote["Result "+sd.name]=100*(quote["_Short MA "+sd.name]/quote["_Long MA "+sd.name]-1);if(sd.outputs["Increasing Bar"])quote[sd.name+"_hist"]=quote["Result "+sd.name];}};CIQ.Studies.calculateKeltner=function(stx,sd){CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"Close",0,"MA",stx,sd);CIQ.Studies.calculateStudyATR(stx,sd);CIQ.Studies.calculateGenericEnvelope(stx,sd,sd.inputs.Shift,"MA "+sd.name,"ATR "+sd.name);};CIQ.Studies.calculateCoppock=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";var longDays=parseInt(sd.inputs["Long RoC"],10);if(!longDays)longDays=14;var shortDays=parseInt(sd.inputs["Short RoC"],10);if(!shortDays)shortDays=11;var period=sd.days;if(!period)period=10;if(longDays<shortDays)return;if(quotes.length<Math.max(shortDays,longDays,period)+1){sd.error=true;return;}for(var i=Math.max(sd.startFrom,longDays);i<quotes.length;i++){var denom1=quotes[i-shortDays][field];var denom2=quotes[i-longDays][field];if(denom1&&denom2){// skip if denominator is 0 --
quotes[i]["_Sum "+sd.name]=100*(quotes[i][field]/denom1+quotes[i][field]/denom2-2);}}CIQ.Studies.MA("weighted",period,"_Sum "+sd.name,0,"Result",stx,sd);};CIQ.Studies.calculateLinearRegressionIndicator=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var sumWeights=sd.days*(sd.days+1)/2;var squaredSumWeights=Math.pow(sumWeights,2);var sumWeightsSquared=sumWeights*(2*sd.days+1)/3;var sumCloses=0;var sumWeightedCloses=0;var sumClosesSquared=0;if(sd.startFrom){var sums=quotes[sd.startFrom-1]["_sums "+sd.name];if(sums){sumWeightedCloses=sums[0];sumCloses=sums[1];sumClosesSquared=sums[2];}}for(var i=sd.startFrom;i<quotes.length;i++){var currentQuote=quotes[i][field];if(currentQuote&&_typeof(currentQuote)=="object")currentQuote=currentQuote[sd.subField];if(!currentQuote&&currentQuote!==0)continue;sumWeightedCloses+=sd.days*currentQuote-sumCloses;sumCloses+=currentQuote;sumClosesSquared+=Math.pow(currentQuote,2);if(i<sd.days-1)continue;else if(i>sd.days-1){var daysAgoQuote=quotes[i-sd.days][field];if(daysAgoQuote&&_typeof(daysAgoQuote)=="object")daysAgoQuote=daysAgoQuote[sd.subField];if(!daysAgoQuote&&daysAgoQuote!==0)continue;sumCloses-=daysAgoQuote;sumClosesSquared-=Math.pow(daysAgoQuote,2);}var b=(sd.days*sumWeightedCloses-sumWeights*sumCloses)/(sd.days*sumWeightsSquared-squaredSumWeights);quotes[i]["Slope "+sd.name]=b;var a=(sumCloses-b*sumWeights)/sd.days;quotes[i]["Intercept "+sd.name]=a;quotes[i]["Forecast "+sd.name]=a+b*sd.days;var c=(sd.days*sumWeightsSquared-squaredSumWeights)/(sd.days*sumClosesSquared-Math.pow(sumCloses,2));quotes[i]["RSquared "+sd.name]=b*b*c;quotes[i]["_sums "+sd.name]=[sumWeightedCloses,sumCloses,sumClosesSquared];}};CIQ.Studies.calculateBollinger=function(stx,sd){var field=sd.inputs.Field;if(!field||field=="field")field="Close";CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,field,0,"_MA",stx,sd);sd.std=new CIQ.Studies.StudyDescriptor(sd.name,"STD Dev",sd.panel);sd.std.chart=sd.chart;sd.std.startFrom=sd.startFrom;sd.std.days=sd.days;sd.std.inputs={"Field":field,"Standard Deviations":1,"Type":sd.inputs["Moving Average Type"]};sd.std.outputs={"_STD Dev":null};CIQ.Studies.calculateStandardDeviation(stx,sd.std);CIQ.Studies.calculateGenericEnvelope(stx,sd,sd.inputs["Standard Deviations"],"_MA "+sd.name,"_STD Dev "+sd.name);if(sd.type=="Boll %b")sd.zoneOutput="%b";};CIQ.Studies.calculateMAEnvelope=function(stx,sd){var field=sd.inputs.Field;if(!field||field=="field")field="Close";CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,field,0,"MA",stx,sd);var shiftType=sd.inputs["Shift Type"];var shift=sd.inputs.Shift;if(!shiftType){//legacy
shiftType="percent";shift=sd.inputs["Shift Percentage"];}if(shiftType=="percent"){CIQ.Studies.calculateGenericEnvelope(stx,sd,shift/100,"MA "+sd.name);}else if(shiftType=="points"){CIQ.Studies.calculateGenericEnvelope(stx,sd,null,"MA "+sd.name,null,Number(shift));}};/**
	 * Calculate function for preparing data to be used by displayChannel().
	 * Inserts the following fields in the dataSet:
	 * <code>
	 * quote[sd.type + " Top " + sd.name]=quote[centerIndex]+totalShift;<br>
	 * quote[sd.type + " Bottom " + sd.name]=quote[centerIndex]-totalShift;<br>
	 * quote[sd.type + " Median " + sd.name]=quote[centerIndex];<br>
	 * quote["Bandwidth " + sd.name]=200*totalShift/quote[centerIndex];<br>
	 * quote["%b " + sd.name]=50*((quote.Close-quote[centerIndex])/totalShift+1);<br>
	 * </code>
	 * Example: 'Prime Bands' + ' Top ' +  'Prime Number Bands (true)'.
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @param  {object} percentShift Used to calculate totalShift. Defaults to 0 (zero)
	 * @param  {object} [centerIndex=Close]  Quote element to use for center series (Open, Close, High, Low). Defaults to "Close"
	 * @param  {object} [offsetIndex=centerIndex]  Quote element to use for calculating totalShift (percentShift*quote[offsetIndex]+pointShift;)
	 * @param  {object} pointShift   Used to calculate totalShift.Defaults to 0 (zero)
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.calculateGenericEnvelope=function(stx,sd,percentShift,centerIndex,offsetIndex,pointShift){if(!percentShift)percentShift=0;if(!pointShift)pointShift=0;if(!centerIndex||centerIndex=="field")centerIndex="Close";if(!offsetIndex)offsetIndex=centerIndex;var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field==="field")field="Close";for(var i=sd.startFrom;quotes&&i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(!quote[centerIndex])continue;var closeValue=quote[field];if(closeValue&&_typeof(closeValue)=="object")closeValue=closeValue.Close;var centerValue=quote[centerIndex];if(centerValue&&_typeof(centerValue)=="object")centerValue=centerValue[sd.subField];var offsetValue=quote[offsetIndex];if(offsetValue&&_typeof(offsetValue)=="object")offsetValue=offsetValue[sd.subField];var totalShift=percentShift*offsetValue+pointShift;quote[sd.type+" Top "+sd.name]=centerValue+totalShift;quote[sd.type+" Bottom "+sd.name]=centerValue-totalShift;quote[sd.type+" Median "+sd.name]=centerValue;quote["Bandwidth "+sd.name]=centerValue?200*totalShift/centerValue:0;quote["%b "+sd.name]=50*((closeValue-centerValue)/totalShift+1);}};CIQ.Studies.calculateMaxHighMinLow=function(stx,sd){var quotes=sd.chart.scrubbed;var highPeriod=sd.days,lowPeriod=sd.days;if(sd.inputs["High Period"])highPeriod=sd.inputs["High Period"];if(sd.inputs["Low Period"])lowPeriod=sd.inputs["Low Period"];if(quotes.length<Math.max(highPeriod,lowPeriod)+1){sd.error=true;return;}var low=Number.MAX_VALUE,high=Number.MAX_VALUE*-1;var j;if(sd.startFrom>1){for(j=1;j<highPeriod;j++){high=Math.max(high,quotes[sd.startFrom-j].High);}for(j=1;j<lowPeriod;j++){low=Math.min(low,quotes[sd.startFrom-j].Low);}}for(var i=Math.max(0,sd.startFrom-1);i<quotes.length;i++){high=Math.max(high,quotes[i].High);low=Math.min(low,quotes[i].Low);if(i>=highPeriod){if(quotes[i-highPeriod].High==high){high=quotes[i].High;for(j=1;j<highPeriod;j++){high=Math.max(high,quotes[i-j].High);}}}if(i>=lowPeriod){if(quotes[i-lowPeriod].Low==low){low=quotes[i].Low;for(j=1;j<lowPeriod;j++){low=Math.min(low,quotes[i-j].Low);}}}var result=0;if(sd.type=="HHV"){result=high;}else if(sd.type=="LLV"){result=low;}else if(sd.type=="Donchian Width"){result=high-low;}else if(sd.type=="GAPO"||sd.type=="Gopala"){result=Math.log(high-low)/Math.log(lowPeriod);}else if(sd.type=="VT HZ Filter"){result=high-low;quotes[i]["_MHML "+sd.name]=result;continue;}else if(sd.type=="Williams %R"){result=-100*(high-quotes[i].Close)/(high-low);quotes[i]["Result "+sd.name]=result;continue;}if(i==quotes.length-1)break;if(sd.type=="Donchian Channel"){quotes[i+1]["Donchian High "+sd.name]=high;quotes[i+1]["Donchian Low "+sd.name]=low;quotes[i+1]["Donchian Median "+sd.name]=(high+low)/2;}else{//width
quotes[i+1]["Result "+sd.name]=result;}}};CIQ.Studies.calculateAccumulationDistribution=function(stx,sd){var quotes=sd.chart.scrubbed;for(var i=sd.startFrom;i<quotes.length;i++){if(!i)continue;var quote=quotes[i];var quote1=quotes[i-1];var todayAD=0;if(quote.Close>quote1.Close){todayAD=quote.Close-Math.min(quote.Low,quote1.Close);}else if(quote.Close<quote1.Close){todayAD=quote.Close-Math.max(quote.High,quote1.Close);}if(sd.inputs["Use Volume"])todayAD*=quote.Volume;var total=quote1["Result "+sd.name];if(!total)total=0;total+=todayAD;quote["Result "+sd.name]=total;}};CIQ.Studies.calculateCCI=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}CIQ.Studies.MA("simple",sd.days,"hlc/3",0,"MA",stx,sd);for(var i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;var md=0;for(var j=0;j<sd.days;j++){md+=Math.abs(quotes[i-j]["hlc/3"]-quote["MA "+sd.name]);}md/=sd.days;if(Math.abs(md)<0.00000001)quote["Result "+sd.name]=0;else quote["Result "+sd.name]=(quote["hlc/3"]-quote["MA "+sd.name])/(0.015*md);}};CIQ.Studies.calculateFractalChaos=function(stx,sd){var quotes=sd.chart.scrubbed;var fractalHigh=0;var fractalLow=0;var test=0;if(sd.startFrom&&sd.type=="Fractal Chaos Bands"){fractalHigh=quotes[sd.startFrom-1]["Fractal High "+sd.name];fractalLow=quotes[sd.startFrom-1]["Fractal Low "+sd.name];}for(var i=Math.max(4,sd.startFrom);i<quotes.length;i++){quotes[i]["Result "+sd.name]=0;var j;test=0;for(j=0;j<=i;j++){if(!quotes[i-j])break;if(quotes[i-j].High>quotes[i-2].High)break;if(j<2&&quotes[i-j].High==quotes[i-2].High)break;if(quotes[i-j].High<quotes[i-2].High)test++;if(test==4){fractalHigh=quotes[i-2].High;break;}}if(sd.type=="Fractal Chaos Bands"){quotes[i]["Fractal High "+sd.name]=fractalHigh>0?fractalHigh:null;}else if(test==4){//oscillator
quotes[i]["Result "+sd.name]=1;}test=0;for(j=0;j<=i;j++){if(!quotes[i-j])break;if(quotes[i-j].Low<quotes[i-2].Low)break;if(j<2&&quotes[i-j].Low==quotes[i-2].Low)break;if(quotes[i-j].Low>quotes[i-2].Low)test++;if(test==4){fractalLow=quotes[i-2].Low;break;}}if(sd.type=="Fractal Chaos Bands"){quotes[i]["Fractal Low "+sd.name]=fractalLow>0?fractalLow:null;}else if(test==4){//oscillator
quotes[i]["Result "+sd.name]=-1;}}};CIQ.Studies.displayRAVI=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var y=stx.pixelFromPrice(0,panel,yAxis);var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;var upColor=CIQ.Studies.determineColor(sd.outputs["Increasing Bar"]);var downColor=CIQ.Studies.determineColor(sd.outputs["Decreasing Bar"]);stx.startClip(sd.panel);stx.canvasColor("stx_histogram");if(!sd.underlay)stx.chart.context.globalAlpha=1;for(var i=0;i<quotes.length;i++){var quote=quotes[i],quote_1=quotes[i-1];if(!quote_1)quote_1=stx.getPreviousBar(stx.chart,sd.name+"_hist",i);if(!quote)continue;var overBought=0,overSold=0;if(sd.parameters&&sd.parameters.studyOverZonesEnabled){overBought=parseFloat(sd.parameters.studyOverBoughtValue);overSold=parseFloat(sd.parameters.studyOverSoldValue);}if(!quote_1)stx.chart.context.fillStyle="#CCCCCC";else if(quote[sd.name+"_hist"]>overBought&&quote_1[sd.name+"_hist"]<quote[sd.name+"_hist"])stx.chart.context.fillStyle=upColor;else if(quote[sd.name+"_hist"]<overSold&&quote_1[sd.name+"_hist"]>quote[sd.name+"_hist"])stx.chart.context.fillStyle=downColor;else stx.chart.context.fillStyle="#CCCCCC";if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2),Math.floor(y),Math.floor(myWidth),Math.floor(stx.pixelFromPrice(quote[sd.name+"_hist"],panel,yAxis)-y));}stx.endClip();};CIQ.Studies.displayElderForce=function(stx,sd,quotes){CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);var color=CIQ.Studies.determineColor(sd.outputs.Result);var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var params={skipTransform:panel.name!=sd.chart.name,panelName:sd.panel,band:"Result "+sd.name,threshold:0,color:color,yAxis:yAxis};params.direction=1;CIQ.preparePeakValleyFill(stx,params);params.direction=-1;CIQ.preparePeakValleyFill(stx,params);};CIQ.Studies.displayElderRay=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var y=stx.pixelFromPrice(0,panel,yAxis);var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;function drawBar(i,reduction,output,hist){stx.chart.context.fillStyle=CIQ.Studies.determineColor(sd.outputs[output]);stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2+myWidth*reduction),Math.floor(y),Math.floor(myWidth*(1-2*reduction)),Math.floor(stx.pixelFromPrice(quote[sd.name+hist],panel,yAxis)-y));}stx.canvasColor("stx_histogram");var fillStyle=stx.chart.context.fillStyle;if(!sd.underlay)stx.chart.context.globalAlpha=1;stx.startClip(sd.panel);for(var i=0;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));if(quote[sd.name+"_hist1"]>0)drawBar(i,0,"Elder Bull Power","_hist1");if(quote[sd.name+"_hist2"]<0)drawBar(i,0,"Elder Bear Power","_hist2");if(quote[sd.name+"_hist1"]<0)drawBar(i,0.1,"Elder Bull Power","_hist1");if(quote[sd.name+"_hist2"]>0)drawBar(i,0.1,"Elder Bear Power","_hist2");}stx.endClip();stx.chart.context.fillStyle=fillStyle;};CIQ.Studies.displayADX=function(stx,sd,quotes){var opacity=sd.underlay?0.3:sd.inputs.Series?0.4:1;if(sd.inputs.Series&&sd.inputs.Shading){var topBand="+DI "+sd.name,bottomBand="-DI "+sd.name;var topColor=CIQ.Studies.determineColor(sd.outputs[sd.outputMap[topBand]]),bottomColor=CIQ.Studies.determineColor(sd.outputs[sd.outputMap[bottomBand]]);var yAxis=stx.getYAxisByName(sd.panel,sd.name);var parameters={topBand:topBand,bottomBand:bottomBand,topColor:topColor,bottomColor:bottomColor,skipTransform:stx.panels[sd.panel].name!=sd.chart.name,topAxis:yAxis,bottomAxis:yAxis};CIQ.fillIntersecting(stx,sd.panel,parameters);}if(sd.inputs.Histogram)CIQ.Studies.createHistogram(stx,sd,quotes,false,opacity);if(sd.inputs.Series!==false)CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);else if(!sd.inputs.Series&&!sd.inputs.Histogram)stx.watermark(sd.panel,"center","bottom",stx.translateIf(sd.name)+": "+stx.translateIf("Nothing to display"));};CIQ.Studies.displayMassIndex=function(stx,sd,quotes){CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);var bulge=sd.inputs["Bulge Threshold"];var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var color=CIQ.Studies.determineColor(sd.outputs.Result);CIQ.preparePeakValleyFill(stx,{skipTransform:stx.panels[sd.panel].name!=sd.chart.name,panelName:sd.panel,band:"Result "+sd.name,threshold:bulge,direction:1,color:color,yAxis:yAxis});CIQ.Studies.drawHorizontal(stx,sd,null,bulge,yAxis,color);};/**
	 * Rendering function for displaying a Channel study output composed of top, middle and bottom lines.
	 *
	 * Requires study library input of <code>"Channel Fill":true</code> to determine if the area within the channel is to be shaded.
	 * Shading will be done using the "xxxxx Channel" or "xxxxx Median" color defined in the outputs parameter of the study library.
	 *
	 * Requires study library outputs to have fields in the format of :
	 * - 'xxxxx Top' or 'xxxxx High' for the top band,
	 * - 'xxxxx Bottom' or 'xxxxx Low' for the bottom band and
	 * - 'xxxxx Median' or 'xxxxx Channel' for the middle line.
	 *
	 * It expects 'quotes' to have fields for each series in the channel with keys in the following format:
	 * - study-output-name ( from study library) + " " + sd.name.
	 * - Example: 'Prime Bands Top'+ ' ' +  'Prime Number Bands (true)'. Which equals : 'Prime Bands Top Prime Number Bands (true)'
	 *
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {studyDescriptor} sd  Study Descriptor
	 * @param {array} quotes The array of quotes needed to render the channel
	 * @memberOf CIQ.Studies
	 * @example
	 * "inputs": {"Period":5, "Shift": 3, "Field":"field", "Channel Fill":true}
	 * "outputs": {"Prime Bands Top":"red", "Prime Bands Bottom":"auto", "Prime Bands Channel":"rgb(184,44,11)"}
	 * @example
	 * // full definition example including opacity
		"Bollinger Bands": {
			"name": "Bollinger Bands",
			"overlay": true,
			"calculateFN": CIQ.Studies.calculateBollinger,
			"seriesFN": CIQ.Studies.displayChannel,
			"inputs": {"Field":"field", "Period":20, "Standard Deviations": 2, "Moving Average Type":"ma", "Channel Fill": true},
			"outputs": {"Bollinger Bands Top":"auto", "Bollinger Bands Median":"auto", "Bollinger Bands Bottom":"auto"},
			"attributes": {
				"Standard Deviations":{min:0.1,step:0.1}
			},
			"parameters": {
				"init":{opacity: 0.2}
			}
		}
	 * @since 4.1.0 now also uses sd.parameters.opacity if one defined.
	 * @since 4.1.0 now shading is rendered under the channel lines instead of over.
	 */CIQ.Studies.displayChannel=function(stx,sd,quotes){if(sd.inputs["Channel Fill"]){var parameters={panelName:sd.panel};for(var p in sd.outputs){var lastWord=p.split(" ").pop();if(lastWord=="Top"||lastWord=="High"){parameters.topBand=p+" "+sd.name;}else if(lastWord=="Bottom"||lastWord=="Low"){parameters.bottomBand=p+" "+sd.name;}else if(lastWord=="Median"||lastWord=="Channel"){parameters.color=CIQ.Studies.determineColor(sd.outputs[p]);}}if(sd.parameters&&sd.parameters.opacity){parameters.opacity=sd.parameters.opacity;}var panel=stx.panels[sd.panel];parameters.skipTransform=panel.name!=sd.chart.name;parameters.yAxis=stx.getYAxisByName(panel,sd.name);CIQ.prepareChannelFill(stx,parameters);}CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);};CIQ.Studies.inputAttributeDefaultGenerator=function(value){if(!value&&value!==0)return{};if(value.constructor==Number){if(Math.floor(value)==value){// Integer
if(value>0)return{min:1,step:1};// positive
return{step:1};// full range
}// Decimal
if(value>0)return{min:0,step:0.01};// positive
return{step:0.01};// full range
}return{};};/**
	 * Function to determine which studies are available.
	 * @param  {object} excludeList Exclusion list of studies in object form ( e.g. {"rsi":true,"macd":true})
	 * @returns {object} Map of available entries from {@link CIQ.Studies.studyLibrary}.
	 * @memberof CIQ.Studies
	 * @since 3.0.0
	 */CIQ.Studies.getStudyList=function(excludeList){var map={};var excludedStudies={"Directional":true,"Gopala":true,"vchart":true};CIQ.extend(excludedStudies,excludeList);for(var libraryEntry in CIQ.Studies.studyLibrary){if(!excludedStudies[libraryEntry])map[CIQ.Studies.studyLibrary[libraryEntry].name]=libraryEntry;}return map;};/**
	 * A helper function that will find the color value in the output.
	 * @param {String/Object} output Color string value or object that has the color value
	 * @return {String}	Color value
	 * @since 4.0.0
	 */CIQ.Studies.determineColor=function(output){if(!output){return null;}else if(_typeof(output)==='object'){return output.color;}return output;};// object to keep track of the custom scripts
CIQ.Studies.studyScriptLibrary={};/**
	 * The studyLibrary defines all of the available studies. This is used to drive the dialog boxes and creation of the studies. When you
	 * create a custom study you should add it to the studyLibrary.
	 *
	 * You can also alter study defaults by overriding the different elements on each definition.
	 * For example, if you wanted to change the default colors for the volume underlay,
	 * you would add the following code in your files; making sure your files are loaded **after** the library js files -- not before:
	 * ```
	 * CIQ.Studies.studyLibrary["vol undr"].outputs= {"Up Volume":"blue","Down Volume":"yellow"};
	 * ```
	 * See {@tutorial Using and Customizing Studies} for complete details
	 * @type {Object}
	 * @memberOf CIQ.Studies
	 * @example
	 * "RAVI": {
			"name": "RAVI",
			"seriesFN": CIQ.Studies.displayRAVI,
			"calculateFN": CIQ.Studies.calculatePriceOscillator,
			"inputs": {"Field":"field", "Short Cycle":7, "Long Cycle":65},
			"outputs": {"Increasing Bar":"#00DD00", "Decreasing Bar":"#FF0000"},
			"parameters": {
				template:"studyOverZones",
				init:{studyOverZonesEnabled:true, studyOverBoughtValue:3, studyOverBoughtColor:"auto", studyOverSoldValue:-3, studyOverSoldColor:"auto"}
			},
			"attributes":{
				"studyOverBoughtValue":{"min":0,"step":"0.1"},
				"studyOverSoldValue":{"max":0,"step":"0.1"}
			}
		},
	 */CIQ.Studies.studyLibrary={"rsi":{"name":"RSI","inputs":{"Period":14},"calculateFN":CIQ.Studies.calculateRSI,"range":"0 to 100","outputs":{"RSI":"auto"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:80,studyOverBoughtColor:"auto",studyOverSoldValue:20,studyOverSoldColor:"auto"}}},"ma":{"name":"Moving Average","overlay":true,"calculateFN":CIQ.Studies.calculateMovingAverage,"inputs":{"Period":50,"Field":"field","Type":"ma","Offset":0},"outputs":{"MA":"#FF0000"}},"macd":{"name":"MACD","calculateFN":CIQ.Studies.calculateMACD,"seriesFN":CIQ.Studies.displayHistogramWithSeries,"inputs":{"Fast MA Period":12,"Slow MA Period":26,"Signal Period":9},"outputs":{"MACD":"auto","Signal":"#FF0000","Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"}},"stochastics":{"name":"Stochastics","range":"0 to 100","initializeFN":CIQ.Studies.initializeStochastics,"calculateFN":CIQ.Studies.calculateStochastics,"inputs":{"Period":14,"Smooth":true},"outputs":{"Fast":"auto","Slow":"#FF0000"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:80,studyOverBoughtColor:"auto",studyOverSoldValue:20,studyOverSoldColor:"auto"}}},"Aroon":{"name":"Aroon","range":"0 to 100","calculateFN":CIQ.Studies.calculateAroon,"outputs":{"Aroon Up":"#00DD00","Aroon Down":"#FF0000"}},"Aroon Osc":{"name":"Aroon Oscillator","calculateFN":CIQ.Studies.calculateAroon,"outputs":{"Aroon Oscillator":"auto"}},"Lin R2":{"name":"Linear Reg R2","calculateFN":CIQ.Studies.calculateLinearRegressionIndicator,"inputs":{"Period":14,"Field":"field"},"outputs":{"RSquared":"auto"}},"Lin Fcst":{"name":"Linear Reg Forecast","overlay":true,"calculateFN":CIQ.Studies.calculateLinearRegressionIndicator,"inputs":{"Period":14,"Field":"field"},"outputs":{"Forecast":"auto"}},"Lin Incpt":{"name":"Linear Reg Intercept","overlay":true,"calculateFN":CIQ.Studies.calculateLinearRegressionIndicator,"inputs":{"Period":14,"Field":"field"},"outputs":{"Intercept":"auto"}},"Time Fcst":{"name":"Time Series Forecast","overlay":true,"calculateFN":CIQ.Studies.calculateLinearRegressionIndicator,"inputs":{"Period":14,"Field":"field"},"outputs":{"Forecast":"auto"}},"VT HZ Filter":{"name":"Vertical Horizontal Filter","calculateFN":CIQ.Studies.calculateVerticalHorizontalFilter,"inputs":{"Period":28}},"TRIX":{"name":"TRIX","calculateFN":CIQ.Studies.calculateTRIX},"STD Dev":{"name":"Standard Deviation","calculateFN":CIQ.Studies.calculateStandardDeviation,"inputs":{"Period":14,"Field":"field","Standard Deviations":2,"Moving Average Type":"ma"},"attributes":{"Standard Deviations":{min:0.1,step:0.1}}},"Trade Vol":{"name":"Trade Volume Index","calculateFN":CIQ.Studies.calculateOnBalanceVolume,"inputs":{"Min Tick Value":0.5}},"Swing":{"name":"Swing Index","calculateFN":CIQ.Studies.calculateSwingIndex,"inputs":{"Limit Move Value":0.5}},"Acc Swing":{"name":"Accumulative Swing Index","calculateFN":CIQ.Studies.calculateSwingIndex,"inputs":{"Limit Move Value":0.5}},"Price ROC":{"name":"Price Rate of Change","calculateFN":CIQ.Studies.calculateRateOfChange,"inputs":{"Period":14,"Field":"field"}},"Vol ROC":{"name":"Volume Rate of Change","calculateFN":CIQ.Studies.calculateRateOfChange,"parameters":{init:{isVolume:true}}},"Momentum":{"name":"Momentum Indicator","calculateFN":CIQ.Studies.calculateRateOfChange,"inputs":{"Period":14},"centerline":0},"Price Vol":{"name":"Price Volume Trend","calculateFN":CIQ.Studies.calculatePriceVolumeTrend,"inputs":{"Field":"field"}},"Pos Vol":{"name":"Positive Volume Index","calculateFN":CIQ.Studies.calculateVolumeIndex,"inputs":{"Period":255,"Field":"field","Moving Average Type":"ma"},"outputs":{"Index":"auto","MA":"#FF0000"}},"Neg Vol":{"name":"Negative Volume Index","calculateFN":CIQ.Studies.calculateVolumeIndex,"inputs":{"Period":255,"Field":"field","Moving Average Type":"ma"},"outputs":{"Index":"auto","MA":"#FF0000"}},"On Bal Vol":{"name":"On Balance Volume","calculateFN":CIQ.Studies.calculateOnBalanceVolume,"inputs":{}},"Stch Mtm":{"name":"Stochastic Momentum Index","calculateFN":CIQ.Studies.calculateStochMomentum,"inputs":{"%K Periods":10,"%K Smoothing Periods":3,"%K Double Smoothing Periods":3,"%D Periods":10,"%D Moving Average Type":"ema"},"outputs":{"%K":"auto","%D":"#FF0000"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:40,studyOverBoughtColor:"auto",studyOverSoldValue:-40,studyOverSoldColor:"auto"}}},"Hist Vol":{"name":"Historical Volatility","calculateFN":CIQ.Studies.calculateHistoricalVolatility,"inputs":{"Period":10,"Field":"field","Days Per Year":[252,365],"Standard Deviations":1},"attributes":{"Standard Deviations":{min:0.1,step:0.1}}},"Pretty Good":{"name":"Pretty Good Oscillator","calculateFN":CIQ.Studies.calculatePrettyGoodOscillator,"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:3,studyOverBoughtColor:"auto",studyOverSoldValue:-3,studyOverSoldColor:"auto"}}},"Ultimate":{"name":"Ultimate Oscillator","calculateFN":CIQ.Studies.calculateUltimateOscillator,"inputs":{"Cycle 1":7,"Cycle 2":14,"Cycle 3":28},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:70,studyOverBoughtColor:"auto",studyOverSoldValue:30,studyOverSoldColor:"auto"}}},"Vol Osc":{"name":"Volume Oscillator","calculateFN":CIQ.Studies.calculatePriceOscillator,"inputs":{"Short Cycle":12,"Long Cycle":26,"Points Or Percent":["Points","Percent"]},"parameters":{init:{isVolume:true}}},"Twiggs":{"name":"Twiggs Money Flow","calculateFN":CIQ.Studies.calculateTwiggsMoneyFlow,"inputs":{"Period":21}},"Chaikin MF":{"name":"Chaikin Money Flow","calculateFN":CIQ.Studies.calculateChaikinMoneyFlow,"inputs":{"Period":20}},"Chaikin Vol":{"name":"Chaikin Volatility","calculateFN":CIQ.Studies.calculateChaikinVolatility,"inputs":{"Period":14,"Rate Of Change":2,"Moving Average Type":"ma"}},"Price Osc":{"name":"Price Oscillator","calculateFN":CIQ.Studies.calculatePriceOscillator,"inputs":{"Field":"field","Short Cycle":12,"Long Cycle":26,"Moving Average Type":"ema","Points Or Percent":["Points","Percent"]}},"EOM":{"name":"Ease of Movement","calculateFN":CIQ.Studies.calculateEaseOfMovement,"inputs":{"Period":14,"Moving Average Type":"ma"}},"CCI":{"name":"Commodity Channel Index","calculateFN":CIQ.Studies.calculateCCI,"inputs":{"Period":20},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:100,studyOverBoughtColor:"auto",studyOverSoldValue:-100,studyOverSoldColor:"auto"}},"attributes":{"Period":{min:2}}},"Detrended":{"name":"Detrended Price Oscillator","calculateFN":CIQ.Studies.calculateDetrendedPrice,"inputs":{"Period":14,"Field":"field","Moving Average Type":"ma"}},"True Range":{"name":"True Range","calculateFN":CIQ.Studies.calculateStudyATR,"inputs":{},"outputs":{"True Range":"auto"}},"ATR":{"name":"Average True Range","calculateFN":CIQ.Studies.calculateStudyATR,"outputs":{"ATR":"auto"}},"Ehler Fisher":{"name":"Ehler Fisher Transform","calculateFN":CIQ.Studies.calculateEhlerFisher,"inputs":{"Period":10},"outputs":{"EF":"auto","EF Trigger":"#FF0000"}},"Schaff":{"name":"Schaff Trend Cycle","range":"0 to 100","calculateFN":CIQ.Studies.calculateSchaff,"inputs":{"Period":10,"Field":"field","Short Cycle":23,"Long Cycle":50,"Moving Average Type":"ema"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:75,studyOverBoughtColor:"auto",studyOverSoldValue:25,studyOverSoldColor:"auto"}}},"QStick":{"name":"QStick","calculateFN":CIQ.Studies.calculateQStick,"inputs":{"Period":8,"Moving Average Type":"ma"}},"Coppock":{"name":"Coppock Curve","calculateFN":CIQ.Studies.calculateCoppock,"inputs":{"Period":10,"Field":"field","Short RoC":11,"Long RoC":14}},"Chande Mtm":{"name":"Chande Momentum Oscillator","calculateFN":CIQ.Studies.calculateChandeMomentum,"inputs":{"Period":9},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:50,studyOverBoughtColor:"auto",studyOverSoldValue:-50,studyOverSoldColor:"auto"}}},"Chande Fcst":{"name":"Chande Forecast Oscillator","calculateFN":CIQ.Studies.calculateChandeForecast,"inputs":{"Period":14,"Field":"field"}},"Intraday Mtm":{"name":"Intraday Momentum Index","calculateFN":CIQ.Studies.calculateIntradayMomentum,"inputs":{"Period":20},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:70,studyOverBoughtColor:"auto",studyOverSoldValue:30,studyOverSoldColor:"auto"}}},"RAVI":{"name":"RAVI","seriesFN":CIQ.Studies.displayRAVI,"calculateFN":CIQ.Studies.calculatePriceOscillator,"inputs":{"Field":"field","Moving Average Type":"vdma","Short Cycle":7,"Long Cycle":65},"outputs":{"Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"},"centerline":0,"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:3,studyOverBoughtColor:"auto",studyOverSoldValue:-3,studyOverSoldColor:"auto"}},"attributes":{"studyOverBoughtValue":{"min":0,"step":"0.1"},"studyOverSoldValue":{"max":0,"step":"0.1"}}},"Random Walk":{"name":"Random Walk Index","calculateFN":CIQ.Studies.calculateRandomWalk,"outputs":{"Random Walk High":"#FF0000","Random Walk Low":"#0000FF"}},"ADX":{"name":"ADX/DMS","calculateFN":CIQ.Studies.calculateADX,"seriesFN":CIQ.Studies.displayADX,"inputs":{"Period":14,"Smoothing Period":14,"Series":true,"Shading":false,"Histogram":false},"outputs":{"+DI":"#00FF00","-DI":"#FF0000","ADX":"auto","Positive Bar":"#00DD00","Negative Bar":"#FF0000"}},"High Low":{"name":"High Low Bands","overlay":true,"seriesFN":CIQ.Studies.displayChannel,"calculateFN":function calculateFN(stx,sd){sd.inputs["Moving Average Type"]="triangular";CIQ.Studies.calculateMAEnvelope(stx,sd);},"inputs":{"Period":10,"Field":"field","Shift Percentage":5,"Channel Fill":true},"outputs":{"High Low Top":"auto","High Low Median":"auto","High Low Bottom":"auto"},"attributes":{"Shift Percentage":{min:0.1,step:0.1}}},"High-Low":{"name":"High Minus Low","calculateFN":function calculateFN(stx,sd){var quotes=sd.chart.scrubbed;for(var i=sd.startFrom;i<quotes.length;i++){quotes[i]["Result "+sd.name]=quotes[i].High-quotes[i].Low;}},"inputs":{}},"Med Price":{"name":"Median Price","calculateFN":CIQ.Studies.calculateTypicalPrice,"inputs":{"Period":14}},"MA Env":{"name":"Moving Average Envelope","overlay":true,"seriesFN":CIQ.Studies.displayChannel,"calculateFN":CIQ.Studies.calculateMAEnvelope,"inputs":{"Period":50,"Field":"field","Shift Type":["percent","points"],"Shift":5,"Moving Average Type":"ma","Channel Fill":true},"outputs":{"MA Env Top":"auto","MA Env Median":"auto","MA Env Bottom":"auto"},"attributes":{Shift:{min:0.1,step:0.1}}},"Fractal Chaos Bands":{"name":"Fractal Chaos Bands","overlay":true,"calculateFN":CIQ.Studies.calculateFractalChaos,"seriesFN":CIQ.Studies.displayChannel,"inputs":{"Channel Fill":true},"outputs":{"Fractal High":"auto","Fractal Low":"auto","Fractal Channel":"auto"}},"Fractal Chaos":{"name":"Fractal Chaos Oscillator","range":"-1 to 1","calculateFN":CIQ.Studies.calculateFractalChaos,"inputs":{},"centerline":null// so centerline is drawn but not included in the range calculation
},"GAPO":{"name":"Gopalakrishnan Range Index","calculateFN":CIQ.Studies.calculateMaxHighMinLow},"Prime Number Bands":{"name":"Prime Number Bands","overlay":true,"calculateFN":CIQ.Studies.calculatePrimeNumber,"seriesFN":CIQ.Studies.displayChannel,"inputs":{"Channel Fill":true},"outputs":{"Prime Bands Top":"auto","Prime Bands Bottom":"auto","Prime Bands Channel":"auto"}},"Prime Number":{"name":"Prime Number Oscillator","range":"-1 to 1","calculateFN":CIQ.Studies.calculatePrimeNumber,"centerline":0,"inputs":{"Tolerance Percentage":5},"attributes":{"Tolerance Percentage":{min:0.1,step:0.1}}},"Bollinger Bands":{"name":"Bollinger Bands","overlay":true,"calculateFN":CIQ.Studies.calculateBollinger,"seriesFN":CIQ.Studies.displayChannel,"inputs":{"Period":20,"Field":"field","Standard Deviations":2,"Moving Average Type":"ma","Channel Fill":true},"outputs":{"Bollinger Bands Top":"auto","Bollinger Bands Median":"auto","Bollinger Bands Bottom":"auto"},"attributes":{"Standard Deviations":{min:0.1,step:0.1}}},"Donchian Channel":{"name":"Donchian Channel","overlay":true,"calculateFN":CIQ.Studies.calculateMaxHighMinLow,"seriesFN":CIQ.Studies.displayChannel,"inputs":{"High Period":20,"Low Period":20,"Channel Fill":true},"outputs":{"Donchian High":"auto","Donchian Median":"auto","Donchian Low":"auto"}},"HHV":{"name":"Highest High Value","calculateFN":CIQ.Studies.calculateMaxHighMinLow,"inputs":{"Period":14}},"LLV":{"name":"Lowest Low Value","calculateFN":CIQ.Studies.calculateMaxHighMinLow,"inputs":{"Period":14}},"Mass Idx":{"name":"Mass Index","seriesFN":CIQ.Studies.displayMassIndex,"calculateFN":CIQ.Studies.calculateMassIndex,"inputs":{"Period":25,"Bulge Threshold":27},"attributes":{"Bulge Threshold":{min:20,max:35,step:0.1}}},"Keltner":{"name":"Keltner Channel","overlay":true,"seriesFN":CIQ.Studies.displayChannel,"calculateFN":CIQ.Studies.calculateKeltner,"inputs":{"Period":50,"Shift":5,"Moving Average Type":"ema","Channel Fill":true},"outputs":{"Keltner Top":"auto","Keltner Median":"auto","Keltner Bottom":"auto"},"attributes":{Shift:{min:0.1,step:0.1}}},"PSAR":{"name":"Parabolic SAR","overlay":true,"calculateFN":CIQ.Studies.calculatePSAR,"seriesFN":CIQ.Studies.displayPSAR2,"inputs":{"Minimum AF":0.02,"Maximum AF":0.2}},"Klinger":{"name":"Klinger Volume Oscillator","seriesFN":CIQ.Studies.displayHistogramWithSeries,"calculateFN":CIQ.Studies.calculateKlinger,"inputs":{"Signal Periods":13,"Short Cycle":34,"Long Cycle":55},"outputs":{"Klinger":"auto","KlingerSignal":"#FF0000","Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"}},"Elder Ray":{"name":"Elder Ray Index","seriesFN":CIQ.Studies.displayElderRay,"calculateFN":CIQ.Studies.calculateElderRay,"centerline":0,"inputs":{"Period":13},"outputs":{"Elder Bull Power":"#00DD00","Elder Bear Power":"#FF0000"}},"Elder Force":{"name":"Elder Force Index","calculateFN":CIQ.Studies.calculateElderForce,"seriesFN":CIQ.Studies.displayElderForce,"inputs":{"Period":13}},"LR Slope":{"name":"Linear Reg Slope","calculateFN":CIQ.Studies.calculateLinearRegressionIndicator,"inputs":{"Period":14,"Field":"field"},"outputs":{"Slope":"auto"}},"COG":{"name":"Center Of Gravity","calculateFN":CIQ.Studies.calculateCenterOfGravity,"inputs":{"Period":10,"Field":"field"}},"Typical Price":{"name":"Typical Price","calculateFN":CIQ.Studies.calculateTypicalPrice,"inputs":{"Period":14}},"Weighted Close":{"name":"Weighted Close","calculateFN":CIQ.Studies.calculateTypicalPrice,"inputs":{"Period":14}},"M Flow":{"name":"Money Flow Index","range":"0 to 100","calculateFN":CIQ.Studies.calculateMoneyFlowIndex,"inputs":{"Period":14},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:80,studyOverBoughtColor:"auto",studyOverSoldValue:20,studyOverSoldColor:"auto"}}},"Williams %R":{"name":"Williams %R","calculateFN":CIQ.Studies.calculateMaxHighMinLow,"inputs":{"Period":14},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:-20,studyOverBoughtColor:"auto",studyOverSoldValue:-80,studyOverSoldColor:"auto"}}},"W Acc Dist":{"name":"Accumulation/Distribution","calculateFN":CIQ.Studies.calculateAccumulationDistribution,"inputs":{"Use Volume":false}},"volume":{"name":"Volume Chart","range":"0 to max","yAxis":{"ground":true,"initialMarginTop":0},"seriesFN":CIQ.Studies.createVolumeChart,"calculateFN":CIQ.Studies.calculateVolume,"inputs":{},"outputs":{"Up Volume":"#8cc176","Down Volume":"#b82c0c"},"parameters":{"zoom":0,"widthFactor":1}},"vol undr":{"name":"Volume Underlay","underlay":true,"range":"0 to max","yAxis":{"ground":true,"initialMarginTop":0,"position":"none"},"seriesFN":CIQ.Studies.createVolumeChart,"calculateFN":CIQ.Studies.calculateVolume,"inputs":{},"outputs":{"Up Volume":"#8cc176","Down Volume":"#b82c0c"},"customRemoval":true,"removeFN":function removeFN(stx,sd){stx.layout.volumeUnderlay=false;stx.changeOccurred("layout");},"parameters":{"zoom":0,"widthFactor":1}}};return _exports;};var __js_advanced_drawingAdvanced_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_advanced_drawingAdvanced_(_exports){var CIQ=_exports.CIQ,timezoneJS=_exports.timezoneJS;/**
	 * Channel drawing tool. Creates a channel within 2 parallel line segments.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}.
	 * @constructor
	 * @name  CIQ.Drawing.channel
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.channel=function(){this.name="channel";this.dragToDraw=false;this.p2=null;};CIQ.Drawing.channel.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.channel.prototype.configs=["color","fillColor","lineWidth","pattern"];CIQ.Drawing.channel.prototype.move=function(context,tick,value){if(!this.penDown)return;this.copyConfig();if(this.p2===null)this.p1=[tick,value];else{var y=value-(this.p1[1]-this.p0[1])/(this.p1[0]-this.p0[0])*(tick-this.p1[0]);this.p2=[this.p1[0],y];}this.render(context);};CIQ.Drawing.channel.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value)){this.stx.undo();//abort
return true;}if(this.p2!==null){this.setPoint(2,this.p2[0],this.p2[1],panel.chart);this.penDown=false;return true;}this.setPoint(1,tick,value,panel.chart);if(this.p0[0]==this.p1[0]){// don't allow vertical line
this.p1=null;return false;}this.p2=[this.p1[0],this.p1[1]];return false;};CIQ.Drawing.channel.prototype.boxIntersection=function(tick,value,box){var p0=this.p0,p1=this.p1,p2=this.p2;if(!p0||!p1||!p2)return false;if(box.x0>Math.max(p0[0],p1[0])||box.x1<Math.min(p0[0],p1[0]))return false;// http://stackoverflow.com/questions/1560492/how-to-tell-whether-a-point-is-to-the-right-or-left-side-of-a-line
var s1=(p1[0]-p0[0])*((p2[1]<p0[1]?box.y1:box.y0)-p0[1])-(p1[1]-p0[1])*(tick-p0[0]);var s2=(p2[0]-p0[0])*((p2[1]>p0[1]?box.y1:box.y0)-(p0[1]+p2[1]-p1[1]))-(p1[1]-p0[1])*(tick-p0[0]);return s1*s2<0;};CIQ.Drawing.channel.prototype.intersected=function(tick,value,box){if(!this.p0||!this.p1||!this.p2)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:this.p0,1:this.p1,2:this.p2};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}if(this.boxIntersection(tick,value,box)){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),p2:CIQ.clone(this.p2),tick:tick,// save original tick
value:value// save original value
};}return null;};CIQ.Drawing.channel.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var y=null;if(this.p2){y=this.stx.pixelFromValueAdjusted(panel,this.p2[0],this.p2[1]);}var width=this.lineWidth;var color=this.setLineColor();var fillColor=this.fillColor;if(this.p2&&fillColor&&!CIQ.isTransparent(fillColor)&&fillColor!="auto"){context.beginPath();context.moveTo(x0,y0);context.lineTo(x1,y1);context.lineTo(x1,y);context.lineTo(x0,y0+(y-y1));context.closePath();context.globalAlpha=0.2;context.fillStyle=fillColor;context.fill();context.globalAlpha=1;}var parameters={pattern:this.pattern,lineWidth:width};if((this.penDown||this.highlighted)&&this.pattern=="none")parameters.pattern="dotted";this.stx.plotLine(x0,x1,y0,y1,color,"segment",context,panel,parameters);if(this.p2)this.stx.plotLine(x0,x1,y0+(y-y1),y,color,"segment",context,panel,parameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;var p2Fill=this.highlighted=="p2"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);this.littleCircle(context,x1,y,p2Fill);}};CIQ.Drawing.channel.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;if(repositioner.action=="move"){this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.setPoint(1,repositioner.p1[0]-tickDiff,repositioner.p1[1]-valueDiff,panel.chart);this.setPoint(2,repositioner.p2[0]-tickDiff,repositioner.p2[1]-valueDiff,panel.chart);this.render(context);}else if(repositioner.action=="drag"){this[repositioner.point]=[tick,value];this.setPoint(0,this.p0[0],this.p0[1],panel.chart);this.setPoint(1,this.p1[0],this.p1[1],panel.chart);this.setPoint(2,this.p2[0],this.p2[1],panel.chart);this.render(context);}};CIQ.Drawing.channel.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);this.setPoint(2,this.d1,this.v2,panel.chart);//not an error, should be d1 here
};/**
	 * Reconstruct a channel
	 * @memberOf CIQ.Drawing.channel
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.v2] Value (price) for the second point of the opposing parallel channel line
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 */CIQ.Drawing.channel.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.v2=obj.v2;this.adjust();};CIQ.Drawing.channel.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1,v2:this.v2};};/**
	 * Andrews' Pitchfork drawing tool. A Pitchfork is defined by three parallel rays.  The center ray is equidistant from the two outer rays.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.channel}.
	 * @constructor
	 * @name  CIQ.Drawing.pitchfork
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.pitchfork=function(){this.name="pitchfork";this.dragToDraw=false;this.p2=null;};CIQ.Drawing.pitchfork.ciqInheritsFrom(CIQ.Drawing.channel);CIQ.Drawing.pitchfork.prototype.configs=["color","lineWidth","pattern"];CIQ.Drawing.pitchfork.prototype.move=function(context,tick,value){if(!this.penDown)return;this.copyConfig();if(this.p2===null)this.p1=[tick,value];else this.p2=[tick,value];this.render(context);};CIQ.Drawing.pitchfork.prototype.intersected=function(tick,value,box){if(!this.p0||!this.p1||!this.p2)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:this.p0,1:this.p1,2:this.p2};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}var rays=this.rays;for(var i=0;i<rays.length;i++){if(this.lineIntersection(tick,value,box,i?"ray":"segment",rays[i][0],rays[i][1],true)){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),p2:CIQ.clone(this.p2),tick:tick,// save original tick
value:value// save original value
};}}return null;};CIQ.Drawing.pitchfork.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var stx=this.stx;var p2=this.p2;if(!p2)p2=this.p1;var x0=stx.pixelFromTick(this.p0[0],panel.chart);var x1=stx.pixelFromTick(this.p1[0],panel.chart);var x2=stx.pixelFromTick(p2[0],panel.chart);var y0=stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var y2=stx.pixelFromValueAdjusted(panel,p2[0],p2[1]);var width=this.lineWidth;var color=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:width};var z=50;var yp=2*y0-y1-y2;var denom=2*x0-x1-x2;if(denom<0)z*=-1;yp*=z/denom;this.rays=[[[x1,y1],[x2,y2]],[[x0,y0],[(x1+x2)/2,(y1+y2)/2]]];if(!(x1==x2&&y1==y2)){this.rays.push([[x1,y1],[x1-z,y1-yp]],[[x2,y2],[x2-z,y2-yp]]);}for(var i=0;i<this.rays.length;i++){var ray=this.rays[i],type=i?"ray":"segment";stx.plotLine(ray[0][0],ray[1][0],ray[0][1],ray[1][1],color,type,context,panel,parameters);}if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;var p2Fill=this.highlighted=="p2"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);this.littleCircle(context,x2,y2,p2Fill);}};CIQ.Drawing.pitchfork.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);this.setPoint(2,this.d2,this.v2,panel.chart);};/**
	 * Reconstruct a pitchfork
	 * @memberOf CIQ.Drawing.pitchfork
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the second point
	 * @param {number} [obj.v2] Value (price) for the third point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the second point
	 * @param {number} [obj.d2] Date (string form) for the third point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @param {number} [obj.tzo2] Offset of UTC from d2 in minutes
	 */CIQ.Drawing.pitchfork.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.d2=obj.d2;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.tzo2=obj.tzo2;this.v0=obj.v0;this.v1=obj.v1;this.v2=obj.v2;this.adjust();};CIQ.Drawing.pitchfork.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,d2:this.d2,tzo0:this.tzo0,tzo1:this.tzo1,tzo2:this.tzo2,v0:this.v0,v1:this.v1,v2:this.v2};};/**
	 * Gartley drawing tool. Creates a series of four connected line segments, each one completed with a user click.
	 * Will adhere to Gartley requirements vis-a-vis fibonacci levels etc..
	 *
	 * It inherits its properties from {@link CIQ.Drawing.continuous}.
	 * @constructor
	 * @name  CIQ.Drawing.gartley
	 * @version ChartIQ Advanced Package
	 * @since 04-2015-15
	 */CIQ.Drawing.gartley=function(){this.name="gartley";this.dragToDraw=false;this.maxSegments=4;this.shape=null;this.points=[];};CIQ.Drawing.gartley.ciqInheritsFrom(CIQ.Drawing.continuous);CIQ.Drawing.gartley.prototype.check=function(first,second){if(!second)return true;if(first[0]>=second[0]||first[1]==second[1])return false;if(this.segment==1){if(first[1]<second[1])this.shape="M";else this.shape="W";}else if(this.segment==2){if(this.shape=="M"&&first[1]<second[1])return false;else if(this.shape=="W"&&first[1]>second[1])return false;else if((second[1]-first[1])/(this.points[0][1]-first[1])<0.618)return false;else if((second[1]-first[1])/(this.points[0][1]-first[1])>=0.786)return false;}else if(this.segment==3){if(this.shape=="M"&&first[1]>second[1])return false;else if(this.shape=="W"&&first[1]<second[1])return false;else if((second[1]-first[1])/(this.points[1][1]-first[1])<0.618)return false;else if((second[1]-first[1])/(this.points[1][1]-first[1])>=0.786)return false;}else if(this.segment==4){if(this.shape=="M"&&(first[1]<second[1]||second[1]<this.points[0][1]))return false;else if(this.shape=="W"&&(first[1]>second[1]||second[1]>this.points[0][1]))return false;else if((this.points[1][1]-second[1])/(this.points[1][1]-this.points[2][1])<1.27)return false;else if((this.points[1][1]-second[1])/(this.points[1][1]-this.points[2][1])>=1.618)return false;}return true;};CIQ.Drawing.gartley.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.pts=[];this.penDown=true;this.segment=1;return false;}if(this.accidentalClick(tick,value)){this.penDown=true;return false;}if(this.check(this.p0,this.p1)){if(this.segment==1)this.points.push(this.p0);this.points.push(this.p1);this.drawDropZones=true;this.setPoint(1,tick,value,panel.chart);this.segment++;if(this.segment>this.maxSegments){this.setPoint(0,this.points[0][0],this.points[0][1],panel.chart);this.penDown=false;return true;}this.pts.push(this.d1,this.tzo1,this.v1);this.setPoint(0,tick,value,panel.chart);// reset initial point for next segment, copy by value
}return false;};CIQ.Drawing.gartley.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);if(this.segment==2){this.drawDropZone(context,0.618*this.points[0][1]+0.382*this.p0[1],0.786*this.points[0][1]+0.214*this.p0[1],this.p0[0]);}else if(this.segment==3){this.drawDropZone(context,0.618*this.points[1][1]+0.382*this.p0[1],0.786*this.points[1][1]+0.214*this.p0[1],this.p0[0]);}else if(this.segment==4){var bound=1.618*this.points[2][1]-0.618*this.points[1][1];if(this.shape=="M")bound=Math.max(bound,this.points[0][1]);else bound=Math.min(bound,this.points[0][1]);this.drawDropZone(context,bound,1.27*this.points[2][1]-0.27*this.points[1][1],this.p0[0]);}var width=this.lineWidth;var color=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:width};if((this.penDown||this.highlighted)&&this.pattern=="none")parameters.pattern="dotted";if(this.segment<=this.maxSegments)this.stx.plotLine(x0,x1,y0,y1,color,this.name,context,panel,parameters);var fillColor=this.fillColor;var coords=[];if(this.points.length){context.beginPath();for(var fp=1;fp<this.points.length&&fp<=4;fp++){var xx0=this.stx.pixelFromTick(this.points[fp-1][0],panel.chart);var xx1=this.stx.pixelFromTick(this.points[fp][0],panel.chart);var yy0=this.stx.pixelFromValueAdjusted(panel,this.points[fp-1][0],this.points[fp-1][1]);var yy1=this.stx.pixelFromValueAdjusted(panel,this.points[fp][0],this.points[fp][1]);if(fp==1)coords.push(xx0,yy0);coords.push(xx1,yy1);this.stx.plotLine(xx0,xx1,yy0,yy1,color,this.name,context,panel,parameters);}if(this.points.length==2||this.points.length==4){coords.push(x1,y1);}if(this.points[2]){coords.push(this.stx.pixelFromTick(this.points[2][0],panel.chart),this.stx.pixelFromValueAdjusted(panel,this.points[2][0],this.points[2][1]));}if(fillColor&&fillColor!="auto"&&!CIQ.isTransparent(fillColor)){for(var c=0;c<coords.length;c+=2){if(c===0)context.moveTo(coords[0],coords[1]);context.lineTo(coords[c],coords[c+1]);}context.fillStyle=fillColor;context.globalAlpha=0.2;context.closePath();context.fill();context.globalAlpha=1;}}/*if(this.highlighted){
			var p0Fill=this.highlighted=="p0"?true:false;
			var p1Fill=this.highlighted=="p1"?true:false;
			this.littleCircle(context, x0, y0, p0Fill);
			this.littleCircle(context, x1, y1, p1Fill);
		}*/};CIQ.Drawing.gartley.prototype.lineIntersection=function(tick,value,box,type){var points=this.points,panel=this.stx.panels[this.panelName];if(points.length!=this.maxSegments+1||!panel)return false;for(var pt=0;pt<points.length-1;pt++){if(CIQ.Drawing.BaseTwoPoint.prototype.lineIntersection.call(this,tick,value,box,"segment",points[pt],points[pt+1]))return true;}return false;};CIQ.Drawing.gartley.prototype.boxIntersection=function(tick,value,box){if(!this.p0||!this.p1)return false;if(box.x0>Math.max(this.p0[0],this.p1[0])||box.x1<Math.min(this.p0[0],this.p1[0]))return false;var lowPoint=Math.min(this.p0[1],this.p1[1]);var highPoint=Math.max(this.p0[1],this.p1[1]);for(var pt=0;pt<this.points.length;pt++){lowPoint=Math.min(lowPoint,this.points[pt][1]);highPoint=Math.max(highPoint,this.points[pt][1]);}if(box.y1>highPoint||box.y0<lowPoint)return false;return true;};CIQ.Drawing.gartley.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;repositioner.tick=tick;var valueDiff=repositioner.value-value;repositioner.value=value;if(repositioner.action=="move"){this.pts=[];for(var pt=0;pt<this.points.length;pt++){this.points[pt][0]-=tickDiff;this.points[pt][1]-=valueDiff;this.setPoint(1,this.points[pt][0],this.points[pt][1],panel.chart);if(pt&&pt<this.points.length-1)this.pts.push(this.d1,this.tzo1,this.v1);this.points[pt]=this.p1;}this.setPoint(0,this.points[0][0],this.points[0][1],panel.chart);this.render(context);/*}else if(repositioner.action=="drag"){
			this[repositioner.point]=[tick, value];
			this.setPoint(0, this.p0[0], this.p0[1], panel.chart);
			this.setPoint(1, this.p1[0], this.p1[1], panel.chart);
			this.render(context);*/}};CIQ.Drawing.gartley.prototype.configs=["color","fillColor","lineWidth","pattern"];CIQ.Drawing.gartley.prototype.drawDropZone=function(context,hBound1,hBound2,leftBound){var panel=this.stx.panels[this.panelName];if(!panel)return;var y0=this.stx.pixelFromPrice(hBound1,panel);var y1=this.stx.pixelFromPrice(hBound2,panel)-y0;var x0=this.stx.pixelFromTick(leftBound,panel.chart);var x1=panel.width-x0;context.fillStyle="#008000";context.globalAlpha=0.2;context.fillRect(x0,y0,x1,y1);context.globalAlpha=1;};CIQ.Drawing.gartley.prototype.adjust=function(){// If the drawing's panel doesn't exist then we'll check to see
// whether the panel has been added. If not then there's no way to adjust
var panel=this.stx.panels[this.panelName];if(!panel)return;this.reconstructPoints();this.setPoint(0,this.d0,this.v0,panel.chart);this.points.unshift(this.p0);this.setPoint(1,this.d1,this.v1,panel.chart);this.points.push(this.p1);};CIQ.Drawing.gartley.prototype.reconstructPoints=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.points=[];for(var a=0;a<this.pts.length;a+=3){var d=CIQ.strToDateTime(this.pts[a]);d.setMinutes(d.getMinutes()+Number(this.pts[a+1])-d.getTimezoneOffset());this.points.push([this.stx.tickFromDate(CIQ.yyyymmddhhmmssmmm(d),panel.chart),this.pts[a+2]]);}};/**
	 * Reconstruct a gartley
	 * @memberOf CIQ.Drawing.gartley
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.v1] Value (price) for the last point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.d1] Date (string form) for the last point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.tzo1] Offset of UTC from d1 in minutes
	 * @param {number} [obj.pts] a serialized list of dates,offsets,values for the 3 intermediate points of the gartley (should be 9 items in list)
	 */CIQ.Drawing.gartley.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.pts=obj.pts.split(",");this.adjust();};CIQ.Drawing.gartley.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1,pts:this.pts.join(",")};};/**
	 * Freeform drawing tool. Set splineTension to a value from 0 to 1 (default .3). This is a dragToDraw function
	 * and automatically disables the crosshairs while enabled.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}.
	 * @constructor
	 * @name  CIQ.Drawing.freeform
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.freeform=function(){this.name="freeform";this.splineTension=0.3;//set to -1 to not use splines at all
this.dragToDraw=true;};CIQ.Drawing.freeform.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.Drawing.freeform.prototype.measure=function(){};CIQ.Drawing.freeform.prototype.intersected=function(tick,value,box){if(box.x0>this.hiX||box.x1<this.lowX)return null;if(box.y1>this.hiY||box.y0<this.lowY)return null;this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),tick:tick,// save original tick
value:value// save original value
};};CIQ.Drawing.freeform.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;if(repositioner.action=="move"){this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.adjust();this.render(context);}};CIQ.Drawing.freeform.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;if(this.penDown===false){this.copyConfig();this.startX=Math.round(this.stx.resolveX(this.stx.pixelFromTick(tick,panel.chart)));this.startY=Math.round(this.stx.resolveY(this.stx.pixelFromValueAdjusted(panel,tick,value)));var d=this.stx.dateFromTick(tick,panel.chart,true);this.d0=CIQ.yyyymmddhhmmssmmm(d);this.tzo0=d.getTimezoneOffset();this.v0=value;this.p0=[CIQ.ChartEngine.crosshairX-this.startX,CIQ.ChartEngine.crosshairY-this.startY];this.nodes=[this.p0[0],this.p0[1]];this.pNodes=[this.p0];this.candleWidth=this.stx.layout.candleWidth;this.multiplier=panel.yAxis.multiplier;this.interval=this.stx.layout.interval;this.periodicity=this.stx.layout.periodicity;this.tempSplineTension=this.splineTension;this.splineTension=-1;document.body.style.cursor="pointer";this.penDown=true;return false;}this.penDown=false;this.splineTension=this.tempSplineTension;document.body.style.cursor="auto";//this.adjust(); //moved to drawingClick - Gus
return true;};CIQ.Drawing.freeform.prototype.move=function(context,tick,value){if(!this.penDown)return;var panel=this.stx.panels[this.panelName];var d1=this.stx.dateFromTick(tick,panel.chart,true);this.d1=CIQ.yyyymmddhhmmssmmm(d1);this.tzo1=d1.getTimezoneOffset();this.v1=value;this.p1=[CIQ.ChartEngine.crosshairX-this.startX,CIQ.ChartEngine.crosshairY-this.startY];if(this.pNodes.length>2){if(this.p1[0]==this.pNodes[this.pNodes.length-2][0]&&this.p1[0]==this.pNodes[this.pNodes.length-1][0]){this.pNodes.length--;this.nodes.length-=2;}else if(this.p1[1]==this.pNodes[this.pNodes.length-2][1]&&this.p1[1]==this.pNodes[this.pNodes.length-1][1]){this.pNodes.length--;this.nodes.length-=2;}}this.nodes.push(this.p1[0],this.p1[1]);this.pNodes.push(this.p1);this.render(context);return false;};//TODO: make more exact, and relocate this to somewhere useful
CIQ.Drawing.freeform.prototype.intervalRatio=function(oldInterval,newInterval,oldPeriodicity,newPeriodicity,startDate,symbol){//approximating functions
function weeksInMonth(startDate,symbol){return 5;}function daysInWeek(startDate,symbol){return 5;}function daysInMonth(startDate,symbol){return 30;}function minPerDay(startDate,symbol){if(CIQ.Market.Symbology.isForexSymbol(symbol))return 1440;return 390;}//1,3,5,10,15,30,"day","week","month"
var returnValue=0;if(oldInterval==newInterval)returnValue=1;else if(!isNaN(oldInterval)&&!isNaN(newInterval))returnValue=oldInterval/newInterval;//two intraday intervals
else if(isNaN(oldInterval)){//was daily
if(oldInterval=="month"){if(newInterval=="week")returnValue=weeksInMonth(startDate,symbol);else if(newInterval=="day")returnValue=daysInMonth(startDate,symbol);else if(!isNaN(newInterval))returnValue=daysInMonth(startDate,symbol)*minPerDay(startDate,symbol)/newInterval;}else if(oldInterval=="week"){if(newInterval=="month")returnValue=1/weeksInMonth(startDate,symbol);if(newInterval=="day")returnValue=daysInWeek(startDate,symbol);else if(!isNaN(newInterval))returnValue=daysInWeek(startDate,symbol)*minPerDay(startDate,symbol)/newInterval;}else if(oldInterval=="day"){if(newInterval=="week")returnValue=1/daysInWeek(startDate,symbol);else if(newInterval=="month")returnValue=1/daysInMonth(startDate,symbol);else if(!isNaN(newInterval))returnValue=minPerDay(startDate,symbol)/newInterval;}}else if(!isNaN(oldInterval)){//switching from intraday to daily
if(newInterval=="month")returnValue=oldInterval/(daysInMonth(startDate,symbol)*minPerDay(startDate,symbol));else if(newInterval=="week")returnValue=oldInterval/(daysInWeek(startDate,symbol)*minPerDay(startDate,symbol));else if(newInterval=="day")returnValue=oldInterval/minPerDay(startDate,symbol);}returnValue*=oldPeriodicity/newPeriodicity;return returnValue;};CIQ.Drawing.freeform.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var intvl=this.intervalRatio(this.interval,this.stx.layout.interval,this.periodicity,this.stx.layout.periodicity,this.d0,panel.chart.symbol);if(intvl===0)return;var cwr=this.stx.layout.candleWidth/this.candleWidth;var mlt=panel.yAxis.multiplier/this.multiplier;this.setPoint(0,this.d0,this.v0,panel.chart);var spx=this.stx.pixelFromTick(this.p0[0],panel.chart);var spy=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var arrPoints=[];var width=this.lineWidth;var color=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:width};for(var n=0;n<this.pNodes.length;n++){var x0=intvl*cwr*this.pNodes[n][0]+spx;var y0=mlt*this.pNodes[n][1]+spy;arrPoints.push(x0,y0);}if(!arrPoints.length)return;if(this.splineTension<0){this.stx.connectTheDots(arrPoints,color,this.name,context,panel,parameters);}else{this.stx.plotSpline(arrPoints,this.splineTension,color,this.name,context,true,parameters);}};CIQ.Drawing.freeform.prototype.adjust=function(){// If the drawing's panel doesn't exist then we'll check to see
// whether the panel has been added. If not then there's no way to adjust
var panel=this.stx.panels[this.panelName];if(!panel)return;var p0=[this.nodes[0],this.nodes[1]];this.pNodes=[p0];this.lowX=this.nodes[0];this.hiX=this.nodes[0];this.lowY=this.nodes[1];this.hiY=this.nodes[1];for(var n=2;n<this.nodes.length;n+=2){var p1=[this.nodes[n],this.nodes[n+1]];this.pNodes.push(p1);this.lowX=Math.min(this.lowX,p1[0]);this.hiX=Math.max(this.hiX,p1[0]);this.lowY=Math.max(this.lowY,p1[1]);//reversed because price axis goes bottom to top
this.hiY=Math.min(this.hiY,p1[1]);}var intvl=this.intervalRatio(this.interval,this.stx.layout.interval,this.periodicity,this.stx.layout.periodicity,this.d0,panel.chart.symbol);if(intvl===0)return;var cwr=this.stx.layout.candleWidth/this.candleWidth;var mlt=panel.yAxis.multiplier/this.multiplier;this.setPoint(0,this.d0,this.v0,panel.chart);var spx=this.stx.pixelFromTick(this.p0[0],panel.chart);var spy=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);this.lowX=this.stx.tickFromPixel(Math.floor(intvl*cwr*this.lowX)+spx,panel.chart);this.hiX=this.stx.tickFromPixel(Math.ceil(intvl*cwr*this.hiX)+spx,panel.chart);this.lowY=this.stx.valueFromPixel(Math.floor(mlt*this.lowY)+spy,panel);this.hiY=this.stx.valueFromPixel(Math.ceil(mlt*this.hiY)+spy,panel);};CIQ.Drawing.freeform.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,ptrn:this.pattern,lw:this.lineWidth,cw:Number(this.candleWidth.toFixed(4)),mlt:Number(this.multiplier.toFixed(4)),d0:this.d0,tzo0:this.tzo0,v0:this.v0,inter:this.interval,pd:this.periodicity,nodes:this.nodes};};/**
	 * Reconstruct a freeform drawing. It is not recommended to do this programmatically.
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The line color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Line width. Defaults to 1.
	 * @param {number} [obj.cw] Candle width from original drawing
	 * @param {number} [obj.mlt] Y-axis multiplier from original drawing
	 * @param {number} [obj.v0] Value (price) for the first point
	 * @param {number} [obj.d0] Date (string form) for the first point
	 * @param {number} [obj.int] Interval from original drawing
	 * @param {number} [obj.pd] Periodicity from original drawing
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {array} [obj.nodes] An array of nodes in form [x0a,x0b,y0a,y0b, x1a, x1b, y1a, y1b, ....]
	 * @memberOf CIQ.Drawing.freeform
	 */CIQ.Drawing.freeform.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.candleWidth=obj.cw;this.multiplier=obj.mlt;this.d0=obj.d0;this.tzo0=obj.tzo0;this.v0=obj.v0;this.interval=obj.inter;this.periodicity=obj.pd;this.nodes=obj.nodes;this.adjust();};/**
	 * Callout drawing tool.  This is like an annotation except it draws a stem and offers a background color and line style.
	 *
	 * @constructor
	 * @name  CIQ.Drawing.callout
	 * @since 2015-11-1
	 * @version ChartIQ Advanced Package
	 * @see {@link CIQ.Drawing.annotation}
	 */CIQ.Drawing.callout=function(){this.name="callout";this.arr=[];this.w=0;this.h=0;this.padding=4;this.text="";this.ta=null;this.fontSize=0;this.font={};this.stemEntry="";this.defaultWidth=50;this.defaultHeight=10;//this.dragToDraw=true;
};CIQ.Drawing.callout.ciqInheritsFrom(CIQ.Drawing.annotation);CIQ.Drawing.callout.prototype.configs=["color","fillColor","lineWidth","pattern","font"];CIQ.Drawing.callout.prototype.copyConfig=function(withPreferences){CIQ.Drawing.copyConfig(this,withPreferences);this.borderColor=this.color;};CIQ.Drawing.callout.prototype.move=function(context,tick,value){if(!this.penDown)return;this.copyConfig();this.p0=[tick,value];this.render(context);};CIQ.Drawing.callout.prototype.onChange=function(e){var panel=this.stx.panels[this.panelName];if(!panel)return;var textarea=e.target;this.w=textarea.clientWidth;this.h=textarea.clientHeight;//textarea.style.left=(this.stx.pixelFromTick(this.p0[0])-this.w/2) + "px";
//textarea.style.top=(this.stx.pixelFromPrice(this.p0[1],panel)-this.h/2) + "px";
var context=this.context||this.stx.chart.tempCanvas.context;CIQ.clearCanvas(context.canvas,this.stx);this.render(context);this.edit(context);};CIQ.Drawing.callout.prototype.render=function(context){this.context=context;// remember last context
var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);if(isNaN(y0))return;context.font=this.fontString;context.textBaseline="top";var x=x0;var y=y0;var w=this.w/2;var h=this.h/2;if(this.penDown){w=this.defaultWidth;h=this.defaultHeight;if(!h)h=this.fontSize;}var lineWidth=this.lineWidth;if(!lineWidth)lineWidth=1.1;var color=this.color;if(color=="auto"||CIQ.isTransparent(color))color=this.stx.defaultColor;var borderColor=this.borderColor;if(borderColor=="auto"||CIQ.isTransparent(borderColor))borderColor=this.stx.defaultColor;if(this.highlighted)borderColor=this.stx.getCanvasColor("stx_highlight_vector");var sx0,sx1,sy0,sy1;var r=Math.min(Math.min(w,h)/2,8);if(this.stem){if(this.stem.t){// absolute positioning of stem
sx0=this.stx.pixelFromTick(this.stem.t);// bottom of stem
sy0=this.stx.pixelFromValueAdjusted(panel,this.stem.t,this.stem.v);}else if(this.stem.x){// stem with relative offset positioning
sx0=x;sy0=y;x+=this.stem.x;y+=this.stem.y;}var state="";if(sx0>=x+w){sx1=x+w;state="r";}// right of text
else if(sx0>x-w&&sx0<x+w){sx1=x;state="c";}// center of text
else if(sx0<=x-w){sx1=x-w;state="l";}// left of text
if(sy0>=y+h){sy1=y+h;state+="b";}// bottom of text
else if(sy0>y-h&&sy0<y+h){sy1=y;state+="m";}// middle of text
else if(sy0<=y-h){sy1=y-h;state+="t";}// top of text
this.stemEntry=state;if(state!="cm"){// make sure stem does not originate underneath the annotation
sx0=Math.round(sx0);sx1=Math.round(sx1);sy0=Math.round(sy0);sy1=Math.round(sy1);}}if(this.highlighted){this.stx.canvasColor("stx_annotation_highlight_bg",context);}else{if(this.fillColor){context.fillStyle=this.fillColor;context.globalAlpha=0.4;}else if(this.stem){// If there's a stem then use the container color otherwise the stem will show through
context.fillStyle=this.stx.containerColor;}}context.strokeStyle=borderColor;if(context.setLineDash){context.setLineDash(CIQ.borderPatternToArray(lineWidth,this.pattern));context.lineDashOffset=0;//start point in array
}if(borderColor){context.beginPath();context.lineWidth=lineWidth;context.moveTo(x+w-r,y-h);if(this.stemEntry!="rt"){context.quadraticCurveTo(x+w,y-h,x+w,y-h+r);//top right
}else{context.lineTo(sx0,sy0);context.lineTo(x+w,y-h+r);}context.lineTo(x+w,y-r/2);if(this.stemEntry=="rm")context.lineTo(sx0,sy0);context.lineTo(x+w,y+r/2);context.lineTo(x+w,y+h-r);if(this.stemEntry!="rb"){context.quadraticCurveTo(x+w,y+h,x+w-r,y+h);//bottom right
}else{context.lineTo(sx0,sy0);context.lineTo(x+w-r,y+h);}context.lineTo(x+r/2,y+h);if(this.stemEntry=="cb")context.lineTo(sx0,sy0);context.lineTo(x-r/2,y+h);context.lineTo(x-w+r,y+h);if(this.stemEntry!="lb"){context.quadraticCurveTo(x-w,y+h,x-w,y+h-r);//bottom left
}else{context.lineTo(sx0,sy0);context.lineTo(x-w,y+h-r);}context.lineTo(x-w,y+r/2);if(this.stemEntry=="lm")context.lineTo(sx0,sy0);context.lineTo(x-w,y-r/2);context.lineTo(x-w,y-h+r);if(this.stemEntry!="lt"){context.quadraticCurveTo(x-w,y-h,x-w+r,y-h);//top left
}else{context.lineTo(sx0,sy0);context.lineTo(x-w+r,y-h);}context.lineTo(x-r/2,y-h);if(this.stemEntry=="ct")context.lineTo(sx0,sy0);context.lineTo(x+r/2,y-h);context.lineTo(x+w-r,y-h);context.fill();context.globalAlpha=1;if(this.pattern!="none")context.stroke();}if(this.highlighted){this.stx.canvasColor("stx_annotation_highlight",context);}else{context.fillStyle=color;}y+=this.padding;for(var i=0;i<this.arr.length;i++){context.fillText(this.arr[i],x-w+this.padding,y-h);y+=this.fontSize;}context.textBaseline="alphabetic";if(this.highlighted&&!this.noHandles){var p0Fill=this.highlighted=="p0"?true:false;this.littleCircle(context,sx0,sy0,p0Fill);}/*if(this.penDown){
			context.globalAlpha=0.2;
			context.fillText("[Your text here]", x-w+this.padding, y-h);
			context.globalAlpha=1;
		}*/};CIQ.Drawing.callout.prototype.click=function(context,tick,value){//don't allow user to add callout on the axis.
if(this.stx.overXAxis||this.stx.overYAxis)return;var panel=this.stx.panels[this.panelName];this.copyConfig();//this.getFontString();
this.setPoint(0,tick,value,panel.chart);if(!this.penDown){this.stem={"d":this.d0,"v":this.v0};this.penDown=true;this.adjust();return false;}this.adjust();this.edit(context);this.penDown=false;return false;};CIQ.Drawing.callout.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;if(repositioner.stem){if(repositioner.action=="drag"){this.stem={"d":this.stx.dateFromTick(tick,panel.chart,true),"v":value};}else if(repositioner.action=="move"){this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.stem={"d":this.stx.dateFromTick(this.stx.tickFromDate(repositioner.stem.d,panel.chart)-tickDiff),"v":repositioner.stem.v-valueDiff};}this.adjust();}else{this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);}this.render(context);};CIQ.Drawing.callout.prototype.lineIntersection=function(tick,value,box,type){var panel=this.stx.panels[this.panelName];var stem=this.stem,p0=this.p0,stx=this.stx;if(!p0||!stem||!panel)return false;var stemTick=stem.t||this.stx.tickFromDate(stem.d,panel.chart);var pObj={x0:p0[0],x1:stemTick,y0:p0[1],y1:stem.v};var pixelPoint=CIQ.convertBoxToPixels(stx,this.panelName,pObj);var x0=pixelPoint.x0;var y0=pixelPoint.y0;var x1=pixelPoint.x1;var y1=pixelPoint.y1;if(typeof this.stemEntry=="string"){if(this.stemEntry.indexOf("l")>-1)x0-=this.w/2;else if(this.stemEntry.indexOf("r")>-1)x0+=this.w/2;if(this.stemEntry.indexOf("t")>-1)y0-=this.h/2;else if(this.stemEntry.indexOf("b")>-1)y0+=this.h/2;}var pixelBox=CIQ.convertBoxToPixels(stx,this.panelName,box);return CIQ.boxIntersects(pixelBox.x0,pixelBox.y0,pixelBox.x1,pixelBox.y1,x0,y0,x1,y1,type);};CIQ.Drawing.callout.prototype.intersected=function(tick,value,box){var panel=this.stx.panels[this.panelName];if(!this.p0)return null;// in case invalid drawing (such as from panel that no longer exists)
if(this.pointIntersection(this.stem.t,this.stem.v,box)){this.highlighted="p0";return{action:"drag",stem:true};}var x0=this.stx.pixelFromTick(this.p0[0],panel.chart)-this.w/2;var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1])-this.h/2;var x1=x0+this.w;var y1=y0+this.h;if(this.stem&&this.stem.x){x0+=this.stem.x;x1+=this.stem.x;y0+=this.stem.y;y1+=this.stem.y;}var x=this.stx.pixelFromTick(tick,panel.chart);var y=this.stx.pixelFromValueAdjusted(panel,tick,value);if(x+box.r>=x0&&x-box.r<=x1&&y+box.r>=y0&&y-box.r<=y1){this.highlighted=true;return{p0:CIQ.clone(this.p0),tick:tick,value:value};}var isIntersected=this.lineIntersection(tick,value,box,"segment");if(isIntersected){this.highlighted=true;// This object will be used for repositioning
return{action:"move",stem:CIQ.clone(this.stem),p0:CIQ.clone(this.p0),tick:tick,// save original tick
value:value// save original value
};}return null;};/**
	 * Fibonacci projection drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.fibonacci}
	 * @constructor
	 * @name  CIQ.Drawing.fibprojection
	 * @version ChartIQ Advanced Package
	 * @since 5.2.0
	 */CIQ.Drawing.fibprojection=function(){this.name="fibprojection";this.dragToDraw=false;this.p2=null;};CIQ.Drawing.fibprojection.ciqInheritsFrom(CIQ.Drawing.fibonacci);CIQ.Drawing.fibprojection.prototype.recommendedLevels=[0,0.618,1,1.272,1.618,2.618,4.236];CIQ.Drawing.fibprojection.prototype.click=function(context,tick,value){var panel=this.stx.panels[this.panelName];if(!panel)return;this.copyConfig();if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value)){this.stx.undo();//abort
return true;}if(this.p2!==null){this.setPoint(2,this.p2[0],this.p2[1],panel.chart);this.parameters=CIQ.clone(this.parameters);// separate from the global object
return true;}this.setPoint(1,tick,value,panel.chart);this.p2=[this.p1[0],this.p1[1]];return false;// kernel will call render after this
};CIQ.Drawing.fibprojection.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var yAxis=panel.yAxis;if(!this.p1)return;var dist=this.p1[1]-this.p0[1];var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var x2=null,y2=null;if(this.p2){x2=this.stx.pixelFromTick(this.p2[0],panel.chart);y2=this.stx.pixelFromValueAdjusted(panel,this.p2[0],this.p2[1]);}//old drawings missing parameters.trend
var trend={color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}};if(!this.parameters.trend)this.parameters.trend=trend;var trendLineColor=this.setLineColor(this.parameters.trend.color);context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var w=context.measureText("161.8%").width+10;// give it extra space so it does not overlap with the price labels.
var txtColor=this.color;if(txtColor=="auto"||CIQ.isTransparent(txtColor))txtColor=this.stx.defaultColor;if(this.p2){this.rays=[];for(var i=0;i<this.parameters.fibs.length;i++){context.textAlign="left";context.fillStyle=txtColor;var fib=this.parameters.fibs[i];if(!fib.display)continue;var y=this.stx.pixelFromValueAdjusted(panel,this.p2[0],this.p2[1]+dist*fib.level);var x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},y);var nearX=this.parameters.extendLeft?0:x0;var farX=panel.left+panel.width;if(this.parameters.printLevels){var txt=Math.round(fib.level*1000)/10+"%";farX-=w;if(this.parameters.printValues){context.fillStyle=txtColor;// the price labels screw up the color and font size...so reset before rendering the text
this.stx.canvasFont("stx_yaxis",context);// use the same context as the y axis so they match.
}if(farX<nearX)context.textAlign="right";context.fillText(txt,farX,y);if(farX<nearX)farX+=5;else farX-=5;}if(this.parameters.printValues){if(x<panel.width){// just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
var price=this.stx.transformedPriceFromPixel(y,panel);if(yAxis.priceFormatter){price=yAxis.priceFormatter(this.stx,panel,price);}else{price=this.stx.formatYAxisPrice(price,panel);}if(context==this.stx.chart.context)this.stx.endClip();this.stx.createYAxisLabel(panel,price,y,txtColor,null,context);if(context==this.stx.chart.context)this.stx.startClip(panel.name);}}var fibColor=fib.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.stx.defaultColor;var fillColor=fib.color;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;var fibParameters=CIQ.clone(fib.parameters);if(this.highlighted)fibParameters.opacity=1;this.stx.plotLine(nearX,farX,y,y,this.highlighted?trendLineColor:fibColor,"segment",context,panel,fibParameters);this.rays.push([[nearX,y],[farX,y]]);context.globalAlpha=0.05;context.beginPath();context.moveTo(farX,y);context.lineTo(nearX,y);if(nearX)context.lineTo(x0,y2);else context.lineTo(nearX,y2);context.lineTo(farX,y2);if(typeof fillColor!="undefined")context.fill();// so legacy fibs continue to have no fill color.
context.globalAlpha=1;}}var trendParameters=CIQ.clone(this.parameters.trend.parameters);if(this.highlighted)trendParameters.opacity=1;this.stx.plotLine(x0,x1,y0,y1,trendLineColor,"segment",context,panel,trendParameters);if(this.p2)this.stx.plotLine(x1,x2,y1,y2,trendLineColor,"segment",context,panel,trendParameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;var p2Fill=this.highlighted=="p2"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);this.littleCircle(context,x2,y2,p2Fill);}};CIQ.Drawing.fibprojection.prototype.move=function(context,tick,value){if(!this.penDown)return;this.copyConfig();if(this.p2===null)this.p1=[tick,value];else this.p2=[tick,value];this.render(context);};CIQ.Drawing.fibprojection.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;if(repositioner.action=="move"){this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.setPoint(1,repositioner.p1[0]-tickDiff,repositioner.p1[1]-valueDiff,panel.chart);this.setPoint(2,repositioner.p2[0]-tickDiff,repositioner.p2[1]-valueDiff,panel.chart);this.render(context);}else if(repositioner.action=="drag"){this[repositioner.point]=[tick,value];this.setPoint(0,this.p0[0],this.p0[1],panel.chart);this.setPoint(1,this.p1[0],this.p1[1],panel.chart);this.setPoint(2,this.p2[0],this.p2[1],panel.chart);this.render(context);}};CIQ.Drawing.fibprojection.prototype.intersected=function(tick,value,box){var p0=this.p0,p1=this.p1,p2=this.p2;if(!p0||!p1||!p2)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1,2:p2};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}var rays=this.rays;var isIntersected=this.lineIntersection(tick,value,box,"segment",p0,p1)||this.lineIntersection(tick,value,box,"segment",p1,p2);if(!isIntersected){for(var i=0;i<rays.length;i++){if(this.lineIntersection(tick,value,box,"ray",rays[i][0],rays[i][1],true)){isIntersected=true;break;}}}if(isIntersected){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),p2:CIQ.clone(p2),tick:tick,// save original tick
value:value// save original value
};}return null;};CIQ.Drawing.fibprojection.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.setPoint(1,this.d1,this.v1,panel.chart);this.setPoint(2,this.d2,this.v2,panel.chart);};/**
	 * Fibonacci Arc drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.fibonacci}
	 * @constructor
	 * @name  CIQ.Drawing.fibarc
	 * @since 2015-11-1
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.fibarc=function(){this.name="fibarc";//this.dragToDraw=true;
};CIQ.Drawing.fibarc.ciqInheritsFrom(CIQ.Drawing.fibonacci);CIQ.Drawing.fibarc.prototype.recommendedLevels=[0.382,0.5,0.618,1];CIQ.Drawing.fibarc.prototype.setOuter=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.outer={p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1)};var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y=2*y0-y1;var x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},y);this.outer.p0[1]=this.stx.valueFromPixel(y,panel);this.outer.p0[0]=this.stx.tickFromPixel(x,panel.chart);};CIQ.Drawing.fibarc.prototype.intersected=function(tick,value,box){var panel=this.stx.panels[this.panelName];if(!panel)return;var p0=this.p0,p1=this.p1,outer=this.outer;if(!p0||!p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}if(this.lineIntersection(tick,value,box,"segment",outer.p0,outer.p1)){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,// save original tick
value:value// save original value
};}// Just test the box circumscribing the arcs
var points={x0:p0[0],x1:p1[0],y0:p0[1],y1:p1[1]};var pixelArea=CIQ.convertBoxToPixels(this.stx,this.panelName,points);var extend={x:Math.abs(Math.sqrt(2)*(pixelArea.x1-pixelArea.x0)),y:Math.abs(Math.sqrt(2)*(pixelArea.y1-pixelArea.y0))};var x=this.stx.pixelFromTick(tick,panel.chart);var y=this.stx.pixelFromValueAdjusted(panel,tick,value);if(x+box.r<pixelArea.x1-extend.x||x-box.r>pixelArea.x1+extend.x)return null;if(y+box.r<pixelArea.y1-extend.y||y-box.r>pixelArea.y1+extend.y)return null;if(pixelArea.y0<pixelArea.y1&&y-box.r>pixelArea.y1)return null;if(pixelArea.y0>pixelArea.y1&&y+box.r<pixelArea.y1)return null;this.highlighted=true;return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,value:value};};CIQ.Drawing.fibarc.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var yAxis=panel.yAxis;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var isUpTrend=y1<y0;var factor=Math.abs((y1-y0)/(x1-x0));var trendLineColor=this.setLineColor(this.parameters.trend.color);context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var txtColor=this.color;if(txtColor=="auto"||CIQ.isTransparent(txtColor))txtColor=this.stx.defaultColor;for(var i=0;i<this.parameters.fibs.length;i++){context.fillStyle=txtColor;var fib=this.parameters.fibs[i];if(fib.level<0||!fib.display)continue;var radius=Math.abs(this.p1[1]-this.p0[1])*Math.sqrt(2)*fib.level;var value=this.p1[1]+radius*(isUpTrend?-1:1);var y=this.stx.pixelFromValueAdjusted(panel,this.p0[0],value);var x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y1},y);if(this.parameters.printLevels){context.textAlign="center";var txt=Math.round(fib.level*1000)/10+"%";if(this.parameters.printValues){context.fillStyle=txtColor;// the price labels screw up the color and font size...so  reset before rendering the text
this.stx.canvasFont("stx_yaxis",context);// use the same context as the y axis so they match.
}context.fillText(txt,x1,Math.round(y-5));}context.textAlign="left";if(this.parameters.printValues){if(x<panel.width){// just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
var price=value;if(yAxis.priceFormatter){price=yAxis.priceFormatter(this.stx,panel,price);}else{price=this.stx.formatYAxisPrice(price,panel);}if(context==this.stx.chart.context)this.stx.endClip();this.stx.createYAxisLabel(panel,price,y,txtColor,null,context);if(context==this.stx.chart.context)this.stx.startClip(panel.name);}}var fibColor=fib.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.stx.defaultColor;context.strokeStyle=this.highlight?trendLineColor:fibColor;var fillColor=fib.color;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;context.globalAlpha=this.highlighted?1:fib.parameters.opacity;context.lineWidth=fib.parameters.lineWidth;if(context.setLineDash){context.setLineDash(CIQ.borderPatternToArray(context.lineWidth,fib.parameters.pattern));context.lineDashOffset=0;//start point in array
}context.save();context.beginPath();context.scale(1/factor,1);context.arc(x1*factor,y1,Math.abs(y-y1),0,Math.PI,!isUpTrend);if(this.pattern!="none")context.stroke();context.globalAlpha=0.05;context.fill();context.restore();if(context.setLineDash)context.setLineDash([]);context.globalAlpha=1;}context.textAlign="left";// ensure we at least draw trend line from zero to 100
var trendParameters=CIQ.clone(this.parameters.trend.parameters);if(this.highlighted)trendParameters.opacity=1;this.stx.plotLine(x1,2*x0-x1,y1,2*y0-y1,trendLineColor,"segment",context,panel,trendParameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};/**
	 * Fibonacci Fan drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.fibonacci}
	 * @constructor
	 * @name  CIQ.Drawing.fibfan
	 * @since 2015-11-1
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.fibfan=function(){this.name="fibfan";//this.dragToDraw=true;
};CIQ.Drawing.fibfan.ciqInheritsFrom(CIQ.Drawing.fibonacci);CIQ.Drawing.fibfan.prototype.recommendedLevels=[0,0.382,0.5,0.618,1];CIQ.Drawing.fibfan.prototype.setOuter=function(){};CIQ.Drawing.fibfan.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var yAxis=panel.yAxis;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var top=Math.min(y1,y0);var bottom=Math.max(y1,y0);var height=bottom-top;var isUpTrend=(y1-y0)/(x1-x0)>0;var trendLineColor=this.setLineColor(this.parameters.trend.color);context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var w=context.measureText("161.8%").width+10;// give it extra space so it does not overlap with the price labels.
var/*minX=Number.MAX_VALUE,*/minY=Number.MAX_VALUE,/*maxX=Number.MAX_VALUE*-1,*/maxY=Number.MAX_VALUE*-1;var txtColor=this.color;if(txtColor=="auto"||CIQ.isTransparent(txtColor))txtColor=this.stx.defaultColor;this.rays=[];for(var i=0;i<this.parameters.fibs.length;i++){context.fillStyle=txtColor;var fib=this.parameters.fibs[i];if(!fib.display)continue;//var y=(y0-y1)*fib.level+y1;
var y=this.stx.pixelFromValueAdjusted(panel,this.p0[0],(this.p0[1]-this.p1[1])*fib.level+this.p1[1]);var x=CIQ.xIntersection({x0:x1,x1:x1,y0:y0,y1:y1},y);var farX=panel.left;if(x1>x0)farX+=panel.width;var farY=(farX-x0)*(y-y0)/(x-x0)+y0;if(x0>farX-(this.parameters.printLevels?w+5:0)&&x1>x0)continue;else if(x0<farX+(this.parameters.printLevels?w+5:0)&&x1<x0)continue;if(this.parameters.printLevels){var txt=Math.round(fib.level*1000)/10+"%";if(x1>x0){farX-=w;context.textAlign="left";}else{farX+=w;context.textAlign="right";}if(this.parameters.printValues){context.fillStyle=txtColor;// the price labels screw up the color and font size...so reset before rendering the text
this.stx.canvasFont("stx_yaxis",context);// use the same context as the y axis so they match.
}farY=(farX-x0)*(y-y0)/(x-x0)+y0;context.fillText(txt,farX,farY);if(x1>x0)farX-=5;else farX+=5;}context.textAlign="left";if(this.parameters.printValues){if(x<panel.width){// just use the actual price that segment will render on regardless of 'isUpTrend' since the values must match the prices on the y axis, and can not be reversed.
var price=this.stx.transformedPriceFromPixel(y,panel);if(yAxis.priceFormatter){price=yAxis.priceFormatter(this.stx,panel,price);}else{price=this.stx.formatYAxisPrice(price,panel);}if(context==this.stx.chart.context)this.stx.endClip();this.stx.createYAxisLabel(panel,price,y,txtColor,null,context);if(context==this.stx.chart.context)this.stx.startClip(panel.name);}}var fibColor=fib.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.stx.defaultColor;var fillColor=fib.color;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;if(this.parameters.printLevels)farY=(farX-x0)*(y-y0)/(x-x0)+y0;var fibParameters=CIQ.clone(fib.parameters);if(this.highlighted)fibParameters.opacity=1;this.stx.plotLine(x0,farX,y0,farY,this.highlighted?trendLineColor:fibColor,"segment",context,panel,fibParameters);this.rays.push([[x0,y0],[farX,farY]]);context.globalAlpha=0.05;context.beginPath();context.moveTo(farX,farY);context.lineTo(x0,y0);context.lineTo(farX,y0);context.fill();context.globalAlpha=1;if(y<minY){//minX=x;
minY=y;}if(y>maxY){//maxX=x;
maxY=y;}}// ensure we at least draw trend line from zero to 100
for(var level=0;level<=1;level++){var yy=isUpTrend?bottom-height*level:top+height*level;yy=Math.round(yy);if(yy<minY){//minX=CIQ.xIntersection({x0:x1,x1:x1,y0:y0,y1:y1}, yy);
minY=yy;}if(yy>maxY){//maxX=CIQ.xIntersection({x0:x1,x1:x1,y0:y0,y1:y1}, yy);
maxY=yy;}}//this.stx.plotLine(minX, maxX, minY, maxY, trendLineColor, "segment", context, panel, this.parameters.trend.parameters);
if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};/**
	 * Fibonacci Time Zone drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.fibonacci}
	 * @constructor
	 * @name  CIQ.Drawing.fibtimezone
	 * @since 2015-11-1
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.fibtimezone=function(){this.name="fibtimezone";//this.dragToDraw=true;
};CIQ.Drawing.fibtimezone.ciqInheritsFrom(CIQ.Drawing.fibonacci);CIQ.Drawing.fibtimezone.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var fibs=[1,0];var trendLineColor=this.setLineColor(this.parameters.trend.color);context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var h=20;// give it extra space so it does not overlap with the date labels.
var mult=this.p1[0]-this.p0[0];var txtColor=this.color;if(txtColor=="auto"||CIQ.isTransparent(txtColor))txtColor=this.stx.defaultColor;context.textAlign="center";var x=x0;var top=panel.yAxis.top;var farY=panel.yAxis.bottom;var txt=0;var fibColor=this.parameters.timezone.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.color;if(fibColor=="auto"||CIQ.isTransparent(fibColor))fibColor=this.stx.defaultColor;var fillColor=this.parameters.timezone.color;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;if(this.parameters.printLevels)farY-=h-7;var tzParameters=CIQ.clone(this.parameters.timezone.parameters);if(this.highlighted)tzParameters.opacity=1;do{x=this.stx.pixelFromTick(this.p0[0]+txt*mult,panel.chart);if(x0<x1&&x>panel.left+panel.width)break;else if(x0>x1&&x<panel.left)break;if(this.parameters.printLevels){context.fillStyle=txtColor;context.fillText(x1>x0?txt:txt*-1,x,farY+7);}context.fillStyle=fillColor;this.stx.plotLine(x,x,0,farY,this.highlighted?trendLineColor:fibColor,"segment",context,panel,tzParameters);context.globalAlpha=0.05;context.beginPath();context.moveTo(x0,top);context.lineTo(x,top);context.lineTo(x,farY);context.lineTo(x0,farY);context.fill();context.globalAlpha=1;txt=fibs[0]+fibs[1];fibs.unshift(txt);}while(mult);context.textAlign="left";this.stx.plotLine(x0,x1,y0,y1,trendLineColor,"segment",context,panel,tzParameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}else{// move points so always accessible
var yVal=this.stx.valueFromPixel(panel.height/2,panel);this.setPoint(0,this.p0[0],yVal,panel.chart);this.setPoint(1,this.p1[0],yVal,panel.chart);}};CIQ.Drawing.fibtimezone.prototype.intersected=function(tick,value,box){var p0=this.p0,p1=this.p1,panel=this.stx.panels[this.panelName];if(!p0||!p1||!panel)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}// Check for over the trend line or the 0 vertical line
var trendIntersects=this.lineIntersection(tick,value,box,"segment");if(trendIntersects||box.x0<=this.p0[0]&&box.x1>=p0[0]){this.highlighted=true;return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,// save original tick
value:value// save original value
};}return null;};/**
	 * shape is a default implementation of a {@link CIQ.Drawing.BaseTwoPoint} drawing
	 * which places a "shape" on the canvas.  It can be rotated and/or stretched.
	 * It is meant to be overridden with specific shape designs, such as arrows....
	 * @constructor
	 * @name  CIQ.Drawing.shape
	 * @since 2015-11-1
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.shape=function(){this.name="shape";this.radians=0;this.a=0;this.rotating=false;this.textMeasure=false;this.configurator="shape";//forces all derived classes to default to shape drawing tools
this.dimension=[0,0];this.points=[];};CIQ.Drawing.shape.ciqInheritsFrom(CIQ.Drawing.BaseTwoPoint);CIQ.Drawing.shape.prototype.measure=function(){};CIQ.Drawing.shape.prototype.render=function(context){if(!this.points.length)return;var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);if(this.p1){var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);context.globalAlpha=0.5;context.fillStyle="#000000";if(this.rotating){this.radians=Math.atan((y1-y0)/(x1-x0));if(x1<x0)this.radians+=Math.PI;else if(y1<y0)this.radians+=2*Math.PI;this.a=parseInt((this.radians*36/Math.PI).toFixed(0),10)*5;this.a%=360;this.radians=this.a*Math.PI/180;if(this.textMeasure)context.fillText(this.a+"\xB0",x1+10,y1+10);}else if(this.penDown){this.sx=Math.max(1,parseFloat(Math.abs(2*(x1-x0)/this.dimension[0]).toFixed(1)));if(x1<x0)this.sx*=-1;this.sy=Math.max(1,parseFloat(Math.abs(2*(y1-y0)/this.dimension[1]).toFixed(1)));if(y1<y0)this.sy*=-1;if(this.textMeasure)context.fillText(this.sx+"x,"+this.sy+"x",x1+this.sx+5,y1+this.sy+5);}context.globalAlpha=1;}var lineWidth=this.lineWidth;if(!lineWidth)lineWidth=1.1;var parameters={pattern:this.pattern,lineWidth:lineWidth};if(this.highlighted&&parameters.pattern=="none"){parameters.pattern="solid";if(parameters.lineWidth==0.1)parameters.lineWidth=1;}var edgeColor=this.color;if(edgeColor=="auto"||CIQ.isTransparent(edgeColor))edgeColor=this.stx.defaultColor;if(this.highlighted){edgeColor=this.stx.getCanvasColor("stx_highlight_vector");if(lineWidth==0.1)lineWidth=1.1;}var fillColor=this.fillColor;lineWidth/=Math.abs(this.sx*this.sy)*2/(Math.abs(this.sx)+Math.abs(this.sy));context.save();context.translate(x0,y0);context.rotate(this.radians);context.scale(this.sx,this.sy);var subshape,point;for(subshape=0;subshape<this.points.length;subshape++){context.beginPath();for(point=0;point<this.points[subshape].length;point++){var x,y,cx1,cx2,cy1,cy2;if(this.points[subshape][point]=="M"){//move
x=this.points[subshape][++point]-(this.dimension[0]-1)/2;y=this.points[subshape][++point]-(this.dimension[1]-1)/2;context.moveTo(x,y);}else if(this.points[subshape][point]=="L"){//line
x=this.points[subshape][++point]-(this.dimension[0]-1)/2;y=this.points[subshape][++point]-(this.dimension[1]-1)/2;context.lineTo(x,y);}else if(this.points[subshape][point]=="Q"){//quadratic
cx1=this.points[subshape][++point]-(this.dimension[0]-1)/2;cy1=this.points[subshape][++point]-(this.dimension[1]-1)/2;x=this.points[subshape][++point]-(this.dimension[0]-1)/2;y=this.points[subshape][++point]-(this.dimension[1]-1)/2;context.quadraticCurveTo(cx1,cy1,x,y);}else if(this.points[subshape][point]=="B"){//bezier
cx1=this.points[subshape][++point]-(this.dimension[0]-1)/2;cy1=this.points[subshape][++point]-(this.dimension[1]-1)/2;cx2=this.points[subshape][++point]-(this.dimension[0]-1)/2;cy2=this.points[subshape][++point]-(this.dimension[1]-1)/2;x=this.points[subshape][++point]-(this.dimension[0]-1)/2;y=this.points[subshape][++point]-(this.dimension[1]-1)/2;context.bezierCurveTo(cx1,cy1,cx2,cy2,x,y);}}context.closePath();if(fillColor&&!CIQ.isTransparent(fillColor)&&fillColor!="auto"){//context.globalAlpha=0.4;
context.fillStyle=fillColor;context.fill();//context.globalAlpha=1;
}if(edgeColor&&this.pattern!="none"){context.strokeStyle=edgeColor;context.lineWidth=lineWidth;if(context.setLineDash){context.setLineDash(CIQ.borderPatternToArray(lineWidth,this.pattern));context.lineDashOffset=0;//start point in array
}context.stroke();}}//context.strokeRect(-(this.dimension[0]-1)/2,-(this.dimension[1]-1)/2,this.dimension[0]-1,this.dimension[1]-1);
context.restore();context.save();context.translate(x0,y0);context.rotate(this.radians);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;var p2Fill=this.highlighted=="p2"?true:false;this.littleCircle(context,0,0,p0Fill);this.mover(context,0,0,p0Fill);this.littleCircle(context,this.sx*this.dimension[0]/2,this.sy*this.dimension[1]/2,p1Fill);this.resizer(context,this.sx*this.dimension[0]/2,this.sy*this.dimension[1]/2,p1Fill);this.littleCircle(context,this.sx*this.dimension[0]/2,0,p2Fill);this.rotator(context,this.sx*this.dimension[0]/2,0,p2Fill);context.globalAlpha=0.5;context.fillStyle="#000000";if(this.textMeasure){context.fillText(this.sx+"x,"+this.sy+"x",this.sx*this.dimension[0]/2+12,this.sy*this.dimension[1]/2+5);context.fillText(this.a+"\xB0",this.sx*this.dimension[0]/2+12,5);}context.globalAlpha=1;}else if(this.penDown){if(this.rotating){this.rotator(context,this.sx*this.dimension[0]/2,0,true);}else{this.resizer(context,this.sx*this.dimension[0]/2,this.sy*this.dimension[1]/2,true);}}context.restore();};CIQ.Drawing.shape.prototype.reposition=function(context,repositioner,tick,value){if(!repositioner)return;var panel=this.stx.panels[this.panelName];if(repositioner.action=="move"){var tickDiff=repositioner.tick-tick;var valueDiff=repositioner.value-value;this.setPoint(0,repositioner.p0[0]-tickDiff,repositioner.p0[1]-valueDiff,panel.chart);this.render(context);}else{var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var x1=this.stx.pixelFromTick(tick,panel.chart);var y1=this.stx.pixelFromValueAdjusted(panel,tick,value);if(repositioner.action=="scale"){this[repositioner.point]=[tick,value];this.sx=parseFloat((((x1-x0)*Math.cos(this.radians)+(y1-y0)*Math.sin(this.radians))/(this.dimension[0]/2)).toFixed(1));if(Math.abs(this.sx)<1)this.sx/=Math.abs(this.sy);this.sy=parseFloat((((y1-y0)*Math.cos(this.radians)-(x1-x0)*Math.sin(this.radians))/(this.dimension[1]/2)).toFixed(1));if(Math.abs(this.sy)<1)this.sy/=Math.abs(this.sy);this.render(context);}else if(repositioner.action=="rotate"){this[repositioner.point]=[tick,value];this.radians=Math.atan((y1-y0)/(x1-x0));if(x1<x0)this.radians+=Math.PI;else if(y1<y0)this.radians+=2*Math.PI;this.a=parseInt((this.radians*36/Math.PI).toFixed(0),10)*5;if(this.sx<0)this.a=this.a+180;this.a%=360;this.radians=this.a*Math.PI/180;this.render(context);}}};CIQ.Drawing.shape.prototype.intersected=function(tick,value,box){if(!this.p0)return null;// in case invalid drawing (such as from panel that no longer exists)
if(this.stx.repositioningDrawing==this&&this.stx.repositioningDrawing.repositioner)return this.stx.repositioningDrawing.repositioner;var panel=this.stx.panels[this.panelName];var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var x1=this.stx.pixelFromTick(tick,panel.chart);var y1=this.stx.pixelFromValueAdjusted(panel,tick,value);x1-=x0;y1-=y0;var y1t=y1,x1t=x1;x1=Math.cos(this.radians)*x1t+Math.sin(this.radians)*y1t;y1=Math.cos(this.radians)*y1t-Math.sin(this.radians)*x1t;x1/=this.sx;y1/=this.sy;var circleR2=Math.pow(CIQ.touchDevice?25:5+this.littleCircleRadius(),2);var scaledCircleR2=Math.abs(circleR2/(this.sx*this.sy));var overShape=Math.pow(this.dimension[0]/2,2)+Math.pow(this.dimension[1]/2,2)>Math.pow(x1,2)+Math.pow(y1,2);var moveProximity=(circleR2-(Math.pow(x1*this.sx,2)+Math.pow(y1*this.sy,2)))/Math.abs(this.sx*this.sy);var scaleProximity=scaledCircleR2-(Math.pow(x1-this.dimension[0]/2,2)+Math.pow(y1-this.dimension[1]/2,2));var rotateProximity=scaledCircleR2-(Math.pow(x1-this.dimension[0]/2,2)+Math.pow(y1,2));//console.log("s:"+scaleProximity+" r:"+rotateProximity+" m:"+moveProximity);
if(overShape){if(scaleProximity>=rotateProximity&&scaleProximity>=moveProximity){this.highlighted="p1";return{action:"scale"};}else if(rotateProximity>=scaleProximity&&rotateProximity>=moveProximity){this.highlighted="p2";return{action:"rotate"};}this.highlighted="p0";return{action:"move",p0:CIQ.clone(this.p0),tick:tick,value:value};}return null;};CIQ.Drawing.shape.prototype.configs=["color","fillColor","lineWidth","pattern"];CIQ.Drawing.shape.prototype.littleCircleRadius=function(){return 3;};CIQ.Drawing.shape.prototype.click=function(context,tick,value){if(!this.points.length)return false;this.copyConfig();var panel=this.stx.panels[this.panelName];if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}//if(this.accidentalClick(tick, value)) return this.dragToDraw;
this.setPoint(1,tick,value,panel.chart);if(this.rotating){this.penDown=false;this.rotating=false;return true;// kernel will call render after this
}this.rotating=true;return false;};CIQ.Drawing.shape.prototype.adjust=function(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.radians=Math.round(this.a/5)*Math.PI/36;};/**
	 * Reconstruct a shape
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {object} [obj] A drawing descriptor
	 * @param {string} [obj.col] The border color
	 * @param {string} [obj.fc] The fill color
	 * @param {string} [obj.pnl] The panel name
	 * @param {string} [obj.ptrn] Pattern for line "solid","dotted","dashed". Defaults to solid.
	 * @param {number} [obj.lw] Line width. Defaults to 1.
	 * @param {number} [obj.v0] Value (price) for the center point
	 * @param {number} [obj.d0] Date (string form) for the center point
	 * @param {number} [obj.tzo0] Offset of UTC from d0 in minutes
	 * @param {number} [obj.a] Angle of the rotation in degrees
	 * @param {number} [obj.sx] Horizontal scale factor
	 * @param {number} [obj.sy] Vertical scale factor
	 * @memberOf CIQ.Drawing.shape
	 */CIQ.Drawing.shape.prototype.reconstruct=function(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.v0=obj.v0;this.tzo0=obj.tzo0;this.a=obj.a;this.sx=obj.sx;this.sy=obj.sy;this.adjust();};CIQ.Drawing.shape.prototype.serialize=function(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,v0:this.v0,tzo0:this.tzo0,a:this.a,sx:this.sx,sy:this.sy};};/* Drawing specific shapes
	*
	* this.dimension: overall dimension of shape as designed, as a pair [dx,dy] where dx is length and dy is width, in pixels
	* this.points: array of arrays.  Each array represents a closed loop subshape.
	* 	within each array is a series of values representing coordinates.
	* 	For example, ["M",0,0,"L",1,1,"L",2,1,"Q",3,3,4,1,"B",5,5,0,0,3,3]
	* 	The array will be parsed by the render function:
	* 		"M" - move to the xy coordinates represented by the next 2 array elements
	* 		"L" - draw line to xy coordinates represented by the next 2 array elements
	* 		"Q" - draw quadratic curve where next 2 elements are the control point and following 2 elements are the end coordinates
	* 		"B" - draw bezier curve where next 2 elements are first control point, next 2 elements are second control point, and next 2 elements are the end coordinates
	* See sample shapes below.
	*
	*/CIQ.Drawing.xcross=function(){this.name="xcross";this.dimension=[7,7];this.points=[["M",1,0,"L",3,2,"L",5,0,"L",6,1,"L",4,3,"L",6,5,"L",5,6,"L",3,4,"L",1,6,"L",0,5,"L",2,3,"L",0,1,"L",1,0]];};CIQ.Drawing.xcross.ciqInheritsFrom(CIQ.Drawing.shape);CIQ.Drawing.arrow=function(){this.name="arrow";this.dimension=[11,11];this.points=[["M",3,0,"L",7,0,"L",7,5,"L",10,5,"L",5,10,"L",0,5,"L",3,5,"L",3,0]];};CIQ.Drawing.arrow.ciqInheritsFrom(CIQ.Drawing.shape);CIQ.Drawing.check=function(){this.name="check";this.dimension=[8,9];this.points=[["M",1,5,"L",0,6,"L",2,8,"L",7,1,"L",6,0,"L",2,6,"L",1,5]];};CIQ.Drawing.check.ciqInheritsFrom(CIQ.Drawing.shape);CIQ.Drawing.star=function(){this.name="star";this.dimension=[12,12];this.points=[["M",0,4,"L",4,4,"L",5.5,0,"L",7,4,"L",11,4,"L",8,7,"L",9,11,"L",5.5,9,"L",2,11,"L",3,7,"L",0,4]];};CIQ.Drawing.star.ciqInheritsFrom(CIQ.Drawing.shape);CIQ.Drawing.heart=function(){this.name="heart";this.dimension=[23,20];this.points=[["M",11,3,"B",11,2.4,10,0,6,0,"B",0,0,0,7.5,0,7.5,"B",0,11,4,15.4,11,19,"B",18,15.4,22,11,22,7.5,"B",22,7.5,22,0,16,0,"B",13,0,11,2.4,11,3]];};CIQ.Drawing.heart.ciqInheritsFrom(CIQ.Drawing.shape);CIQ.Drawing.focusarrow=function(){this.name="focusarrow";this.dimension=[7,5];this.points=[["M",0,0,"L",2,2,"L",0,4,"L",0,0],["M",6,0,"L",4,2,"L",6,4,"L",6,0]];};CIQ.Drawing.focusarrow.ciqInheritsFrom(CIQ.Drawing.shape);/**
	 * Crossline drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.horizontal}
	 * @constructor
	 * @name  CIQ.Drawing.crossline
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.crossline=function(){this.name="crossline";};CIQ.Drawing.crossline.ciqInheritsFrom(CIQ.Drawing.horizontal);CIQ.extend(CIQ.Drawing.crossline.prototype,{measure:function measure(){},accidentalClick:function accidentalClick(tick,value){return false;},adjust:function adjust(){var panel=this.stx.panels[this.panelName];if(!panel)return;this.setPoint(0,this.d0,this.v0,panel.chart);this.p1=CIQ.clone(this.p0);},intersected:function intersected(tick,value,box){if(!this.p0||!this.p1)return null;this.p1[0]+=1;var isIntersected=this.lineIntersection(tick,value,box,"line");this.p1=CIQ.clone(this.p0);if(!isIntersected){this.p1[1]+=1;isIntersected=this.lineIntersection(tick,value,box,"line");this.p1=CIQ.clone(this.p0);if(!isIntersected)return null;}this.highlighted=true;if(this.pointIntersection(this.p0[0],this.p0[1],box)){this.highlighted="p0";}// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,// save original tick
value:value// save original value
};},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var color=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:this.lineWidth};this.stx.plotLine(x0,x0+100,y0,y0,color,"horizontal",context,panel,parameters);this.stx.plotLine(x0,x0,y0,y0+100,color,"vertical",context,panel,parameters);if(this.axisLabel&&!this.repositioner){this.stx.endClip();var txt=this.p0[1];if(panel.chart.transformFunc)txt=panel.chart.transformFunc(this.stx,panel.chart,txt);if(panel.yAxis.priceFormatter)txt=panel.yAxis.priceFormatter(this.stx,panel,txt);else txt=this.stx.formatYAxisPrice(txt,panel);this.stx.createYAxisLabel(panel,txt,y0,color);this.stx.startClip(panel.name);if(this.p0[0]>=0&&!this.stx.chart.xAxis.noDraw){// don't try to compute dates from before dataSet
var dt,newDT;/* set d0 to the right timezone */dt=this.stx.dateFromTick(this.p0[0],panel.chart,true);if(!CIQ.ChartEngine.isDailyInterval(this.stx.layout.interval)){var milli=dt.getSeconds()*1000+dt.getMilliseconds();if(this.stx.displayZone){// this converts from the quote feed timezone to the chart specified time zone
newDT=new timezoneJS.Date(dt.getTime(),this.stx.displayZone);dt=new Date(newDT.getFullYear(),newDT.getMonth(),newDT.getDate(),newDT.getHours(),newDT.getMinutes());dt=new Date(dt.getTime()+milli);}}else{dt.setHours(0,0,0,0);}var myDate=CIQ.mmddhhmm(CIQ.yyyymmddhhmm(dt));/***********/if(panel.chart.xAxis.formatter){myDate=panel.chart.xAxis.formatter(dt);}else if(this.stx.internationalizer){var str;if(dt.getHours()!==0||dt.getMinutes()!==0){str=this.stx.internationalizer.monthDay.format(dt);str+=" "+this.stx.internationalizer.hourMinute.format(dt);}else{str=this.stx.internationalizer.yearMonthDay.format(dt);}myDate=str;}this.stx.endClip();this.stx.createXAxisLabel(panel,myDate,x0,color,null,true);this.stx.startClip(panel.name);}}if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;this.littleCircle(context,x0,y0,p0Fill);}}},true);/**
	 * Speed Resistance Arc drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}
	 * @constructor
	 * @name  CIQ.Drawing.speedarc
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.speedarc=function(){this.name="speedarc";this.printLevels=true;};CIQ.Drawing.speedarc.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.extend(CIQ.Drawing.speedarc.prototype,{defaultOpacity:0.25,configs:["color","fillColor","lineWidth","pattern"],copyConfig:function copyConfig(){this.color=this.stx.currentVectorParameters.currentColor;this.fillColor=this.stx.currentVectorParameters.fillColor;this.lineWidth=this.stx.currentVectorParameters.lineWidth;this.pattern=this.stx.currentVectorParameters.pattern;},intersected:function intersected(tick,value,box){if(!this.p0||!this.p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:this.p0,1:this.p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}var isIntersected=this.lineIntersection(tick,value,box,this.name);if(isIntersected){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,// save original tick
value:value// save original value
};}// Just test the box circumscribing the arcs
var left=this.p1[0]-(this.p0[0]-this.p1[0]);var right=this.p0[0];var bottom=this.p1[1];var top=this.p0[1];if(tick>Math.max(left,right)||tick<Math.min(left,right))return null;if(value>Math.max(top,bottom)||value<Math.min(top,bottom))return null;this.highlighted=true;return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,value:value};},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var isUpTrend=y1<y0;var factor=Math.abs((y1-y0)/(x1-x0));var color=this.setLineColor();context.strokeStyle=color;var fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;if(context.setLineDash){context.setLineDash(CIQ.borderPatternToArray(this.lineWidth,this.pattern));context.lineDashOffset=0;//start point in array
}this.stx.canvasFont("stx_yaxis",context);for(var i=1;i<3;i++){var radius=Math.abs(this.p1[1]-this.p0[1])*Math.sqrt(2)*i/3;var value=this.p1[1]+radius*(isUpTrend?-1:1);var y=this.stx.pixelFromValueAdjusted(panel,this.p0[0],value);context.save();context.beginPath();context.scale(1/factor,1);context.arc(x1*factor,y1,Math.abs(y-y1),0,Math.PI,!isUpTrend);context.globalAlpha=this.highlighted?1:this.defaultOpacity;if(this.pattern!="none")context.stroke();context.globalAlpha=0.1;context.fill();context.restore();context.globalAlpha=1;if(this.printLevels){context.fillStyle=color;context.textAlign="center";var txt=i+"/3";context.fillText(txt,x1,Math.round(y-5));context.fillStyle=fillColor;}}context.textAlign="left";var parameters={pattern:this.pattern,lineWidth:this.lineWidth,opacity:this.highlighted?1:this.defaultOpacity};this.stx.plotLine(x0,x1,y0,y1,color,"segment",context,panel,parameters);if(context.setLineDash)context.setLineDash([]);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}},reconstruct:function reconstruct(stx,obj){this.stx=stx;this.color=obj.col;this.fillColor=obj.fc;this.panelName=obj.pnl;this.pattern=obj.ptrn;this.lineWidth=obj.lw;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.adjust();},serialize:function serialize(){return{name:this.name,pnl:this.panelName,col:this.color,fc:this.fillColor,ptrn:this.pattern,lw:this.lineWidth,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1};}},true);/**
	 * Speed Resistance Lines drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.speedarc}
	 * @constructor
	 * @name  CIQ.Drawing.speedline
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.speedline=function(){this.name="speedline";this.printLevels=true;};CIQ.Drawing.speedline.ciqInheritsFrom(CIQ.Drawing.speedarc);CIQ.extend(CIQ.Drawing.speedline.prototype,{intersected:function intersected(tick,value,box){var p0=this.p0,p1=this.p1;if(!p0||!p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}var rays=this.rays;for(var i=0;i<rays.length;i++){if(this.lineIntersection(tick,value,box,"ray",rays[i][0],rays[i][1],true)){this.highlighted=true;// This object will be used for repositioning
return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,// save original tick
value:value// save original value
};}}return null;},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var trendLineColor=this.setLineColor();var color=this.color;if(color=="auto"||CIQ.isTransparent(color))color=this.stx.defaultColor;context.strokeStyle=color;var fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;var parameters={pattern:this.pattern,lineWidth:this.lineWidth,opacity:this.highlighted?1:this.defaultOpacity};var farX0,farY0;var levels=["1","2/3","1/3","3/2","3"];var levelValues=[1,2/3,1/3,3/2,3];var grids=[];this.rays=[];for(var i=0;i<levelValues.length;i++){var level=levelValues[i];if(level>1&&!this.extension)continue;var y=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]-(this.p0[1]-this.p1[1])*level);var x;if(level>1){x=CIQ.xIntersection({x0:x0,x1:x1,y0:y0,y1:y},y1);grids.push(x);}else{x=CIQ.xIntersection({x0:x1,x1:x1,y0:y0,y1:y1},y);grids.push(y);}//var x=x0+(x1-x0)/level;
//var y=y0-level*(y0-y1);
var farX=level>1?x:x1;var farY=level>1?y1:y;if(!this.confineToGrid){farX=panel.left;if(x1>x0)farX+=panel.width;farY=(farX-x0)*(y-y0)/(x1-x0)+y0;}if(this.printLevels){if(level!=1||this.extension){context.fillStyle=color;var perturbX=0,perturbY=0;if(y0>y1){perturbY=-5;context.textBaseline="bottom";}else{perturbY=5;context.textBaseline="top";}if(x0>x1){perturbX=5;context.textAlign="right";}else{perturbX=-5;context.textAlign="left";}if(level>1)context.fillText(levels[i],x+(this.confineToGrid?0:perturbX),y1);else context.fillText(levels[i],x1,y+(this.confineToGrid?0:perturbY));context.fillStyle=fillColor;}}this.stx.plotLine(x0,farX,y0,farY,this.highlighted?trendLineColor:color,"segment",context,panel,parameters);if(level==1){farX0=farX;farY0=farY;}this.rays.push([[x0,y0],[farX,farY]]);context.globalAlpha=0.1;context.beginPath();context.moveTo(farX,farY);context.lineTo(x0,y0);context.lineTo(farX0,farY0);context.fill();context.globalAlpha=1;}context.textAlign="left";context.textBaseline="middle";if(this.confineToGrid){context.globalAlpha=0.3;context.beginPath();context.strokeRect(x0,y0,x1-x0,y1-y0);context.moveTo(x0,grids[1]);context.lineTo(x1,grids[1]);context.moveTo(x0,grids[2]);context.lineTo(x1,grids[2]);if(this.extension){context.moveTo(grids[3],y0);context.lineTo(grids[3],y1);context.moveTo(grids[4],y0);context.lineTo(grids[4],y1);}context.stroke();context.globalAlpha=1;}if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}}},true);/**
	 * Gann Fan drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.speedarc}
	 * @constructor
	 * @name  CIQ.Drawing.gannfan
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.gannfan=function(){this.name="gannfan";this.printLevels=true;};CIQ.Drawing.gannfan.ciqInheritsFrom(CIQ.Drawing.speedline);CIQ.extend(CIQ.Drawing.gannfan.prototype,{render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var trendLineColor=this.setLineColor();var color=this.color;if(color=="auto"||CIQ.isTransparent(color))color=this.stx.defaultColor;context.strokeStyle=color;var fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;var parameters={pattern:this.pattern,lineWidth:this.lineWidth,opacity:this.highlighted?1:this.defaultOpacity};var farX0,farY0;var levels=[1,2,3,4,8,1/2,1/3,1/4,1/8];this.rays=[];for(var i=0;i<levels.length;i++){var level=levels[i];var x=x0+(x1-x0)/level;var y=y0-level*(y0-y1);var farX=panel.left;if(x1>x0)farX+=panel.width;var farY=(farX-x0)*(y-y0)/(x1-x0)+y0;if(this.printLevels){context.fillStyle=color;var perturbX=0,perturbY=0;if(y0>y1){perturbY=5;context.textBaseline="top";}else{perturbY=-5;context.textBaseline="bottom";}if(x0>x1){perturbX=5;context.textAlign="left";}else{perturbX=-5;context.textAlign="right";}if(level>1){context.fillText(level+"x1",x+perturbX,y1);}else{context.fillText("1x"+1/level,x1,y+perturbY);}context.fillStyle=fillColor;}this.stx.plotLine(x0,farX,y0,farY,this.highlighted?trendLineColor:color,"segment",context,panel,parameters);this.rays.push([[x0,y0],[farX,farY]]);if(level==1){farX0=farX;farY0=farY;}context.globalAlpha=0.1;context.beginPath();context.moveTo(farX,farY);context.lineTo(x0,y0);context.lineTo(farX0,farY0);context.fill();context.globalAlpha=1;}context.textAlign="left";context.textBaseline="middle";if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}}},true);/**
	 * Time Cycle drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.speedarc}
	 * @constructor
	 * @name  CIQ.Drawing.timecycle
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.timecycle=function(){this.name="timecycle";this.printLevels=true;};CIQ.Drawing.timecycle.ciqInheritsFrom(CIQ.Drawing.speedarc);CIQ.extend(CIQ.Drawing.timecycle.prototype,{intersected:function intersected(tick,value,box){var p0=this.p0,p1=this.p1,panel=this.stx.panels[this.panelName];if(!p0||!p1||!panel)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}// Check for over the trend line or the 0 vertical line
var trendIntersects=this.lineIntersection(tick,value,box,"segment");if(trendIntersects||box.x0<=this.p0[0]&&box.x1>=p0[0]){this.highlighted=true;return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,// save original tick
value:value// save original value
};}return null;},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);var count=0;var trendLineColor=this.setLineColor();context.textBaseline="middle";this.stx.canvasFont("stx_yaxis",context);// match font from y axis so it looks cohesive
var h=20;// give it extra space so it does not overlap with the date labels.
var mult=this.p1[0]-this.p0[0];context.textAlign="center";var x=x0;var top=panel.yAxis.top;var farY=panel.yAxis.bottom;var color=this.color;if(color=="auto"||CIQ.isTransparent(color))color=this.stx.defaultColor;var fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;if(this.printLevels)farY-=h-7;var parameters={pattern:this.pattern,lineWidth:this.lineWidth,opacity:this.highlighted?1:this.defaultOpacity};var x_s=[];context.save();context.fillStyle=fillColor;context.globalAlpha=0.05;//context.globalCompositeOperation="destination-over";
do{x=this.stx.pixelFromTick(this.p0[0]+count*mult,panel.chart);count++;if(x0<x1&&x>panel.left+panel.width)break;else if(x0>x1&&x<panel.left)break;else if(x<panel.left||x>panel.left+panel.width)continue;context.beginPath();context.moveTo(x0,top);context.lineTo(x,top);context.lineTo(x,farY);context.lineTo(x0,farY);context.fill();x_s.push({c:count,x:x});}while(mult);context.globalAlpha=1;var slack=0;for(var pt=0;pt<x_s.length;pt++){this.stx.plotLine(x_s[pt].x,x_s[pt].x,0,farY,this.highlighted?trendLineColor:color,"segment",context,panel,parameters);if(this.printLevels){context.fillStyle=color;var m=this.stx.chart.context.measureText(x_s[pt].c).width+3;if(m<this.stx.layout.candleWidth+slack){context.fillText(x_s[pt].c,x_s[pt].x,farY+7);slack=0;}else{slack+=this.stx.layout.candleWidth;}}}context.restore();context.textAlign="left";this.stx.plotLine(x0,x1,y0,y1,trendLineColor,"segment",context,panel,parameters);if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}else{// move points so always accessible
var yVal=this.stx.valueFromPixel(panel.height/2,panel);this.setPoint(0,this.p0[0],yVal,panel.chart);this.setPoint(1,this.p1[0],yVal,panel.chart);}}},true);/**
	 * Regression Line drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.segment}
	 * @constructor
	 * @name  CIQ.Drawing.regression
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.regression=function(){this.name="regression";};CIQ.Drawing.regression.ciqInheritsFrom(CIQ.Drawing.segment);CIQ.extend(CIQ.Drawing.regression.prototype,{chartsOnly:true,click:function click(context,tick,value){if(tick<0)return;this.copyConfig();var panel=this.stx.panels[this.panelName];if(!this.penDown){this.setPoint(0,tick,value,panel.chart);this.penDown=true;return false;}if(this.accidentalClick(tick,value))return this.dragToDraw;this.setPoint(1,tick,value,panel.chart);this.penDown=false;return true;// kernel will call render after this
},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;if(this.p0[0]<0||this.p1[0]<0)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);if(x0<panel.left&&x1<panel.left)return;if(x0>panel.right&&x1>panel.right)return;var prices=[];var sumCloses=0;var sumWeightedCloses=0;//var sumClosesSquared=0;
var rawTicks=0;for(var i=Math.min(this.p1[0],this.p0[0]);i<=Math.max(this.p1[0],this.p0[0]);i++){if(this.stx.chart.dataSet[i]){var price=this.stx.chart.dataSet[i].Close;if(price||price===0){prices.push(price);}}rawTicks++;}for(i=0;i<prices.length;i++){sumWeightedCloses+=prices.length*prices[i]-sumCloses;sumCloses+=prices[i];//sumClosesSquared+=Math.pow(prices[i],2);
}var ticks=prices.length;var sumWeights=ticks*(ticks+1)/2;var squaredSumWeights=Math.pow(sumWeights,2);var sumWeightsSquared=sumWeights*(2*ticks+1)/3;var slope=(ticks*sumWeightedCloses-sumWeights*sumCloses)/(ticks*sumWeightsSquared-squaredSumWeights);var intercept=(sumCloses-slope*sumWeights)/ticks;var y0,y1;if(this.p0[0]<this.p1[0]){y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],intercept);y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],slope*rawTicks+intercept);}else{y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],slope*rawTicks+intercept);y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],intercept);}var trendLineColor=this.setLineColor();var parameters={pattern:this.pattern,lineWidth:this.lineWidth};this.stx.plotLine(x0,x1,y0,y1,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x0,y0-20,y0+20,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x1,x1,y1-20,y1+20,trendLineColor,"segment",context,panel,parameters);if(!this.highlighted){//move points
if(this.p0[0]<this.p1[0]){this.setPoint(0,this.p0[0],intercept,panel.chart);this.setPoint(1,this.p1[0],slope*rawTicks+intercept,panel.chart);}else{this.setPoint(0,this.p0[0],slope*rawTicks+intercept,panel.chart);this.setPoint(1,this.p1[0],intercept,panel.chart);}}else{var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}}},true);/**
	 * trendline is an implementation of a {@link CIQ.Drawing.segment} drawing.
	 *
	 * Extends {@link CIQ.Drawing.segment} and automatically renders a {@link CIQ.Drawing.callout}
	 * containing trend information.
	 * @constructor
	 * @name CIQ.Drawing.trendline
	 * @since 5.1.2
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.trendline=function(){this.name="trendline";};CIQ.Drawing.trendline.ciqInheritsFrom(CIQ.Drawing.segment);// allow configuration of font for trendline info in callout, which is then assigned later
CIQ.Drawing.trendline.prototype.configs=["color","fillColor","lineWidth","pattern","font"];CIQ.Drawing.trendline.prototype.measure=function(){// empty function since the text will now display in a callout
};CIQ.Drawing.trendline.prototype.reconstruct=function(stx,obj){// reconstruct segment as usual, then add callout as property
CIQ.Drawing.segment.prototype.reconstruct.call(this,stx,obj);this.callout=new CIQ.Drawing.callout();this.callout.reconstruct(stx,obj.callout);};CIQ.Drawing.trendline.prototype.serialize=function(){// serialize segment as usual, then add callout as property
var obj=CIQ.Drawing.segment.prototype.serialize.call(this);obj.callout=this.callout.serialize();return obj;};CIQ.Drawing.trendline.prototype.render=function(context){var panel=this.stx.panels[this.panelName];if(!panel)return;// render segment as usual
CIQ.Drawing.segment.prototype.render.call(this,context);// only create and initialize callout once
if(!this.callout){this.callout=new CIQ.Drawing.callout();var obj=CIQ.Drawing.segment.prototype.serialize.call(this);this.callout.reconstruct(this.stx,obj);}// always render the callout perpendicular above / below the segment / trendline
this.callout.p0=CIQ.clone(this.p0);// extract segment coordinates
var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],this.p0[1]);var y1=this.stx.pixelFromValueAdjusted(panel,this.p1[0],this.p1[1]);// return if we are off the screen axes else insanity ensues
if(!isFinite(y0)||!isFinite(y1))return;// calculate midpoint (for stem of callout)
var xmid=(x0+x1)/2;var ymid=(y0+y1)/2;// determine length of segment and multiplier / direction of normal vector to give fixed length depending on stem location
this.fontSize=CIQ.stripPX(this.font&&this.font.size||13);var stemDist=this.callout.w*1.2+(this.callout.stemEntry[0]=='c'?0:50);var segmentDist=Math.sqrt(Math.pow(x1-x0,2)+Math.pow(y1-y0,2));var scalar=stemDist/(segmentDist||stemDist)*(this.p1[1]<this.p0[1]?1:-1);// normal vector (see e.g. http://mathworld.wolfram.com/NormalVector.html)
var nX=-(y1-ymid)*scalar+xmid;var nY=(x1-xmid)*scalar+ymid;// assign callout coordinates
this.callout.p0[0]=this.stx.tickFromPixel(nX,panel.chart);this.callout.p0[1]=this.stx.priceFromPixel(nY,panel);this.callout.v0=this.callout.p0[1];this.callout.p1=CIQ.clone(this.p0);// assign callout properties
this.callout.stx=this.stx;this.callout.fillColor=this.fillColor||this.callout.fillColor;this.callout.borderColor=this.color;this.callout.font=this.font||this.callout.font;this.callout.noHandles=true;// calculate trend and assign to callout text; only show percent if not Inf
var deltaV=this.p1[1]-this.p0[1];this.callout.text=''+Number(deltaV).toFixed(2)+(this.p0[1]===0?'':' ('+Number(100*deltaV/this.p0[1]).toFixed(2)+'%) ')+''+Math.abs(this.p1[0]-this.p0[0])+' Bars';// calculate stem as midpoint of segment
var midtickIdx=Math.floor((this.p0[0]+this.p1[0])/2),midV;if(Math.abs(this.p0[0]-this.p1[0])>1&&Math.abs(this.p0[0]-this.p1[0])<20){// because of math.floor, we may be grabbing a bar off of center,
// so calculate price based on slope of trendline
var midtickXpixel=this.stx.pixelFromTick(midtickIdx,panel.chart);var midtickYpixel=y0+(y1-y0)/(x1-x0)*(midtickXpixel-x0);midV=this.stx.priceFromPixel(midtickYpixel,panel)||ymid;}else{midV=this.stx.priceFromPixel(ymid,panel);}this.callout.stem={t:midtickIdx,v:midV};// render callout and text
this.callout.renderText();this.callout.render(context);// paint the handle circles based on highlighting
if(this.highlighted){var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y0,p0Fill);this.littleCircle(context,x1,y1,p1Fill);}};CIQ.Drawing.trendline.prototype.lineIntersection=function(tick,value,box,type){// override type as segment to preserve lineIntersection functionality
return CIQ.Drawing.BaseTwoPoint.prototype.lineIntersection.call(this,tick,value,box,"segment");};CIQ.Drawing.trendline.prototype.intersected=function(tick,value,box){// in case invalid drawing (such as from panel that no longer exists)
if(!this.p0||!this.p1)return null;// call and store intersection methods on both callout and segment
var calloutIntersected=this.callout.intersected(tick,value,box);var segmentIntersected=CIQ.Drawing.segment.prototype.intersected.call(this,tick,value,box);// synchronize highlighting
this.callout.highlighted=!!(calloutIntersected||segmentIntersected);//this.highlighted = segmentIntersected || calloutIntersected;
if(segmentIntersected){// If segment is highlighted, return as usual;
return segmentIntersected;}else if(calloutIntersected){// Otherwise, if callout is highlighted, move segment (callout will follow / rerender)
return{action:"move",p0:CIQ.clone(this.p0),p1:CIQ.clone(this.p1),tick:tick,// save original tick
value:value// save original value
};}// neither are intersected
return null;};/**
	 * Average Line drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.regression}
	 * @constructor
	 * @name  CIQ.Drawing.average
	 * @since 4.0.0
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.average=function(){this.name="average";};CIQ.Drawing.average.ciqInheritsFrom(CIQ.Drawing.regression);CIQ.extend(CIQ.Drawing.average.prototype,{configs:[// average line:
"color","lineWidth","pattern","axisLabel",// deviation 1:
"active1","color1","lineWidth1","pattern1",// deviation 2:
"active2","color2","lineWidth2","pattern2",// deviation 3:
"active3","color3","lineWidth3","pattern3"],copyConfig:function copyConfig(withPreferences){CIQ.Drawing.copyConfig(this,withPreferences);var cvp=this.stx.currentVectorParameters;this.active1=!!cvp.active1;this.active2=!!cvp.active2;this.active3=!!cvp.active3;this.color1=cvp.color1||"auto";this.color2=cvp.color2||"auto";this.color3=cvp.color3||"auto";this.lineWidth1=cvp.lineWidth1;this.lineWidth2=cvp.lineWidth2;this.lineWidth3=cvp.lineWidth3;this.pattern1=cvp.pattern1;this.pattern2=cvp.pattern2;this.pattern3=cvp.pattern3;},$controls:['cq-cvp-controller[cq-cvp-header="1"]','cq-cvp-controller[cq-cvp-header="2"]','cq-cvp-controller[cq-cvp-header="3"]'],measure:function measure(){if(this.p0&&this.p1){this.stx.setMeasure(this.p0[1],false,this.p0[0],this.p1[0],true,this.name);var txt=[];if(this.active1)txt.push("1");if(this.active2)txt.push("2");if(this.active3)txt.push("3");if(txt.length===0)return;var html="&ensp;"+txt.join(", ")+" &sigma;";var mMeasure=$$$(".mMeasure",this.stx.chart.drawingContainer);var mSticky=this.stx.controls.mSticky;var mStickyInterior=mSticky&&$$$(".mStickyInterior",mSticky);if(mMeasure)mMeasure.innerHTML+=html;if(mStickyInterior)mStickyInterior.innerHTML+=html;}},render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;if(this.p0[0]<0||this.p1[0]<0)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);if(x0<panel.left&&x1<panel.left)return;if(x0>panel.right&&x1>panel.right)return;var stx=this.stx;var dataSet=stx.chart.dataSet;var start=Math.min(this.p1[0],this.p0[0]);var end=Math.max(this.p1[0],this.p0[0]);var sumCloses=0;var rawTicks=0;var validTicks=0;var i,price;for(i=start;i<=end;i++){rawTicks++;if(!dataSet[i])continue;price=dataSet[i].Close;if(price||price===0){validTicks++;sumCloses+=price;}}if(!validTicks)return;var average=sumCloses/validTicks;var sumDeviations=0;for(i=start;i<=end;i++){if(!dataSet[i])continue;price=dataSet[i].Close;if(price||price===0){sumDeviations+=Math.pow(price-average,2);}}var deviation=Math.sqrt(sumDeviations/validTicks);var lines={};var color,label;if(this.active1){color=this.setLineColor(this.color1);label="1\u03C3";lines.deviation1p={value:average+deviation,color:color,label:label,params:{pattern:this.pattern1,lineWidth:this.lineWidth1}};lines.deviation1n={value:average+deviation*-1,color:color,label:label,params:{pattern:this.pattern1,lineWidth:this.lineWidth1}};}if(this.active2){color=this.setLineColor(this.color2);label="2\u03C3";lines.deviation2p={value:average+deviation*2,color:color,label:label,params:{pattern:this.pattern2,lineWidth:this.lineWidth2}};lines.deviation2n={value:average+deviation*-2,color:color,label:label,params:{pattern:this.pattern2,lineWidth:this.lineWidth2}};}if(this.active3){color=this.setLineColor(this.color3);label="3\u03C3";lines.deviation3p={value:average+deviation*3,label:label,color:color,params:{pattern:this.pattern3,lineWidth:this.lineWidth3}};lines.deviation3n={value:average+deviation*-3,color:color,label:label,params:{pattern:this.pattern3,lineWidth:this.lineWidth3}};}// intentionally setting average last so `y` will be the average pixel after the loop below exits
lines.average={value:average,color:this.setLineColor(),params:{pattern:this.pattern,lineWidth:this.lineWidth}};var line,y,tailpx,txt;this.intersections=[];function formatPrice(price){if(panel.yAxis.priceFormatter)price=panel.yAxis.priceFormatter(stx,panel,price);else price=stx.formatYAxisPrice(price,panel);return price;}for(var key in lines){line=lines[key];this.intersections.push(line.value);y=stx.pixelFromValueAdjusted(panel,this.p0[0],line.value);tailpx=key==="average"?20:10;stx.plotLine(x0,x1,y,y,line.color,"segment",context,panel,line.params);stx.plotLine(x0,x0,y-tailpx,y+tailpx,line.color,"segment",context,panel,line.params);stx.plotLine(x1,x1,y-tailpx,y+tailpx,line.color,"segment",context,panel,line.params);// print the values on the canvas
if(line.label){context.fillStyle=line.color;context.save();context.textBaseline="middle";//context.fillText(formatPrice(line.value), Math.max(x0,x1)+5, y);
context.fillText(line.label,Math.max(x0,x1)+5,y);context.restore();}if(this.axisLabel&&!this.highlighted&&!this.penDown){if(x0>=panel.chart.left&&x0<=panel.chart.right||x1>=panel.chart.left&&x1<=panel.chart.right){stx.endClip();txt=line.value;if(panel.chart.transformFunc)txt=panel.chart.transformFunc(this.stx,panel.chart,txt);stx.createYAxisLabel(panel,formatPrice(txt),y,line.color);stx.startClip(panel.name);}}}if(!this.highlighted){//move points
this.setPoint(0,this.p0[0],average);this.setPoint(1,this.p1[0],average);}else{var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y,p0Fill);this.littleCircle(context,x1,y,p1Fill);}},reconstruct:function reconstruct(stx,obj){this.stx=stx;this.panelName=obj.pnl;this.active1=obj.dev1;this.active2=obj.dev2;this.active3=obj.dev3;this.color=obj.col;this.color1=obj.col1;this.color2=obj.col2;this.color3=obj.col3;this.pattern=obj.ptrn;this.pattern1=obj.ptrn1;this.pattern2=obj.ptrn2;this.pattern3=obj.ptrn3;this.lineWidth=obj.lw;this.lineWidth1=obj.lw1;this.lineWidth2=obj.lw2;this.lineWidth3=obj.lw3;this.d0=obj.d0;this.d1=obj.d1;this.tzo0=obj.tzo0;this.tzo1=obj.tzo1;this.v0=obj.v0;this.v1=obj.v1;this.axisLabel=obj.al;this.adjust();},serialize:function serialize(){var obj={name:this.name,pnl:this.panelName,dev1:this.active1,dev2:this.active2,dev3:this.active3,col:this.color,col1:this.color1,col2:this.color2,col3:this.color3,ptrn:this.pattern,ptrn1:this.pattern1,ptrn2:this.pattern2,ptrn3:this.pattern3,lw:this.lineWidth,lw1:this.lineWidth1,lw2:this.lineWidth2,lw3:this.lineWidth3,d0:this.d0,d1:this.d1,tzo0:this.tzo0,tzo1:this.tzo1,v0:this.v0,v1:this.v1,al:this.axisLabel};return obj;},intersected:function intersected(tick,value,box){var averageLineIntersection=CIQ.Drawing.segment.prototype.intersected.call(this,tick,value,box);if(averageLineIntersection){return averageLineIntersection;}var lineIntersection=CIQ.Drawing.BaseTwoPoint.prototype.lineIntersection;var intersections=this.intersections;var p0=[this.p0[0],0];var p1=[this.p1[0],0];var line={p0:p0,p1:p1,stx:this.stx,panelName:this.panelName};// the last value is average, which was already checked by `intersected.call` above
for(var i=0;intersections&&i<intersections.length-1;++i){p0[1]=p1[1]=intersections[i];if(lineIntersection.call(line,tick,value,box,"segment")){this.highlighted=true;return{action:"move",p0:p0,p1:p1,tick:tick,value:value};}}return null;}},true);/**
	 * Quadrant Lines drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.speedarc}
	 * @constructor
	 * @name  CIQ.Drawing.quadrant
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.quadrant=function(){this.name="quadrant";};CIQ.Drawing.quadrant.ciqInheritsFrom(CIQ.Drawing.speedarc);CIQ.extend(CIQ.Drawing.quadrant.prototype,{chartsOnly:true,render:function render(context){var panel=this.stx.panels[this.panelName];if(!panel)return;if(!this.p1)return;var x0=this.stx.pixelFromTick(this.p0[0],panel.chart);var x1=this.stx.pixelFromTick(this.p1[0],panel.chart);if(x0<panel.left&&x1<panel.left)return;if(x0>panel.right&&x1>panel.right)return;var highest=null,lowest=null;for(var i=Math.min(this.p1[0],this.p0[0]);i<=Math.max(this.p1[0],this.p0[0]);i++){if(this.stx.chart.dataSet[i]){var price=this.stx.chart.dataSet[i].Close;if(price||price===0){if(highest===null||price>highest)highest=price;if(lowest===null||price<lowest)lowest=price;}}}var avg=(highest+lowest)/2;var y0=this.stx.pixelFromValueAdjusted(panel,this.p0[0],highest);var y25=this.stx.pixelFromValueAdjusted(panel,this.p0[0],(highest+avg)/2);var y33=this.stx.pixelFromValueAdjusted(panel,this.p0[0],(2*highest+lowest)/3);var y50=this.stx.pixelFromValueAdjusted(panel,this.p0[0],avg);var y66=this.stx.pixelFromValueAdjusted(panel,this.p0[0],(highest+2*lowest)/3);var y75=this.stx.pixelFromValueAdjusted(panel,this.p0[0],(lowest+avg)/2);var y100=this.stx.pixelFromValueAdjusted(panel,this.p0[0],lowest);this.highest=highest;this.lowest=lowest;var trendLineColor=this.setLineColor();var fillColor=this.fillColor;if(fillColor=="auto"||CIQ.isTransparent(fillColor))fillColor=this.stx.defaultColor;context.fillStyle=fillColor;var parameters={pattern:this.pattern,lineWidth:this.lineWidth};this.stx.plotLine(x0,x1,y0,y0,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x1,y100,y100,trendLineColor,"segment",context,panel,parameters);if(this.name=="quadrant"){this.stx.plotLine(x0,x1,y25,y25,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x1,y75,y75,trendLineColor,"segment",context,panel,parameters);}else if(this.name=="tirone"){this.stx.plotLine(x0,x1,y33,y33,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x1,y66,y66,trendLineColor,"segment",context,panel,parameters);}this.stx.plotLine(x0,x0,y0,y100,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x1,x1,y0,y100,trendLineColor,"segment",context,panel,parameters);this.stx.plotLine(x0,x1,y50,y50,trendLineColor,"segment",context,panel,CIQ.extend(parameters,{opacity:this.name=="tirone"?0.2:1}));context.globalAlpha=0.1;context.beginPath();context.fillRect(x0,y0,x1-x0,y100-y0);if(this.name=="quadrant"){context.fillRect(x0,y25,x1-x0,y75-y25);}else if(this.name=="tirone"){context.fillRect(x0,y33,x1-x0,y66-y33);}context.globalAlpha=1;if(!this.highlighted){//move points
this.setPoint(0,this.p0[0],avg,panel.chart);this.setPoint(1,this.p1[0],avg,panel.chart);}else{var p0Fill=this.highlighted=="p0"?true:false;var p1Fill=this.highlighted=="p1"?true:false;this.littleCircle(context,x0,y50,p0Fill);this.littleCircle(context,x1,y50,p1Fill);}},boxIntersection:function boxIntersection(tick,value,box){var p0=this.p0,p1=this.p1;if(!p0||!p1)return false;if(box.x0>Math.max(p0[0],p1[0])||box.x1<Math.min(p0[0],p1[0]))return false;if(!this.stx.repositioningDrawing&&(box.y1>this.highest||box.y0<this.lowest))return false;return true;},intersected:function intersected(tick,value,box){var p0=this.p0,p1=this.p1;if(!p0||!p1)return null;// in case invalid drawing (such as from panel that no longer exists)
var pointsToCheck={0:p0,1:p1};for(var pt in pointsToCheck){if(this.pointIntersection(pointsToCheck[pt][0],pointsToCheck[pt][1],box)){this.highlighted="p"+pt;return{action:"drag",point:"p"+pt};}}if(this.boxIntersection(tick,value,box)){this.highlighted=true;return{action:"move",p0:CIQ.clone(p0),p1:CIQ.clone(p1),tick:tick,value:value};}return null;}},true);/**
	 * Tirone Levels drawing tool.
	 *
	 * It inherits its properties from {@link CIQ.Drawing.quadrant}
	 * @constructor
	 * @name  CIQ.Drawing.tirone
	 * @since 2016-09-19
	 * @version ChartIQ Advanced Package
	 */CIQ.Drawing.tirone=function(){this.name="tirone";};CIQ.Drawing.tirone.ciqInheritsFrom(CIQ.Drawing.quadrant);return _exports;};var __js_advanced_equations_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_advanced_equations_(_exports){var CIQ=_exports.CIQ;/* jshint ignore:start */ /* eslint-disable */ //JavaScript Expression Evaluator: https://silentmatt.com/javascript-expression-evaluator/
/*!
	 Based on ndef.parser, by Raphael Graf(r@undefined.ch)
	 http://www.undefined.ch/mparser/index.html
	 Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)
	 You are free to use and modify this code in anyway you find useful. Please leave this comment in the code
	 to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,
	 but don't feel like you have to let me know or ask permission.
	*/var Parser=function Parser(){function object(o){function F(){}F.prototype=o;return new F();}var TNUMBER=0;var TOP1=1;var TOP2=2;var TVAR=3;var TFUNCALL=4;function Token(type_,index_,prio_,number_){this.type_=type_;this.index_=index_||0;this.prio_=prio_||0;this.number_=number_!==undefined&&number_!==null?number_:0;this.toString=function(){switch(this.type_){case TNUMBER:return this.number_;case TOP1:case TOP2:case TVAR:return this.index_;case TFUNCALL:return"CALL";default:return"Invalid Token";}};}function Expression(tokens,ops1,ops2,functions){this.tokens=tokens;this.ops1=ops1;this.ops2=ops2;this.functions=functions;}// Based on http://www.json.org/json2.js
var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\'\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,meta={// table of character substitutions
'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r',"'":"\\'",'\\':'\\\\'};function escapeValue(v){if(typeof v==="string"){escapable.lastIndex=0;return escapable.test(v)?"'"+v.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:"\\u"+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+"'":"'"+v+"'";}return v;}CIQ.extend(Expression.prototype,{simplify:function simplify(values){values=values||{};var nstack=[];var newexpression=[];var n1;var n2;var f;var L=this.tokens.length;var item;var i=0;for(i=0;i<L;i++){item=this.tokens[i];var type_=item.type_;if(type_===TNUMBER){nstack.push(item);}else if(type_===TVAR&&item.index_ in values){item=new Token(TNUMBER,0,0,values[item.index_]);nstack.push(item);}else if(type_===TOP2&&nstack.length>1){n2=nstack.pop();n1=nstack.pop();f=this.ops2[item.index_];item=new Token(TNUMBER,0,0,f(n1.number_,n2.number_));nstack.push(item);}else if(type_===TOP1&&nstack.length>0){n1=nstack.pop();f=this.ops1[item.index_];item=new Token(TNUMBER,0,0,f(n1.number_));nstack.push(item);}else{while(nstack.length>0){newexpression.push(nstack.shift());}newexpression.push(item);}}while(nstack.length>0){newexpression.push(nstack.shift());}return new Expression(newexpression,object(this.ops1),object(this.ops2),object(this.functions));},substitute:function substitute(variable,expr){if(!(expr instanceof Expression)){expr=new Parser().parse(String(expr));}var newexpression=[];var L=this.tokens.length;var item;var i=0;for(i=0;i<L;i++){item=this.tokens[i];var type_=item.type_;if(type_===TVAR&&item.index_===variable){for(var j=0;j<expr.tokens.length;j++){var expritem=expr.tokens[j];var replitem=new Token(expritem.type_,expritem.index_,expritem.prio_,expritem.number_);newexpression.push(replitem);}}else{newexpression.push(item);}}var ret=new Expression(newexpression,object(this.ops1),object(this.ops2),object(this.functions));return ret;},evaluate:function evaluate(values){values=values||{};var nstack=[];var n1;var n2;var f;var L=this.tokens.length;var item;var i=0;for(i=0;i<L;i++){item=this.tokens[i];var type_=item.type_;if(type_===TNUMBER){nstack.push(item.number_);}else if(type_===TOP2){n2=nstack.pop();n1=nstack.pop();f=this.ops2[item.index_];nstack.push(f(n1,n2));}else if(type_===TVAR){if(item.index_ in values){nstack.push(values[item.index_]);}else if(item.index_ in this.functions){nstack.push(this.functions[item.index_]);}else{throw new Error("undefined variable: "+item.index_);}}else if(type_===TOP1){n1=nstack.pop();f=this.ops1[item.index_];nstack.push(f(n1));}else if(type_===TFUNCALL){n1=nstack.pop();f=nstack.pop();if(f.apply&&f.call){if(Object.prototype.toString.call(n1)=="[object Array]"){nstack.push(f.apply(undefined,n1));}else{nstack.push(f.call(undefined,n1));}}else{throw new Error(f+" is not a function");}}else{throw new Error("invalid Expression");}}if(nstack.length>1){throw new Error("invalid Expression (parity)");}return nstack[0];},toString:function toString(toJS){var nstack=[];var n1;var n2;var f;var L=this.tokens.length;var item;var i=0;for(i=0;i<L;i++){item=this.tokens[i];var type_=item.type_;if(type_===TNUMBER){nstack.push(escapeValue(item.number_));}else if(type_===TOP2){n2=nstack.pop();n1=nstack.pop();f=item.index_;if(toJS&&f=="^"){nstack.push("Math.pow("+n1+","+n2+")");}else{nstack.push("("+n1+f+n2+")");}}else if(type_===TVAR){nstack.push(item.index_);}else if(type_===TOP1){n1=nstack.pop();f=item.index_;if(f==="-"){nstack.push("("+f+n1+")");}else{nstack.push(f+"("+n1+")");}}else if(type_===TFUNCALL){n1=nstack.pop();f=nstack.pop();nstack.push(f+"("+n1+")");}else{throw new Error("invalid Expression");}}if(nstack.length>1){throw new Error("invalid Expression (parity)");}return nstack[0];},variables:function variables(){var L=this.tokens.length;var vars=[];for(var i=0;i<L;i++){var item=this.tokens[i];if(item.type_===TVAR&&vars.indexOf(item.index_)==-1){vars.push(item.index_);}}return vars;}/*,

			toJSFunction: function (param, variables) {
				var f = new Function(param, "with(Parser.values) { return " + this.simplify(variables).toString(true) + "; }");
				return f;
			}*/},true);function add(a,b){return Number(a)+Number(b);}function sub(a,b){return a-b;}function mul(a,b){return a*b;}function div(a,b){return a/b;}function mod(a,b){return a%b;}function concat(a,b){return""+a+b;}function equal(a,b){return a==b;}function notEqual(a,b){return a!=b;}function greaterThan(a,b){return a>b;}function lessThan(a,b){return a<b;}function greaterThanEqual(a,b){return a>=b;}function lessThanEqual(a,b){return a<=b;}function andOperator(a,b){return Boolean(a&&b);}function orOperator(a,b){return Boolean(a||b);}function sinh(a){return Math.sinh?Math.sinh(a):(Math.exp(a)-Math.exp(-a))/2;}function cosh(a){return Math.cosh?Math.cosh(a):(Math.exp(a)+Math.exp(-a))/2;}function tanh(a){if(Math.tanh)return Math.tanh(a);if(a===Infinity)return 1;if(a===-Infinity)return-1;return(Math.exp(a)-Math.exp(-a))/(Math.exp(a)+Math.exp(-a));}function asinh(a){if(Math.asinh)return Math.asinh(a);if(a===-Infinity)return a;return Math.log(a+Math.sqrt(a*a+1));}function acosh(a){return Math.acosh?Math.acosh(a):Math.log(a+Math.sqrt(a*a-1));}function atanh(a){return Math.atanh?Math.atanh(a):Math.log((1+a)/(1-a))/2;}function log10(a){return Math.log(a)*Math.LOG10E;}function neg(a){return-a;}function trunc(a){if(Math.trunc)return Math.trunc(a);else return a<0?Math.ceil(a):Math.floor(a);}function random(a){return Math.random()*(a||1);}function fac(a){//a!
a=Math.floor(a);var b=a;while(a>1){b=b*--a;}return b;}function hypot(){if(Math.hypot)return Math.hypot.apply(this,arguments);var y=0;var length=arguments.length;for(var i=0;i<length;i++){if(arguments[i]===Infinity||arguments[i]===-Infinity){return Infinity;}y+=arguments[i]*arguments[i];}return Math.sqrt(y);}function condition(cond,yep,nope){return cond?yep:nope;}function append(a,b){if(Object.prototype.toString.call(a)!="[object Array]"){return[a,b];}a=a.slice();a.push(b);return a;}function Parser(){this.success=false;this.errormsg="";this.expression="";this.pos=0;this.tokennumber=0;this.tokenprio=0;this.tokenindex=0;this.tmpprio=0;this.ops1={"sin":Math.sin,"cos":Math.cos,"tan":Math.tan,"asin":Math.asin,"acos":Math.acos,"atan":Math.atan,"sinh":sinh,"cosh":cosh,"tanh":tanh,"asinh":asinh,"acosh":acosh,"atanh":atanh,"sqrt":Math.sqrt,"log":Math.log,"lg":log10,"log10":log10,"abs":Math.abs,"ceil":Math.ceil,"floor":Math.floor,"round":Math.round,"trunc":trunc,"-":neg,"exp":Math.exp};this.ops2={"+":add,"-":sub,"*":mul,"/":div,"%":mod,"^":Math.pow,",":append,"||":concat,"==":equal,"!=":notEqual,">":greaterThan,"<":lessThan,">=":greaterThanEqual,"<=":lessThanEqual,"and":andOperator,"or":orOperator};this.functions={"random":random,"fac":fac,"min":Math.min,"max":Math.max,"hypot":hypot,"pyt":hypot,// backward compat
"pow":Math.pow,"atan2":Math.atan2,"if":condition};this.consts={"E":Math.E,"PI":Math.PI};}Parser.parse=function(expr){return new Parser().parse(expr);};Parser.evaluate=function(expr,variables){return Parser.parse(expr).evaluate(variables);};Parser.Expression=Expression;Parser.values={sin:Math.sin,cos:Math.cos,tan:Math.tan,asin:Math.asin,acos:Math.acos,atan:Math.atan,sinh:sinh,cosh:cosh,tanh:tanh,asinh:asinh,acosh:acosh,atanh:atanh,sqrt:Math.sqrt,log:Math.log,lg:log10,log10:log10,abs:Math.abs,ceil:Math.ceil,floor:Math.floor,round:Math.round,trunc:trunc,random:random,fac:fac,exp:Math.exp,min:Math.min,max:Math.max,hypot:hypot,pyt:hypot,// backward compat
pow:Math.pow,atan2:Math.atan2,"if":condition,E:Math.E,PI:Math.PI};var PRIMARY=1<<0;var OPERATOR=1<<1;var FUNCTION=1<<2;var LPAREN=1<<3;var RPAREN=1<<4;var COMMA=1<<5;var SIGN=1<<6;var CALL=1<<7;var NULLARY_CALL=1<<8;CIQ.extend(Parser.prototype,{parse:function parse(expr){this.errormsg="";this.success=true;var operstack=[];var tokenstack=[];this.tmpprio=0;var expected=PRIMARY|LPAREN|FUNCTION|SIGN;var noperators=0;this.expression=expr;this.pos=0;while(this.pos<this.expression.length){var token;if(this.isOperator()){if(this.isSign()&&expected&SIGN){if(this.isNegativeSign()){this.tokenprio=2;this.tokenindex="-";noperators++;this.addfunc(tokenstack,operstack,TOP1);}expected=PRIMARY|LPAREN|FUNCTION|SIGN;}else if(this.isComment()){}else{if((expected&OPERATOR)===0){this.error_parsing(this.pos,"unexpected operator");}noperators+=2;this.addfunc(tokenstack,operstack,TOP2);expected=PRIMARY|LPAREN|FUNCTION|SIGN;}}else if(this.isNumber()){if((expected&PRIMARY)===0){this.error_parsing(this.pos,"unexpected number");}token=new Token(TNUMBER,0,0,this.tokennumber);tokenstack.push(token);expected=OPERATOR|RPAREN|COMMA;}else if(this.isString()){if((expected&PRIMARY)===0){this.error_parsing(this.pos,"unexpected string");}token=new Token(TNUMBER,0,0,this.tokennumber);tokenstack.push(token);expected=OPERATOR|RPAREN|COMMA;}else if(this.isLeftParenth()){if((expected&LPAREN)===0){this.error_parsing(this.pos,"unexpected \"(\"");}if(expected&CALL){noperators+=2;this.tokenprio=-2;this.tokenindex=-1;this.addfunc(tokenstack,operstack,TFUNCALL);}expected=PRIMARY|LPAREN|FUNCTION|SIGN|NULLARY_CALL;}else if(this.isRightParenth()){if(expected&NULLARY_CALL){token=new Token(TNUMBER,0,0,[]);tokenstack.push(token);}else if((expected&RPAREN)===0){this.error_parsing(this.pos,"unexpected \")\"");}expected=OPERATOR|RPAREN|COMMA|LPAREN|CALL;}else if(this.isComma()){if((expected&COMMA)===0){this.error_parsing(this.pos,"unexpected \",\"");}this.addfunc(tokenstack,operstack,TOP2);noperators+=2;expected=PRIMARY|LPAREN|FUNCTION|SIGN;}else if(this.isConst()){if((expected&PRIMARY)===0){this.error_parsing(this.pos,"unexpected constant");}var consttoken=new Token(TNUMBER,0,0,this.tokennumber);tokenstack.push(consttoken);expected=OPERATOR|RPAREN|COMMA;}else if(this.isOp2()){if((expected&FUNCTION)===0){this.error_parsing(this.pos,"unexpected function");}this.addfunc(tokenstack,operstack,TOP2);noperators+=2;expected=LPAREN;}else if(this.isOp1()){if((expected&FUNCTION)===0){this.error_parsing(this.pos,"unexpected function");}this.addfunc(tokenstack,operstack,TOP1);noperators++;expected=LPAREN;}else if(this.isVar()){if((expected&PRIMARY)===0){this.error_parsing(this.pos,"unexpected variable");}var vartoken=new Token(TVAR,this.tokenindex,0,0);tokenstack.push(vartoken);expected=OPERATOR|RPAREN|COMMA|LPAREN|CALL;}else if(this.isWhite()){}else{if(this.errormsg===""){this.error_parsing(this.pos,"unknown character");}else{this.error_parsing(this.pos,this.errormsg);}}}if(this.tmpprio<0||this.tmpprio>=10){this.error_parsing(this.pos,"unmatched \"()\"");}while(operstack.length>0){var tmp=operstack.pop();tokenstack.push(tmp);}if(noperators+1!==tokenstack.length){//print(noperators + 1);
//print(tokenstack);
this.error_parsing(this.pos,"parity");}return new Expression(tokenstack,object(this.ops1),object(this.ops2),object(this.functions));},evaluate:function evaluate(expr,variables){return this.parse(expr).evaluate(variables);},error_parsing:function error_parsing(column,msg){this.success=false;this.errormsg="parse error [column "+column+"]: "+msg;this.column=column;throw new Error(this.errormsg);},//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
addfunc:function addfunc(tokenstack,operstack,type_){var operator=new Token(type_,this.tokenindex,this.tokenprio+this.tmpprio,0);while(operstack.length>0){if(operator.prio_<=operstack[operstack.length-1].prio_){tokenstack.push(operstack.pop());}else{break;}}operstack.push(operator);},isNumber:function isNumber(){var r=false;var str="";while(this.pos<this.expression.length){var code=this.expression.charCodeAt(this.pos);if(code>=48&&code<=57||code===46){str+=this.expression.charAt(this.pos);this.pos++;this.tokennumber=parseFloat(str);r=true;}else{break;}}return r;},// Ported from the yajjl JSON parser at http://code.google.com/p/yajjl/
unescape:function unescape(v,pos){var buffer=[];var escaping=false;for(var i=0;i<v.length;i++){var c=v.charAt(i);if(escaping){switch(c){case"'":buffer.push("'");break;case'\\':buffer.push('\\');break;case'/':buffer.push('/');break;case'b':buffer.push('\b');break;case'f':buffer.push('\f');break;case'n':buffer.push('\n');break;case'r':buffer.push('\r');break;case't':buffer.push('\t');break;case'u':// interpret the following 4 characters as the hex of the unicode code point
var codePoint=parseInt(v.substring(i+1,i+5),16);buffer.push(String.fromCharCode(codePoint));i+=4;break;default:throw this.error_parsing(pos+i,"Illegal escape sequence: '\\"+c+"'");}escaping=false;}else{if(c=='\\'){escaping=true;}else{buffer.push(c);}}}return buffer.join('');},isString:function isString(){var r=false;var str="";var startpos=this.pos;if(this.pos<this.expression.length&&this.expression.charAt(this.pos)=="'"){this.pos++;while(this.pos<this.expression.length){var code=this.expression.charAt(this.pos);if(code!="'"||str.slice(-1)=="\\"){str+=this.expression.charAt(this.pos);this.pos++;}else{this.pos++;this.tokennumber=this.unescape(str,startpos);r=true;break;}}}return r;},isConst:function isConst(){var str;for(var i in this.consts){if(true){var L=i.length;str=this.expression.substr(this.pos,L);if(i===str){this.tokennumber=this.consts[i];this.pos+=L;return true;}}}return false;},isOperator:function isOperator(){var code=this.expression.charCodeAt(this.pos);if(code===43){// +
this.tokenprio=2;this.tokenindex="+";}else if(code===45){// -
this.tokenprio=2;this.tokenindex="-";}else if(code===62){// >
if(this.expression.charCodeAt(this.pos+1)===61){this.pos++;this.tokenprio=1;this.tokenindex=">=";}else{this.tokenprio=1;this.tokenindex=">";}}else if(code===60){// <
if(this.expression.charCodeAt(this.pos+1)===61){this.pos++;this.tokenprio=1;this.tokenindex="<=";}else{this.tokenprio=1;this.tokenindex="<";}}else if(code===124){// |
if(this.expression.charCodeAt(this.pos+1)===124){this.pos++;this.tokenprio=1;this.tokenindex="||";}else{return false;}}else if(code===61){// =
if(this.expression.charCodeAt(this.pos+1)===61){this.pos++;this.tokenprio=1;this.tokenindex="==";}else{return false;}}else if(code===33){// !
if(this.expression.charCodeAt(this.pos+1)===61){this.pos++;this.tokenprio=1;this.tokenindex="!=";}else{return false;}}else if(code===97){// a
if(this.expression.charCodeAt(this.pos+1)===110&&this.expression.charCodeAt(this.pos+2)===100){// n && d
this.pos++;this.pos++;this.tokenprio=0;this.tokenindex="and";}else{return false;}}else if(code===111){// o
if(this.expression.charCodeAt(this.pos+1)===114){// r
this.pos++;this.tokenprio=0;this.tokenindex="or";}else{return false;}}else if(code===42||code===8729||code===8226){// * or ∙ or •
this.tokenprio=3;this.tokenindex="*";}else if(code===47){// /
this.tokenprio=4;this.tokenindex="/";}else if(code===37){// %
this.tokenprio=4;this.tokenindex="%";}else if(code===94){// ^
this.tokenprio=5;this.tokenindex="^";}else{return false;}this.pos++;return true;},isSign:function isSign(){var code=this.expression.charCodeAt(this.pos-1);if(code===45||code===43){// -
return true;}return false;},isPositiveSign:function isPositiveSign(){var code=this.expression.charCodeAt(this.pos-1);if(code===43){// +
return true;}return false;},isNegativeSign:function isNegativeSign(){var code=this.expression.charCodeAt(this.pos-1);if(code===45){// -
return true;}return false;},isLeftParenth:function isLeftParenth(){var code=this.expression.charCodeAt(this.pos);if(code===40){// (
this.pos++;this.tmpprio+=10;return true;}return false;},isRightParenth:function isRightParenth(){var code=this.expression.charCodeAt(this.pos);if(code===41){// )
this.pos++;this.tmpprio-=10;return true;}return false;},isComma:function isComma(){var code=this.expression.charCodeAt(this.pos);if(code===44){// ,
this.pos++;this.tokenprio=-1;this.tokenindex=",";return true;}return false;},isWhite:function isWhite(){var code=this.expression.charCodeAt(this.pos);if(code===32||code===9||code===10||code===13){this.pos++;return true;}return false;},isOp1:function isOp1(){var str="";for(var i=this.pos;i<this.expression.length;i++){var c=this.expression.charAt(i);if(c.toUpperCase()===c.toLowerCase()){if(i===this.pos||c!='_'&&(c<'0'||c>'9')){break;}}str+=c;}if(str.length>0&&str in this.ops1){this.tokenindex=str;this.tokenprio=5;this.pos+=str.length;return true;}return false;},isOp2:function isOp2(){var str="";for(var i=this.pos;i<this.expression.length;i++){var c=this.expression.charAt(i);if(c.toUpperCase()===c.toLowerCase()){if(i===this.pos||c!='_'&&(c<'0'||c>'9')){break;}}str+=c;}if(str.length>0&&str in this.ops2){this.tokenindex=str;this.tokenprio=5;this.pos+=str.length;return true;}return false;},isVar:function isVar(){var str="";for(var i=this.pos;i<this.expression.length;i++){var c=this.expression.charAt(i);if(c.toUpperCase()===c.toLowerCase()){if(i===this.pos||c!='_'&&(c<'0'||c>'9')){break;}}str+=c;}if(str.length>0){this.tokenindex=str;this.tokenprio=4;this.pos+=str.length;return true;}return false;},isComment:function isComment(){var code=this.expression.charCodeAt(this.pos-1);if(code===47&&this.expression.charCodeAt(this.pos)===42){this.pos=this.expression.indexOf("*/",this.pos)+2;if(this.pos===1){this.pos=this.expression.length;}return true;}return false;}},true);return Parser;};/* eslint-enable */ /* jshint ignore:end */ /**
	 * Extracts symbols from an equation.  An equation can consist of symbols and the following operators: +-/*%()
	 * PEMDAS order is followed.  Additionally, symbols can be enclosed in brackets [] to treat them as literal non-parseables.
	 * @param {string} equation The equation to parse (e.g. IBM+GE)
	 * @return  {object} Parsed equation, {equation: [formatted equation], symbols: [array of symbols found in the equation]}
	 * @memberOf CIQ
	 * @version ChartIQ Advanced Package
	 */CIQ.formatEquation=function(equation){var eq="";var syms=[];var thisSym="";var lockSymbol=false;for(var j=1;j<equation.length;j++){var c=equation[j].toUpperCase();if(c=="["&&!lockSymbol){lockSymbol=true;}else if(c=="]"&&lockSymbol){lockSymbol=false;if(thisSym!==""){syms.push(thisSym);eq+="["+thisSym+"]";}thisSym="";}else if(lockSymbol){thisSym+=c;}else if(c=='+'||c=='-'||c=='*'||c=='/'||c==':'||c=='%'||c=='('||c==')'){if(thisSym!==""&&isNaN(thisSym)){syms.push(thisSym);eq+="["+thisSym+"]";}else{eq+=thisSym;}if(c==':')c="/";eq+=c;thisSym="";}else if(c!=' '){thisSym+=c;}}if(thisSym!==""&&isNaN(thisSym)){syms.push(thisSym);eq+="["+thisSym+"]";}else{eq+=thisSym;}return{equation:eq,symbols:syms};};/**
	 * Extracts symbols from an equation and fetches the quotes for them.
	 * @param {object} params Parameters used for the fetch
	 * @param  {function} cb Callback function once all quotes are fetched
	 * @memberOf CIQ
	 * @version ChartIQ Advanced Package
	 */CIQ.fetchEquationChart=function(params,cb){var formEq=CIQ.formatEquation(params.symbol);var syms=formEq.symbols;var arr=[];// jump through hoops with stx so that CIQ.clone doesn't choke on it
var stx=params.stx;params.stx=null;for(var i=0;i<syms.length;i++){var newParams=CIQ.shallowClone(params);newParams.stx=stx;newParams.symbol=syms[i];arr.push(newParams);}params.stx=stx;// multi fetch the symbols we need
stx.quoteDriver.quoteFeed.multiFetch(arr,function(results){var map={};params.loadMoreReplace=true;var attribution={charge:0};// error on any symbol then error out. Otherwise construct map.
for(var i=0;i<results.length;i++){var result=results[i];if(result.dataCallback.error){cb({error:result.dataCallback.error});return;}map[result.params.symbol]=result.dataCallback.quotes;params.loadMoreReplace=params.loadMoreReplace&&result.params.loadMoreReplace;params.moreToLoad=params.moreToLoad||result.dataCallback.moreAvailable;var dataCallbackAttribution=result.dataCallback.attribution;if(dataCallbackAttribution.charge)attribution.charge+=dataCallbackAttribution.charge;attribution.source=dataCallbackAttribution.source;if(attribution.exchange===undefined)attribution.exchange=dataCallbackAttribution.exchange;else if(attribution.exchange!=dataCallbackAttribution.exchange)attribution.exchange="";// mixed exchanges
}// compute the result and then pass to the response
if(arr.length||!(params.loadMore||params.update)){try{var equQuotes=CIQ.computeEquationChart(formEq.equation,map);cb({quotes:equQuotes,moreAvailable:params.moreToLoad,attribution:attribution});}catch(e){var error={error:"Invalid equation: "+formEq.equation};if(e.name&&e.name=="NoException")error.suppressAlert=true;cb(error);}}});};/**
	 * Computes an equation that may contain symbols and simple arithmetic operators.
	 * Parentheses can be used to separate portions of the equation.
	 * PEMDAS priority is observed.
	 * Symbols can be optionally contained within brackets.
	 * Valid examples: 3*IBM, 4+(IBM*2), (IBM-GM)/2
	 * If the equation cannot be resolved an exception is thrown.
	 * @param {string} equation The equation to compute.
	 * @param  {Object} map A map of symbols to data
	 * @return {Array}     A consolidated array of equation results
	 * @memberOf CIQ
	 * @version ChartIQ Advanced Package
	 */CIQ.computeEquationChart=function(equation,map){equation=equation.replace(/[:]/,"/").toUpperCase();var count=0;for(var sym in map){var r=new RegExp("\\["+sym.replace(/\[/g,"\\[").replace(/\]/g,"\\]").replace(/\$/g,"\\$").replace(/\^/g,"\\^").replace(/[+\-*/%()]/g,"\\$&")+"\\]","g");equation=equation.replace(r,"symbol"+count);count++;}var expr=Parser().parse(equation);var newArray=[];var iters={};var numSyms=0,c;var firstIter=null;var priceRelative=false;var arrMap=[];for(sym in map){var elem={sym:sym,map:map[sym]};if(map[sym])arrMap.unshift(elem);else arrMap.push(elem);}// Need an array - cannot guarantee order of map!
for(var el=0;el<arrMap.length;el++){var _=arrMap[el];iters[_.sym]={i:0,s:_.sym};if(_.map){numSyms++;c=_.map[0];}else if(numSyms==1){priceRelative=_.sym;}if(!c.DT)c.DT=CIQ.strToDateTime(c.Date);iters[_.sym].d=c.DT;if(!firstIter)firstIter=iters[_.sym];}var constant=numSyms===0;var computeHighLow=numSyms==1&&equation.indexOf("%")==-1;function incrementIterator(iterator){iterator.i++;if(map[iterator.s]){if(iterator.i>=map[iterator.s].length)return 0;c=map[iterator.s][iterator.i];}if(!c.DT)c.DT=CIQ.strToDateTime(c.Date);iterator.d=c.DT;return 1;}function isAllAligned(){var laggard=null;var temp=null;for(var iter in iters){if(!temp)temp=iters[iter];else if(iters[iter].d.getTime()<temp.d.getTime()){laggard=temp=iters[iter];}else if(iters[iter].d.getTime()>temp.d.getTime()){laggard=temp;}}if(laggard){if(!incrementIterator(laggard))return 0;return-1;}return 1;}whileLoop:while(true){var aligned=isAllAligned();if(!aligned)break;if(aligned==1){var m;if(priceRelative){var prElem=map[firstIter.s][firstIter.i][priceRelative];if(prElem&&(prElem.Close||prElem.Close===0))prElem=prElem.Close;var close=expr.evaluate({symbol0:map[firstIter.s][firstIter.i].Close,symbol1:prElem});close=Number(close.toFixed(8));//Math.round(close*10000)/10000;
m={DT:firstIter.d,Close:close,Adj_Close:close};m[firstIter.s]=map[firstIter.s][firstIter.i].Close;if(!isNaN(close)&&close!=Infinity)newArray.push(m);}else if(constant){var res=expr.evaluate({});CIQ.alert(equation+"="+res);throw{"name":"NoException","message":""};}else{count=0;var evaluators={Adj_Close:{},Close:{},Open:{},High:{},Low:{},Volume:{}};for(sym in map){for(var e in evaluators){evaluators[e]["symbol"+count]=map[sym][iters[sym].i][e];}count++;}m={DT:firstIter.d};/*
					variation 1 (Stockcharts.com):
					m.Close/=c.Close;
					m.High/=c.Close;
					m.Low/=c.Close;
					m.Open/=c.Close;

					variation 2 (eSignal):
					m.Close/=c.Close;
					m.High/=c.High;
					m.Low/=c.Low;
					m.Open/=c.Open;
					m.High=Math.max(m.High,Math.max(m.Open,m.Close));
					m.Low=Math.min(m.Low,Math.min(m.Open,m.Close));
					*/m.Adj_Close=expr.evaluate(evaluators.Adj_Close);m.Close=expr.evaluate(evaluators.Close);m.Open=expr.evaluate(evaluators.Open);m.Volume=expr.evaluate(evaluators.Volume);if(isNaN(m.Volume))m.Volume=0;if(computeHighLow){m.High=expr.evaluate(evaluators.High);m.Low=expr.evaluate(evaluators.Low);}else{m.High=Math.max(m.Open,m.Close);m.Low=Math.min(m.Open,m.Close);}if(!isNaN(m.Close)&&m.Close!=Infinity)newArray.push(m);if(!isNaN(m.High))m.High=Number(m.High.toFixed(8));//Math.round(m.High*10000)/10000;
if(!isNaN(m.Low))m.Low=Number(m.Low.toFixed(8));//Math.round(m.Low*10000)/10000;
if(!isNaN(m.Open))m.Open=Number(m.Open.toFixed(8));//Math.round(m.Open*10000)/10000;
if(!isNaN(m.Close))m.Close=Number(m.Close.toFixed(8));//Math.round(m.Close*10000)/10000;
if(!isNaN(m.Adj_Close))m.Adj_Close=Number(m.Adj_Close.toFixed(8));//Math.round(m.Adj_Close*10000)/10000;
else m.Adj_Close=m.Close;// Terry, 4-28-17, we were adding the individual components of an equation chart to the masterData but this complicated
// the process of cleaning up the masterData when a series was removed. Since equation charts are handled totally out-of-band
// it isn't necessary to store the individual component data. If we want to get efficient, and re-use components without loading
// them from the quotefeed, then we would adapt equation charts to use series. This could get complicated though
// since an equation series would then depend on other series. So for now we'll leave as is.
/*count=0;
					for(sym in map){
						m[sym]=evaluators.Close["symbol"+count];
						count++;
					}*/}for(sym in map){if(!incrementIterator(iters[sym]))break whileLoop;}}}return newArray;};return _exports;};var __js_advanced_renderersAdvanced_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_advanced_renderersAdvanced_(_exports){var CIQ=_exports.CIQ;/**
	 * Creates a Shading renderer
	 * This is just like Lines renderer except it will allow shading between lines.
	 * Note: by default the renderer will display lines as underlays. As such, they will appear below the chart ticks and any other studies or drawings.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {number} [config.params.width] Width of the rendered line
	 *
	 * Common valid parameters for use by attachSeries.:<br>
	 * `color` - Specify the color for the line and shading in rgba, hex or by name.<br>
	 * `pattern` - Specify the pattern as an array. For instance [5,5] would be five pixels and then five empty pixels.<br>
	 * `width` - Specify the width of the line.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.Shading
	 * @version ChartIQ Advanced Package
	 */CIQ.Renderer.Shading=function(config){this.construct(config);this.beenSetup=false;this.errTimeout=null;this.params.useChartLegend=false;this.shading=[];if(this.params.type=="rangechannel")this.highLowBars=true;};CIQ.Renderer.Shading.ciqInheritsFrom(CIQ.Renderer.Lines,false);/**
	 * Returns a new Shading renderer if the featureList calls for it
	 * FeatureList should contain "rangechannel" (draws high and low plots and shades between)
	 * Called by {@link CIQ.Renderer.produce} to create a renderer for the main series
	 * @param {array} featureList List of rendering terms requested by the user, parsed from the chartType
	 * @param {object} [config.params] Parameters used for the series to be created, used to create the renderer
	 * @return {CIQ.Renderer.Shading} A new instance of the Shading renderer, if the featureList matches
	 * @memberof CIQ.Renderer.Shading
	 * @since 5.1.0
	 */CIQ.Renderer.Shading.requestNew=function(featureList,params){var type=null;for(var pt=0;pt<featureList.length;pt++){var pType=featureList[pt];if(pType=="rangechannel")type="rangechannel";}if(type===null)return null;return new CIQ.Renderer.Shading({params:CIQ.extend(params,{type:type})});};/**
	 * Sets the shading scheme of the renderer
	 * @param  {array} scheme single object or array of objects denoting shading
	 * @param  {string} [scheme.primary] left series for comparison; if omitted, use chart.dataSegment[i].Close
	 * @param  {string} [scheme.secondary] right series for comparison; if omitted, use first series in the seriesMap
	 * @param  {string} [scheme.color] color in hex, rgb, rgba, etc to shade between primary and secondary
	 * @param  {string} [scheme.greater] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is greater in price than secondary
	 * @param  {string} [scheme.lesser] color in hex, rgb, rgba, etc to shade between primary and secondary if primary is lesser in price than secondary
	 * Note: if scheme.greater _and_ scheme.lesser are omitted, scheme.color is used.
	 * Note: if scheme.greater _or_ scheme.lesser are omitted, stx.containerColor is used for the missing color.
	 * At a bare minimum, scheme.color is required.  It is not required if scheme.greater and scheme.lesser are supplied.
	 * If scheme.primary is omitted, the shading will only occur if the series share the same axis as the chart.dataSegment[i].Close.
	 * If shading cannot occur for any reason, series lines will still be drawn.
	 * @memberOf CIQ.Renderer.Shading
	 * @example
	 * renderer.setShading([
	 * 	{primary:'ibm', secondary:'ge', greater:'green', lesser:'red'}, // switches shading based on crossover of values
	 * 	{primary:'aapl', secondary:'ge', greater:'orange'}, // same as above, but lesser color not specified, so shade that area the container color.
	 * 	{primary:'t', secondary:'intc', color:'blue'}, // color always blue between them regardless of which is higher or lower
	 * 	{secondary:'t', color:'yellow'}, // compares masterData with the named series
	 * 	{color:'yellow'} // automatically shades between master and the first series
	 * ]);
	 * @version ChartIQ Advanced Package
	 */CIQ.Renderer.Shading.prototype.setShading=function(scheme){if(scheme.constructor!=Array){scheme=[scheme];}this.shading=scheme;};CIQ.Renderer.Shading.prototype.draw=function(){var stx=this.stx,chart=stx.panels[this.params.panel].chart;if(this.params.type=="rangechannel"){if(this.beenSetup){if(this.seriesParams.length>2)this.removeSeries(this.seriesParams[2].id);}else{this.beenSetup=true;this.params.display=this.seriesParams[0].display;this.params.yAxis=this.seriesParams[0].yAxis;var shadeColor=this.seriesParams[0].color||"auto";var symbol=this.seriesParams[0].symbol,prefix="";if(symbol)prefix=symbol+".";this.removeAllSeries(true);var name=this.params.name;stx.addSeries(null,{symbol:symbol,loadData:!!symbol,field:"High",renderer:"Shading",name:name,style:"stx_line_up",display:this.params.display});stx.addSeries(null,{symbol:symbol,loadData:!!symbol,field:"Low",renderer:"Shading",name:name,style:"stx_line_down",display:this.params.display});this.setShading({primary:this.seriesParams[0].id,secondary:this.seriesParams[1].id,color:shadeColor});}}if(!this.shading){if(!this.errTimeout){console.log("Warning: no shading scheme set.  Use myRenderer.setShading(scheme) to set.");var self=this;this.errTimeout=setTimeout(function(){self.errTimeout=null;},10000);}}var seriesMap={};var s;for(s=0;s<this.seriesParams.length;s++){var defaultParams={};if(chart.series[this.seriesParams[s].id]){// make sure the series is still there.
defaultParams=CIQ.clone(chart.series[this.seriesParams[s].id].parameters);}seriesMap[this.seriesParams[s].id]={parameters:CIQ.extend(CIQ.extend(defaultParams,this.params),this.seriesParams[s]),yValueCache:this.caches[this.seriesParams[s].id]};}stx.drawSeries(chart,seriesMap,this.params.yAxis,this);if(chart.legend&&this.params.type=="rangechannel"){if(!chart.legend.colorMap)chart.legend.colorMap={};var display=this.params.display;var colors=[stx.getCanvasColor("stx_line_up"),stx.getCanvasColor("stx_line_down")];chart.legend.colorMap[display]={color:colors,display:display,isBase:this==stx.mainSeriesRenderer};// add in the optional display text to send into the legendRenderer function
}for(s in seriesMap){this.caches[s]=seriesMap[s].yValueCache;}function joinFields(series){var map=seriesMap[series];if(map){var fld=map.parameters.field;var subFld=map.parameters.subField;return fld+(subFld?"."+subFld:"");}return series;}for(s=0;s<this.shading.length;s++){var scheme=this.shading[s];var color=scheme.color;if(scheme.color=="auto")color=stx.defaultColor;if(!scheme.primary)scheme.primary="Close";if(!scheme.secondary&&this.seriesParams[0])scheme.secondary=this.seriesParams[0].field;if(!scheme.secondary)continue;else if(!seriesMap[scheme.primary]&&scheme.primary!="Close")continue;else if(!seriesMap[scheme.secondary])continue;else if(scheme.primary=="Close"&&this.params.yAxis&&this.params.yAxis!=chart.yAxis)continue;//don't allow shading across axes
var topFields=joinFields(scheme.primary).split(".");var bottomFields=joinFields(scheme.secondary).split(".");var parameters={"topBand":topFields[0],"topSubBand":topFields[1],"topColor":scheme.greater||color||stx.containerColor,"topAxis":this.params.yAxis,"bottomBand":bottomFields[0],"bottomSubBand":bottomFields[1],"bottomColor":scheme.lesser||color||stx.containerColor,"bottomAxis":scheme.primary=="Close"?null:this.params.yAxis,"tension":this.params.tension||chart.tension,"opacity":0.1};if(!parameters.topColor&&!parameters.bottomColor)continue;CIQ.fillIntersecting(stx,this.params.panel,parameters);}};/**
	 * Creates a multi-part histogram renderer where bars can be stacked one on top of the other, clustered next to each other, or overlaid over each other.
	 * 
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.defaultBorders =false] Whether to draw a border for each bar as a whole.  Can be overridden by a border set for a series.
	 * @param  {number} [config.params.widthFactor =.8] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00.
	 * @param  {number} [config.params.heightPercentage =.7] The amount of vertical space to use, valid values are 0.00-1.00.
	 * @param  {boolean} [config.params.bindToYAxis =true] Set to true to bind the rendering to the y-axis and to draw it. Automatically set if params.yAxis is present.
	 * @param  {string} [config.params.subtype="overlaid"] Subtype of rendering "stacked", "clustered", "overlaid"
	 *
	 * Common valid parameters for use by attachSeries.:<br>
	 * `fill_color_up` - Color to use for up histogram bars.<br>
	 * `fill_color_down` - Color to use for down histogram bars.<br>
	 * `border_color_up` - Color to use for the border of up histogram bars.<br>
	 * `border_color_down` - Color to use for the order of down histogram bars.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.Histogram
	 * 	@example
		// configure the histogram display
		var params={
			name:				"Sentiment Data",
			type:				"histogram",
			subtype:			"stacked",
			heightPercentage:	.7,	 // how high to go. 1 = 100%
			widthFactor:		.8	 // to control space between bars. 1 = no space in between
		};

	 	//legend creation callback (optional)
		function histogramLegend(colors){
	        stxx.chart.legendRenderer(stxx,{legendColorMap:colors, coordinates:{x:260, y:stxx.panels["chart"].yAxis.top+30}, noBase:true});
	    }

		// set the renderer
		var histRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({params: params, callback: histogramLegend}));

		// add data and attach. 
		stxx.addSeries("^NIOALL", {display:"Symbol 1"}, function() {histRenderer.attachSeries("^NIOALL","#6B9CF7").ready();});
		stxx.addSeries("^NIOAFN", {display:"Symbol 2"}, function() {histRenderer.attachSeries("^NIOAFN","#95B7F6").ready();});
		stxx.addSeries("^NIOAMD", {display:"Symbol 3"}, function() {histRenderer.attachSeries("^NIOAMD","#B9D0F5").ready();});
	 *
	 * @example
		// this is an example on how completely remove a renderer and all associated data. 
		// This should only be necessary if you are also removing the chart itself
		
		// Remove all series from the renderer including series data from the masterData
  		renderer.removeAllSeries(true);
  		
  		// detach the series renderer from the chart.
  		stxx.removeSeriesRenderer(renderer);
  		
  		// delete the renderer itself.
  		delete renderer;
  		
	 * @version ChartIQ Advanced Package
	 */CIQ.Renderer.Histogram=function(config){this.construct(config);this.params.type="histogram";this.params.highlightable=false;this.barsHaveWidth=this.standaloneBars=true;if(this.params.yAxis)this.params.bindToYAxis=true;};CIQ.Renderer.Histogram.ciqInheritsFrom(CIQ.Renderer,false);CIQ.Renderer.Histogram.prototype.adjustYAxis=function(){if(!this.params.yAxis)return;this.params.yAxis.min=0;this.params.yAxis.highValue/=this.params.heightPercentage||1;};CIQ.Renderer.Histogram.prototype.draw=function(){this.stx.drawHistogram(CIQ.clone(this.params),this.seriesParams);};/**
	 * Creates a Heatmap renderer
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {number} [config.params.widthFactor=1] Width of each bar as a percentage of the candleWidth. Valid values are 0.00-1.00.
	 * @param  {number} [config.params.height] The amount of vertical space to use, in price units. For example, 2=>2 unit increments on yaxis.
	 * @constructor
	 * @name  CIQ.Renderer.Heatmap
	 * @version ChartIQ Advanced Package
	 */CIQ.Renderer.Heatmap=function(config){this.construct(config);this.params.type="heatmap";this.params.highlightable=false;this.barsHaveWidth=this.standaloneBars=true;};CIQ.Renderer.Heatmap.ciqInheritsFrom(CIQ.Renderer,false);CIQ.Renderer.Heatmap.prototype.draw=function(){this.stx.drawHeatmap(CIQ.clone(this.params),this.seriesParams);};/**
	 * Creates a Scatter plot renderer
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {Object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @constructor
	 * @name  CIQ.Renderer.Scatter
	 * @version ChartIQ Advanced Package
	 */CIQ.Renderer.Scatter=function(config){this.construct(config);this.standaloneBars=this.barsHaveWidth=true;};CIQ.Renderer.Scatter.ciqInheritsFrom(CIQ.Renderer.Lines,false);/**
	 * Returns a new Scatter renderer if the featureList calls for it
	 * FeatureList should contain "scatter"
	 * Called by {@link CIQ.Renderer.produce} to create a renderer for the main series
	 * @param {array} featureList List of rendering terms requested by the user, parsed from the chartType
	 * @param {object} [config.params] Parameters used for the series to be created, used to create the renderer
	 * @return {CIQ.Renderer.Scatter} A new instance of the Scatter renderer, if the featureList matches
	 * @memberof CIQ.Renderer.Scatter
	 * @since 5.1.0
	 */CIQ.Renderer.Scatter.requestNew=function(featureList,params){var type=null;for(var pt=0;pt<featureList.length;pt++){var pType=featureList[pt];if(pType=="scatterplot")type="scatter";}if(type===null)return null;return new CIQ.Renderer.Scatter({params:CIQ.extend(params,{type:type})});};CIQ.Renderer.Scatter.prototype.drawIndividualSeries=function(chart,parameters){panel=this.stx.panels[parameters.panel]||chart.panel;var rc={colors:[]};if(this.stx.scatter)rc=this.stx.scatter(panel,parameters);else console.warn("Error, Scatter renderer requires customChart.js");return rc;};return _exports;};var __js_advanced_share_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_advanced_share_(_exports){var CIQ=_exports.CIQ;var h2canvas;/**
	 * Manages chart sharing and uploading.
	 * @constructor
	 * @name CIQ.Share
	 */CIQ.Share=function(){};_exports.STXSocial=CIQ.Share;/**
	 * Creates a png image or canvas of the current chart and everything inside the container associated with the chart when it was instantiated; including HTML.
	 * Elements outside the chart container will **NOT** be included. 
	 * 
	 * It will dynamically try to load `js/thirdparty/html2canvas.js` if not already loaded.
	 *
	 * This function is asynchronous and requires a callback function. The callback will be passed
	 * a data object or canvas which can be sent to a server or converted to an image.
	 *
	 * By default this method will rely on HTML2Canvas to create an image which will rely on Promises. If your browser does not implement Promises, be sure to include a polyfill to ensure HTML2Canvas works properly.
	 *
	 * ** This method does not always work with React or Safari **
	 *
	 * **Canvases can only be exported if all the contents including CSS images come from the same domain,
	 * or all images have cross origin set properly and come from a server that supports CORS; which may or may not be possible with CSS images.**
	 *
	 * **Note when using the charts from `file:///` :**
	 * If your application will use this functionality in a `file:///` environment, make sure to include `html2canvas` statically instead of allowing this method to load it dynamically.
	 * <br>Example:
	 * <br>`<script src="js/thirdparty/html2canvas.js"></script>`
	 *
	 *
	 * @param {CIQ.ChartEngine} stx   Chart object
	 * @param {object} params
	 * @param {number} params.width
	 * @param {number} params.height
	 * @param {string} params.background
	 * @param {bolean} params.data If true returns the image data, otherwise, it returns the canvas
	 * @param {Array} params.hide Array of strings; array of the CSS selectors of the DOM elements to hide, before creating a PNG
	 * @param {Function} cb  Callback when image is available fc(error,data) where data is the serialized image object or canvas
	 * @name CIQ.Share.FullChart2PNG
	 * @since 4.0.0 Addition of `params.hide`
	 * @version ChartIQ Advanced Package plug-in
	 * @private
	 */CIQ.Share.FullChart2PNG=function(stx,params,cb){if(!stx||!stx.chart)return;//If we haven't loaded html2canvas, load it
if(typeof html2canvas==="undefined")return loadHTML2Canvas(function(){return createHTML2Canvas(stx,params,cb);});h2canvas=html2canvas;createHTML2Canvas(stx,params,cb);};function createHTML2Canvas(stx,params,cb){if(!params)params={};var recordsTurnedOff=[],ciqNoShare="ciq-no-share",body=document.querySelector("body");if(params.hide&&params.hide instanceof Array){var customHide=params.hide.join(", ");var hideItems=document.querySelectorAll(customHide);for(var idx=0;idx<hideItems.length;idx++){CIQ.appendClassName(hideItems[idx],ciqNoShare);}}// Combining ".sharing" and ".ciq-no-share" to display:none for selected elements
CIQ.appendClassName(body,"sharing");h2canvas(stx.chart.container,{allowTaint:false,logging:false,width:params.width||null,height:params.height||null,backgroundColor:params.background||null,useCORS:true}).then(function(canvas){if(cb){//return the full canvas if the data param is not true
cb(null,params.data?canvas.toDataURL('image/png'):canvas);}CIQ.unappendClassName(body,"sharing");}).catch(function(error){if(cb)cb(error);CIQ.unappendClassName(body,"sharing");});}//Load HTML2Canvas dynamically. If html2canvas.js is already loaded (statically, webpacked or with require.js) then this will be skipped.
// HTML2Canvas is rather heavy which is why we provide the option to load dynamically. It isn't really necessary to load this until
// a user actually shares a chart.
function loadHTML2Canvas(cb){//Make sure HTML2Canvas is not already loaded
if(typeof html2canvas==="undefined"){//If we have require, use it
if(typeof requirejs!=="undefined"){try{return requirejs(["html2canvas"],function(h2){h2canvas=h2;return cb();});}catch(exception){console.warn("Require loading has failed, attempting to load html2canvas manually.");}}// if no require then load directly
CIQ.loadScript(getMyRoot()+"/html2canvas.js",function(){h2canvas=html2canvas;return cb();});}else{h2canvas=html2canvas;return cb();}}//Get the location of this file. Unbundled, this would be share.js. Bundled, this would be chartiq.js. When unbundled
//we need to walk back up out of advanced. When bundled we don't need a root because thirdparty should be a relative
//path.
//Set CIQ.Share.html2canvasLocation to completely override this logic.
function getMyRoot(){if(CIQ.Share.html2canvasLocation)return CIQ.Share.html2canvasLocation;var sc=document.getElementsByTagName("script");for(var idx=0;idx<sc.length;idx++){var s=sc[idx];if(s.src&&s.src.indexOf("share.js")>-1){return s.src.replace(/advanced\/share\.js/,"")+"thirdparty/";}}return"js/thirdparty/";}/**
	 * Creates a png image of the current chart and everything inside the container associated with the chart when it was instantiated; including HTML.
	 * Elements outside the chart container will **NOT** be included. 
	 * 
	 * If widthPX and heightPX are passed in then the image will be scaled to the requested dimensions.
	 * 
	 * It will dynamically try to load `js/thirdparty/html2canvas.js` if not already loaded.
	 *
	 * This function is asynchronous and requires a callback function. 
	 * The callback will be passed a data object or canvas which can be sent to a server or converted to an image.
	 *
	 * Important Notes:
	 * - ** This method will rely on Promises. If your browser does not implement Promises, be sure to include a polyfill.**
	 *
	 * - ** This method does not always work with React or Safari **
	 *
	 * - **Canvases can only be exported if all the contents including CSS images come from the same domain, 
	 * or all images have cross origin set properly and come from a server that supports CORS; which may or may not be possible with CSS images.**
	 *
	 * - **When using the charts from `file:///` :**
	 * If your application will use this functionality in a `file:///` environment, make sure to include `html2canvas` statically instead of allowing this method to load it dynamically.
	 * <br>Example:
	 * <br>`<script src="js/thirdparty/html2canvas.js"></script>`
	 *
	 * @param  {object}   stx           Chart object
	 * @param	 {object}		[parameters]			Parameters to describe the image.
	 * @param  {number}   [parameters.widthPX]       Width of image to create. If passed then params.heightPX  will adjust to maintain ratio.
	 * @param  {number}   [parameters.heightPX]      Height of image to create. If passed then params.widthPX will adjust to maintain ratio.
	 * @param  {string}   [parameters.imageType]   Specifies the file format your image will be output in. The dfault is PNG and the format must be suported by your browswer.
	 * @param {Array} 	[parameters.hide] Array of strings; array of the CSS selectors of the DOM elements to hide, before creating a PNG
	 * @param  {Function} cb            Callback when image is available fc(data) where data is the serialized image object
	 * @memberOf CIQ.Share
	 * @since
	 * <br>&bull; 3.0.0 Function signature changed to take parameters.
	 * <br>&bull; 4.0.0 Addition of `parameters.hide`
	 * @version ChartIQ Advanced Package plug-in
	 */ //imageType is in its location so developers don't need to change their current code.
CIQ.Share.createImage=function(stx,params,cb){var args=[].slice.call(arguments);cb=args.pop();if(params===null||_typeof(params)!='object')params={widthPX:args[1],heightPX:args[2],imageType:args[3]};var widthPX=params.widthPX;var heightPX=params.heightPX;var imageType=params.imageType;// Set background for any part of canvas that is currently transparent NO LONGER NECESSARY????
// CIQ.fillTransparentCanvas(stx.chart.context, stx.containerColor, stx.chart.canvas.width, stx.chart.canvas.height);
// We use style height/width instead of the canvas width/height when the backing store is 2x on retina screens
var renderedHeight=stx.chart.canvas.height;var renderedWidth=stx.chart.canvas.width;if(stx.chart.canvas.style.height){renderedHeight=CIQ.stripPX(stx.chart.canvas.style.height);renderedWidth=CIQ.stripPX(stx.chart.canvas.style.width);}if(widthPX&&heightPX){renderedHeight=heightPX;renderedWidth=widthPX;}else if(heightPX){renderedWidth=stx.chart.canvas.width*(renderedHeight/stx.chart.canvas.height);}else if(widthPX){renderedWidth=widthPX;renderedHeight=stx.chart.canvas.height*(widthPX/stx.chart.canvas.width);}//var totalHeight=renderedHeight;
var imageResult=imageType?"image/"+imageType:"image/png";// Render the canvas as an image
var shareImage=document.createElement("img");shareImage.onload=function(){// Print the image on a new canvas of appropriate size
CIQ.Share.FullChart2PNG(stx,{image:this,width:renderedWidth,height:renderedHeight,hide:params.hide},function(err,canvas){try{cb(canvas.toDataURL(imageResult));// return the data
}catch(e){console.warn("Safari devices do not handle CORS enabled images. Using the charts' canvas as a fallback.");cb(shareImage.src);}});};shareImage.src=stx.chart.canvas.toDataURL(imageResult);};/**
	 * Uploads an image to a server. The callback will take two parameters. The first parameter is an error
	 * condition (server status), or null if there is no error. The second parameter (if no error) will contain
	 * the response from the server.
	 * 'payload' is an optional object that contains meta-data for the server. If payload exists then the image will be added as a member of the payload object, otherwise an object will be created
	 * 'dataImage' should be a data representation of an image created by the call canvas.toDataURL such as is returned by CIQ.Share.createImage
	 * If you are getting a status of zero back then you are probably encountering a cross-domain ajax issue. Check your access-control-allow-origin header on the server side

	 * @param  {string}   dataImage Serialized data for image
	 * @param  {string}   url       URL to send the image
	 * @param  {object}   [payload]   Any additional data to send to the server should be sent as an object.
	 * @param  {Function} cb        Callback when image is uploaded
	 * @memberOf CIQ.Share
	 * @version ChartIQ Advanced Package plug-in
	 */CIQ.Share.uploadImage=function(dataImage,url,payload,cb){if(!payload)payload={};payload.image=dataImage;var valid=CIQ.postAjax(url,JSON.stringify(payload),function(status,response){if(status!=200){cb(status,null);return;}cb(null,response);});if(!valid)cb(0,null);};/**
	 * Convenience function that serves as a wrapper for createImage and uploadImage.
	 * It will create an image using the default parameters. If you wish to customize the image you must use {@link CIQ.Share.createImage} separately and then call {@link CIQ.Share.uploadImage}.
	 * (example python code available in our {@tutorial Chart Sharing} tutorial.
	 * @param {object}	stx Chart Object
	 * @param {object}  [override] Parameters that overwrite the default hosting location from https://share.chartiq.com to a custom location.
	 * @param {object}	[override.host]
	 * @param {object}	[override.path]
	 * @param {function}	cb Callback when the image is uploaded.
	 * @memberof CIQ.Share
	 * @since 2015-11-01
	 * @example
	 *  // here is the exact code this convenience function is using
		CIQ.Share.createImage(stx, {}, function(imgData){
			var id=CIQ.uniqueID();
			var host="https://share.chartiq.com";
			var url= host + "/upload/" + id;
			if(override){
				if(override.host) host=override.host;
				if(override.path) url=host+override.path+"/"+id;
			}
			var startOffset=stx.getStartDateOffset();
			var metaData={
				"layout": stx.exportLayout(),
				"drawings": stx.exportDrawings(),
				"xOffset": startOffset,
				"startDate": stx.chart.dataSegment[startOffset].Date,
				"endDate": stx.chart.dataSegment[stx.chart.dataSegment.length-1].Date,
				"id": id,
				"symbol": stx.chart.symbol
			};
			var payload={"id": id, "image": imgData, "config": metaData};
			CIQ.Share.uploadImage(imgData, url, payload, function(err, response){
				if(err!==null){
					CIQ.alert("error sharing chart: ",err);
				}else{
					cb(host+response);
				}
			});
			// end sample code to upload image to a server
		});
	 * 
	 */CIQ.Share.shareChart=function(stx,override,cb){CIQ.Share.createImage(stx,{},function(imgData){var id=CIQ.uniqueID();var host="https://share.chartiq.com";var url=host+"/upload/"+id;if(override){if(override.host)host=override.host;if(override.path)url=host+override.path+"/"+id;}var startOffset=stx.getStartDateOffset();var metaData={"layout":stx.exportLayout(),"drawings":stx.exportDrawings(),"xOffset":startOffset,"startDate":stx.chart.dataSegment[startOffset].Date,"endDate":stx.chart.dataSegment[stx.chart.dataSegment.length-1].Date,"id":id,"symbol":stx.chart.symbol};var payload={"id":id,"image":imgData,"config":metaData};CIQ.Share.uploadImage(imgData,url,payload,function(err,response){if(err!==null){CIQ.alert("error sharing chart: ",err);}else{cb(host+response);}});// end sample code to upload image to a server
});};return _exports;};var __js_advanced_studiesAdvanced_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_advanced_studiesAdvanced_(_exports){var CIQ=_exports.CIQ;/**
	 * Calculate "val lines" study. This study does all calculations on the {studyDescriptor.chart.dataSegment}.
	 *
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @param {Object[]} quotes the dataSegment
	 * @memberof CIQ.Studies
	 */CIQ.Studies.calculateValuationLines=function(stx,sd,quotes){var field=sd.inputs.Field=='field'?'Close':sd.inputs.Field;var averageType=sd.inputs['Average Type'];var displayAvg=sd.inputs['Display Average'];var displayS1=sd.inputs["Display 1 Standard Deviation (1\u03C3)"];var displayS2=sd.inputs["Display 2 Standard Deviation (2\u03C3)"];var displayS3=sd.inputs["Display 3 Standard Deviation (3\u03C3)"];var values=[];for(var i=0;i<quotes.length;++i){if(quotes[i])values.push(quotes[i][field]);}var average=function(nums,type){var len=nums.length;var numerator=0,denominator=0,i=0;switch(type){case'mean':denominator=len;for(;i<len;++i){numerator+=nums[i];}break;case'harmonic':numerator=len;for(;i<len;++i){denominator+=1/nums[i];}break;case'median':var middle=Math.floor(len/2);var sorted=nums.slice().sort(function(a,b){if(a>b)return 1;if(a<b)return-1;return 0;});if(len%1===0){numerator=sorted[middle]+sorted[middle-1];denominator=2;}else{numerator=sorted[middle];denominator=1;}break;}return numerator/denominator;}(values,averageType);// logic skips the calculation if none of the stddev lines are displaying
var stddev=!(displayS1||displayS2||displayS3)||function(nums,baseline){var len=nums.length;var numerator=0;for(var i=0;i<len;++i){numerator+=Math.pow(nums[i]-baseline,2);}return Math.sqrt(numerator/len);}(values,average);sd.data={Average:displayAvg?[average]:null,"1 Standard Deviation (1\u03C3)":displayS1?[average+stddev,average-stddev]:null,"2 Standard Deviation (2\u03C3)":displayS2?[average+stddev*2,average-stddev*2]:null,"3 Standard Deviation (3\u03C3)":displayS3?[average+stddev*3,average-stddev*3]:null};var padding=stddev;if(!sd.parameters)sd.parameters={};if(displayS3)sd.parameters.range=[average-stddev*3-padding,average+stddev*3+padding];else if(displayS2)sd.parameters.range=[average-stddev*2-padding,average+stddev*2+padding];else if(displayS1)sd.parameters.range=[average-stddev-padding,average+stddev+padding];else if(displayAvg)sd.parameters.range=[average-padding,average+padding];if(sd.panel){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);if(yAxis){yAxis.decimalPlaces=panel.chart.yAxis.printDecimalPlaces;var parameters={yAxis:yAxis};stx.calculateYAxisRange(panel,yAxis,sd.parameters.range[0],sd.parameters.range[1]);stx.createYAxis(panel,parameters);stx.drawYAxis(panel,parameters);}}};/**
	 * Display "val lines" study.
	 *
	 * It is possible to change how the lines appear with CSS styling.
	 * ** Example: **
	 * .ciq-valuation-average-line {
	 *   border-style: solid;
	 *   border-width: 1.2px;
	 *   opacity: 0.95;
	 * }
	 * .ciq-valuation-deviation-line {
	 *   border-style: dotted;
	 *   border-width: 1px;
	 *   opacity: 0.80;
	 * }
	 *
	 * These values are used to create the params argument for {CIQ.ChartEngine#plotLine}.
	 *  - "border-style" -> "pattern"
	 *  - "border-width" -> "lineWidth"
	 *  - "opacity" -> "opacity"
	 *
	 * Average line defaults to {pattern: 'solid', lineWidth: 1, opacity: 1}
	 * Deviation lines default to {pattern: 'dashed', lineWidth: 1, opacity: 1}
	 *
	 * Suggested that whitespace be set from about 60 to 90 pixels so that the labels are
	 * clearly visible in the home position.
	 *
	 * @example
	 * var stxx = new CIQ.ChartEngine({container: $$$('.chartContainer'), preferences: {whitespace: 60.5}});
	 *
	 * Alternatively, you can use yAxis labels by setting the labels parameter to "yaxis" in the studyLibrary entry.
	 *
	 * @example
	 * CIQ.Studies.studyLibrary['val lines'].parameters = {labels: 'yaxis'};
	 *
	 * @param {CIQ.ChartEngine} stx The chart object
	 * @param {studyDescriptor} sd The study descriptor
	 * @memberOf CIQ.Studies
	 */CIQ.Studies.displayValuationLines=function(stx,sd){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var context=sd.chart.context;var data=sd.data;var labels=sd.parameters.labels;var averageType=sd.inputs["Average Type"];var averageLabels={'mean':'AVG','median':'MED','harmonic':'HAVG'};var averageStyle=stx.canvasStyle('ciq-valuation-average-line');var deviationStyle=stx.canvasStyle('ciq-valuation-deviation-line');var textPadding=3;// padding top, right, and bottom
var textHeight=stx.getCanvasFontSize('stx_yaxis')+textPadding*2;var isAvg,color,value,i,price,y,text,textWidth,plotLineParams;for(var key in data){if(!data[key])continue;isAvg=key=='Average';color=CIQ.Studies.determineColor(sd.outputs[key]);value=data[key];for(i=0;i<value.length;++i){price=value[i];y=stx.pixelFromPrice(price,panel,yAxis);if(y<=panel.top||y>=panel.yAxis.bottom)continue;plotLineParams=isAvg?{pattern:averageStyle.borderStyle!='none'?averageStyle.borderStyle||'solid':'solid',lineWidth:parseFloat(averageStyle.borderWidth)||1,opacity:parseFloat(averageStyle.opacity)||1,yAxis:yAxis}:{pattern:deviationStyle.borderStyle!='none'?deviationStyle.borderStyle||'dashed':'dashed',lineWidth:parseFloat(deviationStyle.borderWidth)||1,opacity:parseFloat(deviationStyle.opacity)||1,yAxis:yAxis};stx.plotLine(panel.left,panel.right,y,y,color,'line',context,panel,plotLineParams);if(labels==='yaxis'){stx.createYAxisLabel(panel,stx.formatYAxisPrice(price,panel),y,color,null,context,yAxis);continue;}// additional Y padding to prevent line from overlapping text
y+=Math.floor(plotLineParams.lineWidth/2);if(y+textHeight>=panel.yAxis.bottom)continue;text=(isAvg?averageLabels[averageType]+': ':key[0]+"\u03C3: ")+stx.formatYAxisPrice(price,panel);textWidth=context.measureText(text).width;var position=panel.right-textWidth-textPadding;if(yAxis&&yAxis.position=="left")position=panel.left+textPadding;context.strokeText(text,position,y+textHeight/2+0.5);}}};/**
	 * Calculate function for correlation coefficient
	 * @param  {CIQ.ChartEngine} stx Chart object
	 * @param  {object} sd  Study Descriptor
	 * @memberOf CIQ.Studies
	 * @version ChartIQ Advanced Package
	 */CIQ.Studies.calculateCorrelationCoefficient=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;if(quotes.length<period+1){sd.error=true;return;}//var base=stx.chart.symbol;
sd.compare=sd.inputs["Compare To"];if(!sd.compare){sd.compare=[];sd.outputs={};sd.outputMap={};for(var s in stx.chart.series){var series=stx.chart.series[s];if(series.parameters.color){sd.compare.push(series.display);sd.outputs["Result "+series.display]=series.parameters.color;sd.outputMap["Result "+series.display+" "+sd.name]="Result "+series.display;}}}else{sd.compare=[sd.compare];}if(!sd.compare.length){sd.error="Correlation Coefficient requires at least one comparison symbol";return;}for(var sym=0;sym<sd.compare.length;sym++){var sB=0;var sC=0;var sB2=0;var sC2=0;var sBC=0;var thisCompare=sd.compare[sym];var iters=0;for(var i=sd.startFrom-period;i<quotes.length;i++){//last tick has no compare data
if(!quotes[i])continue;var comparisonQuote=quotes[i][thisCompare];if(comparisonQuote&&_typeof(comparisonQuote)=="object")comparisonQuote=comparisonQuote.Close;if(!comparisonQuote&&comparisonQuote!==0){if(i>0&&quotes[i-1]&&quotes[i-1]["_temps "+sd.name].c)comparisonQuote=quotes[i-1]["_temps "+sd.name].c;else comparisonQuote=0;}if(comparisonQuote&&_typeof(comparisonQuote)=="object")comparisonQuote=comparisonQuote.Close;quotes[i]["_temps "+sd.name]={};sB+=quotes[i]["_temps "+sd.name].b=quotes[i].Close;sC+=quotes[i]["_temps "+sd.name].c=comparisonQuote;sB2+=quotes[i]["_temps "+sd.name].b2=Math.pow(quotes[i].Close,2);sC2+=quotes[i]["_temps "+sd.name].c2=Math.pow(comparisonQuote,2);sBC+=quotes[i]["_temps "+sd.name].bc=quotes[i].Close*comparisonQuote;if(iters>=period){sB-=quotes[i-period]["_temps "+sd.name].b;sC-=quotes[i-period]["_temps "+sd.name].c;sB2-=quotes[i-period]["_temps "+sd.name].b2;sC2-=quotes[i-period]["_temps "+sd.name].c2;sBC-=quotes[i-period]["_temps "+sd.name].bc;var vb=sB2/period-Math.pow(sB/period,2);var vc=sC2/period-Math.pow(sC/period,2);var cv=sBC/period-sB*sC/Math.pow(period,2);var cc=cv/Math.sqrt(vb*vc);quotes[i]["Result "+thisCompare+" "+sd.name]=cc;}iters++;}}};CIQ.Studies.prettify=CIQ.extend({"2-exponential":"dema","3-exponential":"tema","hull":"hma"},CIQ.Studies.prettify);CIQ.extend(CIQ.Studies.movingAverage,{conversions:{"hma":"hull","dema":"2-exponential","tema":"3-exponential"},translations:{"hull":"Hull","2-exponential":"Double Exponential","3-exponential":"Triple Exponential"},typeMap:{"hma":"Hull","hull":"Hull","dema":"DoubleExponential","2-exponential":"DoubleExponential","tema":"TripleExponential","3-exponential":"TripleExponential"}});CIQ.Studies.calculateMovingAverageHull=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
CIQ.Studies.MA("wma",sd.days,field,0,"_WMA1",stx,sd);CIQ.Studies.MA("wma",Math.ceil(sd.days/2),field,0,"_WMA2",stx,sd);var i,val;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(val||val===0)break;}for(i++;i<quotes.length;i++){var quote=quotes[i];quote["_MMA "+sd.name]=2*quote["_WMA2 "+sd.name]-quote["_WMA1 "+sd.name];}var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var hmaDays=Math.floor(Math.sqrt(sd.days));CIQ.Studies.MA("wma",hmaDays,"_MMA "+sd.name,offset,"_HMA",stx,sd);var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}for(i=Math.max(sd.days+hmaDays-1,sd.startFrom);i<quotes.length;i++){quotes[i][name]=quotes[i]["_HMA "+sd.name];}};CIQ.Studies.calculateMovingAverageDoubleExponential=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
CIQ.Studies.MA("ema",sd.days,field,0,"_EMA1",stx,sd);CIQ.Studies.MA("ema",sd.days,"_EMA1 "+sd.name,0,"_EMA2",stx,sd);var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;continue;}break;}var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}for(i++;i<quotes.length;i++){if(i<2*(sd.days-1))continue;var quote=quotes[i];if(quotes[i+offset])quotes[i+offset][name]=2*quote["_EMA1 "+sd.name]-quote["_EMA2 "+sd.name];}};CIQ.Studies.calculateMovingAverageTripleExponential=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";// Handle when the default inputs are passed in
CIQ.Studies.MA("ema",sd.days,field,0,"_EMA1",stx,sd);CIQ.Studies.MA("ema",sd.days,"_EMA1 "+sd.name,0,"_EMA2",stx,sd);CIQ.Studies.MA("ema",sd.days,"_EMA2 "+sd.name,0,"_EMA3",stx,sd);var offset=parseInt(sd.inputs.Offset,10);if(isNaN(offset))offset=0;var i,val;var offsetBack=offset;for(i=sd.startFrom-1;i>=0;i--){val=quotes[i][field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(!val&&val!==0)continue;if(offsetBack>0){offsetBack--;continue;}break;}var name=sd.name;for(var p in sd.outputs){name=p+" "+name;}for(i++;i<quotes.length;i++){if(i<3*(sd.days-1))continue;var quote=quotes[i];if(quotes[i+offset])quotes[i+offset][name]=3*quote["_EMA1 "+sd.name]-3*quote["_EMA2 "+sd.name]+quote["_EMA3 "+sd.name];}};CIQ.Studies.calculateATRBands=function(stx,sd){CIQ.Studies.calculateStudyATR(stx,sd);var field=sd.inputs.Field;if(!field||field=="field")field="Close";CIQ.Studies.calculateGenericEnvelope(stx,sd,sd.inputs.Shift,field,"ATR "+sd.name);};CIQ.Studies.calculateSTARCBands=function(stx,sd){CIQ.Studies.calculateStudyATR(stx,sd);CIQ.Studies.MA("simple",sd.inputs["MA Period"],"Close",0,"_MA",stx,sd);CIQ.Studies.calculateGenericEnvelope(stx,sd,sd.inputs.Multiplier,"_MA "+sd.name,"ATR "+sd.name);};CIQ.Studies.calculateATRStops=function(stx,sd){var quotes=sd.chart.scrubbed;if(!quotes)return;CIQ.Studies.calculateStudyATR(stx,sd);var useHighLow=sd.inputs.HighLow;for(var i=Math.max(sd.startFrom-1,1);i<quotes.length-1;i++){var prices=quotes[i];var pd=quotes[i-1];var prev=prices["Buy Stops "+sd.name];if(!prev)prev=prices["Sell Stops "+sd.name];if(!prev)prev=0;if(!prices||!pd)continue;var base=prices.Close;var result=base;var offset=prices["ATR "+sd.name]*sd.inputs.Multiplier;if(prices.Close>prev&&pd.Close>prev){if(useHighLow)base=prices.High;result=Math.max(prev,base-offset);}else if(prices.Close<=prev&&pd.Close<=prev){if(useHighLow)base=prices.Low;result=Math.min(prev,base+offset);}else if(prices.Close>prev){if(useHighLow)base=prices.High;result=base-offset;}else if(prices.Close<=prev){if(useHighLow)base=prices.Low;result=base+offset;}if(base<=result){quotes[i+1]["Buy Stops "+sd.name]=result;delete quotes[i+1]["Sell Stops "+sd.name];}else if(base>result){quotes[i+1]["Sell Stops "+sd.name]=result;delete quotes[i+1]["Buy Stops "+sd.name];}quotes[i+1]["All Stops "+sd.name]=result;sd.referenceOutput="All Stops";//so PSAR2 can draw a square wave
}};CIQ.Studies.calculateAwesomeOscillator=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<33){sd.error=true;return;}CIQ.Studies.MA("simple",5,"hl/2",0,"_MA5",stx,sd);CIQ.Studies.MA("simple",34,"hl/2",0,"_MA34",stx,sd);for(var i=Math.max(sd.startFrom,33);i<quotes.length;i++){if(!quotes[i])continue;quotes[i][sd.name+"_hist"]=quotes[i]["_MA5 "+sd.name]-quotes[i]["_MA34 "+sd.name];}};CIQ.Studies.calculateRelativeVolatility=function(stx,sd){sd.days=Number(sd.inputs["Smoothing Period"]);var smoothing=Number(sd.inputs["STD Period"]);var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+smoothing){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";function computeRVI(avgGain,avgLoss){if(avgGain+avgLoss===0)return 100;return 100*avgGain/(avgGain+avgLoss);}sd.std=new CIQ.Studies.StudyDescriptor(sd.name,"sdev",sd.panel);sd.std.chart=sd.chart;sd.std.days=smoothing;sd.std.startFrom=sd.startFrom;sd.std.inputs={"Field":field,"Standard Deviations":1,"Type":"ma"};sd.std.outputs={"STD":null};CIQ.Studies.calculateStandardDeviation(stx,sd.std);var avgGain=0;var avgLoss=0;if(sd.startFrom>1){avgGain=quotes[sd.startFrom-1]["_avgG "+sd.name];avgLoss=quotes[sd.startFrom-1]["_avgL "+sd.name];}for(var i=Math.max(sd.startFrom,sd.days);i<quotes.length;i++){var quote=quotes[i];if(quote[field]>quotes[i-1][field]){avgGain=(avgGain*(sd.days-1)+quote["STD "+sd.name])/sd.days;avgLoss=avgLoss*(sd.days-1)/sd.days;}else{avgLoss=(avgLoss*(sd.days-1)+quote["STD "+sd.name])/sd.days;avgGain=avgGain*(sd.days-1)/sd.days;}quote["Rel Vol "+sd.name]=computeRVI(avgGain,avgLoss);quote["_avgG "+sd.name]=avgGain;quote["_avgL "+sd.name]=avgLoss;}sd.zoneOutput="Rel Vol";};CIQ.Studies.calculatePMO=function(stx,sd){var periods={Smooth:Number(sd.inputs["Smoothing Period"])-1,Double:Number(sd.inputs["Double Smoothing Period"])-1,Signal:Number(sd.inputs["Signal Period"])};var quotes=sd.chart.scrubbed;if(quotes.length<periods.Smooth+periods.Double){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var i;for(i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;if(!quotes[i-1])continue;var denom=quotes[i-1][field];if(denom){quotes[i]["_ROCx10 "+sd.name]=1000*(quotes[i][field]/denom-1);}}CIQ.Studies.MA("exponential",periods.Smooth,"_ROCx10 "+sd.name,0,"_EMAx10",stx,sd);CIQ.Studies.MA("exponential",periods.Double,"_EMAx10 "+sd.name,0,"PMO",stx,sd);CIQ.Studies.MA("exponential",periods.Signal,"PMO "+sd.name,0,"PMOSignal",stx,sd);sd.zoneOutput="PMO";};CIQ.Studies.calculateElderImpulse=function(stx,sd){var quotes=sd.chart.scrubbed;var bull=sd.outputs.Bullish;var bear=sd.outputs.Bearish;var neutral=sd.outputs.Neutral;CIQ.Studies.MA("exponential",13,"Close",0,"_MA",stx,sd);sd.macd=new CIQ.Studies.StudyDescriptor("_"+sd.name,"macd",sd.panel);sd.macd.chart=sd.chart;sd.macd.days=sd.days;sd.macd.startFrom=sd.startFrom;sd.macd.inputs={"Fast MA Period":12,"Slow MA Period":26,"Signal Period":9};sd.macd.outputs={"_MACD":null,"_Signal":null};CIQ.Studies.calculateMACD(stx,sd.macd);var color;for(var i=sd.startFrom;i<quotes.length;i++){if(i===0)color=neutral;else if(quotes[i]["_MA "+sd.name]>quotes[i-1]["_MA "+sd.name]&&quotes[i]["_"+sd.name+"_hist"]>quotes[i-1]["_"+sd.name+"_hist"])color=bull;else if(quotes[i]["_MA "+sd.name]<quotes[i-1]["_MA "+sd.name]&&quotes[i]["_"+sd.name+"_hist"]<quotes[i-1]["_"+sd.name+"_hist"])color=bear;else color=neutral;quotes[i]["Result "+sd.name]=color;//if(i) quotes[i-1][sd.name+"_hist"]=null;
}};CIQ.Studies.calculatePivotPoints=function(stx,sd){var quotes=sd.chart.scrubbed;var period="day";if(stx.layout.interval=="day")period="month";else if(CIQ.ChartEngine.isDailyInterval(stx.layout.interval))period="year";else if(stx.layout.interval=="second"||stx.layout.interval=="millisecond"||stx.layout.timeUnit=="second"||stx.layout.timeUnit=="millisecond")period="15min";else{var interval=stx.layout.periodicity;if(stx.layout.interval!="minute"){interval*=stx.layout.interval;}if(interval>=30)period="week";}var isForex=CIQ.Market.Symbology.isForexSymbol(stx.chart.symbol);var isMetal=CIQ.Market.Symbology.isForexMetal(stx.chart.symbol);var marketOffset=null;function getMarketOffset(localQuoteDate){var marketZone=isForex?"America/New_York":stx.chart.market.market_tz;var dt=new Date(localQuoteDate.getTime()+localQuoteDate.getTimezoneOffset()*60000);if(!marketZone||marketZone.indexOf("UTC")==-1)dt=CIQ.convertTimeZone(dt,"UTC",marketZone);return new Date(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds()).getTime()-localQuoteDate.getTime();}var pointers={pivotPoint:NaN,high:0,low:0,prevHigh:0,prevLow:0,hlSpread:0};if(sd.startFrom>1){pointers=CIQ.clone(quotes[sd.startFrom-1]["_pointers "+sd.name]);}function resetPivots(){pointers.pivotPoint=(pointers.high+pointers.low+quotes[i-1].Close)/3;pointers.prevHigh=pointers.high;pointers.prevLow=pointers.low;pointers.hlSpread=pointers.high-pointers.low;pointers.high=pointers.low=0;}for(var i=Math.max(1,sd.startFrom);i<quotes.length;i++){if(!quotes[i-1])continue;pointers.high=Math.max(pointers.high,quotes[i-1].High);pointers.low=Math.min(pointers.low>0?pointers.low:quotes[i-1].Low,quotes[i-1].Low);if(sd.inputs.Continuous)resetPivots();else if(period=="year"&&quotes[i].DT.getYear()!=quotes[i-1].DT.getYear()){//new yearly period
resetPivots();}else if(period=="month"&&quotes[i].DT.getMonth()!=quotes[i-1].DT.getMonth()){//new monthly period
resetPivots();}else if(period=="week"&&quotes[i].DT.getDay()<quotes[i-1].DT.getDay()){//new weekly period
resetPivots();}else if(period=="day"){if(marketOffset===null){//possible new daily period
marketOffset=getMarketOffset(quotes[i].DT);// Forex beginning of day is 17:00 NY Time, so add 7 hours of msecs (6 for metals) to make it fall on a date boundary
if(isForex)marketOffset+=(isMetal?6:7)*60*60*1000;}var newDate=new Date(new Date(+quotes[i].DT).setMilliseconds(quotes[i].DT.getMilliseconds()+marketOffset));var oldDate=new Date(new Date(+quotes[i-1].DT).setMilliseconds(quotes[i-1].DT.getMilliseconds()+marketOffset));if(oldDate.getDate()!==newDate.getDate()&&oldDate.getDay()!==0&&stx.chart.market.isMarketDate(newDate)){//new daily period
marketOffset=null;resetPivots();}}else if(period=="15min"&&(quotes[i].DT.getHours()!=quotes[i-1].DT.getHours()||Math.floor(quotes[i].DT.getMinutes()/15)!=Math.floor(quotes[i-1].DT.getMinutes()/15))){//new 15 minute period
resetPivots();}quotes[i]["Pivot "+sd.name]=pointers.pivotPoint;if(sd.inputs.Type.toLowerCase()=="fibonacci"){quotes[i]["Resistance 1 "+sd.name]=pointers.pivotPoint+0.382*pointers.hlSpread;quotes[i]["Resistance 2 "+sd.name]=pointers.pivotPoint+0.618*pointers.hlSpread;quotes[i]["Resistance 3 "+sd.name]=pointers.pivotPoint+pointers.hlSpread;quotes[i]["Support 1 "+sd.name]=pointers.pivotPoint-0.382*pointers.hlSpread;quotes[i]["Support 2 "+sd.name]=pointers.pivotPoint-0.618*pointers.hlSpread;quotes[i]["Support 3 "+sd.name]=pointers.pivotPoint-pointers.hlSpread;}else{quotes[i]["Resistance 1 "+sd.name]=2*pointers.pivotPoint-pointers.prevLow;quotes[i]["Resistance 2 "+sd.name]=pointers.pivotPoint+pointers.hlSpread;quotes[i]["Resistance 3 "+sd.name]=pointers.prevHigh+2*(pointers.pivotPoint-pointers.prevLow);quotes[i]["Support 1 "+sd.name]=2*pointers.pivotPoint-pointers.prevHigh;quotes[i]["Support 2 "+sd.name]=pointers.pivotPoint-pointers.hlSpread;quotes[i]["Support 3 "+sd.name]=pointers.prevLow-2*(pointers.prevHigh-pointers.pivotPoint);}quotes[i]["_pointers "+sd.name]=CIQ.clone(pointers);}};CIQ.Studies.calculateVWAP=function(stx,sd){var quotes=sd.chart.scrubbed;if(CIQ.ChartEngine.isDailyInterval(stx.layout.interval)){sd.error="VWAP is Intraday Only";return;}var isForex=CIQ.Market.Symbology.isForexSymbol(stx.chart.symbol);var isMetal=CIQ.Market.Symbology.isForexMetal(stx.chart.symbol);var marketOffset=null;var volume=0;var volume_price=0;var hasThereBeenVolume=false;function getMarketOffset(localQuoteDate){var marketZone=isForex?"America/New_York":stx.chart.market.market_tz;var dt=new Date(localQuoteDate.getTime()+localQuoteDate.getTimezoneOffset()*60000);if(!marketZone||marketZone.indexOf("UTC")==-1)dt=CIQ.convertTimeZone(dt,"UTC",marketZone);return new Date(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds()).getTime()-localQuoteDate.getTime();}if(sd.startFrom>1){volume=quotes[sd.startFrom-1]["_V "+sd.name];volume_price=quotes[sd.startFrom-1]["_VxP "+sd.name];}for(var i=sd.startFrom;i<quotes.length;i++){if(marketOffset===null){//possible new daily period
marketOffset=getMarketOffset(quotes[i].DT);//Forex beginning of day is 17:00 NY Time, so add 7 hours of msecs (6 for metals) to make it fall on a date boundary
if(isForex)marketOffset+=(isMetal?6:7)*60*60*1000;}if(quotes[i-1]&&quotes[i-1].DT){var newDate=new Date(new Date(+quotes[i].DT).setMilliseconds(quotes[i].DT.getMilliseconds()+marketOffset));var oldDate=new Date(new Date(+quotes[i-1].DT).setMilliseconds(quotes[i-1].DT.getMilliseconds()+marketOffset));if(oldDate.getDate()!=newDate.getDate()&&stx.chart.market.isMarketDate(newDate)){//new daily period
marketOffset=null;volume=volume_price=0;}}var typicalPrice=quotes[i]["hlc/3"];volume+=quotes[i].Volume;volume_price+=quotes[i].Volume*typicalPrice;if(!volume)continue;quotes[i]["VWAP "+sd.name]=volume_price/volume;quotes[i]["_V "+sd.name]=volume;quotes[i]["_VxP "+sd.name]=volume_price;hasThereBeenVolume=true;}if(!hasThereBeenVolume){sd.error="VWAP Requires Volume";}};/**
	 * Calculates Anchored VWAP study
	 *
	 * @param {CIQ.ChartEngine} stx A chart engine instance
	 * @param {studyDescriptor} sd A study descriptor
	 * @memberof CIQ.Studies
	 * @private
	 * @since 6.2.0
	 */CIQ.Studies.calculateAnchoredVWAP=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field"){field=sd.inputs.Field="hlc/3";stx.changeOccurred("layout");}var volume=0;var volume_price=0;if(sd.startFrom>1){volume=quotes[sd.startFrom-1]["_V "+sd.name];volume_price=quotes[sd.startFrom-1]["_VxP "+sd.name];}var anchorDate=sd.inputs["Anchor Date"];if(anchorDate.search(/^\d{8}$/))anchorDate=CIQ.yyyymmdd(quotes[0].DT);else{var anchorTime=sd.inputs["Anchor Time"];if(!anchorTime.search(/^\d{6}$/)){anchorDate+=anchorTime;}}anchorDate=CIQ.strToDateTime(anchorDate.replace(/\D/g,""));if(!sd.startFrom&&anchorDate>=quotes[0].DT)sd.startFrom=stx.tickFromDate(anchorDate,stx.chart,null,true);for(var i=sd.startFrom;i<quotes.length;i++){var price=quotes[i][field];var thisVolume=quotes[i].Volume||1;volume+=thisVolume;volume_price+=thisVolume*price;quotes[i]["VWAP "+sd.name]=volume_price/volume;quotes[i]["_V "+sd.name]=volume;quotes[i]["_VxP "+sd.name]=volume_price;}};CIQ.Studies.calculateMFI=function(stx,sd){var quotes=sd.chart.scrubbed;var hist,high=0;var factor=sd.inputs["Scale Factor"];if(!factor)factor=sd.study.inputs["Scale Factor"];var scale=Math.pow(10,Number(factor));if(sd.startFrom>1)high=quotes[sd.startFrom-1]["_high "+sd.name];var i;for(i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;if(quotes[i].Volume){quotes[i][sd.name+"_hist"]=hist=scale*(quotes[i].High-quotes[i].Low)/quotes[i].Volume;quotes[i]["_high "+sd.name]=high=Math.max(high,hist);}}};CIQ.Studies.calculateAlligator=function(stx,sd){var periods={J:Number(sd.inputs["Jaw Period"]),T:Number(sd.inputs["Teeth Period"]),L:Number(sd.inputs["Lips Period"])};var quotes=sd.chart.scrubbed;if(quotes.length<Math.max(periods.J,periods.T,periods.L)+1){sd.error=true;return;}CIQ.Studies.MA("welles wilder",periods.J,"hl/2",sd.inputs["Jaw Offset"],"Jaw",stx,sd);CIQ.Studies.MA("welles wilder",periods.T,"hl/2",sd.inputs["Teeth Offset"],"Teeth",stx,sd);CIQ.Studies.MA("welles wilder",periods.L,"hl/2",sd.inputs["Lips Offset"],"Lips",stx,sd);for(var i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;if(sd.type=="Gator"){quotes[i][sd.name+"_hist1"]=Math.abs(quotes[i]["Jaw "+sd.name]-quotes[i]["Teeth "+sd.name]);quotes[i][sd.name+"_hist2"]=-Math.abs(quotes[i]["Teeth "+sd.name]-quotes[i]["Lips "+sd.name]);}if(sd.inputs["Show Fractals"]){if(!quotes[i-2]||!quotes[i-1]||!quotes[i]||!quotes[i+1]||!quotes[i+2])continue;if(quotes[i-2].High&&quotes[i-1].High&&quotes[i].High&&quotes[i+1].High&&quotes[i+2].High){if(quotes[i].High>quotes[i-1].High&&quotes[i].High>quotes[i-2].High&&quotes[i].High>quotes[i+1].High&&quotes[i].High>quotes[i+2].High){quotes[i]["Fractal High "+sd.name]=1;}}if(quotes[i-2].Low&&quotes[i-1].Low&&quotes[i].Low&&quotes[i+1].Low&&quotes[i+2].Low){if(quotes[i].Low<quotes[i-1].Low&&quotes[i].Low<quotes[i-2].Low&&quotes[i].Low<quotes[i+1].Low&&quotes[i].Low<quotes[i+2].Low){quotes[i]["Fractal Low "+sd.name]=1;}}}}};CIQ.Studies.calculateRelativeVigor=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var i;for(i=sd.startFrom;i<quotes.length;i++){quotes[i]["_Change "+sd.name]=quotes[i].Close-quotes[i].Open;quotes[i]["_Range "+sd.name]=quotes[i].High-quotes[i].Low;}CIQ.Studies.MA("triangular",4,"_Change "+sd.name,0,"_Numer",stx,sd);CIQ.Studies.MA("triangular",4,"_Range "+sd.name,0,"_Denom",stx,sd);var nums=[];var dens=[];for(i=Math.max(sd.startFrom-sd.days,0);i<quotes.length;i++){nums.push(quotes[i]["_Numer "+sd.name]);dens.push(quotes[i]["_Denom "+sd.name]);if(nums.length>sd.days){nums.shift();dens.shift();}var sumNum=0;var sumDen=0;var it;for(it=0;it<nums.length;it++){sumNum+=nums[it];}for(it=0;it<dens.length;it++){sumDen+=dens[it];}if(sumDen===0)sumDen=0.00000001;if(i<sd.startFrom)continue;quotes[i]["Rel Vig "+sd.name]=sumNum/sumDen;}CIQ.Studies.MA("triangular",4,"Rel Vig "+sd.name,0,"RelVigSignal",stx,sd);for(i=sd.startFrom;i<quotes.length;i++){quotes[i][sd.name+"_hist"]=quotes[i]["Rel Vig "+sd.name]-quotes[i]["RelVigSignal "+sd.name];}};CIQ.Studies.calculateUlcerIndex=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<2*sd.days-1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";function getHV(p,x,f){var h=null;for(var j=x-p+1;j<=x;j++){if(j<0)continue;h=h===null?quotes[j][f]:Math.max(h,quotes[j][f]);}return h;}var i;for(i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){quotes[i]["_PD2 "+sd.name]=Math.pow(100*(quotes[i][field]/getHV(sd.days,i,field)-1),2);}CIQ.Studies.MA("simple",sd.days,"_PD2 "+sd.name,0,"_MA",stx,sd);for(i=Math.max(sd.startFrom,2*(sd.days-1));i<quotes.length;i++){quotes[i]["Result "+sd.name]=Math.sqrt(quotes[i]["_MA "+sd.name]);}};CIQ.Studies.calculateChoppiness=function(stx,sd){CIQ.Studies.calculateStudyATR(stx,sd);var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}function getLLVHHV(p,x){var h=Number.MAX_VALUE*-1,l=Number.MAX_VALUE;for(var j=x-p+1;j<=x;j++){if(j<0)continue;h=Math.max(h,quotes[j].High);l=Math.min(l,quotes[j].Low);}return[l,h];}for(var i=Math.max(sd.startFrom,sd.days);i<quotes.length;i++){if(!quotes[i])continue;var lh=getLLVHHV(sd.days,i);if(quotes[i]["Sum True Range "+sd.name]){quotes[i]["Result "+sd.name]=100*Math.log(quotes[i]["Sum True Range "+sd.name]/Math.max(0.000001,lh[1]-lh[0]))/Math.log(sd.days);}else{quotes[i]["Result "+sd.name]=0;}}};CIQ.Studies.calculateDisparity=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,field,0,"_MA",stx,sd);for(var i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){if(!quotes[i])continue;quotes[i]["Result "+sd.name]=100*(quotes[i][field]/quotes[i]["_MA "+sd.name]-1);}};CIQ.Studies.calculateRainbow=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";function getLLVHHV(p,x){var h=Number.MAX_VALUE*-1,l=Number.MAX_VALUE;for(var j=x-p+1;j<=x;j++){if(j<0)continue;h=Math.max(h,quotes[j].Close);l=Math.min(l,quotes[j].Close);}return[l,h];}var f=field;for(var j=1;j<=10;j++){CIQ.Studies.MA("simple",sd.days,f,0,"SMA"+j,stx,sd);f="SMA"+j+" "+sd.name;}for(var i=Math.max(sd.startFrom,10);i<quotes.length;i++){if(!quotes[i])continue;var accum=0,max=Number.MAX_VALUE*-1,min=Number.MAX_VALUE;for(j=1;j<=10;j++){var q=quotes[i]["SMA"+j+" "+sd.name];accum+=q;max=Math.max(max,q);min=Math.min(min,q);}if(sd.name.indexOf("Osc")>-1){var lh=getLLVHHV(sd.inputs["HHV/LLV Lookback"],i);quotes[i][sd.name+"_hist"]=100*(quotes[i][field]-accum/10)/Math.max(0.000001,lh[1]-lh[0]);quotes[i]["Over "+sd.name]=100*(max-min)/Math.max(0.000001,lh[1]-lh[0]);quotes[i]["Under "+sd.name]=-quotes[i]["Over "+sd.name];quotes[i]["Zero "+sd.name]=0;}}if(sd.name.indexOf("Osc")>-1){sd.outputMap["Over "+sd.name]=sd.outputMap["Under "+sd.name]=sd.outputMap["Zero "+sd.name]=null;}};CIQ.Studies.calculateKST=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";var roc={},smp={};roc[1]=Number(sd.inputs["Lightest Rate of Change Period"]);roc[2]=Number(sd.inputs["Light Rate of Change Period"]);roc[3]=Number(sd.inputs["Heavy Rate of Change Period"]);roc[4]=Number(sd.inputs["Heaviest Rate of Change Period"]);smp[1]=Number(sd.inputs["Lightest SMA Period"]);smp[2]=Number(sd.inputs["Light SMA Period"]);smp[3]=Number(sd.inputs["Heavy SMA Period"]);smp[4]=Number(sd.inputs["Heaviest SMA Period"]);var sp=Number(sd.inputs["Signal Period"]);var i,j;for(i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;for(j=1;j<=4;j++){if(i>=roc[j]&&quotes[i-roc[j]]&&quotes[i-roc[j]][field])quotes[i]["_ROC"+j+" "+sd.name]=100*(quotes[i][field]/quotes[i-roc[j]][field]-1);}}for(j=1;j<=4;j++){CIQ.Studies.MA("simple",smp[j],"_ROC"+j+" "+sd.name,0,"_SMA"+j,stx,sd);}for(i=sd.startFrom;i<quotes.length;i++){quotes[i]["KST "+sd.name]=0;for(j=1;j<=4;j++){quotes[i]["KST "+sd.name]+=j*quotes[i]["_SMA"+j+" "+sd.name];}}CIQ.Studies.MA("simple",sp,"KST "+sd.name,0,"KSTSignal",stx,sd);};CIQ.Studies.calculateSpecialK=function(stx,sd){var quotes=sd.chart.scrubbed;var field=sd.inputs.Field;if(!field||field=="field")field="Close";var span=sd.inputs.Interval;if(!span)span="daily";var roc={daily:[10,15,20,30,50,65,75,100,195,265,390,530],weekly:[4,5,6,8,10,13,15,20,39,52,78,104]};var map={daily:[10,10,10,15,50,65,75,100,130,130,130,195],weekly:[4,5,6,8,10,13,15,20,26,26,26,39]};var i,j;for(i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;for(j=0;j<roc[span].length;j++){if(i>=roc[span][j]&&quotes[i-roc[span][j]]&&quotes[i-roc[span][j]][field])quotes[i]["_ROC"+j+" "+sd.name]=100*(quotes[i][field]/quotes[i-roc[span][j]][field]-1);}}for(j=0;j<map[span].length;j++){CIQ.Studies.MA(span=="daily"?"simple":"exponential",map[span][j],"_ROC"+j+" "+sd.name,0,"_MA"+j,stx,sd);}for(i=sd.startFrom;i<quotes.length;i++){quotes[i]["Result "+sd.name]=0;for(j=0;j<map[span].length;j++){quotes[i]["Result "+sd.name]+=(j%4+1)*quotes[i]["_MA"+j+" "+sd.name];}}};CIQ.Studies.calculateDarvas=function(stx,sd){var quotes=sd.chart.scrubbed;var allTimeHigh=0;var allTimeHighPeriods=parseInt(sd.inputs["ATH Lookback Period"],10);if(sd.inputs["Volume Spike"]){CIQ.Studies.MA("simple",allTimeHighPeriods,"Volume",0,"ADV",stx,sd);}var spikePercentage=parseFloat(sd.inputs["Volume % of Avg"])/100;var boxState="none";var boxData={};var ghost=null;var buy=null,sell=null;var offset=parseFloat(sd.inputs["Level Offset"]);var debug=false;if(debug)console.log("*****************");var i;var lbl={};//labels
["Darvas","Ghost","Profit","Loss","ATH","ADV","Spike"].forEach(function(v){lbl[v]=v+" "+sd.name;});for(i=sd.startFrom-1;i>0;i--){var q=quotes[i];if(q[lbl.Darvas]||q[lbl.Ghost]){for(var l in lbl){q[l]=null;}}else{allTimeHigh=q[lbl.ATH]||0;buy=q[lbl.Profit];sell=q[lbl.Loss];break;}}for(i;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(parseFloat(sd.inputs["Price Minimum"])<=quotes[allTimeHigh].Close){if(ghost&&(!ghost.End||i==ghost.End+1)){if(quotes[i-1].Close>boxData.High){boxData={State:1,High:2*boxData.High-boxData.Low,Low:boxData.High,Start:i,End:2*boxData.End-boxData.Start+1};}else{ghost=null;//boxData={State:1,High:boxData.High,Low:boxData.Low,Start:i,End:2*boxData.End-boxData.Start+1};
}if(ghost){quote[lbl.Ghost]=CIQ.clone(boxData);if(debug)console.log("Ghost begin:"+quote.DT);boxData.State=0;if(quotes[boxData.End]){quotes[boxData.End][lbl.Ghost]=CIQ.clone(boxData);if(debug)console.log("Ghost end:"+quotes[boxData.End].DT);}ghost={Start:boxData.Start,End:boxData.End};buy=boxData.High+offset;if(!sell||sell<boxData.Low-offset){sell=boxData.Low-offset;}}}quote[lbl.Profit]=buy;quote[lbl.Loss]=sell;if(quote.Close>=buy)buy=null;else if(sd.inputs["Exit Field"]=="high/low"&&quote.High>=buy)buy=null;if(boxState=="none"){if(i==allTimeHigh+3){if(!quotes[allTimeHigh+2][lbl.Darvas]&&!quotes[allTimeHigh+1][lbl.Darvas]&&!quotes[allTimeHigh][lbl.Darvas]&&quotes[allTimeHigh].High>quote.High){boxState="high";//if(sell) buy=Math.max(buy,quotes[allTimeHigh].High+offset);
}}}if(boxState=="high"){if(quote.High>quotes[allTimeHigh].High){boxState="none";}else if(quotes[i-3].Low<quotes[i-2].Low&&quotes[i-3].Low<quotes[i-1].Low&&quotes[i-3].Low<quote.Low){boxData={State:1,High:quotes[allTimeHigh].High,Low:quotes[i-3].Low,Start:allTimeHigh};quotes[allTimeHigh][lbl.Darvas]=CIQ.clone(boxData);boxState="darvas";if(debug)console.log("Darvas begin:"+quotes[allTimeHigh].DT);if(debug)console.log("Darvas established:"+quote.DT);if(ghost){if(ghost.End>i&&quotes[ghost.Start]){quote[lbl.Ghost]=CIQ.clone(quotes[ghost.Start][lbl.Ghost]);quote[lbl.Ghost].End=i;if(quotes[ghost.End]){delete quotes[ghost.End][lbl.Ghost];if(debug)console.log("Ghost End removed:"+quotes[ghost.End].DT);}}quote[lbl.Ghost].State=0;quotes[ghost.Start][lbl.Ghost].End=i;if(debug)console.log("Ghost end:"+quote.DT);ghost=null;}buy=boxData.High+offset;if(!sell||sell<boxData.Low-offset){sell=boxData.Low-offset;}}}if(boxState=="darvas"){if(quote.Close>boxData.High)ghost={};else if(sd.inputs["Exit Field"]=="high/low"&&quote.High>boxData.High)ghost={};else if(quote.Close<boxData.Low)boxState="none";else if(sd.inputs["Exit Field"]=="high/low"&&quote.Low<boxData.Low)boxState="none";if(ghost)boxState="none";else if(boxState=="none"){buy=null;sell=null;}if(!sd.inputs["Ghost Boxes"])ghost=null;if(boxState=="none"){for(var d=boxData.Start+1;d<i;d++){quotes[d][lbl.Darvas]=CIQ.clone(boxData);}boxData.State=0;boxData.End=i;quote[lbl.Darvas]=CIQ.clone(boxData);if(debug)console.log("Darvas end:"+quote.DT);quote[lbl.ATH]=allTimeHigh;continue;}}if(sell){if(quote.Close<boxData.Low||sd.inputs["Exit Field"]=="high/low"&&quote.Low<boxData.Low){if(boxState=="darvas")boxState="none";if(quote.Close<sell||sd.inputs["Exit Field"]=="high/low"&&quote.Low<sell){buy=null;sell=null;}if(ghost){if(ghost.End>i&&quotes[ghost.Start]){quote[lbl.Ghost]=CIQ.clone(quotes[ghost.Start][lbl.Ghost]);quote[lbl.Ghost].End=i;if(quotes[ghost.End]){delete quotes[ghost.End][lbl.Ghost];if(debug)console.log("Ghost End removed:"+quotes[ghost.End].DT);}}quote[lbl.Ghost].State=0;quotes[ghost.Start][lbl.Ghost].End=i;if(debug)console.log("Ghost end:"+quote.DT);ghost=null;}}}}if(quote.High>=quotes[allTimeHigh].High){allTimeHigh=i;if(debug)console.log("All Time High:"+quote.DT);}if(i<3||quote.High>=quotes[i-1].High&&quote.High>=quotes[i-2].High&&quote.High>=quotes[i-3].High){if(i-allTimeHigh>=allTimeHighPeriods){allTimeHigh=i;for(var j=0;j<allTimeHighPeriods;j++){if(i-j<0)break;if(quotes[i-j].High>quotes[allTimeHigh].High){allTimeHigh=i-j;}}if(debug)console.log("All Time High:"+quote.DT);}}if(sd.inputs["Volume Spike"]&&i>allTimeHighPeriods&&i==allTimeHigh){if(quote[lbl.ADV]*spikePercentage<quote.Volume){quote[lbl.Spike]=1;if(debug)console.log("Volume Spike:"+quote.DT);}}quote[lbl.ATH]=allTimeHigh;}};CIQ.Studies.calculateSupertrend=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}CIQ.Studies.calculateStudyATR(stx,sd);for(var i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;var median=(quote.High+quote.Low)/2;var factoredATR=sd.inputs.Multiplier*quote["ATR "+sd.name];var uptrend=median-factoredATR;var downtrend=median+factoredATR;if(i){if(quotes[i-1]&&quotes[i-1].Close&&quotes[i-1].Close>quotes[i-1]["_Uptrend "+sd.name]&&quotes[i-1]["_Uptrend "+sd.name]>uptrend)uptrend=quotes[i-1]["_Uptrend "+sd.name];if(quotes[i-1]&&quotes[i-1].Close&&quotes[i-1].Close<quotes[i-1]["_Downtrend "+sd.name]&&quotes[i-1]["_Downtrend "+sd.name]<downtrend)downtrend=quotes[i-1]["_Downtrend "+sd.name];}quote["_Direction "+sd.name]=1;if(i){quote["_Direction "+sd.name]=quotes[i-1]["_Direction "+sd.name];if(quote.Close>quotes[i-1]["_Downtrend "+sd.name])quote["_Direction "+sd.name]=1;else if(quote.Close<quotes[i-1]["_Uptrend "+sd.name])quote["_Direction "+sd.name]=-1;}quote["_Uptrend "+sd.name]=uptrend;quote["_Downtrend "+sd.name]=downtrend;quote["Trend "+sd.name]=quote["_Direction "+sd.name]>0?uptrend:downtrend;if(!i)continue;}sd.outputMap={};sd.outputMap["Trend "+sd.name]="Trend";};/**
	 * Ensures that symbols required by a study are loaded and maintained by the quotefeed.
	 * @param  {CIQ.ChartEngine} stx  The chart engine
	 * @param  {object} sd   The study descriptor
	 * @param  {array} syms An array of 'symbol strings' or 'symbol objects' required by the study. If using symbol objets, in addition to our desired identifier elements, you must `always` include the `symbol` element in it (ie: `symbolObject[i]={ symbol : mySymbol , otherStuff1 : xx , moreStuff : yy}`.
	 * @param {object} [params] Parameters to be sent to addSeries. See {@link CIQ.ChartEngine#addSeries}.
	 * @memberOf CIQ.Studies
	 * @version ChartIQ Advanced Package
	 * @since  3.0.7 This was a previously private function.
	 */CIQ.Studies.fetchAdditionalInstruments=function(stx,sd,syms,params){if(!stx.quoteDriver){console.log('CIQ.Studies.fetchAdditionalInstruments: No quotefeed to fetch symbol');return;}// sd.chart may not be initialized, so we find it the hard way
var chart=stx.panels[sd.panel].chart;// We'll remember which symbols we have set so that we can delete them later
sd.symbols=syms;var i,symbol,symbolObject;// Add entries for the symbols we need. If those symbols already exist, add the study name as a dependency
function addSeriesCB(){stx.createDataSet();stx.draw();}for(i=0;i<syms.length;i++){symbol=symbolObject=syms[i];if(_typeof(symbolObject)=="object"){symbol=symbolObject.symbol;}else{symbolObject={symbol:symbol};}var parameters={symbol:symbol,symbolObject:symbolObject,bucket:"study",studyName:sd.name,chartName:chart.name,action:"add-study"};CIQ.extend(parameters,params);var loadData=parameters.loadData;if(stx.currentlyImporting)parameters.loadData=false;// do not load data if importing as periodicity will not be correct; instead let loadDependents load data
if(!sd.series)sd.series={};sd.series[symbol]=stx.addSeries(null,parameters,addSeriesCB);sd.series[symbol].parameters.loadData=loadData;}};/**
	 * Initializes data for Price Relative Study by fetching the comparing symbol.
	 *
	 * @param {CIQ.ChartEngine} stx	The chart object
	 * @param {string} type Study type
	 * @param {object} inputs Study inputs
	 * @param {object} outputs Study outputs
	 * @param {object} parameters Study parameters
	 * @param {string} panel ID of the study's panel element
	 * @return {studyDescriptor} Study descriptor object
	 * @memberOf CIQ.Studies
	 * @version ChartIQ Advanced Package
	 * @since 09-2016-19
	 */CIQ.Studies.initPriceRelative=function(stx,type,inputs,outputs,parameters,panel){var sd=CIQ.Studies.initializeFN(stx,type,inputs,outputs,parameters,panel);var syms=[sd.inputs["Comparison Symbol"].toUpperCase()];CIQ.Studies.fetchAdditionalInstruments(stx,sd,syms);return sd;};/**
	 * Calculates data for Price Relative Study
	 *
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {object} sd	The study descriptor object
	 * @memberOf CIQ.Studies
	 * @version ChartIQ Advanced Package
	 */CIQ.Studies.calculatePriceRelative=function(stx,sd){var quotes=sd.chart.scrubbed;var cSym=sd.inputs["Comparison Symbol"].toUpperCase();if(!cSym)cSym=sd.study.inputs["Comparison Symbol"];var map={};var mainSymbol=stx.chart.symbol||"";mainSymbol=mainSymbol.replace(/[=+\-*\\%]/g,"");map[mainSymbol]=quotes.slice(sd.startFrom);if(!map[mainSymbol].length)return;if(mainSymbol!=cSym)map[cSym]=null;var results=CIQ.computeEquationChart("["+mainSymbol+"]/["+cSym+"]",map);var rIter=0;for(var i=sd.startFrom;i<quotes.length&&rIter<results.length;i++){while(rIter<results.length&&quotes[i].DT.getTime()>results[rIter].DT.getTime()){rIter++;}if(quotes[i].DT.getTime()<results[rIter].DT.getTime())continue;quotes[i]["Result "+sd.name]=results[rIter].Close;rIter++;}};CIQ.Studies.calculatePerformance=function(stx,sd){var quotes=sd.chart.scrubbed;var cSym=sd.inputs["Comparison Symbol"].toUpperCase();if(!cSym)cSym=sd.study.inputs["Comparison Symbol"];if(!sd.days)sd.days=sd.study.inputs.Period;if(quotes.length<sd.days+1){sd.error=true;return;}CIQ.Studies.MA("ma",sd.days,"Close",0,"_MA Base",stx,sd);CIQ.Studies.MA("ma",sd.days,cSym,0,"_MA Comp",stx,sd);for(var i=sd.startFrom;i<quotes.length;i++){var cSymQ=quotes[i][cSym];if(cSymQ&&(cSymQ.Close||cSymQ.Close===0))cSymQ=cSymQ.Close;quotes[i]["Result "+sd.name]=quotes[i].Close/cSymQ*(quotes[i]["_MA Comp "+sd.name]/quotes[i]["_MA Base "+sd.name]);}};CIQ.Studies.calculateBeta=function(stx,sd){var quotes=sd.chart.scrubbed;var cSym=sd.inputs["Comparison Symbol"].toUpperCase();if(!cSym)cSym=sd.study.inputs["Comparison Symbol"];if(!sd.days)sd.days=sd.study.inputs.Period;if(quotes.length<sd.days+1){sd.error=true;return;}for(var i=Math.max(sd.startFrom,1);i<quotes.length;i++){quotes[i]["_BaseChange "+sd.name]=quotes[i].Close/quotes[i-1].Close-1;var cSymQ=quotes[i][cSym];if(cSymQ&&(cSymQ.Close||cSymQ.Close===0))cSymQ=cSymQ.Close;var cSymQ1=quotes[i-1][cSym];if(cSymQ1&&(cSymQ1.Close||cSymQ1.Close===0))cSymQ1=cSymQ1.Close;quotes[i]["_CompChange "+sd.name]=cSymQ/cSymQ1-1;}CIQ.Studies.MA("ma",sd.days,"_BaseChange "+sd.name,0,"_MA Base",stx,sd);CIQ.Studies.MA("ma",sd.days,"_CompChange "+sd.name,0,"_MA Comp",stx,sd);for(i=Math.max(sd.startFrom,sd.days);i<quotes.length;i++){quotes[i]["_COVARn "+sd.name]=(quotes[i]["_BaseChange "+sd.name]-quotes[i]["_MA Base "+sd.name])*(quotes[i]["_CompChange "+sd.name]-quotes[i]["_MA Comp "+sd.name]);quotes[i]["_VARn "+sd.name]=Math.pow(quotes[i]["_CompChange "+sd.name]-quotes[i]["_MA Comp "+sd.name],2);}CIQ.Studies.MA("ma",sd.days,"_COVARn "+sd.name,0,"_COVAR",stx,sd);CIQ.Studies.MA("ma",sd.days,"_VARn "+sd.name,0,"_VAR",stx,sd);for(i=Math.max(sd.startFrom,sd.days*2-1);i<quotes.length;i++){quotes[i]["Result "+sd.name]=quotes[i]["_COVAR "+sd.name]/quotes[i]["_VAR "+sd.name];}};CIQ.Studies.calculateVortex=function(stx,sd){var quotes=sd.chart.scrubbed;var period=sd.days;if(quotes.length<period+1){sd.error=true;return;}var total={tr:0,vmPlus:0,vmMinus:0};if(sd.startFrom>1){total=CIQ.clone(quotes[sd.startFrom-1]["_totals "+sd.name]);}for(var i=Math.max(sd.startFrom,1);i<quotes.length;i++){var prices=quotes[i];var pd=quotes[i-1];var vmPlus=Math.abs(prices.High-pd.Low);var vmMinus=Math.abs(prices.Low-pd.High);var trueRange=Math.max(prices.High,pd.Close)-Math.min(prices.Low,pd.Close);total.tr+=trueRange;total.vmPlus+=vmPlus;total.vmMinus+=vmMinus;if(i>period){total.tr-=quotes[i-period]["_True Range "+sd.name];total.vmPlus-=quotes[i-period]["_VMPlus "+sd.name];total.vmMinus-=quotes[i-period]["_VMMinus "+sd.name];}prices["_True Range "+sd.name]=trueRange;prices["_VMPlus "+sd.name]=vmPlus;prices["_VMMinus "+sd.name]=vmMinus;if(i>=period){prices["+VI "+sd.name]=total.vmPlus/total.tr;prices["-VI "+sd.name]=total.vmMinus/total.tr;}prices["_totals "+sd.name]=CIQ.clone(total);}};CIQ.Studies.calculateBalanceOfPower=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}for(var i=sd.startFrom;i<quotes.length;i++){var quote=quotes[i];quote["_Ratio "+sd.name]=quote.Close-quote.Open;if(quote.High-quote.Low!==0)// avoid division by zero
quote["_Ratio "+sd.name]/=quote.High-quote.Low;}CIQ.Studies.MA(sd.inputs["Moving Average Type"],sd.days,"_Ratio "+sd.name,0,"Result",stx,sd);};CIQ.Studies.calculateTrendIntensity=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";function computeTII(gain,loss){if(Math.abs(loss)<0.00000001)return 100;return 100-100/(1+gain/loss);}CIQ.Studies.MA("ma",sd.days,field,0,"_SMA",stx,sd);var gain=0,loss=0,i,change,queue=[],maxLength=Math.ceil(sd.days/2);for(i=Math.max(0,sd.startFrom-maxLength);i<quotes.length;i++){if(!quotes[i]["_SMA "+sd.name]&&quotes[i]["_SMA "+sd.name]!==0)continue;change=quotes[i][field]-quotes[i]["_SMA "+sd.name];if(change<0)loss+=change*-1;else gain+=change;queue.push(change);if(queue.length>maxLength){change=queue.shift();if(change<0)loss-=change*-1;else gain-=change;}if(i<sd.startFrom)continue;quotes[i]["TII "+sd.name]=computeTII(gain,loss);}CIQ.Studies.MA("ema",sd.inputs["Signal Period"],"TII "+sd.name,0,"Signal",stx,sd);sd.zoneOutput="TII";};// Note: this study expects createDataSet to be called when changing the chart type!
CIQ.Studies.calculateZigZag=function(stx,sd){var quotes=sd.chart.scrubbed;if(!quotes||!quotes.length)return;var highLowChart=sd.highLowChart;function fillBetweenPoints(start,end){for(var i=start+1;i<end;i++){quotes[i]["ShadowResult "+sd.name]=(quotes[end]["Result "+sd.name]-quotes[start]["Result "+sd.name])*(i-start)/(end-start)+quotes[start]["Result "+sd.name];delete quotes[i]["Result "+sd.name];}}var ll=null,hh=null;var distance=sd.inputs["Distance(%)"];var direction=0;var bar=0;var previousBar=0;var zig=null,zag=null;var start=0;for(var b=Math.min(quotes.length-1,sd.startFrom);b>=0;b--){start=b;if(quotes[b]["_state "+sd.name]){var state=quotes[b]["_state "+sd.name];//[ll,hh,direction,bar,previousBar,zig,zag]
ll=state[0];hh=state[1];direction=state[2];bar=state[3];previousBar=state[4];zig=state[5];zag=state[6];break;}}for(var i=start;i<quotes.length;i++){var thisHigh=quotes[i][highLowChart?"High":"Close"];var thisLow=quotes[i][highLowChart?"Low":"Close"];if(hh===null||hh<thisHigh){hh=thisHigh;if(direction<0)ll=thisLow;zig=(1-distance/100)*hh;if(direction>-1){if(zag!==null&&hh>zag){quotes[bar]["Result "+sd.name]=quotes[bar][highLowChart?"Low":"Close"];fillBetweenPoints(previousBar,bar);direction=-1;ll=thisLow;previousBar=bar;bar=i;continue;}}else{bar=i;}}if(ll===null||ll>thisLow){ll=thisLow;if(direction>0)hh=thisHigh;zag=(1+distance/100)*ll;if(direction<1){if(zig!==null&&ll<zig){quotes[bar]["Result "+sd.name]=quotes[bar][highLowChart?"High":"Close"];fillBetweenPoints(previousBar,bar);direction=1;hh=thisHigh;previousBar=bar;bar=i;continue;}}else{bar=i;}}}quotes[bar]["Result "+sd.name]=quotes[bar][highLowChart?direction==1?"Low":"High":"Close"];quotes[bar]["_state "+sd.name]=[ll,hh,direction,bar,previousBar,zig,zag];fillBetweenPoints(previousBar,bar);quotes[quotes.length-1]["Result "+sd.name]=quotes[quotes.length-1][highLowChart?direction==1?"High":"Low":"Close"];fillBetweenPoints(bar,quotes.length-1);};CIQ.Studies.calculatePsychologicalLine=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var array=[];var increment=100/sd.days;var accum=0;for(var i=Math.max(sd.startFrom-sd.days,1);i<quotes.length;i++){var up=Number(quotes[i].Close>quotes[i-1].Close);if(up)accum+=increment;array.push(up);if(array.length>sd.days)accum-=array.shift()*increment;if(i<sd.startFrom)continue;quotes[i]["Result "+sd.name]=accum;}};CIQ.Studies.calculateMADev=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var field=sd.inputs.Field;if(!field||field=="field")field="Close";var pts=sd.inputs["Points Or Percent"];if(!pts)pts="Points";var maType=sd.inputs["Moving Average Type"];if(!maType)maType="exponential";CIQ.Studies.MA(maType,sd.days,field,0,"_MA",stx,sd);var histogram=sd.name+"_hist";for(var i=Math.max(sd.startFrom,sd.days-1);i<quotes.length;i++){var quote=quotes[i];var val=quote[field];if(val&&_typeof(val)=="object")val=val[sd.subField];if(pts=="Points")quote[histogram]=val-quote["_MA "+sd.name];else quote[histogram]=100*(val/quote["_MA "+sd.name]-1);}};CIQ.Studies.calculateShinohara=function(stx,sd){var quotes=sd.chart.scrubbed;if(quotes.length<sd.days+1){sd.error=true;return;}var accums={weakNum:0,weakDen:0,strongNum:0,strongDen:0};if(sd.startFrom>1){accums=CIQ.clone(quotes[sd.startFrom-1]["_accums "+sd.name]);}for(var i=sd.startFrom;i<quotes.length;i++){accums.weakNum+=quotes[i].High-quotes[i].Close;accums.weakDen+=quotes[i].Close-quotes[i].Low;if(i>0){accums.strongNum+=quotes[i].High-quotes[i-1].Close;accums.strongDen+=quotes[i-1].Close-quotes[i].Low;}if(i>=sd.days){accums.weakNum-=quotes[i-sd.days].High-quotes[i-sd.days].Close;accums.weakDen-=quotes[i-sd.days].Close-quotes[i-sd.days].Low;quotes[i]["Weak Ratio "+sd.name]=100*accums.weakNum/accums.weakDen;if(i>sd.days){accums.strongNum-=quotes[i-sd.days].High-quotes[i-sd.days-1].Close;accums.strongDen-=quotes[i-sd.days-1].Close-quotes[i-sd.days].Low;quotes[i]["Strong Ratio "+sd.name]=100*accums.strongNum/accums.strongDen;}}quotes[i]["_accums "+sd.name]=CIQ.clone(accums);}};CIQ.Studies.calculateIchimoku=function(stx,sd){var quotes=sd.chart.scrubbed;var periods={Base:Number(sd.inputs["Base Line Period"]),Conv:Number(sd.inputs["Conversion Line Period"]),LeadB:Number(sd.inputs["Leading Span B Period"]),Lag:Number(sd.inputs["Lagging Span Period"])};function getLLVHHV(p,x){var l=Number.MAX_VALUE,h=Number.MAX_VALUE*-1;for(var j=x-p+1;j<=x;j++){if(j<0)continue;l=Math.min(l,quotes[j].Low);h=Math.max(h,quotes[j].High);}return[l,h];}var i,hl;for(i=sd.startFrom;i<quotes.length;i++){if(!quotes[i])continue;hl=getLLVHHV(periods.Conv,i);quotes[i]["Conversion Line "+sd.name]=(hl[1]+hl[0])/2;hl=getLLVHHV(periods.Base,i);quotes[i]["Base Line "+sd.name]=(hl[1]+hl[0])/2;if(i<periods.Lag)continue;quotes[i-periods.Lag]["Lagging Span "+sd.name]=quotes[i].Close;}sd.futureA=[];sd.futureB=[];for(i=Math.max(0,sd.startFrom-periods.Base);i<quotes.length;i++){hl=getLLVHHV(periods.LeadB,i);var lsa=(quotes[i]["Conversion Line "+sd.name]+quotes[i]["Base Line "+sd.name])/2;var lsb=(hl[1]+hl[0])/2;if(quotes[i+periods.Base]){quotes[i+periods.Base]["Leading Span A "+sd.name]=lsa;quotes[i+periods.Base]["Leading Span B "+sd.name]=lsb;}else{sd.futureA.push(lsa);sd.futureB.push(lsb);}}sd.chart.whiteSpaceFutureTicks=Math.max(sd.chart.whiteSpaceFutureTicks,sd.futureA.length-1);};CIQ.Studies.displayIchimoku=function(stx,sd,quotes){var topBand="Leading Span A "+sd.name,bottomBand="Leading Span B "+sd.name;var topColor=CIQ.Studies.determineColor(sd.outputs[sd.outputMap[topBand]]);var bottomColor=CIQ.Studies.determineColor(sd.outputs[sd.outputMap[bottomBand]]);var yAxis=stx.getYAxisByName(sd.panel,sd.name);var parameters={topBand:topBand,bottomBand:bottomBand,topColor:topColor,bottomColor:bottomColor,skipTransform:stx.panels[sd.panel].name!=sd.chart.name,topAxis:yAxis,bottomAxis:yAxis};CIQ.fillIntersecting(stx,sd.panel,parameters);function fillFutureCloud(points,isUp){var fParams={color:isUp===false?bottomColor:isUp?topColor:"transparent",opacity:0.3,panelName:sd.panel,yAxis:yAxis};CIQ.fillArea(stx,points,fParams);stx.endClip();}var panel=stx.panels[sd.panel];var xInit=stx.pixelFromBar(quotes.length-1,panel.chart)+1;var ayInit=stx.pixelFromPrice(quotes[quotes.length-1][topBand],panel,yAxis);var byInit=stx.pixelFromPrice(quotes[quotes.length-1][bottomBand],panel,yAxis);var cloud=[[xInit,byInit],[xInit,ayInit]],isUpCloud=null;var futureA=sd.futureA,futureB=sd.futureB;if(sd.chart.dataSegment.length>=sd.chart.scroll){for(var i=0;futureA&&i<futureA.length-1;i++){if(futureA[i]===null||isNaN(futureA[i])||futureB[i]===null||isNaN(futureB[i]))continue;var x1=stx.pixelFromBar(quotes.length+i,panel.chart)+1;var x2=stx.pixelFromBar(quotes.length+i+1,panel.chart)+1;var ay1=stx.pixelFromPrice(futureA[i],panel,yAxis);var ay2=stx.pixelFromPrice(futureA[i+1],panel,yAxis);var by1=stx.pixelFromPrice(futureB[i],panel,yAxis);var by2=stx.pixelFromPrice(futureB[i+1],panel,yAxis);cloud.push([x1,ay1]);cloud.unshift([x1,by1]);isUpCloud=ay1<by1;if(isUpCloud&&ay2>by2||!isUpCloud&&ay2<by2){var interX=CIQ.intersectLineLineX(x1,x2,ay1,ay2,x1,x2,by1,by2);var interY=CIQ.intersectLineLineY(x1,x2,ay1,ay2,x1,x2,by1,by2);cloud.push([interX,interY]);fillFutureCloud(cloud,isUpCloud);cloud=[[interX,interY]];isUpCloud=null;}}if(cloud.length>2)fillFutureCloud(cloud,isUpCloud);}CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);};// NOTE: Darvas will only display on the chart panel sharing the yAxis.
CIQ.Studies.displayDarvas=function(stx,sd,quotes){var levelsColor=CIQ.Studies.determineColor(sd.outputs.Levels);if(!levelsColor||levelsColor=="auto"||CIQ.isTransparent(levelsColor))levelsColor=stx.defaultColor;var darvasColor=CIQ.Studies.determineColor(sd.outputs.Darvas);if(!darvasColor||darvasColor=="auto"||CIQ.isTransparent(darvasColor))darvasColor=stx.defaultColor;var ghostColor=CIQ.Studies.determineColor(sd.outputs.Ghost);if(!ghostColor||ghostColor=="auto"||CIQ.isTransparent(ghostColor))ghostColor=stx.defaultColor;var panel=stx.panels[sd.panel];var i,q;var slyh1,slyl1;var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;stx.startClip(sd.panel);if(sd.inputs["Stop Levels"]){if(stx.chart.context.setLineDash){stx.chart.context.setLineDash([2,2]);}stx.chart.context.lineWidth=2;stx.chart.context.strokeStyle=levelsColor;/*  Don't display the take profit levels
			stx.chart.context.beginPath();
			for(i=0;i<quotes.length;i++){
				q=quotes[i];
				q1=quotes[i-1];
				if(!q) continue;
				slyh1=q["Profit "+sd.name]?Math.floor(stx.pixelFromPrice(q["Profit "+sd.name], panel)):null;
				var slyh0=q1 && q1["Profit "+sd.name]?Math.floor(stx.pixelFromPrice(q1["Profit "+sd.name], panel)):null;
				if(slyh1){
					if(q.candleWidth) myWidth=Math.floor(Math.max(1,q.candleWidth));
					var slxh1=Math.floor(stx.pixelFromBar(i, panel.chart)+myWidth/2);
					var slxh0=Math.floor(stx.pixelFromBar(i, panel.chart)-myWidth/2);
					if(slyh0) stx.chart.context.lineTo(slxh0,slyh1);
					else if(i===0) stx.chart.context.moveTo(stx.chart.left,slyh1);
					else stx.chart.context.moveTo(slxh0,slyh1);
					stx.chart.context.lineTo(slxh1,slyh1);
				}
			}
			stx.chart.context.stroke();
			*/stx.chart.context.beginPath();for(i=0;i<quotes.length;i++){q=quotes[i];var q1=quotes[i-1];if(!q)continue;slyl1=q["Loss "+sd.name]?Math.floor(stx.pixelFromPrice(q["Loss "+sd.name],panel)):null;var slyl0=q1&&q1["Loss "+sd.name]?Math.floor(stx.pixelFromPrice(q1["Loss "+sd.name],panel)):null;if(slyl1){if(q.candleWidth)myWidth=Math.floor(Math.max(1,q.candleWidth));var slxl1=Math.floor(stx.pixelFromBar(i,panel.chart)+myWidth/2);var slxl0=Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2);if(slyl0&&slyl0>=slyl1)stx.chart.context.lineTo(slxl0,slyl1);else if(i===0)stx.chart.context.moveTo(stx.chart.left,slyl1);else stx.chart.context.moveTo(slxl0,slyl1);stx.chart.context.lineTo(slxl1,slyl1);}}stx.chart.context.stroke();if(stx.chart.context.setLineDash){stx.chart.context.setLineDash([]);}stx.chart.context.lineWidth=1;}var dx=-10,dy,dw=0,dh,gx=-10,gy,gw=0,gh;var inDarvas=false,inGhost=false;var signalWidth=stx.chart.context.measureText("\u25B2").width/2;for(i=0;i<quotes.length;i++){if(!quotes[i])continue;if(quotes[i]["Spike "+sd.name]){stx.chart.context.fillStyle=darvasColor;stx.chart.context.textBaseline="bottom";var y=stx.pixelFromPrice(quotes[i].High,stx.chart.panel);stx.chart.context.fillText("\u25BC",stx.pixelFromBar(i)-signalWidth,y-5);// down arrow
}if(quotes[i].candleWidth)myWidth=Math.floor(Math.max(1,quotes[i].candleWidth));if(quotes[i]["Darvas "+sd.name]){q=quotes[i]["Darvas "+sd.name];if(q.State==1&&!inDarvas){dx=Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2);dy=Math.floor(stx.pixelFromPrice(q.High,panel));dh=Math.floor(stx.pixelFromPrice(q.Low,panel))-dy;inDarvas=true;}else if(q.State===0){dw=Math.floor(stx.pixelFromBar(i,panel.chart)+myWidth/2)-dx;dy=Math.floor(stx.pixelFromPrice(q.High,panel));dh=Math.floor(stx.pixelFromPrice(q.Low,panel))-dy;stx.chart.context.strokeStyle=darvasColor;stx.chart.context.fillStyle=darvasColor;if(!sd.inputs["Stop Levels"]){stx.chart.context.strokeRect(dx,dy,dw,dh);stx.chart.context.globalAlpha=0.2;}else{stx.chart.context.globalAlpha=0.3;}stx.chart.context.fillRect(dx,dy,dw,dh);stx.chart.context.globalAlpha=1;inDarvas=false;}}if(quotes[i]["Ghost "+sd.name]&&sd.inputs["Ghost Boxes"]){q=quotes[i]["Ghost "+sd.name];if(q.State==1&&!inGhost){gx=Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2);gy=Math.floor(stx.pixelFromPrice(q.High,panel));gw=Math.floor((q.End-q.Start+1)*stx.layout.candleWidth+myWidth/2);gh=Math.floor(stx.pixelFromPrice(q.Low,panel))-gy;inGhost=true;}else if(q.State===0){if(q.Start==q.End)gx=Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2);gw=Math.floor(stx.pixelFromBar(i,panel.chart)+myWidth/2)-gx;gy=Math.floor(stx.pixelFromPrice(q.High,panel));gh=Math.floor(stx.pixelFromPrice(q.Low,panel))-gy;stx.chart.context.strokeStyle=ghostColor;stx.chart.context.fillStyle=ghostColor;if(!sd.inputs["Stop Levels"]){stx.chart.context.strokeRect(gx,gy,gw,gh);stx.chart.context.globalAlpha=0.2;}else{stx.chart.context.globalAlpha=0.3;}stx.chart.context.fillRect(gx,gy,gw,gh);stx.chart.context.globalAlpha=1;inGhost=false;}}}if(inDarvas){dw=Math.floor(stx.pixelFromBar(i,panel.chart)+myWidth/2)-dx;stx.chart.context.strokeStyle=darvasColor;stx.chart.context.fillStyle=darvasColor;if(!sd.inputs["Stop Levels"]){stx.chart.context.beginPath();stx.chart.context.moveTo(dx+2*dw,dy);stx.chart.context.lineTo(dx,dy);stx.chart.context.lineTo(dx,dy+dh);stx.chart.context.lineTo(dx+2*dw,dy+dh);stx.chart.context.stroke();stx.chart.context.globalAlpha=0.2;}else{stx.chart.context.globalAlpha=0.3;}stx.chart.context.fillRect(dx,dy,2*dw,dh);stx.chart.context.globalAlpha=1;}if(inGhost){stx.chart.context.strokeStyle=ghostColor;stx.chart.context.fillStyle=ghostColor;if(!sd.inputs["Stop Levels"]){stx.chart.context.strokeRect(gx,gy,gw,gh);stx.chart.context.globalAlpha=0.2;}else{stx.chart.context.globalAlpha=0.3;}stx.chart.context.fillRect(gx,gy,gw,gh);stx.chart.context.globalAlpha=1;}if(inDarvas||inGhost){if(sd.inputs["Stop Levels"]){if(stx.chart.context.setLineDash){stx.chart.context.setLineDash([2,2]);}stx.chart.context.lineWidth=2;stx.chart.context.strokeStyle=levelsColor;var x=Math.floor(stx.pixelFromBar(i-1,panel.chart)+myWidth/2);if(slyh1){stx.chart.context.beginPath();stx.chart.context.moveTo(x,slyh1);stx.chart.context.lineTo(inDarvas?dx+2*dw:gx+gw,slyh1);stx.chart.context.stroke();}if(slyl1){stx.chart.context.beginPath();stx.chart.context.moveTo(x,slyl1);stx.chart.context.lineTo(inDarvas?dx+2*dw:gx+gw,slyl1);stx.chart.context.stroke();}if(stx.chart.context.setLineDash){stx.chart.context.setLineDash([]);}stx.chart.context.lineWidth=1;}inDarvas=false;inGhost=false;}stx.endClip();};CIQ.Studies.displaySupertrend=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);function colorFunction(stx,quote,mode){if(quote&&quote["_Direction "+sd.name]<0)return sd.outputs.Downtrend;return sd.outputs.Uptrend;}var params={skipTransform:panel.name!=sd.chart.name,skipProjections:true,label:stx.preferences.labels,yAxis:yAxis};var context=stx.chart.context;context.strokeStyle=colorFunction(stx,quotes[quotes.length-1]);context.lineWidth=2;if(sd.highlight)context.lineWidth=3;var trendName="Trend "+sd.name;for(var x=0;panel.chart.transformFunc&&yAxis!=panel.chart.yAxis&&x<quotes.length;x++){var q=quotes[x];if(q&&q.transform){q.transform[trendName]=panel.chart.transformFunc(stx,panel.chart,q[trendName]);}}stx.plotDataSegmentAsLine(trendName,panel,params,colorFunction);context.lineWidth=1;stx.startClip(sd.panel);var signalWidth=stx.chart.context.measureText("\u25B2").width/2;var i;for(i=0;i<quotes.length;i++){if(!quotes[i]||!quotes[i-1])continue;if(quotes[i-1]["_Direction "+sd.name]>quotes[i]["_Direction "+sd.name]){stx.chart.context.fillStyle=sd.outputs.Downtrend;stx.chart.context.textBaseline="bottom";var yh=stx.pixelFromPrice(quotes[i].High,panel,yAxis);for(var d=5;d<=45;d+=10){stx.chart.context.fillText("\u25BC",stx.pixelFromBar(i)-signalWidth,yh-d);}// down arrow
}else if(quotes[i-1]["_Direction "+sd.name]<quotes[i]["_Direction "+sd.name]){stx.chart.context.fillStyle=sd.outputs.Uptrend;stx.chart.context.textBaseline="top";var yl=stx.pixelFromPrice(quotes[i].Low,panel,yAxis);for(var u=5;u<=45;u+=10){stx.chart.context.fillText("\u25B2",stx.pixelFromBar(i)-signalWidth,yl+u);}// up arrow
}}stx.endClip();};CIQ.Studies.displayVsComparisonSymbol=function(stx,sd,quotes){var symbol=sd.inputs["Comparison Symbol"].toUpperCase();if(!stx.getSeries({symbol:symbol,chart:sd.chart}).length){stx.watermark(sd.panel,"center","bottom",stx.translateIf(sd.study.name)+": "+stx.translateIf("Not Available"));return;}var params={skipTransform:stx.panels[sd.panel].name!=sd.chart.name,panelName:sd.panel,band:"Result "+sd.name,threshold:sd.study.centerline,yAxis:stx.getYAxisByName(stx.panels[sd.panel],sd.name),gapDisplayStyle:true};for(var c=quotes.length-1;c>=0;c--){if(quotes[c]&&quotes[c][symbol]){CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);if(sd.study.centerline||sd.study.centerline===0){if(sd.outputs.Gain)CIQ.preparePeakValleyFill(stx,CIQ.extend(params,{direction:1,color:CIQ.Studies.determineColor(sd.outputs.Gain)}));if(sd.outputs.Loss)CIQ.preparePeakValleyFill(stx,CIQ.extend(params,{direction:-1,color:CIQ.Studies.determineColor(sd.outputs.Loss)}));}return;}}};CIQ.Studies.displayMFI=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name)||panel.yAxis;var y=yAxis.bottom;var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;var green=CIQ.Studies.determineColor(sd.outputs.Green);var fade=CIQ.Studies.determineColor(sd.outputs.Fade);var fake=CIQ.Studies.determineColor(sd.outputs.Fake);var squat=CIQ.Studies.determineColor(sd.outputs.Squat);stx.canvasColor("stx_histogram");if(!sd.underlay)stx.chart.context.globalAlpha=1;stx.chart.context.fillStyle="#CCCCCC";stx.startClip(sd.panel);for(var i=0;i<quotes.length;i++){var quote=quotes[i],quote_1=quotes[i-1];if(!quote_1)quote_1=stx.getPreviousBar(stx.chart,sd.name+"_hist",i);if(!quote)continue;if(!quote_1);else if(quote_1[sd.name+"_hist"]<quote[sd.name+"_hist"]){if(quote_1.Volume<quote.Volume)stx.chart.context.fillStyle=green;else if(quote_1.Volume>quote.Volume)stx.chart.context.fillStyle=fake;}else if(quote_1[sd.name+"_hist"]>quote[sd.name+"_hist"]){if(quote_1.Volume<quote.Volume)stx.chart.context.fillStyle=squat;else if(quote_1.Volume>quote.Volume)stx.chart.context.fillStyle=fade;}if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2),Math.floor(y),Math.floor(myWidth),Math.floor(stx.pixelFromPrice(quote[sd.name+"_hist"],panel,yAxis)-y));}stx.endClip();};CIQ.Studies.displayAwesomeOscillator=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var y=stx.pixelFromPrice(0,panel,yAxis);var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;var upColor=CIQ.Studies.determineColor(sd.outputs["Increasing Bar"]);var downColor=CIQ.Studies.determineColor(sd.outputs["Decreasing Bar"]);stx.canvasColor("stx_histogram");if(!sd.underlay)stx.chart.context.globalAlpha=1;stx.chart.context.fillStyle="#CCCCCC";stx.startClip(sd.panel);for(var i=0;i<quotes.length;i++){var quote=quotes[i],quote_1=quotes[i-1];if(!quote_1)quote_1=stx.getPreviousBar(stx.chart,sd.name+"_hist",i);if(!quote)continue;if(!quote_1);else if(quote_1[sd.name+"_hist"]<quote[sd.name+"_hist"])stx.chart.context.fillStyle=upColor;else if(quote_1[sd.name+"_hist"]>quote[sd.name+"_hist"])stx.chart.context.fillStyle=downColor;if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2),Math.floor(y),Math.floor(myWidth),Math.floor(stx.pixelFromPrice(quote[sd.name+"_hist"],panel,yAxis)-y));}stx.endClip();};CIQ.Studies.displayGator=function(stx,sd,quotes){var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);var y=stx.pixelFromPrice(0,panel,yAxis);var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;var upColor=CIQ.Studies.determineColor(sd.outputs["Increasing Bar"]);var downColor=CIQ.Studies.determineColor(sd.outputs["Decreasing Bar"]);stx.canvasColor("stx_histogram");if(!sd.underlay)stx.chart.context.globalAlpha=1;stx.chart.context.fillStyle="#CCCCCC";stx.startClip(sd.panel);for(var i=0;i<quotes.length;i++){var quote=quotes[i],quote_1=quotes[i-1];if(!quote)continue;for(var j=1;j<=2;j++){if(!quote_1)quote_1=stx.getPreviousBar(stx.chart,sd.name+"_hist"+j,i);if(!quote_1)stx.chart.context.fillStyle="#CCCCCC";else if(Math.abs(quote_1[sd.name+"_hist"+j])<Math.abs(quote[sd.name+"_hist"+j]))stx.chart.context.fillStyle=upColor;else if(Math.abs(quote_1[sd.name+"_hist"+j])>Math.abs(quote[sd.name+"_hist"+j]))stx.chart.context.fillStyle=downColor;if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2),Math.floor(y),Math.floor(myWidth),Math.floor(stx.pixelFromPrice(quote[sd.name+"_hist"+j],panel,yAxis)-y));}}stx.endClip();};CIQ.Studies.initElderImpulse=function(stx,type,inputs,outputs,parameters,panel){var sd=CIQ.Studies.initializeFN(stx,type,inputs,outputs,parameters,panel);if(parameters.calculateOnly)return sd;stx.chart.customChart={chartType:"colored_bar",colorFunction:function colorFunction(stx,quote,mode){var color=quote["Result "+sd.name];if(color&&_typeof(color)=="object")color=color.color;return color;}};stx.setMainSeriesRenderer();return sd;};CIQ.Studies.displayPivotPoints=function(stx,sd,quotes){sd.noSlopes=!sd.inputs.Continuous;CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);if(sd.inputs.Shading){var panel=stx.panels[sd.panel];var params={noSlopes:sd.noSlopes,opacity:sd.parameters.opacity?sd.parameters.opacity:0.2,skipTransform:panel.name!=sd.chart.name,yAxis:stx.getYAxisByName(panel,sd.name)};CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Resistance 3 "+sd.name,bottomBand:"Resistance 2 "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Resistance 3"])},params));CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Resistance 2 "+sd.name,bottomBand:"Resistance 1 "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Resistance 2"])},params));CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Resistance 1 "+sd.name,bottomBand:"Pivot "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Resistance 1"])},params));CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Support 1 "+sd.name,bottomBand:"Pivot "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Support 1"])},params));CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Support 2 "+sd.name,bottomBand:"Support 1 "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Support 2"])},params));CIQ.prepareChannelFill(stx,CIQ.extend({panelName:sd.panel,topBand:"Support 3 "+sd.name,bottomBand:"Support 2 "+sd.name,color:CIQ.Studies.determineColor(sd.outputs["Support 3"])},params));}};CIQ.Studies.displayAlligator=function(stx,sd,quotes){function drawFractal(highLow,index){//stx.canvasFont("???");
var y;if(highLow=="high"){stx.chart.context.fillStyle=stx.defaultColor;stx.chart.context.textBaseline="bottom";y=stx.pixelFromPrice(quotes[index].High,panel,yAxis);stx.chart.context.fillText("\u25B2",stx.pixelFromBar(i,stx.chart)-stx.chart.context.measureText("\u25B2").width/2+1,y-5);// up arrow
}else if(highLow=="low"){stx.chart.context.fillStyle=stx.defaultColor;stx.chart.context.textBaseline="top";y=stx.pixelFromPrice(quotes[index].Low,panel,yAxis);stx.chart.context.fillText("\u25BC",stx.pixelFromBar(i,stx.chart)-stx.chart.context.measureText("\u25BC").width/2+1,y+5);// down arrow
}}var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);if(sd.inputs["Show Fractals"]){stx.startClip(sd.panel);stx.chart.context.globalAlpha=sd.underlay?0.3:1;for(var i=2;i<quotes.length-2;i++){if(quotes[i]){if(quotes[i]["Fractal High "+sd.name])drawFractal("high",i);if(quotes[i]["Fractal Low "+sd.name])drawFractal("low",i);}}stx.endClip();}};CIQ.Studies.displayRainbowMA=function(stx,sd,quotes){var panel=stx.panels[sd.panel];//just need to display in reverse order from outputMap
for(var i=10;i>0;i--){CIQ.Studies.displayIndividualSeriesAsLine(stx,sd,panel,"SMA"+i+" "+sd.name,quotes);}};CIQ.Studies.displayRainbowOsc=function(stx,sd,quotes){CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);var panel=stx.panels[sd.panel];var yAxis=stx.getYAxisByName(panel,sd.name);stx.startClip(sd.panel);var y=stx.pixelFromPrice(0,panel,yAxis);var skipTransform=panel.name!=sd.chart.name;var upColor=CIQ.Studies.determineColor(sd.outputs["Positive Bar"]);stx.chart.context.strokeStyle=upColor;stx.plotDataSegmentAsLine("Over "+sd.name,panel,{skipTransform:skipTransform,label:false,yAxis:yAxis});var upgradient=stx.chart.context.createLinearGradient(0,y,0,panel.yAxis.top);upgradient.addColorStop(0,stx.containerColor);upgradient.addColorStop(1,upColor);CIQ.prepareChannelFill(stx,{skipTransform:skipTransform,"color":upgradient,"opacity":1,"panelName":sd.panel,"topBand":"Over "+sd.name,"bottomBand":"Zero "+sd.name,"yAxis":yAxis});var downColor=CIQ.Studies.determineColor(sd.outputs["Negative Bar"]);stx.chart.context.strokeStyle=downColor;stx.plotDataSegmentAsLine("Under "+sd.name,panel,{skipTransform:skipTransform,label:false,yAxis:yAxis});var dngradient=stx.chart.context.createLinearGradient(0,y,0,panel.yAxis.bottom);dngradient.addColorStop(0,stx.containerColor);dngradient.addColorStop(1,downColor);CIQ.prepareChannelFill(stx,{skipTransform:skipTransform,"color":dngradient,"opacity":1,"panelName":sd.panel,"topBand":"Zero "+sd.name,"bottomBand":"Under "+sd.name,"yAxis":yAxis});var myWidth=stx.layout.candleWidth-2;if(myWidth<2)myWidth=1;stx.canvasColor("stx_histogram");if(!sd.underlay)stx.chart.context.globalAlpha=1;stx.chart.context.fillStyle="#CCCCCC";for(var i=0;i<quotes.length;i++){var quote=quotes[i];if(!quote)continue;if(quote[sd.name+"_hist"]>0)stx.chart.context.fillStyle=upColor;else if(quote[sd.name+"_hist"]<0)stx.chart.context.fillStyle=downColor;if(quote.candleWidth)myWidth=Math.floor(Math.max(1,quote.candleWidth-2));stx.chart.context.fillRect(Math.floor(stx.pixelFromBar(i,panel.chart)-myWidth/2),Math.floor(y),Math.floor(myWidth),Math.floor(stx.pixelFromPrice(quote[sd.name+"_hist"],panel,yAxis)-y));}stx.endClip();};CIQ.Studies.displayZigZag=function(stx,sd,quotes){var highLowBars=stx.chart.highLowBars||stx.highLowBars[stx.layout.chartType];if(sd.highLowChart!=highLowBars){sd.highLowChart=highLowBars;sd.startFrom=0;sd.study.calculateFN(stx,sd);}var chart=stx.chart;for(var i=0;i<quotes.length;i++){var quote=quotes[i];if(quote){if(quote["_shadowCopy "+sd.name]){delete quote["Result "+sd.name];delete quote["_shadowCopy "+sd.name];}if(!quote["Result "+sd.name]){if(quote.transform)delete quote.transform["Result "+sd.name];}}}var q0=quotes[0],ql=quotes[quotes.length-1];if(q0&&q0["ShadowResult "+sd.name]){q0["Result "+sd.name]=q0["ShadowResult "+sd.name];if(q0.transform)q0.transform["Result "+sd.name]=chart.transformFunc(stx,chart,q0["ShadowResult "+sd.name]);q0["_shadowCopy "+sd.name]=1;}if(ql&&ql["ShadowResult "+sd.name]){ql["Result "+sd.name]=ql["ShadowResult "+sd.name];if(ql.transform)ql.transform["Result "+sd.name]=chart.transformFunc(stx,chart,ql["ShadowResult "+sd.name]);ql["_shadowCopy "+sd.name]=1;}CIQ.Studies.displaySeriesAsLine(stx,sd,quotes);};/**
	 * Creates a volume profile underlay for the chart. The underlay is always 25% of the width of the chart.
	 * The color is determined by the 'sd.outputs["Bars Color"]' parameter and opacity and border colors can be controlled with the class stx_volume_profile
	 * NOTE: Volume Profile will only display on the chart panel sharing the yAxis.
	 */CIQ.Studies.displayVolumeProfile=function(stx,sd,quotes){if(!stx||!stx.chart.dataSet)return;var chart=stx.chart;var numberBars=sd.parameters.numberOfBars;var widthPercentage=sd.parameters.widthPercentage;var displayBorder=sd.parameters.displayBorder;var displayVolume=sd.parameters.displayVolume;//set defaults
if(!numberBars||numberBars<0)numberBars=30;numberBars=Math.ceil(numberBars);if(!widthPercentage||widthPercentage<0)widthPercentage=0.25;if(displayBorder!==false)displayBorder=true;if(displayVolume!==true)displayVolume=false;//decide how many bars
var interval=(chart.highValue-chart.lowValue)/numberBars;if(interval===0)return;var priceVolArry=[];// set the boundaries for the bars -- add .1 to the loop to account for possible rounding errors.
for(var j=chart.lowValue;j<chart.highValue+0.1;j+=interval){priceVolArry.push([j,0]);}if(priceVolArry.length<2){// need at least 2 price data points to draw boxes
stx.watermark("chart","center","top",stx.translateIf("Not enough data to render the Volume Profile"));return;}var volumeMax=0;// this is the maximum volume after we group them by the bars we will draw
for(var i=0;i<quotes.length;i++){var prices=quotes[i];if(!prices)continue;var volume=prices.Volume;if(sd.panel==chart.name&&prices.transform)prices=prices.transform;var bottomRange=priceVolArry[0][0];var topRange=0;for(var x=1;x<priceVolArry.length;x++){topRange=priceVolArry[x][0];if(prices.Low>=bottomRange&&prices.Low<=topRange||prices.Low<bottomRange&&prices.High>topRange||prices.High>=bottomRange&&prices.High<=topRange){priceVolArry[x][1]+=volume;if(priceVolArry[x][1]>volumeMax)volumeMax=priceVolArry[x][1];}bottomRange=topRange;}}if(volumeMax===0){stx.watermark("chart","center","top",stx.translateIf("Not enough data to render the Volume Profile"));return;}stx.setStyle("stx_volume_profile","color",CIQ.Studies.determineColor(sd.outputs["Bars Color"]));var context=chart.context;var fontstyle="stx-float-date";stx.canvasFont(fontstyle,context);var txtHeight=stx.getCanvasFontSize(fontstyle);var panel=chart.panel;var chartBottom=panel.yAxis.bottom;var barBottom=Math.round(chart.width)-0.5;//bottom x coordinate for the bar  -- remember bars are sideways so the bottom is on the x axis
var barMaxHeight=chart.width*widthPercentage;// pixels for highest bar
var borderColor=stx.canvasStyle("stx_volume_profile").borderTopColor;var bordersOn=!CIQ.isTransparent(stx.canvasStyle("stx_volume_profile").borderTopColor)&&displayBorder;var self=stx;function drawBars(volumeProfileClass,borders){if(!borders)barBottom-=2;self.canvasColor(volumeProfileClass);if(CIQ.isIE8)context.globalAlpha=0.5;context.beginPath();var bottomRange=priceVolArry[0][0];var prevTop=barBottom;for(var i=1;i<priceVolArry.length;i++){if(priceVolArry[i][1]){var barTop=Math.round(barBottom-priceVolArry[i][1]*barMaxHeight/volumeMax)-0.5;var bottomRangePixel=Math.round(self.pixelFromTransformedValue(bottomRange,panel))+0.5;var topRangePixel=Math.round(self.pixelFromTransformedValue(priceVolArry[i][0],panel))+0.5;if(!borders){bottomRangePixel-=0.5;topRangePixel+=0.5;barTop+=0.5;}if(bottomRangePixel>chartBottom)bottomRangePixel=chartBottom;if(topRangePixel<chartBottom){context.moveTo(barBottom,bottomRangePixel);context.lineTo(barBottom,topRangePixel);context.lineTo(barTop,topRangePixel);context.lineTo(barTop,bottomRangePixel);if(borders){if(prevTop>barTop||i==1)context.lineTo(prevTop,bottomRangePixel);// draw down to the top of the previous bar, so that we don't overlap strokes
}else{context.lineTo(barBottom,bottomRangePixel);if(displayVolume){//write the volume on the bar **/
var txt=CIQ.condenseInt(priceVolArry[i][1]);var barHeight=bottomRangePixel-topRangePixel;if(txtHeight<=barHeight-2){var width;try{width=context.measureText(txt).width;}catch(e){width=0;}// Firefox doesn't like this in hidden iframe
context.textBaseline="top";var tmpcolor=context.fillStyle;context.fillStyle=borderColor;context.fillText(txt,barTop-width-3,topRangePixel+(barHeight/2-txtHeight/2));context.fillStyle=tmpcolor;}}}}prevTop=barTop;}else{prevTop=barBottom;// there will be a missing bar here so the border needs to once again go to the end
}bottomRange=priceVolArry[i][0];}if(!borders)context.fill();context.strokeStyle=borderColor;if(borders)context.stroke();context.closePath();}drawBars("stx_volume_profile",false);if(bordersOn){drawBars("stx_volume_profile",true);}context.globalAlpha=1;};CIQ.Studies.studyLibrary=CIQ.extend(CIQ.Studies.studyLibrary,{"val lines":{"name":"Valuation Lines","calculateFN":function calculateFN(){},"seriesFN":function seriesFN(stx,sd,quotes){CIQ.Studies.calculateValuationLines(stx,sd,quotes);CIQ.Studies.displayValuationLines(stx,sd);},"overlay":true,"yAxisFN":function yAxisFN(){},"inputs":{"Field":"field","Average Type":["mean","median","harmonic"],"Display Average":true,"Display 1 Standard Deviation (1\u03C3)":false,"Display 2 Standard Deviation (2\u03C3)":false,"Display 3 Standard Deviation (3\u03C3)":false},"outputs":{"Average":"#00afed","1 Standard Deviation (1\u03C3)":"#e1e1e1","2 Standard Deviation (2\u03C3)":"#85c99e","3 Standard Deviation (3\u03C3)":"#fff69e"}},"correl":{"name":"Correlation Coefficient","range":"-1 to 1","calculateFN":CIQ.Studies.calculateCorrelationCoefficient,"outputs":{}},"PMO":{"name":"Price Momentum Oscillator","calculateFN":CIQ.Studies.calculatePMO,"inputs":{"Field":"field","Smoothing Period":35,"Double Smoothing Period":20,"Signal Period":10},"outputs":{"PMO":"auto","PMOSignal":"#FF0000"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:2.5,studyOverBoughtColor:"auto",studyOverSoldValue:-2.5,studyOverSoldColor:"auto"}},"attributes":{studyOverBoughtValue:{"min":0,"step":"0.05"},studyOverSoldValue:{"max":0,"step":"0.05"}}},"Rel Vol":{"name":"Relative Volatility","range":"0 to 100","calculateFN":CIQ.Studies.calculateRelativeVolatility,"inputs":{"Field":"field","STD Period":10,"Smoothing Period":14},"outputs":{"Rel Vol":"auto"},"centerline":50,"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:70,studyOverBoughtColor:"auto",studyOverSoldValue:30,studyOverSoldColor:"auto"}}},"Awesome":{"name":"Awesome Oscillator","seriesFN":CIQ.Studies.displayAwesomeOscillator,"calculateFN":CIQ.Studies.calculateAwesomeOscillator,"inputs":{},"outputs":{"Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"}},"W MFI":{"name":"Market Facilitation Index","seriesFN":CIQ.Studies.displayMFI,"calculateFN":CIQ.Studies.calculateMFI,"yAxis":{"ground":true},"range":"0 to max","inputs":{"Scale Factor":6},"outputs":{"Green":"#8bc176","Fade":"#ab611f","Fake":"#5f7cb8","Squat":"#ffd0cf"}},"ATR Bands":{"name":"ATR Bands","overlay":true,"seriesFN":CIQ.Studies.displayChannel,"calculateFN":CIQ.Studies.calculateATRBands,"inputs":{"Period":5,"Field":"field","Shift":3,"Channel Fill":true},"outputs":{"ATR Bands Top":"auto","ATR Bands Bottom":"auto","ATR Bands Channel":"auto"},"attributes":{Shift:{min:0.1,step:0.1}}},"STARC Bands":{"name":"STARC Bands","overlay":true,"seriesFN":CIQ.Studies.displayChannel,"calculateFN":CIQ.Studies.calculateSTARCBands,"inputs":{"Period":15,"MA Period":5,"Multiplier":1.3,"Channel Fill":true},"outputs":{"STARC Bands Top":"auto","STARC Bands Median":"auto","STARC Bands Bottom":"auto"},"attributes":{Multiplier:{min:0.1,step:0.1}}},"ATR Trailing Stop":{"name":"ATR Trailing Stops","overlay":true,"seriesFN":CIQ.Studies.displayPSAR2,"calculateFN":CIQ.Studies.calculateATRStops,"inputs":{"Period":21,"Multiplier":3,"Plot Type":["points","squarewave"],"HighLow":false},"outputs":{"Buy Stops":"#FF0000","Sell Stops":"#00FF00"},"attributes":{Multiplier:{min:0.1,step:0.1}}},"Boll %b":{"name":"Bollinger %b","calculateFN":CIQ.Studies.calculateBollinger,"inputs":{"Period":20,"Field":"field","Standard Deviations":2,"Moving Average Type":"ma"},"outputs":{"%b":"auto"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:100,studyOverBoughtColor:"auto",studyOverSoldValue:0,studyOverSoldColor:"auto"}},"attributes":{"Standard Deviations":{min:0.1,step:0.1}}},"Boll BW":{"name":"Bollinger Bandwidth","calculateFN":CIQ.Studies.calculateBollinger,"inputs":{"Period":20,"Field":"field","Standard Deviations":2,"Moving Average Type":"ma"},"outputs":{"Bandwidth":"auto"},"attributes":{"Standard Deviations":{min:0.1,step:0.1}}},"Donchian Width":{"name":"Donchian Width","calculateFN":CIQ.Studies.calculateMaxHighMinLow,"inputs":{"High Period":20,"Low Period":20}},"Rel Vig":{"name":"Relative Vigor Index","seriesFN":CIQ.Studies.displayHistogramWithSeries,"calculateFN":CIQ.Studies.calculateRelativeVigor,"inputs":{"Period":10},"outputs":{"Rel Vig":"auto","RelVigSignal":"#FF0000","Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"}},"Elder Impulse":{"name":"Elder Impulse System","calculateFN":CIQ.Studies.calculateElderImpulse,"initializeFN":CIQ.Studies.initElderImpulse,"seriesFN":null,"customRemoval":true,"underlay":true,"inputs":{},"outputs":{"Bullish":"#8BC176","Bearish":"#DD3E39","Neutral":"#5F7CB8"},"removeFN":function removeFN(stx,sd){stx.chart.customChart=null;stx.setMainSeriesRenderer();}},"Pivot Points":{"name":"Pivot Points","overlay":true,"seriesFN":CIQ.Studies.displayPivotPoints,"calculateFN":CIQ.Studies.calculatePivotPoints,"inputs":{"Type":["standard","fibonacci"],"Continuous":false,"Shading":false},"outputs":{"Pivot":"auto","Resistance 1":"rgb(184,44,11)","Support 1":"rgb(105,145,88)","Resistance 2":"rgb(227,100,96)","Support 2":"rgb(179,217,135)","Resistance 3":"rgb(255,208,207)","Support 3":"rgb(211,232,174)"},"parameters":{"init":{opacity:0.2}}},"VWAP":{"name":"VWAP","overlay":true,"calculateFN":CIQ.Studies.calculateVWAP,"inputs":{},"outputs":{"VWAP":"#FF0000"}},"AVWAP":{"name":"Anchored VWAP","overlay":true,"calculateFN":CIQ.Studies.calculateAnchoredVWAP,"inputs":{"Field":"field","Anchor Date":"","Anchor Time":""},"outputs":{"VWAP":"#FF0000"},"attributes":{"Anchor Date":{placeholder:"yyyymmdd"},"Anchor Time":{placeholder:"hhmmss"}}},"Alligator":{"name":"Alligator","overlay":true,"seriesFN":CIQ.Studies.displayAlligator,"calculateFN":CIQ.Studies.calculateAlligator,"inputs":{"Jaw Period":13,"Jaw Offset":8,"Teeth Period":8,"Teeth Offset":5,"Lips Period":5,"Lips Offset":3,"Show Fractals":false},"outputs":{"Jaw":"#0000FF","Teeth":"#FF0000","Lips":"#00DD00"}},"Gator":{"name":"Gator Oscillator","seriesFN":CIQ.Studies.displayGator,"calculateFN":CIQ.Studies.calculateAlligator,"inputs":{"Jaw Period":13,"Jaw Offset":8,"Teeth Period":8,"Teeth Offset":5,"Lips Period":5,"Lips Offset":3},"outputs":{"Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"},"centerline":0},"Ichimoku Clouds":{"name":"Ichimoku Clouds","overlay":true,"calculateFN":CIQ.Studies.calculateIchimoku,"seriesFN":CIQ.Studies.displayIchimoku,"inputs":{"Conversion Line Period":9,"Base Line Period":26,"Leading Span B Period":52,"Lagging Span Period":26},"outputs":{"Conversion Line":"#0000FF","Base Line":"#FF0000","Leading Span A":"#00FF00","Leading Span B":"#FF0000","Lagging Span":"#808000"}},"P Rel":{"name":"Price Relative","initializeFN":CIQ.Studies.initPriceRelative,"seriesFN":CIQ.Studies.displayVsComparisonSymbol,"calculateFN":CIQ.Studies.calculatePriceRelative,"centerline":0,"inputs":{"Comparison Symbol":"SPY"},"deferUpdate":true},"Perf Idx":{"name":"Performance Index","centerline":1,"initializeFN":CIQ.Studies.initPriceRelative,"seriesFN":CIQ.Studies.displayVsComparisonSymbol,"calculateFN":CIQ.Studies.calculatePerformance,"inputs":{"Period":120,"Comparison Symbol":"SPY"},"outputs":{"Result":"auto","Gain":"#00DD00","Loss":"#FF0000"},"deferUpdate":true},"Beta":{"name":"Beta","centerline":1,"initializeFN":CIQ.Studies.initPriceRelative,"seriesFN":CIQ.Studies.displayVsComparisonSymbol,"calculateFN":CIQ.Studies.calculateBeta,"inputs":{"Period":20,"Comparison Symbol":"SPY"},"deferUpdate":true},"Ulcer":{"name":"Ulcer Index","calculateFN":CIQ.Studies.calculateUlcerIndex,"inputs":{"Period":14,"Field":"field"}},"Bal Pwr":{"name":"Balance of Power","range":"-1 to 1","centerline":0,"calculateFN":CIQ.Studies.calculateBalanceOfPower,"inputs":{"Period":14,"Moving Average Type":"ma"}},"Trend Int":{"name":"Trend Intensity Index","calculateFN":CIQ.Studies.calculateTrendIntensity,"range":"0 to 100","inputs":{"Period":14,"Field":"field","Signal Period":9},"outputs":{"TII":"auto","Signal":"#FF0000"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:80,studyOverBoughtColor:"auto",studyOverSoldValue:20,studyOverSoldColor:"auto"}}},"Choppiness":{"name":"Choppiness Index","calculateFN":CIQ.Studies.calculateChoppiness,"centerline":50,"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:61.8,studyOverBoughtColor:"auto",studyOverSoldValue:38.2,studyOverSoldColor:"auto"}},"attributes":{studyOverBoughtValue:{"min":50,"step":"0.1"},studyOverSoldValue:{"max":50,"step":"0.1"}}},"Disparity":{"name":"Disparity Index","calculateFN":CIQ.Studies.calculateDisparity,"inputs":{"Period":14,"Field":"field","Moving Average Type":"ma"}},"Rainbow MA":{"name":"Rainbow Moving Average","overlay":true,"calculateFN":CIQ.Studies.calculateRainbow,"seriesFN":CIQ.Studies.displayRainbowMA,"inputs":{"Period":2,"Field":"field"},"outputs":{"SMA1":"#FF0000","SMA2":"#FF7F00","SMA3":"#FFFF00","SMA4":"#7FFF00","SMA5":"#00FF7F","SMA6":"#00FFFF","SMA7":"#007FFF","SMA8":"#0000FF","SMA9":"#7F00FF","SMA10":"#FF00FF"}},"Rainbow Osc":{"name":"Rainbow Oscillator","calculateFN":CIQ.Studies.calculateRainbow,"seriesFN":CIQ.Studies.displayRainbowOsc,"centerline":0,"inputs":{"Period":2,"Field":"field","HHV/LLV Lookback":10},"outputs":{"Positive Bar":"#00DD00","Negative Bar":"#FF0000"}},"Pring KST":{"name":"Pring's Know Sure Thing","calculateFN":CIQ.Studies.calculateKST,"inputs":{"Field":"field","Lightest Rate of Change Period":10,"Lightest SMA Period":10,"Light Rate of Change Period":15,"Light SMA Period":10,"Heavy Rate of Change Period":20,"Heavy SMA Period":10,"Heaviest Rate of Change Period":30,"Heaviest SMA Period":15,"Signal Period":9},"outputs":{"KST":"#00DD00","KSTSignal":"#FF0000"}},"Pring Sp-K":{"name":"Pring's Special K","calculateFN":CIQ.Studies.calculateSpecialK,"inputs":{"Field":"field","Interval":["daily","weekly"]}},"Darvas":{"name":"Darvas Box","underlay":true,"calculateFN":CIQ.Studies.calculateDarvas,"seriesFN":CIQ.Studies.displayDarvas,"inputs":{"ATH Lookback Period":100,"Exit Field":["close","high/low"],"Ghost Boxes":true,"Stop Levels":false,"Level Offset":0.01,"Price Minimum":5,"Volume Spike":false,"Volume % of Avg":400},"outputs":{"Darvas":"#5F7CB8","Ghost":"#699158","Levels":"auto"},"customRemoval":true,"attributes":{"Price Minimum":{min:0.01,step:0.01},"yaxisDisplayValue":{hidden:true},"panelName":{hidden:true}}},"Supertrend":{"name":"Supertrend","overlay":true,"seriesFN":CIQ.Studies.displaySupertrend,"calculateFN":CIQ.Studies.calculateSupertrend,"inputs":{"Period":7,"Multiplier":3},"outputs":{"Uptrend":"#8cc176","Downtrend":"#b82c0c"},"attributes":{Multiplier:{min:0.1,step:0.1}}},"vol profile":{"name":"Volume Profile","underlay":true,"seriesFN":CIQ.Studies.displayVolumeProfile,"calculateFN":null,"inputs":{},"outputs":{"Bars Color":"#b64a96"},"customRemoval":true,"parameters":{"init":{displayBorder:true,displayVolume:false,numberOfBars:30,widthPercentage:0.25}},"attributes":{"yaxisDisplayValue":{hidden:true},"panelName":{hidden:true}}},"Vortex":{"name":"Vortex Indicator","calculateFN":CIQ.Studies.calculateVortex,"centerline":1,"outputs":{"+VI":"#00FF00","-VI":"#FF0000"},"parameters":{template:"studyOverZones",init:{studyOverZonesEnabled:true,studyOverBoughtValue:1.1,studyOverBoughtColor:"auto",studyOverSoldValue:0.9,studyOverSoldColor:"auto"}},"attributes":{studyOverBoughtValue:{"min":1,"step":"0.01"},studyOverSoldValue:{"max":1,"step":"0.01"}}},"ZigZag":{"name":"ZigZag","overlay":true,"seriesFN":CIQ.Studies.displayZigZag,"calculateFN":CIQ.Studies.calculateZigZag,"inputs":{"Distance(%)":10},"parameters":{"init":{label:false}},"attributes":{"Distance(%)":{min:0.1,step:0.1}}},"PSY":{"name":"Psychological Line","range":"0 to 100","calculateFN":CIQ.Studies.calculatePsychologicalLine,"inputs":{"Period":20}},"MA Dev":{"name":"Moving Average Deviation","calculateFN":CIQ.Studies.calculateMADev,"seriesFN":CIQ.Studies.displayHistogramWithSeries,"inputs":{"Period":12,"Field":"field","Moving Average Type":"ma","Points Or Percent":["Points","Percent"]},"outputs":{"Increasing Bar":"#00DD00","Decreasing Bar":"#FF0000"}},"Shinohara":{"name":"Shinohara Intensity Ratio","calculateFN":CIQ.Studies.calculateShinohara,"inputs":{"Period":26},"outputs":{"Strong Ratio":"#E99B54","Weak Ratio":"#5F7CB8"}}});return _exports;};var __js_core_core_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_core_core_(_exports,utility){if(!_exports.SplinePlotter)_exports.SplinePlotter={};var CIQ=_exports.CIQ,$$$=_exports.$$$,splinePlotter=_exports.SplinePlotter;/*
	 * Default implementation of plotSplinePrimitive.  Load splines.js to get real splining.
	 */var plotSplinePrimitive=function plotSplinePrimitive(points,tension,context,colorPatternChanges){if(!window.splineWarning)console.log("Warning: Cannot find implementation of splining.  Try loading splines.js");window.splineWarning=1;var colorPatternIndex=0;context.moveTo(points[0],points[1]);for(var i=2;i<points.length;i+=2){if(colorPatternChanges&&colorPatternIndex<colorPatternChanges.length){var colorPatternChange=colorPatternChanges[colorPatternIndex];if(colorPatternChange.coord[0]==points[i-2]&&colorPatternChange.coord[1]==points[i-1]){context.stroke();context.strokeStyle=colorPatternChange.color;context.setLineDash(colorPatternChange.pattern);context.lineDashOffset=0;context.lineWidth=colorPatternChange.width;context.beginPath();context.moveTo(points[i-2],points[i-1]);//reset back to last point
colorPatternIndex++;}}context.lineTo(points[i],points[i+1]);}};// If splines.js has not been included then set it with our default no-op implementation
if(!_exports.SplinePlotter.plotSpline)_exports.SplinePlotter.plotSpline=plotSplinePrimitive;/**
	 * Gets the current time in Eastern Time Zone. This can be used as a convenience for determining open and closing times of US markets.
	 * @return {date} JavaScript Date representing the time in Eastern Time Zone
	 * @memberof CIQ
	 */CIQ.getETDateTime=function(){var d=new Date();return CIQ.convertTimeZone(new Date(d.getTime()+d.getTimezoneOffset()*60000),"UTC","America/New_York");};/**
	 * Converts a JavaScript date from Eastern Time Zone to the browser's local time zone. Daylight Savings Time is hard coded. @see CIQ.getETDateTime
	 * @param  {date} est JavaScript Date object representing a date/time in eastern time zone
	 * @return {date}     JavaScript Date object converted to browser's local time zone
	 * @memberof CIQ
	 */CIQ.fromET=function(est){var d=new Date();//var localTime = d.getTime();
//var localOffset = d.getTimezoneOffset() * 60000;
//var utc = localTime + localOffset;
var offset=4;if(d.getMonth()<2||d.getMonth()==2&&d.getDate()<11||d.getMonth()>10||d.getMonth()==10&&d.getDate()>=4)offset=5;var localTime=est.getTime()+3600000*offset;var nd=new Date(localTime);return nd;};/**
	 * Converts a future month to the month index or vice versa.  Month indexes begin with 1 for January
	 * @param  {char} x 	The value to convert.  If numeric, will convert to Future month letter.  If Alpha, will convert to month index.
	 * @return {char} 		Converted value
	 * @memberof CIQ
	 */CIQ.convertFutureMonth=function(x){var y=x.toString();if(y.length<=0||y.length>2)return"";switch(y){case'1':return"F";case'2':return"G";case'3':return"H";case'4':return"J";case'5':return"K";case'6':return"M";case'7':return"N";case'8':return"Q";case'9':return"U";case'10':return"V";case'11':return"X";case'12':return"Z";case'F':return"1";case'G':return"2";case'H':return"3";case'J':return"4";case'K':return"5";case'M':return"6";case'N':return"7";case'Q':return"8";case'U':return"9";case'V':return"10";case'X':return"11";case'Z':return"12";}return y;};/**
	 * Prints out a number in US Dollar monetary representation
	 * @param  {number} val      The amount
	 * @param  {number} [decimals=2] Number of decimal places.
	 * @param  {string} [currency] Currency designation.  If omitted, will use $.
	 * @return {string}          US Dollar monetary representation
	 * // Returns $100.00
	 * CIQ.money(100, 2);
	 * @memberof CIQ
	 */CIQ.money=function(val,decimals,currency){if(!currency)currency="$";if(currency.length==3)currency+=" ";if(!decimals&&decimals!==0)decimals=2;return currency+CIQ.commas((Math.round(val*10000)/10000).toFixed(decimals));};/**
	 * Converts a currency code from ISO to char
	 * @param  {string} code      The string to convert, e.g. USD
	 * @return {string}          The converted string, e.g. $
	 * @memberof CIQ
	 */CIQ.convertCurrencyCode=function(code){var codes={JPY:"¥",USD:"$",AUD:"A$",BRL:"R$",CAD:"CA$",CNY:"CN¥",CZK:"Kč",DKK:"kr",EUR:"€",GBP:"£",HKD:"HK$",HUF:"Ft",ILS:"₪",INR:"₹",KRW:"₩",MXN:"MX$",NOK:"kr",NZD:"NZ$",PLN:"zł",RUB:"руб",SAR:"﷼",SEK:"kr",SGD:"S$",THB:"฿",TRY:"₺",TWD:"NT$",VND:"₫",XAF:"FCFA",XCD:"EC$",XOF:"CFA",XPF:"CFPF",ZAR:"R"};var rt=codes[code];if(rt)return rt;return code;};/**
	 * Returns a string representation of a number with commas in thousands, millions or billions places. Note that this function does
	 * not handle values with more than 3 decimal places!!!
	 * @param  {number} val The value
	 * @return {string}     The result with commas
	 * @example
	 * // Returns 1,000,000
	 * CIQ.commas(1000000);
	 * @memberof CIQ
	 */CIQ.commas=function(val){return val.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",");};/**
	 * User friendly alerts. The charting engine always uses this instead of alert() for warning or error messages. This
	 * method can be overriden as required by your user interface.
	 * @param  {string} text Alert message
	 * @example
	 * // Override with a friendlier alert mechanism!
	 * CIQ.alert=function(text){
	 * 	doSomethingElse(text);
	 * }
	 * @memberof CIQ
	 */CIQ.alert=function(text){alert(text);};/**
	 * Returns true if a point, in absolute screen position, is within an element
	 * @param  {object} node A valid DOM element to check whether the point overlaps
	 * @param  {number} x    Absolute screen X position of point
	 * @param  {number} y    Absolute screen Y position of pointer
	 * @return {boolean}      True if the point lies inside of the DOM element
	 * @memberof CIQ
	 */CIQ.withinElement=function(node,x,y){var rect=node.getBoundingClientRect();if(x<=rect.left)return false;if(y<=rect.top)return false;if(x>=rect.left+node.offsetWidth)return false;if(y>=rect.top+node.offsetHeight)return false;return true;};/**
	 * Sets a member or style for a DOM element only if it isn't already set.
	 * This is more efficient than blindly updating the DOM.
	 * @param  {HTMLElement} node  Node to update
	 * @param  {string} member The DOM member to update
	 * @param  {string} value The value to set
	 * @memberOf  CIQ
	 * @since  4.0.0
	 */CIQ.efficientDOMUpdate=function(node,member,value){if(node[member]!==value)node[member]=value;};/**
	 * Used in conjunction, safeMouseOut and safeMouseOver ensure just a single event when the mouse moves
	 * in or out of an element. This is important because simple mouseout events will fire when the mouse
	 * crosses boundaries *within* an element. Note that this function will do nothing on a touch device where
	 * mouseout is not a valid operation.
	 * @param  {object} node A valid DOM element
	 * @param  {function} fc   Function to call when the mouse has moved out
	 * @memberof CIQ
	 */CIQ.safeMouseOut=function(node,fc){function closure(node,fc){return function(e){if(typeof e.pageX=="undefined"){e.pageX=e.clientX;e.pageY=e.clientY;}if(CIQ.withinElement(node,e.pageX,e.pageY)){return;}node.stxMouseOver=false;fc(e);};}node.addEventListener("mouseout",closure(node,fc));};/**
	 * This method is guaranteed to only be called once when a user mouses over an object. @see CIQ#safeMouseOut
	 * @param  {object} node A valid DOM element
	 * @param  {function} fc   Function to call when mouse moves over the object
	 * @memberof CIQ
	 */CIQ.safeMouseOver=function(node,fc){function closure(node,fc){return function(e){if(typeof e.pageX=="undefined"){e.pageX=e.clientX;e.pageY=e.clientY;}if(CIQ.withinElement(node,e.pageX,e.pageY)){if(node.stxMouseOver)return;node.stxMouseOver=true;fc(e);}};}node.addEventListener("mouseover",closure(node,fc));};/**
	 * Converts an object to emit "stxtap" events. This uses {@link CIQ#safeClickTouch}. You should use addEventListener("tap") to receive the events.
	 * @param {HTMLElement} div The element to convert
	 * @param {object} [params] Parameters to pass to {@link CIQ#safeClickTouch}
	 * @param {boolean} [params.stopPropagation=false] If set to true then propagation will be stopped
	 * @memberOf  CIQ
	 * @since  04-2015
	 */CIQ.installTapEvent=function(div,params){var fc=function fc(e){var ev=document.createEvent('Event');ev.initEvent("stxtap",true,true);if(typeof e.pageX=="undefined"){e.pageX=e.clientX;e.pageY=e.clientY;}ev.pageX=e.pageX;ev.pageY=e.pageY;e.target.dispatchEvent(ev);if(params&&params.stopPropagation)e.stopPropagation();};CIQ.safeClickTouch(div,fc,params);};/**
	 * Use this instead of onclick or ontouch events. This function will automatically use the quickest available
	 * but also protect against being called twice.
	 * By default any previous safeClickTouch listeners will be cleared (to allow re-use of the element).
	 * @param {object} div The DOM element to attach an event
	 * @param {Function} fc The function to call when the object is pressed
	 * @param {object} params Parameters to drive behavior.
	 * @param {object} [params.safety] An object, generated from a CIQ.safeDrag association to prevent the click from being triggered when a drag operation is released
	 * @param {boolean} [params.allowMultiple=false] If set then multiple click events can be associated with the node
	 * @param {boolean} [params.preventUnderlayClick=true] By default prevents an underlaying element from being "clicked" on a touch device 400ms after the overlay was tapped. Set to false for input fields, or any div containing input fields (body)
	 * @param {boolean} [params.absorbDownEvent=true] Ensures that a mousedown, pointerdown, touchstart event doesn't get passed to the parent.
	 * @memberof CIQ
	 * @since 11/01/2015 Removed timers in favor of a new algorithm. This algorithm allows only the first event to fire from a UI interaction to execute the fc function.
	 */CIQ.safeClickTouch=function(div,fc,params){if(!params)params={};var movementWatcher={};if(!params.allowMultiple)CIQ.clearSafeClickTouches(div);if(params.preventUnderlayClick!==false)params.preventUnderlayClick=true;if(params.absorbDownEvent!==false)params.absorbDownEvent=true;params.allowAnotherDevice=0;params.registeredClick=false;function closure(which,params,movementWatcher){return function(e){if(!CIQ.safeClickTouchEvent){if(!movementWatcher.t){return;// is this up/end event related to a down/start event?
}var timeSincePressed=movementWatcher.t;movementWatcher.t=null;if(timeSincePressed+1000<new Date().getTime())return;//allow no more than 1 second for click
}if(params.safety&&params.safety.recentlyDragged)return;if(!e)e=event;if(e.which&&e.which>=2||e.button&&e.button>=2)return;// ignore right clicks
if(params.preventUnderlayClick){// underlay click happens when you tap on a mobile device but a second mouse event registers
// 300 ms later on another clickable object that was beneath the menu. By default we stop this
// secondary event using preventDefault. However, we don't want to do this if we clicked inside
// an input tag, because that would prevent the soft keyboard from coming up. Note that modern
// touch operating systems don't have the 300ms delay issue so this code can be eliminated once
// older operating systems are safely retired.
if(e.target.tagName!=="INPUT")e.preventDefault();}else{// prevent touch and mouse from being clicked when we can't use preventDefault
if(params.lastType!=which&&Date.now()<params.allowAnotherDevice)return;params.lastType=which;params.allowAnotherDevice=Date.now()+1000;// 1 Second then not a coat tail mouse click
}fc(e);};}function isClick(movementWatcher,down){return function(e){var x=e.clientX?e.clientX:e.pageX;var y=e.clientY?e.clientY:e.pageY;if(down){movementWatcher.t=new Date().getTime();movementWatcher.x=x;movementWatcher.y=y;}else if(movementWatcher.x){//allow no more than 4 pixel distance movement
if(Math.pow(movementWatcher.x-x,2)+Math.pow(movementWatcher.y-y,2)>16){movementWatcher.t=null;}}};}var safeClickTouchEvents=div.safeClickTouchEvents;if(!safeClickTouchEvents)safeClickTouchEvents=div.safeClickTouchEvents=[];var fc1=closure("mouseup",params,movementWatcher);var fc2=closure("touchend",params,movementWatcher);var fc3=closure("pointerup",params,movementWatcher);var f=function f(e){e.stopPropagation();};var eventHolder={};if(CIQ.safeClickTouchEvent){// global override for which event to use, for instance if you want to force use of "click" or "tap"
var fc4=closure(CIQ.safeClickTouchEvent,params);div.addEventListener(CIQ.safeClickTouchEvent,fc4);eventHolder[CIQ.safeClickTouchEvent]=fc4;safeClickTouchEvents.push(eventHolder);}else if("onpointerup"in document&&!CIQ.noPointerEvents){// Internet Explorer can always use pointerup safely
div.addEventListener("pointerdown",isClick(movementWatcher,true));div.addEventListener("pointermove",isClick(movementWatcher));div.addEventListener("pointerup",fc3);eventHolder.pointerup=fc3;if(params.absorbDownEvent){div.addEventListener("pointerdown",f);eventHolder.pointerdown=f;}safeClickTouchEvents.push(eventHolder);}else{// all in one computers can support both of these under Chrome/FF!
div.addEventListener("mousedown",isClick(movementWatcher,true));div.addEventListener("mousemove",isClick(movementWatcher));div.addEventListener("touchstart",isClick(movementWatcher,true));div.addEventListener("touchmove",isClick(movementWatcher));div.addEventListener("mouseup",fc1);div.addEventListener("touchend",fc2);eventHolder.mouseup=fc1;eventHolder.touchend=fc2;if(params.absorbDownEvent){div.addEventListener("mousedown",f);eventHolder.mousedown=f;div.addEventListener("touchstart",f);eventHolder.touchstart=f;}safeClickTouchEvents.push(eventHolder);}};/**
	 * Clears all safeClickTouch events from a DOM element.
	 * @param  {object} div The DOM element to clear events
	 * @memberof CIQ
	 */CIQ.clearSafeClickTouches=function(div){var safeClickTouchEvents=div.safeClickTouchEvents;if(!safeClickTouchEvents)return;for(var i=0;i<safeClickTouchEvents.length;i++){var fc=safeClickTouchEvents[i];for(var e in fc){var f=fc[e];div.removeEventListener(e,f);}}div.safeClickTouchEvents=null;};/**
	 * Safe function to handle dragging of objects on the screen. This method is cross-device aware and can handle mouse or touch drags.
	 * This method does not actually move the objects but provides callbacks that explain when drag operations
	 * begin and cease, and what movements are made during the drag. Callbacks should be used to move the actual objects
	 * (if it is desired to move objects during a drag operation). For convenience, displacementX and displacementY are added to callback events
	 * to indicate the distance from the original starting point of the drag.
	 * A "safety" object is returned which can optionally be passed into CIQ.safeClickTouch to prevent errant click events
	 * from being triggered when a user lets go of a drag
	 * @param  {object} div    The draggable DOM element
	 * @param  {function} [fcDown] Callback function when a drag operation begins. Receives an event object.
	 * @param  {function} [fcMove] Callback function when a drag move occurs. Receives an event object.
	 * @param  {function} [fcUp]   Callback function when the drag operation ends. Receives an event object.
	 * @return {object}        Safety object which can be passed to CIQ.safeClickTouch
	 * @memberof CIQ
	 */CIQ.safeDrag=function(div,fcDown,fcMove,fcUp){var resetMS=100;// To avoid multiple down events only one can occur per 100ms
var registeredClick=false;var startX=0,startY=0;var safety={recentlyDragged:false};function closure(moveEvent){var fmap={"mousedown":{"move":"mousemove","up":"mouseup"},"pointerdown":{"move":"pointermove","up":"pointerup"},"touchstart":{"move":"touchmove","up":"touchend"}};function pageX(e){if(e.touches){if(e.touches.length>=1){return e.touches[0].pageX;}else if(e.changedTouches&&e.changedTouches.length>=1){return e.changedTouches[0].pageX;}}if(typeof e.pageX=="undefined"){return e.clientX;}return e.pageX;}function pageY(e){if(e.touches){if(e.touches.length>=1){return e.touches[0].pageY;}else if(e.changedTouches&&e.changedTouches.length>=1){return e.changedTouches[0].pageY;}}if(typeof e.pageY=="undefined"){return e.clientY;}return e.pageY;}return function(e){if(registeredClick)return;registeredClick=true;CIQ.ChartEngine.ignoreTouch=true;var moveFC=function moveFC(e){if(e&&e.preventDefault)e.preventDefault();safety.recentlyDragged=true;e.displacementX=pageX(e)-startX;e.displacementY=pageY(e)-startY;fcMove(e);// Call the move event
};if(fcMove)document.body.addEventListener(fmap[moveEvent].move,moveFC);document.body.addEventListener(fmap[moveEvent].up,function(e){// Create an up listener on the body
CIQ.ChartEngine.ignoreTouch=false;if(fcMove)document.body.removeEventListener(fmap[moveEvent].move,moveFC);// Remove the move listener since our move is now complete
document.body.removeEventListener(fmap[moveEvent].up,arguments.callee);// Remove the up listener since our move is now complete
e.displacementX=pageX(e)-startX;e.displacementY=pageY(e)-startY;if(fcUp)fcUp(e);// Call the up event
setTimeout(function(safety){return function(){safety.recentlyDragged=false;};}(safety),50);// Prevent errant clicks from touch letting go
});setTimeout(function(){registeredClick=false;},resetMS);startX=pageX(e);startY=pageY(e);if(fcDown)fcDown(e);};}div.addEventListener("mousedown",closure("mousedown"));div.addEventListener("pointerdown",closure("pointerdown"));div.addEventListener("touchstart",closure("touchstart"));return safety;};/**
	 * Captures enter key events. Also clears the input box on escape key.
	 * @param {object} node The DOM element to attach the event to. Should be a text input box.
	 * @param {Function} cb Callback function when enter key is pressed.
	 * @memberof CIQ
	 */CIQ.inputKeyEvents=function(node,cb){node.addEventListener("keyup",function(e){var key=window.event?event.keyCode:e.keyCode;switch(key){case 13:cb();break;case 27:node.value="";break;default:break;}},false);};/**
	 * Fixes screen scroll. This can occur when the keyboard opens on an ipad or iphone.
	 * @memberof CIQ
	 */CIQ.fixScreen=function(){window.scrollTo(0,0);};/**
	 * Sets the position of the cursor within a textarea box. This is used for instance to position the cursor at the
	 * end of the text that is in a textarea.
	 * @param {object} ctrl A valid textarea DOM element
	 * @param {number} pos  The position in the text area to position
	 * @memberof CIQ
	 */CIQ.setCaretPosition=function(ctrl,pos){ctrl.style.zIndex=5000;if(ctrl.setSelectionRange){CIQ.focus(ctrl);try{ctrl.setSelectionRange(pos,pos);}catch(e){}}else if(ctrl.createTextRange){var range=ctrl.createTextRange();range.collapse(true);range.moveEnd('character',pos);range.moveStart('character',pos);range.select();}};/**
	 * Sets the value of an input box only if it is not active. This prevents an input box from changing underneath
	 * a user, which can be extremely frustrating on touch devices.
	 * @param {HTMLElement} el    The input element
	 * @param {string} value The value to set
	 * @memberOf  CIQ
	 */CIQ.setValueIfNotActive=function(el,value){if(document.activeElement==el)return;el.value=value;};/**
	 * Closes the keyboard on a touch device by blurring any active input elements.
	 * @param {HTMLElement} [newFocus] Element to change focus to
	 * @memberof CIQ
	 */CIQ.hideKeyboard=function(newFocus){var element=document.activeElement;if(element.tagName=="INPUT"||element.tagName=="TEXTAREA"){element.blur();window.focus();if(newFocus){if(newFocus===document.body||document.body.contains(newFocus))newFocus.focus();}}};/**
	 * Determines whether a line intersects a box. This is used within the charting engine to determine whether the cursor
	 * has intersected a drawing.
	 * Note this function is meant to receive bx1, by1, bx2, by2, x0, y0, x1 and y1 as pixel values and not as ticks/axis values.
	 * @param  {number} bx1
	 * @param  {number} by1
	 * @param  {number} bx2
	 * @param  {number} by2
	 * @param  {number} x0
	 * @param  {number} y0
	 * @param  {number} x1
	 * @param  {number} y1
	 * @param  {string} vtype - Either "segment", "ray" or "line".  Anything else will default to segment.
	 * @param  {boolean} isLog - True if the chart is in log scale and linear values are passed in
	 * @return {boolean}       Returns true if the line intersects the box
	 * @memberof CIQ
	 * @since 4.0.0 `isLog` parameter added
	 * @since 6.0.0 `isLog` parameter removed
	 */CIQ.boxIntersects=function(bx1,by1,bx2,by2,x0,y0,x1,y1,vtype){if(arguments[9]!==undefined){console.warn("CIQ.boxIntersects() no longer supports isLog argument, please be sure arguments are passed in as pixels.");}var minX=Math.min(bx1,bx2);var maxX=Math.max(bx1,bx2);var minY=Math.min(by1,by2);var maxY=Math.max(by1,by2);var isRay=vtype=="ray";// First see if segment/ray lies outside the box
if(vtype!="line"){if(x0<minX&&x1<minX&&(!isRay||x0>x1))return false;if(x0>maxX&&x1>maxX&&(!isRay||x0<x1))return false;if(y0<minY&&y1<minY&&(!isRay||y0>y1))return false;if(y0>maxY&&y1>maxY&&(!isRay||y0<y1))return false;}// Now see if all box corners land on the same side of the line
function cornerCheck(x,y){return(y-y0)*(x1-x0)-(x-x0)*(y1-y0);}var map={a:cornerCheck(bx1,by1),b:cornerCheck(bx1,by2),c:cornerCheck(bx2,by1),d:cornerCheck(bx2,by2)};if(map.a>0&&map.b>0&&map.c>0&&map.d>0)return false;if(map.a<0&&map.b<0&&map.c<0&&map.d<0)return false;return true;};/**
	 * Converts a box represented by two corner coordinates [tick0,value0] and [tick1,value1] into pixel coordinates.
	 * @param {CIQ.ChartEngine} [stx] The chartEngine
	 * @param  {string} panelName  Panel on which the coordinates reside
	 * @param  {object} box Box to convert
	 * @param  {number} [box.x0]
	 * @param  {number} [box.y0]
	 * @param  {number} [box.x1]
	 * @param  {number} [box.y1]
	 * @return  {object} A converted box
	 * @memberof CIQ
	 * @since 6.0.0
	 */CIQ.convertBoxToPixels=function(stx,panelName,box){var panel=stx.panels[panelName];var bx0=stx.pixelFromTick(box.x0,panel.chart);var bx1=stx.pixelFromTick(box.x1,panel.chart);var by0=stx.pixelFromValueAdjusted(panel,box.x0,box.y0);var by1=stx.pixelFromValueAdjusted(panel,box.x1,box.y1);return{x0:bx0,x1:bx1,y0:by0,y1:by1};};/**
	 * Determines whether two lines intersect
	 * @param  {number} x1
	 * @param  {number} x2
	 * @param  {number} y1
	 * @param  {number} y2
	 * @param  {number} x3
	 * @param  {number} x4
	 * @param  {number} y3
	 * @param  {number} y4
	 * @param  {string} type - Either "segment", "ray" or "line"
	 * @return {boolean}      Returns true if the two lines intersect
	 * @memberof CIQ
	 */CIQ.linesIntersect=function(x1,x2,y1,y2,x3,x4,y3,y4,type){var denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1);var numera=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3);var numerb=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3);//var EPS = .000001;
if(denom===0){if(numera===0&&numerb===0)return true;// coincident
return false;// parallel
}var mua=numera/denom;var mub=numerb/denom;if(type=="segment"){if(mua>=0&&mua<=1&&mub>=0&&mub<=1)return true;}else if(type=="line"||type=="horizontal"||type=="vertical"){if(mua>=0&&mua<=1)return true;}else if(type=="ray"){if(mua>=0&&mua<=1&&mub>=0)return true;}return false;};/**
	 * Determines the Y value at which point X intersects a line (vector)
	 * @param  {object} vector - Object of type {x0,x1,y0,y1}
	 * @param  {number} x      - X value
	 * @return {number}        - Y intersection point
	 * @memberof CIQ
	 */CIQ.yIntersection=function(vector,x){var x1=vector.x0,x2=vector.x1,x3=x,x4=x;var y1=vector.y0,y2=vector.y1,y3=0,y4=10000;var denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1);var numera=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3);//var numerb = (x2-x1) * (y1-y3) - (y2-y1) * (x1-x3);
//var EPS = .000001;
var mua=numera/denom;if(denom===0){if(numera===0)mua=1;else return null;}var y=y1+mua*(y2-y1);return y;};/**
	 * Determines the X value at which point Y intersects a line (vector)
	 * @param  {object} vector - Object of type {x0,x1,y0,y1}
	 * @param  {number} y      - Y value
	 * @return {number}        - X intersection point
	 * @memberof CIQ
	 */CIQ.xIntersection=function(vector,y){var x1=vector.x0,x2=vector.x1,x3=0,x4=10000;var y1=vector.y0,y2=vector.y1,y3=y,y4=y;var denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1);var numera=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3);//var numerb = (x2-x1) * (y1-y3) - (y2-y1) * (x1-x3);
//var EPS = .000001;
var mua=numera/denom;if(denom===0){if(numera===0)mua=1;else return null;}var x=x1+mua*(x2-x1);return x;};/**
	 * Get the X intersection point between two lines
	 * @memberof CIQ
	 */CIQ.intersectLineLineX=function(ax1,ax2,ay1,ay2,bx1,bx2,by1,by2){var ua_t=(bx2-bx1)*(ay1-by1)-(by2-by1)*(ax1-bx1);var u_b=(by2-by1)*(ax2-ax1)-(bx2-bx1)*(ay2-ay1);var ua=ua_t/u_b;return ax1+ua*(ax2-ax1);};/**
	 * Get the Y intersection point between two lines
	 * @memberof CIQ
	 */CIQ.intersectLineLineY=function(ax1,ax2,ay1,ay2,bx1,bx2,by1,by2){var ua_t=(bx2-bx1)*(ay1-by1)-(by2-by1)*(ax1-bx1);var u_b=(by2-by1)*(ax2-ax1)-(bx2-bx1)*(ay2-ay1);var ua=ua_t/u_b;return ay1+ua*(ay2-ay1);};/**
	 * Set once after user is alerted that private browsing is enabled
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.privateBrowsingAlert=false;// Some browsers don't support localStorage, worse won't let you polyfill (JDK7 webview). So we will create
// this so that we can add a polyfill.
CIQ.localStorage=typeof localStorage!=="undefined"?localStorage:{};/**
	 * Convenience function for storing a name value pair in local storage. This will detect if private browsing is enabled
	 * because localStorage is inoperable under private browsing
	 * @param  {string} name  Name to store
	 * @param  {string} value Value to store
	 * @memberof CIQ
	 */CIQ.localStorageSetItem=function(name,value){try{CIQ.localStorage.setItem(name,value);}catch(e){if(!CIQ.privateBrowsingAlert){CIQ.alert("No storage space available.  Possible causes include browser being in Private Browsing mode, or maximum storage space has been reached.");CIQ.privateBrowsingAlert=true;}}};/**
	 * Dynamically load UI elements from an external HTML file. This is accomplished by rendering raw HTML in an iframe
	 * and then cloning all of the newly created DOM elements into our main document. The iframe is then removed.
	 *
	 * The title of the iframe is checked. External content should *not* have a title. By convention, 404 or 500 errors
	 * have a title and so we use this to determine whether the iframe contains valid content or not.
	 *
	 * @param  {string}   url The external url to fetch new UI content
	 * @param  {HtmlElement} el  Element to append the UI content to, default is document.body
	 * @param  {Function} cb  A callback function to call when the new UI is available
	 * @memberof CIQ
	 * @since 6.1.0 added el argument
	 */CIQ.loadUI=function(url,el,cb){var i=document.createElement("iframe");if(!el||typeof el=="function"){cb=el;// backward compatibility
el=document.body;}var onload=function onload(){var iframeDocument=null;try{iframeDocument=i.contentDocument||i.contentWindow.document;}catch(error){return cb(error);}if(iframeDocument&&!iframeDocument.title){var html=iframeDocument.body.innerHTML;var div=document.createElement("div");document.body.removeChild(i);CIQ.innerHTML(div,html);for(var j=0;j<div.children.length;j++){var ch=div.children[j].cloneNode(true);el.appendChild(ch);}cb(null);}else{cb(new Error('iFrame not found or document has a title'));}};i.src=url+"?"+CIQ.uniqueID();i.hidden=true;i.addEventListener("load",onload,false);document.body.appendChild(i);};/**
	 * Loads JavaScript dynamically. This method keeps a static memory of scripts that have been loaded
	 * to prevent them from being loaded twice. The callback function however is always called, even if
	 * the script has already been loaded.
	 * @param  {string}   scriptName The url of the script to load
	 * @param  {Function} cb         Callback function to call when the script is loaded
	 * @memberof CIQ
	 */CIQ.loadScript=function(scriptName,cb){if(!CIQ.loadedScripts)CIQ.loadedScripts={};if(CIQ.loadedScripts[scriptName]){if(cb)cb();return;}var script=document.createElement("SCRIPT");script.async=true;script.onload=function(){CIQ.loadedScripts[scriptName]=true;if(cb)cb();};if(typeof isIE8!="undefined"){script.onreadystatechange=function(){if(script.readyState=="loaded"){CIQ.loadedScripts[scriptName]=true;if(cb){setTimeout(cb,0);}}};}var uniqueName=scriptName;// Use the epoch to create a unique query string, which will force the browser to reload
if(uniqueName.indexOf("?")==-1){uniqueName=uniqueName+"?"+Date.now();}else{uniqueName=uniqueName+"&"+Date.now();}script.src=uniqueName;var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(script,s.nextSibling);};/**
	 * Loads a stylesheet.
	 * @param  {string}   stylesheet Name of stylesheet file.
	 * @param  {Function} cb     Function to call when the stylesheet is fully loaded
	 * @since 2016-03-11
	 * @memberof CIQ
	 */CIQ.loadStylesheet=function(widget,cb){var lnk=document.createElement("link");lnk.rel="stylesheet";lnk.type="text/css";lnk.media="screen";lnk.href=widget+"?"+Date.now();lnk.onload=function(){if(this.loaded)return;//undocumented IE Edge bug, css files load twice.  This to prevent double-triggering of onload, which may load html file twice.
this.loaded=true;if(cb)cb();};var links=document.getElementsByTagName("link");var lastLink=links[links.length-1];lastLink.parentNode.insertBefore(lnk,lastLink.nextSibling);};/**
	 * Loads a feature function widget. Feature function widgets consist of a css file, a JS file and an HTML file. This can
	 * be used to dynamically load content and functionality.
	 * @param  {string}   widget Name of widget. The js, css and html files should be this name.
	 * @param  {HtmlElement} el  Element to append the UI content to, default is document.body
	 * @param  {Function} cb     Function to call when the widget is fully loaded
	 * @memberof CIQ
	 * @since 6.1.0 added el argument
	 */CIQ.loadWidget=function(widget,el,cb){if(!el||typeof el=="function"){cb=el;// backward compatibility
el=document.body;}CIQ.loadStylesheet(widget+".css",function(){CIQ.loadUI(widget+".html",el,function(err){if(err)cb(err);else CIQ.loadScript(widget+".js",cb);});});};/**
	 * Checks to see if the enabled plugins are done dynamically loading. 
	 * @param {array} plugins An array of strings that define which plugins to check 
	 * The plugin names provided must match the following format: if cq-scriptiq is enabled, 'scriptiq' is the plugin name entered into the array
	 * @param {Function} cb Function to call when all the plugins are fully loaded
	 * @memberof CIQ
	 * @since 6.1.0
	 */CIQ.waitForPlugins=function(plugins,cb){var numPluginsLoaded=0;var numPlugins=plugins.length;if(!numPlugins){cb();return;}for(var i=0;i<numPlugins;i++){var tagName='cq-'+plugins[i];var element=document.getElementsByTagName(tagName)[0];if(element&&element.hasAttribute('loaded')){numPluginsLoaded++;}}if(numPlugins!==numPluginsLoaded){return setTimeout(function(){CIQ.waitForPlugins(plugins,cb);},0);}cb();};/**
	 * Sets the transparent parts of the canvas to the specified background color. Used to ensure a background when turning charts into images
	 * because normally the background is the background of the DIV container and not the canvas itself.
	 * @param  {object} context An HTML canvas context
	 * @param  {string} color   The color to set the background. Any valid HTML canvas color.
	 * @param  {number} width   Width to apply color (Could be less than size of canvas)
	 * @param  {number} height  Height to apply color (Could be less than size of canvas if applying branding for instance)
	 * @memberof CIQ
	 */CIQ.fillTransparentCanvas=function(context,color,width,height){var compositeOperation=context.globalCompositeOperation;context.globalCompositeOperation="destination-over";context.fillStyle=color;context.fillRect(0,0,width,height);context.globalCompositeOperation=compositeOperation;};/**
	 * Displays a floating label over the y axis. 
	 * 
	 * Draws a 'ticked' rectangle on the canvas, using using {@link CIQ.roundRect}. 
	 * It then calls {@link CIQ.createLabel} to print the text over this background shape; which can be customized to control the text format for these labels.
	 * 
	 * Visual Reference:<br>
	 * ![tickedRect](tickedRect.png "tickedRect")
	 * @param  {object} params
	 * @param  {object} params.ctx    A valid HTML Canvas Context
	 * @param  {number} params.x      Left position of drawing on canvas
	 * @param  {number} params.top      Top position of drawing on canvas
	 * @param  {number} params.width  Width of rectangle
	 * @param  {number} params.height Height of rectangle
	 * @param  {number} params.radius Radius of rounding
	 * @param  {boolean} [params.fill]   Whether to fill the background, or just draw the rectangle border.
	 * @param  {number}  [params.txt]    Text for the label
	 * @param  {number}  [params.y]      Y position of drawing on canvas
	 * @param  {object}  [params.margin]     Margin around the text
	 * @param  {object}  [params.margin.left]     Left margin of text
	 * @param  {object}  [params.margin.top]     Top margin of text
	 * @param  {number}  [params.backgroundColor]  background color. This is the background color of the rectangle.
	 * @param  {number}  [params.color] Text color
	 * @memberof CIQ
	 * @since 3.0.0 - function signature changed: This function now takes a params object instead of 8 different parameters
	 */CIQ.tickedRect=function(params){CIQ.rect(params);var tickY=Math.round(params.top+params.height/2)+0.5;params.ctx.beginPath();params.ctx.moveTo(params.x-2,tickY);params.ctx.lineTo(params.x,tickY);params.ctx.stroke();params.ctx.closePath();};/**
	 * Displays a floating label over the y axis. 
	 * 
	 * Draws a rectangle, with curved corners, on the canvas.
	 * It then calls {@link CIQ.createLabel} to print the text over this background shape; which can be customized to control the text format for these labels.
	 * 
	 * Visual Reference:<br>
	 * ![roundRect](roundRect.png "roundRect")
	 * @param  {object} params
	 * @param  {object} params.ctx    A valid HTML Canvas Context
	 * @param  {number} params.x      Left position of drawing on canvas
	 * @param  {number} params.top      Top position of drawing on canvas
	 * @param  {number} params.width  Width of rectangle
	 * @param  {number} params.height Height of rectangle
	 * @param  {number} params.radius Radius of rounding
	 * @param  {boolean} [params.fill]   Whether to fill the background, or just draw the rectangle border.
	 * @param  {number}  [params.txt]    Text for the label
	 * @param  {number}  [params.y]      Y position of drawing on canvas
	 * @param  {object}  [params.margin]     Margin around the text
	 * @param  {object}  [params.margin.left]     Left margin of text
	 * @param  {object}  [params.margin.top]     Top margin of text
	 * @param  {number}  [params.backgroundColor]  background color. This is the background color of the rectangle.
	 * @param  {number}  [params.color] Text color
	 * @param {string} [edge] "flush","arrow"
	 * @memberof CIQ
	 * @since 3.0.0  - function signature changed: This function now takes a params object and the drawing type instead of 8 different parameters.
	 * Also, this function will draw the label if `params.txt` is present, otherwise just the floating label outline will be drawn
	 */CIQ.roundRect=function(params,edge){if(arguments.length===9){params={ctx:arguments[0],x:arguments[1],top:arguments[2],width:arguments[3],height:arguments[4],radius:arguments[5],fill:arguments[6],stroke:arguments[7],edge:arguments[8]};}var stroke=params.stroke;var x=params.x;var y=params.top;var width=params.width;var height=params.height;var radius=params.radius;var fill=params.fill;var ctx=params.ctx;if(typeof stroke=="undefined"){stroke=true;}if(typeof radius==="undefined"){radius=5;if(width<0)radius=-5;}var yradius=width<0?radius*-1:radius;if(radius&&!edge)x=x-1;// Just a smidge more
var xr=x+radius,xw=x+width,yr=y+yradius,yh=y+height;var xwr=xw-radius,yhr=yh-yradius;ctx.beginPath();ctx.moveTo(xr,y);ctx.lineTo(xwr,y);ctx.quadraticCurveTo(xw,y,xw,yr);ctx.lineTo(xw,yhr);ctx.quadraticCurveTo(xw,yh,xwr,yh);ctx.lineTo(xr,yh);if(edge=="flush"){ctx.lineTo(x,yh);ctx.lineTo(x,y);}else if(edge=="arrow"){ctx.quadraticCurveTo(x,yh,x-radius,yhr);var multiplier=width<0?1:-1;ctx.lineTo(x+height/2*multiplier,y+height/2);// right arrow tip
ctx.lineTo(x-radius,yr);ctx.quadraticCurveTo(x,y,xr,y);}else{ctx.quadraticCurveTo(x,yh,x,yhr);ctx.lineTo(x,yr);ctx.quadraticCurveTo(x,y,xr,y);}ctx.closePath();if(params.backgroundColor)ctx.fillStyle=params.backgroundColor;if(stroke){ctx.stroke();}if(fill){ctx.fill();}if(params.txt)CIQ.createLabel(params);};/**
	 * Adds text on the canvas for the floating label over the y axis.
	 * 
	 * Uses native canvas functions to add the text. You can override this function if you wish to customize how the text on the floating y axis labels are displayed. See example. 
	 * @param  {object}  params
	 * @param  {object}  params.ctx      A valid HTML Canvas Context
	 * @param  {number}  params.x      Left position of drawing on canvas
	 * @param  {number}  params.txt    Text for the lavel
	 * @param  {number}  params.y      Y position of drawing on canvas
	 * @param  {object}  params.margin     Margin around the text
	 * @param  {object}  params.margin.left     Left margin of text
	 * @param  {object}  params.margin.top     Top margin of text
	 * @param  {number}  params.backgroundColor  Background color of the shape drawn under the text, if any. This is used to find the text color if there is no color specified
	 * @param  {number}  params.color Text color
	 * @memberof CIQ
	 * @since 3.0.0 -  New Function
	 * @example
		// customized version which adds a dash before the label text 
		CIQ.createLabel=function(params){
			// set the vertical alignment of the text 
			params.ctx.textBaseline="middle";
			
			// set the color for the text and background color behind the text
			params.ctx.fillStyle=params.color?params.color:CIQ.chooseForegroundColor(params.backgroundColor);
			
			if(	params.ctx.fillStyle === params.backgroundColor){	
				// Best effort to pick a foreground color that isn't the same as the background!
				if(params.backgroundColor.toUpperCase()=="#FFFFFF")
					params.ctx.fillStyle="#000000";
				else
					params.ctx.fillStyle="#FFFFFF";
			}
			
			//add the text to the canvas.
			// see we are adding a dash ('- ') before the text
			params.ctx.fillText('- '+params.txt, params.x + params.margin.left, params.y + params.margin.top);
			
			// set the horizontal alignment of the text  
			params.ctx.textAlign="left";
		};
	 */CIQ.createLabel=function(params){params.ctx.textBaseline="middle";params.ctx.fillStyle=params.color?params.color:CIQ.chooseForegroundColor(params.backgroundColor);if(params.ctx.fillStyle===params.backgroundColor){// Best effort to pick a foreground color that isn't the same as the background!
if(params.backgroundColor.toUpperCase()=="#FFFFFF")params.ctx.fillStyle="#000000";else params.ctx.fillStyle="#FFFFFF";}params.ctx.fillText(params.txt,params.x+params.margin.left,params.y+params.margin.top);params.ctx.textAlign="left";};/**
	 * Displays a floating label over the y axis. 
	 * 
	 * Draws a rectangle on the canvas, with an arrowhead on the screen, using using {@link CIQ.roundRect} with an `edge` setting of "arrow".  
	 * It then calls {@link CIQ.createLabel} to print the text over this background shape; which can be customized to control the text format for these labels.
	 * 
	 * Visual Reference:<br>
	 * ![roundRectArrow](roundRectArrow.png "roundRectArrow")
	 * @param  {object} params
	 * @param  {object} params.ctx    A valid HTML Canvas Context
	 * @param  {number} params.x      Left position of drawing on canvas
	 * @param  {number} params.top      Top position of drawing on canvas
	 * @param  {number} params.width  Width of rectangle
	 * @param  {number} params.height Height of rectangle
	 * @param  {number} params.radius Radius of rounding
	 * @param  {boolean} [params.fill]   Whether to fill the background, or just draw the rectangle border.
	 * @param  {number}  [params.txt]    Text for the label
	 * @param  {number}  [params.y]      Y position of drawing on canvas
	 * @param  {object}  [params.margin]     Margin around the text
	 * @param  {object}  [params.margin.left]     Left margin of text
	 * @param  {object}  [params.margin.top]     Top margin of text
	 * @param  {number}  [params.backgroundColor]  Background color. This is the background color of the rectangle.
	 * @param  {number}  [params.color] Text color
	 * @memberof CIQ
	 * @since 3.0.0 - function signature changed: This function now takes a params object instead of 8 different parameters
	 */CIQ.roundRectArrow=function(params){CIQ.roundRect(params,"arrow");};/**
	 * Displays a floating label over the y axis. 
	 * 
	 * Draws a rectangle on the canvas, with just the right side curved corners, using using {@link CIQ.roundRect} with an `edge` setting of "flush". 
	 * It then calls {@link CIQ.createLabel} to print the text over this background shape; which can be customized to control the text format for these labels.
	 * 
	 * Visual Reference:<br>
	 * ![semiRoundRect](semiRoundRect.png "semiRoundRect")
	 * @param  {object} params
	 * @param  {object} params.ctx    A valid HTML Canvas Context
	 * @param  {number} params.x      Left position of drawing on canvas
	 * @param  {number} params.top      Top position of drawing on canvas
	 * @param  {number} params.width  Width of rectangle
	 * @param  {number} params.height Height of rectangle
	 * @param  {number} params.radius Radius of rounding
	 * @param  {boolean} [params.fill]   Whether to fill the background, or just draw the rectangle border.
	 * @param  {number}  [params.txt]    Text for the label
	 * @param  {number}  [params.y]      Y position of drawing on canvas
	 * @param  {object}  [params.margin]     Margin around the text
	 * @param  {object}  [params.margin.left]     Left margin of text
	 * @param  {object}  [params.margin.top]     Top margin of text
	 * @param  {number}  [params.backgroundColor]  Background color. This is the background color of the rectangle.
	 * @param  {number}  [params.color] Text color
	 * @memberof CIQ
	 * @since 3.0.0 - function signature changed: This function now takes a params object instead of 8 different parameters
	 */CIQ.semiRoundRect=function(params){CIQ.roundRect(params,"flush");};/**
	 * Displays a floating label over the y axis. 
	 * 
	 * Draws a rectangle on the canvas using using {@link CIQ.roundRect} with a `radius` of 0
	 * It then calls {@link CIQ.createLabel} to print the text over this background shape; which can be customized to control the text format for these labels.
	 * 
	 * Visual Reference:<br>
	 * ![rect](rect.png "rect")
	 * @param  {object} params
	 * @param  {object} params.ctx    A valid HTML Canvas Context
	 * @param  {number} params.x      Left position of drawing on canvas
	 * @param  {number} params.top      Top position of drawing on canvas
	 * @param  {number} params.width  Width of rectangle
	 * @param  {number} params.height Height of rectangle
	 * @param  {boolean} [params.fill]   Whether to fill the background, or just draw the rectangle border.
	 * @param  {number}  [params.txt]    Text for the label
	 * @param  {number}  [params.y]      Y position of drawing on canvas
	 * @param  {object}  [params.margin]     Margin around the text
	 * @param  {object}  [params.margin.left]     Left margin of text
	 * @param  {object}  [params.margin.top]     Top margin of text
	 * @param  {number}  [params.backgroundColor]  Background color. This is the background color of the rectangle.
	 * @param  {number}  [params.color] Text color
	 * @memberof CIQ
	 * @since 3.0.0 - function signature changed: This function now takes a params object instead of 8 different parameters
	 */CIQ.rect=function(params){params.radius=0;CIQ.roundRect(params);};/**
	 * Displays floating text label, without any background shapes, over the y axis.
	 * 
	 * Calls {@link CIQ.createLabel}; which can be customized to control the text format for these labels.
	 * Will draw text in the color normally used for the background shape. For example, 'green' text for the up tick and 'red' text for a down tick. 
	 * 
	 * Visual Reference:<br>
	 * ![noop](noop.png "noop")
	 * @param  {object}  params
	 * @param  {object}  params.ctx      A valid HTML Canvas Context
	 * @param  {number}  params.x      Left position of drawing on canvas
	 * @param  {number}  params.txt    Text for the lavel
	 * @param  {number}  params.y      Y position of drawing on canvas
	 * @param  {object}  params.margin     Margin around the text
	 * @param  {object}  params.margin.left     Left margin of text
	 * @param  {object}  params.margin.top     Top margin of text
	 * @param  {number}  params.backgroundColor  Text color; since there is no background shape.

	 * @memberof CIQ
	 * @since 3.0.0 - function signature changed: This function now takes a params object instead of 8 different parameters
	 * @since 5.2.1 - Will now draw text in the color normally used for the background shape. For example, 'green' text for the up tick and 'red' text for a down tick.
	 */CIQ.noop=function(params){params.color=params.backgroundColor;CIQ.createLabel(params);};/**
	 * Turns a portion of raw text into multi-line text that fits in a given width. This is used for autoformatting of annotations
	 * @param  {object} ctx    A valid HTML Canvas Context
	 * @param  {string} phrase The text
	 * @param  {number} l      The width in pixels to fit the text within on the canvas
	 * @return {array}        An array of individual lines that should fit within the specified width
	 * @memberof CIQ
	 */CIQ.getLines=function(ctx,phrase,l){var wa=phrase.split(" "),phraseArray=[],lastPhrase="",measure=0;var fw=false;for(var i=0;i<wa.length;i++){var w=wa[i];measure=ctx.measureText(lastPhrase+w).width;if(measure<l){if(fw)lastPhrase+=" ";fw=true;lastPhrase+=w;}else{phraseArray.push(lastPhrase);lastPhrase=w;}if(i===wa.length-1){phraseArray.push(lastPhrase);break;}}return phraseArray;};/**
	 * Creates a string with a periodicity that is easy to read given a chart
	 * @param  {CIQ.ChartEngine} stx A chart object
	 * @return {string}     A periodicity value that can be displayed to an end user
	 * @memberof CIQ
	 */CIQ.readablePeriodicity=function(stx){var displayPeriodicity=stx.layout.periodicity;var displayInterval=stx.layout.interval;if(typeof stx.layout.interval=="number"&&stx.layout.timeUnit){displayPeriodicity=stx.layout.interval*stx.layout.periodicity;displayInterval=stx.layout.timeUnit;}else if(typeof stx.layout.interval=="number"&&!stx.layout.timeUnit){displayPeriodicity=stx.layout.interval*stx.layout.periodicity;displayInterval="minute";}if(displayPeriodicity%60===0&&displayInterval=="minute"){displayPeriodicity/=60;displayInterval="hour";}return displayPeriodicity+" "+stx.translateIf(displayInterval.capitalize());};/**
	 * Creates a document node which facilitates translation to other languages, if stx.translationCallback callback function is set.
	 * If there is no translationCallback, a standard text node is returned.
	 * @param  {CIQ.ChartEngine} stx The chart object
	 * @param  {string} english The word to translate
	 * @param {string} [language] Language. Defaults to CIQ.I18N.language.
	 * @return {HTMLElement}	A node in the following form if translationCallback exists:
	 * 					<language original="english">translation</language>
	 * 							If it does not exist, a text node is returned.
	 * @memberof CIQ
	 */CIQ.translatableTextNode=function(stx,english,language){if(stx.translationCallback){var translationNode=document.createElement("translate");translationNode.setAttribute("original",english);translationNode.innerHTML=stx.translationCallback(english,language);return translationNode;}return document.createTextNode(english);};/**
	 * <span class="animation">Animation Loop</span>
	 * Clears the canvas. Uses the fastest known method except on the legacy Android browser which had many problems!
	 * @param  {object} canvas A valid HTML canvas object
	 * @param  {object} [stx]    A chart object, only necessary for old Android browsers on problematic devices
	 * @memberof CIQ
	 */CIQ.clearCanvas=function(canvas,stx){canvas.isDirty=false;var ctx=canvas.context;ctx.clearRect(0,0,canvas.width,canvas.height);if(CIQ.isAndroid&&!CIQ.is_chrome&&!CIQ.isFF){// Android browser last remaining
// one to need this clearing method
if(CIQ.ChartEngine.useOldAndroidClear&&stx){ctx.fillStyle=stx.containerColor;ctx.fillRect(0,0,canvas.width,canvas.height);ctx.clearRect(0,0,canvas.width,canvas.height);}var w=canvas.width;canvas.width=1;canvas.width=w;}};CIQ.monthLetters=["J","F","M","A","M","J","J","A","S","O","N","D"];CIQ.monthAbv=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];/* Enumerated types for time units */CIQ.MILLISECOND=1;CIQ.SECOND=1000;CIQ.MINUTE=60*CIQ.SECOND;CIQ.HOUR=60*CIQ.MINUTE;CIQ.DAY=24*CIQ.HOUR;CIQ.WEEK=7*CIQ.DAY;CIQ.MONTH=31*CIQ.DAY;CIQ.YEAR=366*CIQ.DAY;CIQ.DECADE=10*CIQ.YEAR-7*CIQ.DAY;/**
	 * Convenience function for creating a displayable month name using CIQ.monthLetters and CIQ.monthAbv.
	 * Please note that those arrays may not be utilized if the library is used in conjunction with Internationalization.
	 * This method is used primarily to create the x-axis of a chart
	 * @param  {number} i              The numerical month (0-11)
	 * @param  {boolean} displayLetters - True if just the first letter should be displayed (such as a tight display)
	 * @param  {object} [stx]            The chart object, only necessary if Internationalization is in use
	 * @return {string}                String representation of the month
	 * @memberof CIQ
	 */CIQ.monthAsDisplay=function(i,displayLetters,stx){if(displayLetters){if(stx&&stx.monthLetters)return stx.monthLetters[i];return CIQ.monthLetters[i];}if(stx&&stx.monthAbv)return stx.monthAbv[i];return CIQ.monthAbv[i];};/**
	 * Displays a time in readable form. If Internationalization is in use then the time will be in 24 hour Intl numeric format
	 * @param  {date} dt  JavaScript Date object
	 * @param  {object} [stx] Chart object if Internationalization is in use
	 * @param {number} [precision] Precision to use. If `null` then `hh:mm`. `CIQ.SECOND` then `hh:mm:ss`. If `CIQ.MILLISECOND` then `hh:mm:ss.mmmmm`
	 * @return {string}     Human friendly time, usually hh:mm
	 * @memberof CIQ
	 */CIQ.timeAsDisplay=function(dt,stx,precision){var internationalizer=stx?stx.internationalizer:null;if(internationalizer){if(precision==CIQ.SECOND)return internationalizer.hourMinuteSecond.format(dt);else if(precision==CIQ.MILLISECOND)return internationalizer.hourMinuteSecond.format(dt)+"."+dt.getMilliseconds();return internationalizer.hourMinute.format(dt);}var min=dt.getMinutes();if(min<10)min="0"+min;var str=dt.getHours()+":"+min;var sec="";if(precision<=CIQ.SECOND){sec=dt.getSeconds();if(sec<10)sec="0"+sec;str+=":"+sec;}if(precision==CIQ.MILLISECOND){var msec=dt.getMilliseconds();if(msec<10)msec="00"+msec;else if(msec<100)msec="0"+msec;str+="."+msec;}return str;};/**
	 * Displays a date according to the current chart settings and periodicity. It will format the date according to the folllowing order:
	 * 1. xAxis formatter
	 * 2. Internationalization
	 * 3. default
	 * 		a. Daily: mm-dd-yyyy
	 * 		b. Intraday: mm/dd hh:mm[:ss[:ms]]
	 * 
	 * This method is used in {@link CIQ.ChartEngine.AdvancedInjectable#headsUpHR} to format the floating label over the x axis, 
	 * and can be overitten as needed to achieve the desired results.
	 * 
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {date} dt 	JavaScript date
	 * @return {string}		Formatted date
	 * @memberof CIQ
	 * @since 4.0.0
	 */CIQ.displayableDate=function(stx,chart,dt){function twoPlaces(val){if(val<10)return"0"+val;return val;}var displayableDate="";var interval=stx.layout.interval;var isDaily=CIQ.ChartEngine.isDailyInterval(interval);if(chart.xAxis.formatter){displayableDate=chart.xAxis.formatter(dt);}else if(stx.internationalizer){displayableDate=stx.internationalizer.monthDay.format(dt);if(!isDaily)displayableDate+=" "+stx.internationalizer.hourMinute.format(dt);else{if(interval=="month")displayableDate=stx.internationalizer.yearMonth.format(dt);else displayableDate=stx.internationalizer.yearMonthDay.format(dt);}}else{var m=twoPlaces(dt.getMonth()+1);var d=twoPlaces(dt.getDate());var h=twoPlaces(dt.getHours());var mn=twoPlaces(dt.getMinutes());if(isDaily){displayableDate=interval=="month"?m+"-":m+"-"+d+"-";displayableDate+=dt.getFullYear();}else{displayableDate=m+"/"+d+" "+h+":"+mn;var isSecond=chart.xAxis.activeTimeUnit&&chart.xAxis.activeTimeUnit<=CIQ.SECOND||stx.layout.timeUnit=="second";var isMS=chart.xAxis.activeTimeUnit&&chart.xAxis.activeTimeUnit<=CIQ.MILLISECOND||stx.layout.timeUnit=="millisecond";if(isSecond||isMS){var sec=twoPlaces(dt.getSeconds());displayableDate+=":"+sec;if(isMS){var mil=twoPlaces(dt.getMilliseconds());if(mil<100)mil="0"+mil;displayableDate+=":"+mil;}}}}return displayableDate;};/**
	 * Given a numeric price that may be a float with rounding errors, this will trim off the trailing zeroes
	 * @param  {number} price The price
	 * @return {number}       The price trimmed of trailing zeroes
	 * @memberof CIQ
	 */CIQ.fixPrice=function(price){if(!price&&price!==0)return null;var p=price.toFixed(10);for(var i=p.length-1;i>1;i--){if(p.charAt(i)!="0")break;}p=p.substring(0,i+1);return parseFloat(p);};/**
	 * Condenses a number into abbreviated form by adding "k","m","b" or "t".
	 * This method is used in the y-axis for example with volume studies.
	 * @param  {number} txt - A numerical value
	 * @return {string}     Condensed version of the number if over 999, otherwise returns `txt` untouched
	 * @example
	 * // This will return 12m
	 * condenseInt(12000000);
	 * @memberof CIQ
	 * @since 4.0.0 now returns `txt` untouched if under 1000. Previously was removing all decimal places.
	 */CIQ.condenseInt=function(txt){if(txt===null||typeof txt=="undefined")return"";if(txt===Infinity||txt===-Infinity)return"n/a";if(txt>0){if(txt>1000000000000)txt=Math.round(txt/100000000000)/10+"t";else if(txt>100000000000)txt=Math.round(txt/1000000000)+"b";//100b
else if(txt>10000000000)txt=(Math.round(txt/100000000)/10).toFixed(1)+"b";//10.1b
else if(txt>1000000000)txt=(Math.round(txt/10000000)/100).toFixed(2)+"b";//1.11b
else if(txt>100000000)txt=Math.round(txt/1000000)+"m";//100m
else if(txt>10000000)txt=(Math.round(txt/100000)/10).toFixed(1)+"m";//10.1m
else if(txt>1000000)txt=(Math.round(txt/10000)/100).toFixed(2)+"m";//1.11m
else if(txt>100000)txt=Math.round(txt/1000)+"k";//100k
else if(txt>10000)txt=(Math.round(txt/100)/10).toFixed(1)+"k";//10.1k
else if(txt>1000)txt=(Math.round(txt/10)/100).toFixed(2)+"k";//1.11k
else txt=txt.toString();}else{if(txt<-1000000000000)txt=Math.round(txt/100000000000)/10+"t";else if(txt<-1000000000)txt=Math.round(txt/100000000)/10+"b";else if(txt<-1000000)txt=Math.round(txt/100000)/10+"m";else if(txt<-1000)txt=Math.round(txt/100)/10+"k";else txt=txt.toString();}return txt;};/**
	 * Determines how many decimal places the security trades. This is a callback from CIQ.ChartEngine.calculateTradingDecimalPlaces and you
	 * can override this with your own functionality. The default algorithm is to check the most recent 50 quotes and find the maximum number
	 * of decimal places that the stock has traded. This will work for most securities but if your market data feed has rounding errors
	 * or bad data then you may want to supplement this algorithm that checks the maximum value by security type.
	 * @param {object} params Parameters
	 * @param  {CIQ.ChartEngine} params.stx    The chart object
	 * @param {CIQ.ChartEngine.Chart} params.chart The chart in question
	 * @param  {object} params.symbol The symbol object. If you create charts with just stock symbol then symbolObject.symbol will contain that symbol
	 * @return {number}        The number of decimal places
	 * @memberof CIQ
	 */CIQ.calculateTradingDecimalPlaces=function(params){var chart=params.chart;var decimalPlaces=2;var quotesToCheck=50;// Check up to 50 recent quotes
var masterData=chart.masterData;if(masterData&&masterData.length>quotesToCheck){// exclude the current quote by setting i=2 in case animation is enabled. Animation uses very large decimals to allow for smooth movements.
for(var i=2;i<quotesToCheck;i++){var position=masterData.length-i;if(position<0)break;var quotes=masterData[position];if(quotes.Close&&typeof quotes.Close=='number'){var cs=quotes.Close.toString();var point=cs.indexOf('.');if(point!=-1){var dp=cs.length-point-1;if(dp>decimalPlaces){decimalPlaces=dp;}}}}}var maxDecimalPlaces=chart.yAxis.maxDecimalPlaces;if(decimalPlaces>maxDecimalPlaces)decimalPlaces=maxDecimalPlaces;return decimalPlaces;};/**
	 * Fills an area on the chart, usually created by a study.
	 * @param  {CIQ.ChartEngine} stx    The chart object
	 * @param  {array} points  The set of points, this is an array of chart coordinates in array form
	 * 							e.g. [[x1,y1],[x2,y2]].  The points should be arranged to form a loop;
	 * 							the loop need not be closed.
	 * @param  {object} params  parameters
	 * @param  {string} [params.color]  color to fill the area
	 * @param  {number} [params.opacity] opacity of fill, 0 to 1.  Defaults to 0.1
	 * @param  {number} [params.tension] Tension for splining. Requires "js/thirdparty/splines.js"
	 * @param  {string} [params.panelName] Name of panel to draw on.  If omitted or invalid, area may fill over top or bottom of plot area
	 * @param  {CIQ.ChartEngine.YAxis} [params.yAxis] The y-axis for the area (will use default axis if not specified)
	 * @since
	 * <br>&bull; 01-2015-20 `params.panelName` added
	 * <br>&bull; 4.0.0 Combined arguments into params, added tension
	 * <br>&bull; 5.2.0 `params.yAxis` added
	 * @memberof CIQ
	 */CIQ.fillArea=function(stx,points,params){if(!points.length)return;var ctx=stx.chart.context;var globalAlpha=ctx.globalAlpha;var color=arguments[2],opacity=arguments[3],panelName=arguments[4],tension=0,yAxis=null;if(params&&_typeof(params)=="object"){color=params.color;opacity=params.opacity;tension=params.tension;panelName=params.panelName;yAxis=params.yAxis;}if(!opacity&&opacity!==0)opacity=0.2;if(color=="auto")color=stx.defaultColor;ctx.globalAlpha=opacity;if(color)ctx.fillStyle=color;var b=Number.MAX_VALUE;var t=b*-1;var panel=stx.panels[panelName];if(panel){t=(yAxis||panel.yAxis).top;b=(yAxis||panel.yAxis).bottom;ctx.save();ctx.beginPath();ctx.rect(panel.left,t,panel.width,b-t);ctx.clip();}ctx.beginPath();var i;if(tension){var flatPoints=[];for(i=0;i<points.length-2;i++){flatPoints.push(points[i][0],points[i][1]);}splinePlotter.plotSpline(flatPoints,tension,ctx);for(i=points.length-2;i<points.length;i++){ctx.lineTo(Math.round(points[i][0]),Math.round(points[i][1]));// Chrome 58/59 issue with gradient fills.  Less severe if we round these last 2 points.
}}else{ctx.moveTo(points[0][0],points[0][1]);for(i=1;i<points.length;i++){ctx.lineTo(points[i][0],points[i][1]);}}ctx.closePath();ctx.fill();if(panel)ctx.restore();ctx.globalAlpha=globalAlpha;};/**
	 * Fills an area on the chart delimited by non intersecting top and bottom bands (channel), usually created by a study.
	 * @param {CIQ.ChartEngine} stx The chart object
	 * @param {object} parameters The configuration parameters
	 * @param {string} parameters.panelName The name of the panel
	 * @param {boolean} parameters.noSlopes If set then chart will fill rectangles with no transition lines between levels
	 * @param {string} parameters.topBand The name of the quote field to use as the top band
	 * @param {string} parameters.bottomBand The name of the quote field to use as the bottom band
	 * @param {number} parameters.opacity The color opacity/transparency as a decimal number (1= full opacity / no transparency)
	 * @param {string} parameters.color The fill color
	 * @memberof CIQ
	 * @since 4.1.2 Removed quotes argument; function always uses dataSegment.
	 * @example
	 * CIQ.prepareChannelFill(stx,{"color":dngradient,"opacity":1,"panelName":sd.name,"topBand":"Zero "+sd.name,"bottomBand":"Under "+sd.name});
	 */CIQ.prepareChannelFill=function(stx,parameters){if(!parameters||parameters instanceof Array)parameters=arguments[2];// backwards compatibility for when quotes was the second argument
if(!parameters.gapDisplayStyle&&parameters.gapDisplayStyle!==false)parameters.gapDisplayStyle=parameters.gaps;var panel=stx.panels[parameters.panelName],chart=stx.chart,strokeStyle=chart.context.strokeStyle;var saveParams={noDraw:parameters.noDraw,gapDisplayStyle:parameters.gapDisplayStyle};var chParams=CIQ.ensureDefaults(parameters,{noDraw:true,gapDisplayStyle:{},yAxis:panel.yAxis});var rcTop=stx.plotDataSegmentAsLine(parameters.topBand,panel,chParams);var rcBottom=stx.plotDataSegmentAsLine(parameters.bottomBand,panel,chParams);parameters.noDraw=saveParams.noDraw;parameters.gapDisplayStyle=saveParams.gapDisplayStyle;var points=[];for(var t=0;t<rcTop.points.length;t+=2){points.push([rcTop.points[t],rcTop.points[t+1]]);}for(var b=rcBottom.points.length-1;b>=0;b-=2){points.push([rcBottom.points[b-1],rcBottom.points[b]]);}CIQ.fillArea(stx,points,parameters);return;};/**
	 * Fills an area on the chart delimited by a series line closed off by a horizontal threshold line, usually created by a study.
	 * @param {CIQ.ChartEngine} stx The chart object
	 * @param {object} parameters The configuration parameters
	 * @param {string} [parameters.panelName] The name of the panel
	 * @param {string} [parameters.band] The name of the quote field to use as the series line
	 * @param {number} [parameters.threshold] The price where the horizontal line hits yaxis/series to enclose the fill area.  If not set will look to parameters.reverse to determine if threshold is the lowest or highest value of the plot.
	 * @param {boolean} [parameters.reverse] Valid only if parameters.threshold is not set.  If this parameter is set to true, threshold will be highest value of plot.  Otherwise, threshold will be lowest value of plot.
	 * @param {number} [parameters.direction] 1 to fill from the threshold upwards or -1 to fill from the threshold downwards
	 * @param {object} [parameters.edgeHighlight] Set to either a color or a Styles object as returned from {@link CIQ.ChartEngine#canvasStyle} to draw the threshold line.
	 * @param {object} [parameters.edgeParameters] The parameters to draw the threshold line as required by {@link CIQ.ChartEngine#plotLine}
	 * @param {object} [parameters.gapDisplayStyle] Gap object as set by See {@link CIQ.ChartEngine#setGapLines}.
	 * @param {number} [parameters.opacity] The color opacity/transparency as a decimal number (1= full opacity / no transparency).  Default is 0.3.
	 * @param {boolean} [parameters.step] True for a step chart
	 * @param {number} [parameters.tension] Tension for splining. Requires "js/thirdparty/splines.js"
	 * @param {string} [parameters.color] The fill color
	 * @param {boolean} [parameters.roundOffEdges] Round the first and last point's X value to the previous and next integer, respectively.
	 * @param {CIQ.ChartEngine.YAxis} [parameters.yAxis] The y-axis for the band (will use default axis if not specified)
	 * @memberof CIQ
	 * @since
	 * <br>&bull; 4.0.0 Added `parameters.reverse`, made `parameters.threshold` optional in case filling to top or bottom of panel
	 * <br>&bull; 4.1.2 Removed quotes argument; function always uses dataSegment.
	 * <br>&bull; 5.2.0 `params.yAxis` added
	 * <br>&bull; 5.2.0 `parameters.gaps` has been deprecated and replaced with `parameters.gapDisplayStyle`
	 * @example
	 * if(sd.outputs.Gain) CIQ.preparePeakValleyFill(stx,{panelName:sd.panel, band:"Result " + sd.name, threshold:sd.study.centerline, direction:1, color:sd.outputs.Gain});
	 * if(sd.outputs.Loss) CIQ.preparePeakValleyFill(stx,{panelName:sd.panel, band:"Result " + sd.name, threshold:sd.study.centerline, direction:-1, color:sd.outputs.Loss});
	 */CIQ.preparePeakValleyFill=function(stx,parameters){if(!parameters||parameters instanceof Array)parameters=arguments[2];// backwards compatibility for when quotes was the second argument
if(!parameters.gapDisplayStyle&&parameters.gapDisplayStyle!==false)parameters.gapDisplayStyle=parameters.gaps;var panel=stx.panels[parameters.panelName],yAxis=panel.yAxis,chart=stx.chart,context=chart.context,strokeStyle=context.strokeStyle;var saveParams={noDraw:parameters.noDraw,gapDisplayStyle:parameters.gapDisplayStyle};var rc=stx.plotDataSegmentAsLine(parameters.band,panel,CIQ.ensureDefaults(parameters,{noDraw:true,gapDisplayStyle:{}}));parameters.noDraw=saveParams.noDraw;parameters.gapDisplayStyle=saveParams.gapDisplayStyle;var threshold=parameters.threshold,direction=parameters.direction,reverse=parameters.reverse,gapDisplayStyle=parameters.gapDisplayStyle;if(parameters.yAxis)yAxis=parameters.yAxis;var yMax=-Number.MAX_VALUE,yMin=Number.MAX_VALUE,yThresh=reverse?yMax:yMin;if(threshold||threshold===0)yThresh=stx.pixelFromPrice(threshold,panel,yAxis);//where threshold hits yaxis
var points=[],length=rc.points.length;for(var i=0;i<length;i+=2){var x=rc.points[i],y=rc.points[i+1],x1,y1;if(parameters.roundOffEdges){// round off to whole pixels so color interpolation does not occur when used with fillIntersection
if(i===0)x=Math.floor(x);else if(i+2==length)x=Math.ceil(x);}if(isNaN(y))continue;var limit=y>yThresh&&direction>0||y<yThresh&&direction<0;if(!limit){points.push([x,y]);yMax=Math.max(y,yMax);yMin=Math.min(y,yMin);}if(i<length-3){x1=rc.points[i+2];y1=rc.points[i+3];if(y<yThresh&&y1>yThresh||y>yThresh&&y1<yThresh){x+=(yThresh-y)*(x1-x)/(y1-y);points.push([x,yThresh]);}}}length=points.length;if(!length)return;var edgeParameters=parameters.edgeParameters,edgeHighlight=parameters.edgeHighlight;if(edgeHighlight){if(edgeParameters.lineWidth>100)edgeParameters.lineWidth=1;// trap case where no width is specified in the css
for(var p=0;p<length-1;p++){var point0=points[p],point1=points[p+1];if(point0[1]==yThresh&&point1[1]==yThresh)continue;// here we avoid drawing a horizontal line along the threshold
if(point0[0]==point1[0]&&stx.layout.candleWidth>=1){// here we try to avoid drawing a vertical line to the threshold (like a gap boundary)
if(point0[1]==yThresh&&points[p-1]&&points[p-1][1]==yThresh)continue;if(point1[1]==yThresh&&points[p+2]&&points[p+2][1]==yThresh)continue;}stx.plotLine(point0[0],point1[0],point0[1],point1[1],parameters.edgeHighlight,"segment",chart.context,panel,edgeParameters);}}if(!threshold&&threshold!==0){yThresh=reverse?Math.min(yMin,yAxis.top):Math.max(yMax,yAxis.bottom);}points.push([points[length-1][0],yThresh],[points[0][0],yThresh]);var opacity=parameters.opacity;if(!opacity&&opacity!==0)parameters.opacity=0.3;CIQ.fillArea(stx,points,parameters);// Now fill in the mountain area under the gap, if required
if(gapDisplayStyle&&gapDisplayStyle.color&&gapDisplayStyle.fillMountain&&!parameters.tension&&!CIQ.isTransparent(gapDisplayStyle.color)&&!CIQ.isTransparent(parameters.color)/*need this last check for baseline_mountain to render properly*/){context.save();if(context.fillStyle instanceof CanvasGradient){var gradient=context.createLinearGradient(0,direction===1?panel.top:panel.bottom,0,yThresh);gradient.addColorStop(0,CIQ.hexToRgba(CIQ.colorToHex(gapDisplayStyle.color),60));gradient.addColorStop(1,CIQ.hexToRgba(CIQ.colorToHex(gapDisplayStyle.color),10));context.fillStyle=gradient;}else{context.fillStyle=gapDisplayStyle.color;}var poly=[];var myParams={opacity:parameters.opacity,panelName:parameters.panelName};for(i=0;i<rc.gapAreas.length;i++){var datum=rc.gapAreas[i];var start=datum.start;var end=datum.end;var thresh=datum.threshold;if(start){poly=[[start[0],start[1]],[start[0],thresh]];}else{poly.push([end[0],thresh],[end[0],parameters.step?poly[0][1]:end[1]]);}if(poly.length==4){CIQ.fillArea(stx,poly,myParams);if(parameters.step){stx.plotLine(poly[0][0],poly[3][0],poly[0][1],poly[0][1],gapDisplayStyle,"segment",context,panel,gapDisplayStyle);stx.plotLine(poly[3][0],poly[3][0],poly[0][1],poly[3][1],gapDisplayStyle,"segment",context,panel,gapDisplayStyle);}else{stx.plotLine(poly[0][0],poly[3][0],poly[0][1],poly[3][1],gapDisplayStyle,"segment",context,panel,gapDisplayStyle);}}}context.restore();}parameters.opacity=opacity;};/**
	 * Fills an area on the chart delimited by intersecting bands.
	 *
	 * Bands can be anchored by different y-axis as determined by the `parameters.topAxis` and `parameters.bottomAxis` parameters.
	 * @param {CIQ.ChartEngine} stx The chart object
	 * @param {string} panelName The name of the panel
	 * @param {object} parameters The configuration parameters
	 * @param {string} parameters.topBand The name of the quote field to use as the top band
	 * @param {string} parameters.bottomBand The name of the quote field to use as the bottom band
	 * @param {string} [parameters.topSubBand] Name of the field within the top band to use, for example when plotting a series
	 * @param {string} [parameters.bottomSubBand] Name of the field within the bottom band to use, for example when plotting a series
	 * @param {string} parameters.topColor The color of the top band, used to fill in a cloud whose top edge is the topBand
	 * @param {string} parameters.bottomColor The color the bottom band, used to fill in a cloud whose top edge is the bottomBand
	 * @param {number} [parameters.tension] Tension for splining. Requires "js/thirdparty/splines.js"
	 * @param {CIQ.ChartEngine.YAxis} parameters.topAxis The y-axis for the top band (will use default axis if not specified)
	 * @param {CIQ.ChartEngine.YAxis} parameters.bottomAxis The y-axis for the bottom band (will use default axis if not specified)
	 * @param {boolean} parameters.skipTransform If true then any transformations (such as comparison charting) will not be applied
	 * @param {number} parameters.opacity The color opacity/transparency as a decimal number (1= full opacity / no transparency).  Default is 0.3.
	 * @memberof CIQ
	 * @since
	 * <br>&bull; 4.0.0 Changed `sd` argument to `panelName` argument, added `parameters.topColor`, `parameters.bottomColor`, `parameters.opacity` and `parameters.skipTransform`, removed `parameters.fillFuture`
	 * <br>&bull; 4.1.2 Removed quotes argument; function always uses dataSegment.
	 * @example
		var parameters={
			topBand: "Leading Span A " + sd.name,
			bottomBand: "Leading Span B " + sd.name,
			topColor: "green",
			bottomColor: "red"
		};
		CIQ.fillIntersecting(stx, sd.panel, parameters)
	 */CIQ.fillIntersecting=function(stx,panelName,parameters){if(!parameters||parameters instanceof Array)parameters=arguments[3];// backwards compatibility for when quotes was the second argument
var topBand=parameters.topBand,bottomBand=parameters.bottomBand;var topSubBand=parameters.topSubBand,bottomSubBand=parameters.bottomSubBand;var topColor=parameters.topColor,bottomColor=parameters.bottomColor;var panel=panelName;if(panel.panel){// backwards compatibility, where this argument is really a studyDescriptor
if(panel.outputs&&panel.outputMap){if(!topColor)topColor=panel.outputs[panel.outputMap[topBand]];if(!bottomColor)bottomColor=panel.outputs[panel.outputMap[bottomBand]];}panel=panel.panel;}panel=stx.panels[panel];//make a copy of what's there now
var context=stx.chart.context;var sctx=stx.scratchContext;if(!sctx){var scratchCanvas=context.canvas.cloneNode(true);sctx=stx.scratchContext=scratchCanvas.getContext("2d");}sctx.canvas.height=context.canvas.height;sctx.canvas.width=context.canvas.width;sctx.drawImage(context.canvas,0,0);context.clearRect(0,0,context.canvas.width,context.canvas.height);//then fill the intersections
var alpha=0.3;if(parameters.opacity)alpha=parameters.opacity;context.save();context.globalCompositeOperation="xor";var params={band:topBand,subField:topSubBand,color:topColor,opacity:1,panelName:panel.name,yAxis:parameters.topAxis,skipTransform:parameters.skipTransform,tension:parameters.tension,roundOffEdges:true};CIQ.preparePeakValleyFill(stx,params);CIQ.extend(params,{band:bottomBand,subField:bottomSubBand,color:bottomColor,yAxis:parameters.bottomAxis});CIQ.preparePeakValleyFill(stx,params);//now redraw with correct alpha
context.globalAlpha=alpha;context.globalCompositeOperation="copy";context.scale(1/stx.adjustedDisplayPixelRatio,1/stx.adjustedDisplayPixelRatio);context.drawImage(context.canvas,0,0);//finally, restore what we copied, but _under_ the intersected fills we just made
context.globalAlpha=1;context.globalCompositeOperation="destination-over";context.drawImage(stx.scratchContext.canvas,0,0);context.restore();};/**
	 * Draws an item in the legend and returns the position for the next item
	 * @param {CIQ.ChartEngine} stx The chart object
	 * @param  {array} xy    An X,Y tuple (from chart.legend)
	 * @param  {string} label The text to print in the item
	 * @param  {string} color The color for the background of the item
	 * @return {array}       A tuple containing the X,Y position for the next the item
	 * @memberof CIQ
	 */CIQ.drawLegendItem=function(stx,xy,label,color,opacity){if(!opacity)opacity=1;var x=xy[0],y=xy[1],w=10,h=10;var context=stx.chart.context;context.globalAlpha=opacity;context.fillStyle=color;context.fillRect(x,y,w,h);context.globalAlpha=1;x+=w+2;// 2 px spacing between box and text
context.fillStyle=stx.defaultColor;context.fillText(label,x,y);x+=context.measureText(label).width+6;// 6 px spacing between labels
return[x,y];};/**
	 * Default function to draw a legend for the series that are displayed on the chart.
	 * 
	 * See {@link CIQ.ChartEngine.Chart#legendRenderer} for activation and customization details.
	 * 
	 * @param {CIQ.ChartEngine} stx The chart object to draw
	 * @param  {object} params parameters for drawing the legend
	 * @param  {CIQ.ChartEngine.Chart} [params.chart] The chart object
	 * @param  {object} [params.legendColorMap] A map of series names to colors and display symbols ( example  IBM:{color:'red', display:'Int B M'} )
	 * @param  {object} [params.coordinates] Coordinates upon which to draw the items, in pixels relative to top left of panel ( example  {x:50, y:0} ).  If null, uses chart.legend
	 * @param  {boolean} [params.noBase] Set to true to not draw the base (the chart symbol's color) in the legend
	 * @memberof CIQ
	 */CIQ.drawLegend=function(stx,params){var coordinates=params.coordinates;var context=stx.chart.context;context.textBaseline="top";var rememberFont=context.font;stx.canvasFont("stx-legend",context);var chart=params.chart;if(!coordinates)coordinates=chart.legend;var xy=[coordinates.x,coordinates.y];var lineColor=stx.defaultColor;for(var i=0;i<2;i++){// loop twice, first for the base then again for the series
for(var field in params.legendColorMap){var legendItem=params.legendColorMap[field];if(legendItem.isBase&&(i||params.noBase))continue;if(!legendItem.isBase&&!i)continue;var c;if(legendItem.color instanceof Array){var colors=legendItem.color;for(c=colors.length-1;c>=0;c--){if(CIQ.isTransparent(colors[c]))colors.splice(c,1);}if(colors.length>1){var grd=context.createLinearGradient(xy[0],xy[1],xy[0]+10,xy[1]);for(c=0;c<colors.length;c++){grd.addColorStop(c/(colors.length-1),colors[c]);}lineColor=grd;}else if(colors.length>0){lineColor=colors[0];}else{lineColor=stx.getCanvasColor("stx_line_chart");}}else{lineColor=null;}if(lineColor){var display=field;if(legendItem.display){display=legendItem.display;}if(!display){if(chart.symbolDisplay){display=chart.symbolDisplay;}else{display=chart.symbol;}}if(xy[0]+context.measureText(display).width>chart.panel.right){xy=[coordinates.x,coordinates.y+context.measureText("M").width+6];// M is squarish, with width roughly equaling height: https://stackoverflow.com/questions/1134586/how-can-you-find-the-height-of-text-on-an-html-canvas
}xy=CIQ.drawLegendItem(stx,xy,display,lineColor,legendItem.opacity);}}}context.font=rememberFont;};/**
	 * This method will return an tuple [min,max] that contains the minimum
	 * and maximum values in the series where values are series[field]
	 * @param {array} series The series
	 * @param {string} field The name of the series to look at
	 * @param {string} subField The name of the field within the series to look at
	 * @param {boolean} highLow True when comparing max High/min Low vs a specific field
	 * @return {array} Tuple containing min and max values in the series
	 * @memberof CIQ
	 * @since 5.1.0 added subField, highLow arguments
	 */CIQ.minMax=function(series,field,subField,highLow){var min=Number.MAX_VALUE;var max=Number.MAX_VALUE*-1;if(!subField)subField="Close";var highField=highLow?"High":subField;var lowField=highLow?"Low":subField;for(var i=0;i<series.length;i++){var entry=series[i];if(!entry)continue;var fVal=entry[field];if(!fVal&&fVal!==0)continue;var sfVal=fVal;if(_typeof(fVal)==="object")sfVal=fVal[highField];if(!isNaN(sfVal)&&(sfVal||sfVal===0)){max=Math.max(max,sfVal);}if(_typeof(fVal)==="object")sfVal=fVal[lowField];if(!isNaN(sfVal)&&(sfVal||sfVal===0)){min=Math.min(min,sfVal);}}return[min,max];};/**
	 * Returns true if two symbols match. Symbols can be strings or symbolObjects. By default, the "symbol" member is compared, and then
	 * a "source" member if one exists.
	 * If the objects have an "equals()" function member then that will be used for comparison.
	 * You can override this with your own method if you have other requirements.
	 * @param  {object} left  Symbol object
	 * @param  {object} right Symbol object
	 * @return {boolean}       true if the same
	 * @memberOf  CIQ
	 */CIQ.symbolEqual=function(left,right){if(!left||!right)return false;if(_typeof(left)!="object")left={symbol:left};if(_typeof(right)!="object")right={symbol:right};if(typeof left.equals=="function"){return left.equals(right);}var l=left.symbol;var r=right.symbol;if(l)l=l.toUpperCase();if(r)r=r.toUpperCase();if(l!=r)return false;if(left.source!=right.source)return false;return true;};/**
	 * Convenience function to iterate through the charts masterData and add a data member.
	 * Used to load initial data for additional series and study symbols and should normally not be called directly. Unless used inside a study initialize function; use {@link CIQ.ChartEngine#addSeries} or {@link CIQ.ChartEngine#updateChartData} instead.
	 * Can be used with any array of data objects which contains at least the 'DT' (date in javascript format) and 'Close' ( close/last price ) elements of an [OHLC object](index.html#data-format).
	 * @param {object} params Parameters object
	 * @param {CIQ.ChartEngine} [params.stx]       	A chart object
	 * @param {array} [params.data]		 			The data to add (which should align or closely align with the chart data by date)
	 * @param {array} [params.fields] 				The fields from the incoming data objects to extract and add as the new members in each masterData object. One new member will be added per field using the exact same name as in the incoming data. Example: (for each filed name in the array) masterData[mIterator][fieldN]=data[dIterator][fieldN]. Takes precedence over `createObject`, `label` and `fieldForLabel` parameters.  Use fields=["*"] to copy all fields in the data object.
	 * @param {string} [params.label]     			The name of the new member to add into each masterData object. Example: masterData[mIterator][label]=data[dIterator]["Close"]. Required unless "fields" is specified.
	 * @param {string} [params.createObject] 		If truthy, then each complete incoming data object will be assigned to the new label member in each masterData object. If set to "aggregate", will consolidate the OHLV data with the new data. The data object is expected to be a properly formatted OHLC record, or at least contain a 'Close' price, otherwise this parameter will not be honored. Example: masterData[mIterator][label]=data[dIterator]. This behavior is mutually exclusive with `fields`. <br>If the data object contains a 'Value' field, this parameter will not be honored and instead the 'Value' field will be used as follows: masterData[mIterator][label] = data[dIterator]["Value"];
	 * @param {string} [params.fieldForLabel="Close"] 	If set, this will be the field from each incoming data object that will be copied into the new label member in each masterData object. If not set, "Close" or "Value" is used, whichever exists; and if neither exists, it will attempt to copy over a field matching the `label` name. Example: masterData[mIterator][label]=data[dIterator][fieldForLabel]. This behavior is mutually exclusive with `fields` and `createObject`.
	 * @param {boolean} [params.fillGaps]			If true then gaps in data will be filled by carrying forward the value of from the previous bar.
	 * @param {boolean} [params.noCleanupDates]		If true then dates have been cleaned up already by calling {@link CIQ.ChartEngine#doCleanupDates}, so do not do so in here.
	 * @param {CIQ.ChartEngine.Chart} [params.chart]   The chart to update
	 * @memberof CIQ
	 * @example
	 * //data element format if neither fields, fieldForLabel or createObject are used
	 * {DT:epoch,Date:strDate,Value:value}
	 * {DT:epoch,Date:strDate,Close:value }
	 * //data element format if fields is used
	 * {DT:epoch,Date:strDate,Field1:value,Field2:value,Field3:value,Field4:value}
	 * //data element format if createObject is used
	 * {DT:epoch,Date:strDate,AnyOtherData:otherData,MoreData:otherData,...}
	 * @since
	 * <br>&bull; 04-2015 added
	 * <br>&bull; 15-07-01 fieldForLabel argument
	 * <br>&bull; 3.0.0 all data sent in will be forced into the chart. Dates are no longer required to be exact matches (minutes, hours, seconds, milliseconds) in order to show up in comparisons.
	 * <br>&bull; 4.0.0 Arguments are now parameterized. Backward compatibility with old signature.
	 * <br>&bull; 4.0.0 Added ability to specify copying of all fields by setting params.fields=["*"]
	 * <br>&bull; 5.2.0 enhanced parameter `createObject` to take a string
	 * <br>&bull; 5.2.0 added parameter noCleanupDates
	 */CIQ.addMemberToMasterdata=function(params){if(params.constructor===CIQ.ChartEngine){params={stx:arguments[0],label:arguments[1],data:arguments[2],fields:arguments[3],createObject:arguments[4],fieldForLabel:arguments[5]};}var stx=params.stx;var label=params.label;var data=params.data;var fields=params.fields;var createObject=params.createObject;var fieldForLabel=params.fieldForLabel;var chart=params.chart?params.chart:stx.chart;if(!params.noCleanupDates)stx.doCleanupDates(data,stx.layout.interval);var series=stx.getSeries({symbol:label,chart:chart});if(data&&data.constructor==Object)data=[data];// When developer mistakenly sends an object instead of an array of objects
if(!data||!data.length)return;var mIterator=0,cIterator=0,masterData=chart.masterData,layout=stx.layout,m,c;if(!masterData){masterData=[];}var defaultPlotField=stx.chart&&stx.chart.defaultPlotField?stx.chart.defaultPlotField:null;var isLineType=!stx.chart.highLowBars&&!stx.highLowBars[stx.layout.chartType];function aggregate(m,c){if(!m||_typeof(m)!="object"){m=c;return m;}var prior={"Close":m.Close,"High":m.High,"Low":m.Low,"Open":m.Open,"Volume":m.Volume};m=c;for(var p in prior){if(m.Close===null){// Close is not set, nothing else is valid (it's a gap)
if(m[p]!==undefined)m[p]=null;}else if(typeof m[p]!=="number")m[p]=prior[p];// new data invalid, use original data
else if(typeof prior[p]==="number"){// aggregate the data
if(p=="Open")m.Open=prior.Open;else if(p=="Low"&&m.Low>prior.Low)m.Low=prior.Low;else if(p=="High"&&m.High<prior.High)m.High=prior.High;else if(p=="Volume")m.Volume+=prior.Volume;}}return m;}// inject data from c into m
function injectData(m,c){if(fields&&fields.length){// Case 1, copy the [several] specified fields from new object to masterData object
if(fields[0]=="*"){// copy all fields
CIQ.extend(m,c);}else{for(var i=0;i<fields.length;i++){m[fields[i]]=c[fields[i]];}}}else if(createObject){// Case 2, the new object will become a child object of the masterData object
if(c.Value!==undefined){// If "Value" is in the new object use that
m[label]=c.Value;return;}else if(createObject=="aggregate"){m[label]=aggregate(m[label],c);}else{m[label]=c;}// If we don't set this here, the study calculations will fail
var m_=m[label];if(typeof m_.Close=="number"){if(typeof m_.Open!="number")m_.Open=m_.Close;var high=Math.max(m_.Open,m_.Close),low=Math.min(m_.Open,m_.Close);if(typeof m_.High!="number"||m_.High<high)m_.High=high;if(typeof m_.Low!="number"||m_.Low>low)m_.Low=low;}if(m_.Volume&&typeof m_.Volume!=="number")m_.Volume=parseInt(m_.Volume,10);}else if(fieldForLabel){// Case 3, copy the data from one label (fieldForLabel) to another (label)
m[label]=c[fieldForLabel];}else if(isLineType&&defaultPlotField&&c[defaultPlotField]!==undefined){// If a default field on the chart has been provided, then use that if it's in the new object
m[label]=c[defaultPlotField];}else if(layout.adj&&c.Adj_Close!==undefined){// If Adjusted close is in the new object, use that
m[label]=c.Adj_Close;}else if(c.Close!==undefined){// If Close is in the new object use that
m[label]=c.Close;}else if(c.Value!==undefined){// If "Value" is in the new object use that
m[label]=c.Value;}else{// Default to copying the same label from the old to the new object.
m[label]=c[label];}}// Binary search for next relevant masterData record, with the following modifications:
// 1. Always check the very next record, since that is most likely
// 2. Before search, check last record
function fastSeek(date){function testIt(){if(+masterData[mIterator].DT==+date)return 0;if(masterData[mIterator].DT<date)return 1;if(masterData[mIterator-1].DT>date)return-1;if(+masterData[mIterator-1].DT==+date)mIterator--;// efficiency
return 0;}var begin=mIterator,end=masterData.length-1;if(masterData[end].DT<date){mIterator=end+1;return;}else if(+masterData[end].DT==+date){mIterator=end;return;}mIterator++;var attempts=0;while(++attempts<100){switch(testIt()){case 0:return;case 1:begin=mIterator;break;case-1:end=mIterator;break;}mIterator=Math.round((end+begin)/2);}if(attempts>=100){console.log("!!!Warning: addMemberToMasterdata() did not find insertion point.");mIterator=masterData.length-1;}}// insert/update up to masterData last bar
while(data&&mIterator<masterData.length&&cIterator<data.length){c=data[cIterator];m=masterData[mIterator];if(!c.DT||typeof c.DT=="undefined")c.DT=CIQ.strToDateTime(c.Date);else{if(typeof c.DT=="number")c.DT=new Date(c.DT);//in case they sent in an epoch
if(!c.Date||c.Date.length!=17)c.Date=CIQ.yyyymmddhhmmssmmm(c.DT);}if(cIterator===0){for(var s1=0;s1<series.length;s1++){if(!series[s1].endPoints.begin||series[s1].endPoints.begin>c.DT)series[s1].endPoints.begin=c.DT;}}if(+c.DT==+m.DT){injectData(m,c);cIterator++;mIterator++;continue;}if(c.DT<m.DT){masterData.splice(mIterator,0,{DT:c.DT,Date:c.Date});continue;}else fastSeek(c.DT);// this advances the mIterator
}// insert after master data last bar
if(mIterator>=masterData.length){while(data&&cIterator<data.length){c=data[cIterator];if(!c.DT||typeof c.DT=="undefined")c.DT=CIQ.strToDateTime(c.Date);else{if(typeof c.DT=="number")c.DT=new Date(c.DT);//in case they sent in an epoch
if(!c.Date||c.Date.length!=17)c.Date=CIQ.yyyymmddhhmmssmmm(c.DT);}m={DT:c.DT,Date:c.Date};injectData(m,c);masterData.push(m);cIterator++;}}if(params.fillGaps&&masterData.length){var cleanupGapsParams={noCleanupDates:true,cleanupGaps:params.fillGaps};if(fields){for(var j=0;j<fields.length;j++){cleanupGapsParams.field=fields[j];stx.doCleanupGaps(masterData,chart,cleanupGapsParams);}}else{cleanupGapsParams.field=label;stx.doCleanupGaps(masterData,chart,cleanupGapsParams);}}for(var s2=0;s2<series.length;s2++){if(!series[s2].endPoints.end||series[s2].endPoints.end<=m[label].DT){series[s2].lastQuote=m[label];series[s2].endPoints.end=m[label].DT;}}stx.setMasterData(masterData,chart,{noCleanupDates:true});};/**
	 * Generates an object that can be used programmatically to load new themes or to create a theme dialog to manage chart themes.
	 * The initial values contain the existing values in the current chart.
	 * Simply have your dialog modify these values and then call the method {@link CIQ.ThemeHelper#update}
	 *
	 * Note that the chart has many granular customizations beyond what this theme helper produces.
	 * This helper simplifies and consolidates into a manageable set.
	 * For example 'hallow candles', 'bars' and 'candles' colors are all grouped together.
	 * But if you need to separate those out, just call an explicit {@link CIQ.ChartEngine#setStyle} for each CSS style right after the ThemeHelper is executed.
	 * 
	 * For example, This will further set the color for the hollow_candle chart type:
	 * ```
	 * stxx.setStyle("stx_hollow_candle_down","color",'blue');
	 * stxx.setStyle("stx_hollow_candle_up","color",'yellow');
	 * stxx.setStyle("stx_hollow_candle_even","color",'pink');
	 * stxx.draw();
	 * ```
	 * See {@tutorial Chart Styles and Types} for more details.
	 *
	 * Generally speaking, themes can be managed by simply adding or removing from the chart context the class name that groups the theme together.
	 * And as long as the CSS contains an entry for that class, the chart will display the styles in the class when enabled.
	 *
	 * For example, assume the chart has a default theme and a second theme called 'ciq-night'.
	 * Here are some examples of what CSS entries for those classes would look like:
	 * ```
	 * // default theme (day) styles
	 * .stx_candle_shadow, .stx_bar_even {
	 * 		color:#2e383b;
	 *
	 * }
	 * .stx_candle_down, .stx_line_down {
	 * 		border-left-color: #000000;
	 * }
	 *
	 * // night theme override styles
	 * .ciq-night .stx_candle_shadow, .ciq-night .stx_bar_even {
	 * 		color: #ccc;
	 * }
	 * .ciq-night .stx_candle_down, .ciq-night .stx_line_down {
	 * 		border-left-color: #e34621;
	 * }
	 * ```
	 *
	 * Then to activate a particular theme, you either remove the specific class to enable default (day):
	 * ```
	 * $("cq-context").removeClass('ciq-night');
	 * // clear out the old styles to allow new ones to be cached in; and redraw.
	 * stxx.styles={};stxx.draw();
	 * ```
	 * Or add a particular class to enable those styles:
	 * ```
	 * $("cq-context").addClass('ciq-night');
	 * // clear out the old styles to allow new ones to be cached in; and redraw.
	 * stxx.styles={};stxx.draw();
	 * ```
	 * You can use this method to set as many themes as needed. Remember that this method, requires all styles to be present in the CSS.
	 * ThemeHelper, on the other hand, will programmatically set the styles internally, one at a time, regardless of pre-existng CSS classes.
	 *
	 * @param {object} params Parameters
	 * @param {CIQ.ChartEngine} params.stx A chart object
	 * @constructor
	 * @name  CIQ.ThemeHelper
	 * @example
	 * var helper=new CIQ.ThemeHelper({stx:stx});
	 * console.log(helper.settings);
	 * helper.settings.chart["Grid Lines"].color="rgba(255,0,0,.5)";
	 * helper.update();
	 * 
	 * @since 6.2.0 Added support to control Mountain.basecolor.
	 */CIQ.ThemeHelper=function(params){this.params=params;var stx=params.stx;var backgroundColor="#FFFFFF";if(stx.chart.container){backgroundColor=getComputedStyle(stx.chart.container).backgroundColor;if(CIQ.isTransparent(backgroundColor))backgroundColor=stx.containerColor;}this.settings.chart.Background.color=CIQ.hexToRgba(backgroundColor);this.settings.chart["Grid Lines"].color=CIQ.hexToRgba(stx.canvasStyle("stx_grid").color);this.settings.chart["Grid Dividers"].color=CIQ.hexToRgba(stx.canvasStyle("stx_grid_dark").color);this.settings.chart["Axis Text"].color=CIQ.hexToRgba(stx.canvasStyle("stx_xaxis").color);this.settings.chartTypes["Candle/Bar"].up.color=CIQ.hexToRgba(stx.canvasStyle("stx_candle_up").color);this.settings.chartTypes["Candle/Bar"].down.color=CIQ.hexToRgba(stx.canvasStyle("stx_candle_down").color);this.settings.chartTypes["Candle/Bar"].up.wick=CIQ.hexToRgba(stx.canvasStyle("stx_candle_shadow_up").color);this.settings.chartTypes["Candle/Bar"].down.wick=CIQ.hexToRgba(stx.canvasStyle("stx_candle_shadow_down").color);this.settings.chartTypes["Candle/Bar"].even.wick=CIQ.hexToRgba(stx.canvasStyle("stx_candle_shadow_even").color);this.settings.chartTypes["Candle/Bar"].up.border=CIQ.hexToRgba(stx.canvasStyle("stx_candle_up").borderLeftColor);this.settings.chartTypes["Candle/Bar"].down.border=CIQ.hexToRgba(stx.canvasStyle("stx_candle_down").borderLeftColor);if(CIQ.isTransparent(stx.canvasStyle("stx_candle_up").borderLeftColor))this.settings.chartTypes["Candle/Bar"].up.border=null;if(CIQ.isTransparent(stx.canvasStyle("stx_candle_down").borderLeftColor))this.settings.chartTypes["Candle/Bar"].down.border=null;this.settings.chartTypes.Line.color=CIQ.hexToRgba(stx.canvasStyle("stx_line_chart").color);this.settings.chartTypes.Mountain.color=CIQ.hexToRgba(stx.canvasStyle("stx_mountain_chart").backgroundColor);this.settings.chartTypes.Mountain.basecolor=CIQ.hexToRgba(stx.canvasStyle("stx_mountain_chart").color);};/**
	 * Current theme settings. These are the settings that are ready to be loaded, or currently loaded.
	 * Modify as needed.
	 * To load these settings call {@link CIQ.ThemeHelper#update}
	 * @example
	 * //Default settings object structure
	 * 	"chart":{
			"Background":{
				"color":color1
			},
			"Grid Lines":{
				"color":color2
			},
			"Grid Dividers":{
				"color":color3
			},
			"Axis Text":{
				"color":color4
			}
		},
		"chartTypes":{
			"Candle/Bar":{ // also manages 'hollow candle', 'colored line' and 'colored baseline' chart types.
				"up":{
					"color":color5,
					"wick":color6,
					"border":color7
				},
				"down":{
					"color":color8,
					"wick":color9,
					"border":color10
				},
				"even":{
					"color":null,
					"wick":null,
					"border":null
				}
			},
			"Line":{
				"color":color11
			},
			"Mountain":{
				"color":color12,
				"basecolor":color13
			}
		}
	 * @memberof CIQ.ThemeHelper
	 * @type object
	 */CIQ.ThemeHelper.prototype.settings={"chart":{"Background":{"color":null},"Grid Lines":{"color":null},"Grid Dividers":{"color":null},"Axis Text":{"color":null}},"chartTypes":{"Candle/Bar":{"up":{"color":null,"wick":null,"border":null},"down":{"color":null,"wick":null,"border":null},"even":{"color":null,"wick":null,"border":null}},"Line":{"color":null},"Mountain":{"color":null,"basecolor":null}}};/**
	 * Call this method to activate the chart theme with values set in {@link CIQ.ThemeHelper#settings}
	 * @memberof CIQ.ThemeHelper
	 * @param {CIQ.ChartEngine} [stx] Chart engine to apply the changes to.
	 * @since  4.1.0 Added optional chart engine parameter.
	 * @example
	 * var helper=new CIQ.ThemeHelper({stx:stx});
	 * console.log(helper.settings);
	 * helper.settings=NewSettings;
	 * helper.update();
	 * @since 6.2.0 Now setting basecolor and color of mountain chart with separate colors.

	 */CIQ.ThemeHelper.prototype.update=function(stx){if(!stx)stx=this.params.stx;var classMapping={stx_candle_up:{stx_candle_up:true,stx_bar_up:true,stx_hollow_candle_up:true,stx_line_up:true,stx_baseline_up:true},stx_candle_down:{stx_candle_down:true,stx_bar_down:true,stx_hollow_candle_down:true,stx_line_down:true,stx_baseline_down:true},stx_shadow_up:{stx_candle_shadow_up:true},stx_shadow_down:{stx_candle_shadow_down:true},stx_shadow_even:{stx_candle_shadow_even:true},stx_line_chart:{stx_bar_chart:true,stx_line_chart:true},stx_grid:{stx_grid:true},stx_grid_dark:{stx_grid_dark:true},stx_xaxis:{stx_xaxis_dark:true,stx_xaxis:true,stx_yaxis:true,stx_yaxis_dark:true,stx_grid_border:true},stx_mountain_chart:{stx_mountain_chart:true},stx_market_session:{stx_market_session:true}};stx.chart.container.style.backgroundColor=this.settings.chart.Background.color;function setStyle(style,field,value){var styles=classMapping[style];for(var s in styles){stx.setStyle(s,field,value);}}setStyle("stx_grid","color",this.settings.chart["Grid Lines"].color);setStyle("stx_grid_dark","color",this.settings.chart["Grid Dividers"].color);setStyle("stx_xaxis","color",this.settings.chart["Axis Text"].color);var candleBar=this.settings.chartTypes["Candle/Bar"];// backwards compatibility with pre-5.0.3 saved themes
if(!candleBar.even){candleBar.even={"color":null,"wick":CIQ.hexToRgba(stx.canvasStyle("stx_candle_shadow_even").color),"border":null};}setStyle("stx_candle_up","color",candleBar.up.color);setStyle("stx_candle_down","color",candleBar.down.color);setStyle("stx_shadow_up","color",candleBar.up.wick);setStyle("stx_shadow_down","color",candleBar.down.wick);setStyle("stx_shadow_even","color",candleBar.even.wick);// Only apply borders to candle, not the other types
stx.setStyle("stx_candle_up","borderLeftColor",candleBar.up.border);stx.setStyle("stx_candle_down","borderLeftColor",candleBar.down.border);setStyle("stx_line_chart","color",this.settings.chartTypes.Line.color);stx.setStyle("stx_mountain_chart","borderTopColor",CIQ.hexToRgba(this.settings.chartTypes.Mountain.color,1));stx.setStyle("stx_mountain_chart","backgroundColor",CIQ.hexToRgba(this.settings.chartTypes.Mountain.color,0.5));stx.setStyle("stx_mountain_chart","color",CIQ.hexToRgba(this.settings.chartTypes.Mountain.basecolor,0.01));stx.draw();};/**
	 * Base class for interacting with a name value store.
	 * This base class saves to local storage but you can override your own for remote storage,
	 * as long as you maintain the same function signatures and call back requirements.
	 *
	 * See {@link CIQ.UI.ViewsMenu} for implementatin example.
	 *
	 * @constructor
	 * @name  CIQ.NameValueStore
	 */CIQ.NameValueStore=function(){};CIQ.NameValueStore.prototype.toJSONIfNecessary=function(obj){if(obj.constructor==String)return obj;try{var s=JSON.stringify(obj);return s;}catch(e){console.log("Cannot convert to JSON: "+obj);return null;}};CIQ.NameValueStore.prototype.fromJSONIfNecessary=function(obj){try{var s=JSON.parse(obj);return s;}catch(e){return obj;}};/**
	 * Get a value from the name value store
	 * @param  {string}   field The field to fetch
	 * @param  {Function} cb    Callback. First field is error or null. Second field is the result.
	 * @memberof CIQ.NameValueStore
	 * @example
	 * nameValueStore.get("myfield", function(err,data){
	 *    if(!err){
	 *        // do something with data
	 *        if(cb) cb(errorCode, yourViewObject);
	 *    }
	 * });
	 */CIQ.NameValueStore.prototype.get=function(field,cb){var value=CIQ.localStorage.getItem(field);if(cb)cb(null,this.fromJSONIfNecessary(value));};/**
	 * Set a value to the name value store
	 * @param  {string}   field The field to fetch
	 * @param  {string}   value The value to store
	 * @param  {Function} cb    Callback
	 * @memberof CIQ.NameValueStore
	 * @example
	 * nameValueStore.set("myfield", "myValue", function(){
	 *        // do something after data has been saved
	 *        if(cb) cb(errorCode);
	 *    }
	 * });
	 */CIQ.NameValueStore.prototype.set=function(field,value,cb){CIQ.localStorageSetItem(field,this.toJSONIfNecessary(value));if(cb)cb(null);};/**
	 * Remove a field from the name value store
	 * @param  {string}   field The field to remove
	 * @param  {Function} cb    Callback
	 * @memberof CIQ.NameValueStore
	 * @example
	 * nameValueStore.remove("myfield", function(){
	 *        // do something after data has been removed
	 *        if(cb) cb(errorCode);
	 *    }
	 * });
	 */CIQ.NameValueStore.prototype.remove=function(field,cb){CIQ.localStorage.removeItem(field);if(cb)cb(null);};/**
	 * The Plotter is a device for managing complex drawing operations on the canvas. The HTML 5 canvas performs better when drawing
	 * operations of the same color are batched (reducing the number of calls to the GPU). The plotter allows a developer to store those
	 * operations in a normal control flow, and then have the Plotter deliver the primitives to the canvas. The plotter can also be used
	 * as a caching mechanism for performing the same operations repeatedly. The y-axis of the chart uses this mechanism to boost performance.
	 * @constructor
	 * @name  CIQ.Plotter
	 */CIQ.Plotter=function(){this.seriesArray=[];this.seriesMap={};};CIQ.extend(CIQ.Plotter.prototype,{/**
		 * Define a series to plot. A series is a specific color and referenced by name
		 * @param {string} name         Name of series
		 * @param {boolean} strokeOrFill If true then a stroke operation, otherwise a fill operation
		 * @param {string} color        A valid canvas color
		 * @param {number} [opacity=1]      A valid opacity from 0-1
		 * @param {number} [width=1]      A valid lineWidth from 1
		 * @param {string} [pattern=solid]      A valid pattern (solid, dotted, dashed)
		 * @memberof CIQ.Plotter
		 * @since 4.0.0 added parameter pattern
		 */Series:function Series(name,strokeOrFill,color,opacity,width,pattern){this.name=name;this.strokeOrFill=strokeOrFill;this.color=color;this.moves=[];this.text=[];if(!opacity||opacity>1||opacity<0)opacity=1;this.opacity=opacity;if(!width||width>25||width<1)width=1;this.width=width;this.pattern=CIQ.borderPatternToArray(width,pattern);},/**
			 * Create a series. This supports either a text color or CIQ.ChartEngine.Style object
			 * @see  CIQ.Plotter.Series
			 * @memberof CIQ.Plotter
			 */newSeries:function newSeries(name,strokeOrFill,colorOrStyle,opacity,width){var series;if(colorOrStyle.constructor==String)series=new this.Series(name,strokeOrFill,colorOrStyle,opacity,width);else series=new this.Series(name,strokeOrFill,colorOrStyle.color,colorOrStyle.opacity,width,colorOrStyle.borderTopStyle);this.seriesArray.push(series);this.seriesMap[name]=series;},/**
			 * Clear out any moves or text stored in the plotter for series "name"
			 * @memberof CIQ.Plotter
			 * @param {string} name Name of series to reset.  If omitted, will reset all series in plotter.
			 * @since 3.0.0
			 */reset:function reset(name){for(var s in this.seriesMap){if(name&&name!=s)continue;var series=this.seriesMap[s];if(series){series.moves=[];series.text=[];}}},/**
			 * @memberof CIQ.Plotter
			 */moveTo:function moveTo(name,x,y){var series=this.seriesMap[name];series.moves.push({"action":"moveTo","x":x,"y":y});},/**
			 * @memberof CIQ.Plotter
			 */lineTo:function lineTo(name,x,y){var series=this.seriesMap[name],pattern=series.pattern;series.moves.push({"action":"lineTo","x":x,"y":y,"pattern":pattern});},/**
			 * @memberof CIQ.Plotter
			 */dashedLineTo:function dashedLineTo(name,x,y,pattern){var series=this.seriesMap[name];series.moves.push({"action":"lineTo","x":x,"y":y,"pattern":pattern});},/**
			 * @memberof CIQ.Plotter
			 */quadraticCurveTo:function quadraticCurveTo(name,cx0,cy0,x,y){var series=this.seriesMap[name],pattern=series.pattern;series.moves.push({"action":"quadraticCurveTo","x0":cx0,"y0":cy0,"x":x,"y":y,"pattern":pattern});},/**
			 * @memberof CIQ.Plotter
			 * @since 4.0.0
			 */bezierCurveTo:function bezierCurveTo(name,cx0,cy0,cx1,cy1,x,y){var series=this.seriesMap[name],pattern=series.pattern;series.moves.push({"action":"bezierCurveTo","x0":cx0,"y0":cy0,"x1":cx1,"y1":cy1,"x":x,"y":y,"pattern":pattern});},/**
			 * Add text to be rendered with the drawing. Primarily used when the Plotter is used for caching since there is no
			 * performance benefit from batching text operations to the GPU. If specifying a bounding box, textBaseline="middle" is assumed
			 * @param {string} name Name of series
			 * @param {string} text The raw text to render
			 * @param {number} x    X position on canvas for text
			 * @param {number} y    Y position on canvas for text
			 * @param {string} [backgroundColor] Color to use on the box underneath the text
			 * @param {number} [width]  Width of bounding box
			 * @param {number} [height] Height of bounding box
			 * @memberof CIQ.Plotter
			 */addText:function addText(name,text,x,y,backgroundColor,width,height){var series=this.seriesMap[name];series.text.push({"text":text,"x":x,"y":y,"bg":backgroundColor});},/**
			 * Renders the text objects. This is done after drawing primitives for each series.
			 * @private
			 * @memberof CIQ.Plotter
			 */drawText:function drawText(context,series){for(var i=0;i<series.text.length;i++){var textObj=series.text[i];if(textObj.bg){var w=textObj.width?textObj.width:context.measureText(textObj.text).width;var h=textObj.height?textObj.height:12;var prev=context.fillStyle;context.fillStyle=textObj.bg;if(context.textAlign=="right"){context.fillRect(textObj.x,textObj.y-h/2,-w,-h);}else{context.fillRect(textObj.x,textObj.y-h/2,w,h);}context.fillStyle=prev;}context.fillText(textObj.text,textObj.x,textObj.y);}},/**
			 * Render the plotter. All of the stored operations are sent to the canvas. This operation stores and restores
			 * global canvas parameters such as fillStyle, strokeStyle and globalAlpha.
			 * @param  {object} context A valid HTML canvas context
			 * @param  {string} [name]    Optionally render only a specific series. If null or not provided then all series will be rendered.
			 * @memberof CIQ.Plotter
			 */draw:function draw(context,name){var prevWidth=context.lineWidth;var prevFillStyle=context.fillStyle;var prevStrokeStyle=context.strokeStyle;var prevGlobalAlpha=context.globalAlpha;for(var i=0;i<this.seriesArray.length;i++){var series=this.seriesArray[i];if(name&&series.name!=name)continue;context.beginPath();context.lineWidth=series.width;context.globalAlpha=series.opacity;context.fillStyle=series.color;context.strokeStyle=series.color;context.save();for(var j=0;j<series.moves.length;j++){var move=series.moves[j];if(move.pattern){context.setLineDash(move.pattern);context.lineDashOffset=0;}else context.setLineDash([]);if(move.action=="quadraticCurveTo"){context[move.action](move.x0,move.y0,move.x,move.y);}else if(move.action=="bezierCurveTo"){context[move.action](move.x0,move.y0,move.x1,move.y1,move.x,move.y);}else{context[move.action](move.x,move.y);}}if(series.strokeOrFill=="fill"){context.fill();}else{context.stroke();}context.closePath();context.restore();this.drawText(context,series);context.lineWidth=1;}context.lineWidth=prevWidth;context.fillStyle=prevFillStyle;context.strokeStyle=prevStrokeStyle;context.globalAlpha=prevGlobalAlpha;}},true);/**
	 * A simple device to make ease functions easy to use. Requests a cubic function that takes the form function (t, b, c, d)
	 * 		t = current time
	 * 		b = starting value
	 * 		c = change in value
	 * 		d = duration
	 * @param {function} fc        The cubic function
	 * @param {number} ms         Milliseconds to perform the function
	 * @param {map} [startValues] Name value pairs of starting values (or pass in a single value)
	 * @param {map} [endValues]   Name value pairs of ending values (or pass in a single value)
	 * @name  CIQ.EaseMachine
	 * @constructor
	 * @example
	 * var e=new CIQ.EaseMachine(Math.easeInOutCubic, 200);
	 * e.run(function(v){console.log(v)}, 100, 110);
	 */CIQ.EaseMachine=function(fc,ms,startValues,endValues){this.fc=fc;this.ms=ms;if(startValues||startValues===0){this.reset(startValues,endValues);}};/**
	 * Resets the EaseMachine with a new set of values
	 * @param {map} [startValues] Name value pairs of starting values (or pass in a single value). If null then the currentValues will become the startValues (allowing for resetting or reversing of direction)
	 * @param {map} endValues   Name value pairs of ending values (or pass in a single value)
	 * @memberof CIQ.EaseMachine
	 */CIQ.EaseMachine.prototype.reset=function(startValues,endValues){if(!startValues&&startValues!==0)startValues=this.currentValues;this.hasCompleted=false;this.running=false;this.okayToRun=true;this.useNameValuePairs=_typeof(endValues)=="object";this.startTime=Date.now();if(this.useNameValuePairs){this.startValues=startValues;this.endValues=endValues;}else{this.startValues={"default":startValues};this.endValues={"default":endValues};}this.changeValues={};this.currentValues={};for(var n in this.startValues){this.changeValues[n]=this.endValues[n]-this.startValues[n];}};/**
	 * Returns the next set of values, or individual value
	 * @return {map} Name value pairs of current values or current value
	 * @memberof CIQ.EaseMachine
	 */CIQ.EaseMachine.prototype.next=function(){var now=Date.now();if(now>=this.startTime+this.ms){now=this.startTime+this.ms;this.hasCompleted=true;this.running=false;}this.currentValues={};for(var n in this.changeValues){this.currentValues[n]=this.fc(now-this.startTime,this.startValues[n],this.changeValues[n],this.ms);}if(!this.useNameValuePairs)return this.currentValues["default"];return this.currentValues;};/**
	 * This will be false while the ease machine is completing
	 * @type {boolean}
	 * @memberof CIQ.EaseMachine
	 */CIQ.EaseMachine.prototype.hasCompleted=true;/**
	 * Runs the ease machine in a loop until completion by calling next() from within a requestAnimationFrame.
	 * @param {function} fc Function callback, will receive the results of {@link CIQ.EaseMachine#next}
	 * @param {map} [startValues] Name value pairs of starting values (or pass in a single value)
	 * @param {map} [endValues]   Name value pairs of ending values (or pass in a single value)
	 * @param {boolean} [delayFirstRun=false] Normally, the first pass of the run will happen immediately. Pass true if you want to wait for the next animation frame before beginning.
	 * @memberof CIQ.EaseMachine
	 */CIQ.EaseMachine.prototype.run=function(fc,startValues,endValues,delayFirstRun){if(this.afid)cancelAnimationFrame(this.afid);if(startValues||startValues===0){this.reset(startValues,endValues);}else if(endValues||endValues===0){this.reset(this.currentValues,endValues);}var self=this;function go(){self.afid=null;if(!self.okayToRun)return;var result=self.next();fc(result);if(self.hasCompleted)return;self.afid=requestAnimationFrame(go);}this.running=true;if(delayFirstRun)this.afid=requestAnimationFrame(go);else go();};/**
	 * Stops the ease machine from running mid-animation. Returns the current state.
	 * @return {map} Name value pairs of current values or current value
	 * @memberof CIQ.EaseMachine
	 */CIQ.EaseMachine.prototype.stop=function(){if(this.afid)cancelAnimationFrame(this.afid);this.afid=null;this.okayToRun=false;this.running=false;if(typeof this.useNameValuePairs=="undefined")return{};if(!this.useNameValuePairs)return this.currentValues["default"];return this.currentValues;};/**
	 * Base class for Renderers.
	 * A renderer is used to draw a complex visualization based on one or more "series" of data.
	 * Renderers only need to be attached to a chart once. You can change symbols and continue using the same renderer.
	 * The series associated with a renderer may change at any time, but the linked renderer itself remains the vehicle for display them.
	 *
	 * Series are associated with renderers by calling attachSeries().
	 * More typically though, this is done automatically when {@link CIQ.ChartEngine#addSeries} is used.
	 * The parameters for addSeries() are passed both to the renderer's constructor and also to attachSeries().
	 *
	 * To manually create a renderer use {@link CIQ.ChartEngine#setSeriesRenderer}
	 *
	 * @name  CIQ.Renderer
	 * @constructor
	 */CIQ.Renderer=function(){};/**
	 * Factory for renderer.  Will request a renderer from each renderer subclass until it is given one.
	 * @param  {string} chartType Chart type name (usually from layout.chartType)
	 * @param  {object} [params] Parameters to pass to the renderer constructor
	 * @memberof CIQ.Renderer
	 * @since 5.1.0
	 * @private
	 */CIQ.Renderer.produce=function(chartType,params){var renderer=null;if(chartType){for(var r in CIQ.Renderer){var rendererType=CIQ.Renderer[r];// Note: chartType has often been a combination of attributes connected with an underscore,
// e.g. colored_bar, baseline_mountain.  So we split this legacy name to get the attributes.
if(rendererType.requestNew)renderer=rendererType.requestNew(chartType.split("_"),params);if(renderer)return renderer;}}params.type="line";return new CIQ.Renderer.Lines({params:params});};CIQ.Renderer.colorFunctions={};/**
	 * Registers a colorFunction for use with a renderer.
	 * It is necessary to register a color function if you want the function to be tied back to an imported renderer.
	 * @param  {string} name The name of the registered function
	 * @param  {function} fc The function to register
	 * @memberof CIQ.Renderer
	 */CIQ.Renderer.registerColorFunction=function(name,funct){CIQ.Renderer.colorFunctions[name]=funct;};/**
	 * Unregisters a colorFunction for use with a renderer.
	 * @param  {string} name The name of the registered function
	 * @memberof CIQ.Renderer
	 */CIQ.Renderer.unregisterColorFunction=function(name){delete CIQ.Renderer.colorFunctions[name];};/**
	 * If your renderer manages a yAxis then the necessary calculations (high and low) should be made here
	 * @memberof CIQ.Renderer
	 * @deprecated Since 5.2.0. Use {@link CIQ.Renderer#adjustYAxis} instead.
	 */CIQ.Renderer.prototype.performCalculations=function(){};/**
	 * If your renderer manages a yAxis then the necessary adjustments to its properties should be made here
	 * @memberof CIQ.Renderer
	 * @since 5.2.0
	 */CIQ.Renderer.prototype.adjustYAxis=function(){};/**
	 * Perform drawing operations here.
	 * @memberof CIQ.Renderer
	 */CIQ.Renderer.prototype.draw=function(){};/**
	 * Draws one series from the renderer
	 * Called by {@link CIQ.ChartEngine#drawSeries}
	 * @param  {CIQ.ChartEngine.Chart} chart The chart object to draw the renderers upon
	 * @param {object} [parameters] Parameters used to draw the series, depends on the renderer type
	 * @param {string} [parameters.panel] Name of panel to draw the series upon
	 * @memberof CIQ.Renderer
	 * @since 5.1.0
	 */CIQ.Renderer.prototype.drawIndividualSeries=function(chart,parameters){};/**
	 * Default constructor for a renderer. Override this if desired.
	 * @param  {object} config Configuration for the renderer
	 * @param  {function} [config.callback] Callback function to perform activity post-drawing, for example, creating a legend. It will be called with a 'colors' argument, which will be an array of objects containing the colors used to draw the rendering. ( Example: cb(colors); ). See example for format.
	 * @param  {string} [config.id] Handle to access the rendering in the future.  If not provided, one will be generated.
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {string} [config.params.name="Data"] Name of the renderer. This is used when displaying error message on screen
	 * @param  {string} [config.params.panel="chart"] The name of the panel to put the rendering on.
	 * @param  {boolean} [config.params.overChart=true] If set to false, will draw the rendering behind the main chart rather than over it. By default rendering will be as overlay on the main chart.
	 * @param  {boolean} [config.params.yAxis] Y-axis object to use for the series.
	 * @param  {number} [config.params.opacity=1] Opacity of the rendering as a whole.  Can be overridden by an opacity set for a series.  Valid values are 0.0-1.0.
	 * @param  {object} [config.params.binding] Allows the use of the study output colors within the renderer. See an example in the [Using Renderers to Display Study Output](tutorial-Using and Customizing Studies.html#Using Renderers to Display Study Output) section of the Studies tutorial.
	 * @memberof CIQ.Renderer
	 * @since 5.2.0  `config.params.binding` parameter added.
	 * @example
	 *	// add multiple series and attach to a custom y-axis on the left.
	 *	// See this example working here : https://jsfiddle.net/chartiq/b6pkzrad
	 *
	 *	// note how the addSeries callback is used to ensure the data is present before the series is displayed
	 *
	 *	//create the custom axis
	 *	var axis=new CIQ.ChartEngine.YAxis();
	 *	axis.position="left";
	 *	axis.textStyle="#FFBE00";
	 *	axis.decimalPlaces=0;			// no decimal places on the axis labels
	 *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
	 *
	 *	//create the renderer
	 *	var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));
	 *
	 *	// create your series and attach them to the chart when the data is loaded.
	 *	stxx.addSeries("NOK", {display:"NOK",width:4},function(){
	 *		renderer.attachSeries("NOK", "#FFBE00").ready();
	 *	});
	 *
	 *	stxx.addSeries("SNE", {display:"Sony",width:4},function(){
	 *		renderer.attachSeries("SNE", "#FF9300").ready();
	 *	});
	 */CIQ.Renderer.prototype.construct=function(config){if(!config)config={};var params=config.params?config.params:{};if(!params.name)params.name=CIQ.uniqueID();if(!params.heightPercentage)params.heightPercentage=0.7;if(!params.opacity)params.opacity=1;if(params.highlightable!==false)params.highlightable=true;if(!params.panel)params.panel="chart";this.cb=config.callback;this.params=params;this.seriesParams=[];this.caches={};this.colors={};};/**
	 * Attach a series to the renderer.
	 * This assumes that the series data *is already in the dataSet* and simply connects it to the renderer with the specified parameters.
	 * See {@link CIQ.ChartEngine#addSeries} for details on how to create a series.
	 *
	 * Any parameters defined when attaching a series, such as colors, will supersede any defined when a series was created. This allows you to attach the same series to multiple renderers, each rendering displaying the same series data in a different color, for example.
	 *
	 * @param  {string} id      The name of the series.
	 * @param  {object} parameters Settings to control color and opacity of <B>each</B> series in the group. See {@link CIQ.ChartEngine#addSeries} for implementation examples. <P>Argument format can be:<ul><li> a `string` containing the color</li><li> or a more granular `object` having the following members:</li></ul>
	 * @param  {string} [parameters.field] The name of the field. Name of the field in the dataSet to use for the series.  If omitted, defaults to id
	 * @param  {string} [parameters.fill_color_up] Color to use to fill the part when the Close is higher than the previous (or 'transparent' to not display)
	 * @param  {string} [parameters.border_color_up] Color to use to draw the border when the Close is higher than the previous (or 'transparent' to not display)
	 * @param  {number} [parameters.opacity_up=.4] Opacity to use to fill the part when the Close is higher than the previous (0.0-1.0)
	 * @param  {string} [parameters.border_color_even] Color to use to draw the border when the Close is equal to the previous (or 'transparent' to not display)
	 * @param  {string} [parameters.fill_color_down] Color to use to fill the part when the Close is lower than the previous (or 'transparent' to not display)
	 * @param  {string} [parameters.border_color_down] Color to use to draw the border when the Close is lower than the previous (or 'transparent' to not display)
	 * @param  {number} [parameters.opacity_down=.4] Opacity to use to fill the part when the Close is lower than the previous (0.0-1.0)
	 * @param  {string} [parameters.color] Color to use to fill the series in the absence of specific up/down color.
	 * @param  {string} [parameters.border_color] Color to use to draw the border in the series in the absence of specific up/down color.
	 * @param  {string} [parameters.fillStyle] Color to use to fill the mountain chart.
	 * @param  {string} [parameters.baseColor] Color to use at the bottom of the mountain chart, will create a gradient with bgColor
	 * @param  {string} [parameters.bgColor] Color to use at the top of the mountain chart, will create a gradient if baseColor is specified.  Otherwise, will fill the mountain solid with this color unless fillStyle is specified
	 * @param  {boolean} [parameters.permanent] Whether the attached series can be removed by the user (lines and bars only). By default the series will not be permanent. This flag (including the default) will supersede the permanent flag of the actual series. As such, a series will not be permanent unless you set this flag to 'true', even if the series being attached was flaged set as permanent when defined. This gives the renderer most control over the rendering process.
	 * @return {CIQ.Renderer}            Returns a copy of this for chaining
	 * @since 5.1.0 added fillStyle, baseColor, bgColor parameters
	 * @memberof CIQ.Renderer
	 * @example
	 *	// add multiple series and attach to a custom y-axis on the left.
	 *	// See this example working here : https://jsfiddle.net/chartiq/b6pkzrad
	 *
	 *	// note how the addSeries callback is used to ensure the data is present before the series is displayed
	 *
	 *	//create the custom axis
	 *	var axis=new CIQ.ChartEngine.YAxis();
	 *	axis.position="left";
	 *	axis.textStyle="#FFBE00";
	 *	axis.decimalPlaces=0;			// no decimal places on the axis labels
	 *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
	 *
	 *	//create the renderer
	 *	var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));
	 *
	 *	// create your series and attach them to the chart when the data is loaded.
	 *	stxx.addSeries("NOK", {display:"NOK",width:4},function(){
	 *		renderer.attachSeries("NOK", "#FFBE00").ready();
	 *	});
	 *
	 *	stxx.addSeries("SNE", {display:"Sony",width:4},function(){
	 *		renderer.attachSeries("SNE", "#FF9300").ready();
	 *	});
	 */CIQ.Renderer.prototype.attachSeries=function(id,parameters){var stx=this.stx;if(!stx)return this;var series=this.stx.chart.series[id];if(!series)series={parameters:{}};var rParams=this.params,sParams=series.parameters;var sp={id:id,chartType:rParams.type,display:series.parameters.display,border_color_up:rParams.defaultBorders?"auto":null,fill_color_up:series.parameters.color,opacity_up:rParams.opacity,border_color_down:rParams.defaultBorders?"auto":null,fill_color_down:series.parameters.color,opacity_down:rParams.opacity,color:series.parameters.color,symbol:series.parameters.symbol,symbolObject:CIQ.clone(series.parameters.symbolObject)};if(typeof parameters=="string"){sp.color=sp.fill_color_down=sp.fill_color_up=parameters;}else if(_typeof(parameters)=="object"){for(var p in parameters){sp[p]=parameters[p];}var c=sp.color,bc=sp.border_color;if(c){if(!sp.fill_color_up)sp.fill_color_up=c;if(!sp.fill_color_down)sp.fill_color_down=c;if(!sp.fill_color_even)sp.fill_color_even=c;}if(bc){if(!sp.border_color_up)sp.border_color_up=bc;if(!sp.border_color_down)sp.border_color_down=bc;if(!sp.border_color_even)sp.border_color_even=bc;}}if(sp.symbol&&sp.field!=sp.symbol){sp.subField=sp.field;sp.field=sp.symbol;}//if(!sp.symbol && !sp.field && !this.highLowBars) sp.field="Close";
if(!sp.id)sp.id=CIQ.uniqueID();var i=0;for(;i<this.seriesParams.length;++i){if(this.seriesParams[i].id===sp.id){this.removeSeries(sp.id,true);break;}}this.seriesParams.splice(i,0,sp);if(sp.fill_color_up!=sp.fill_color_down){this.colors[id+" up"]={"color":sp.fill_color_up,"opacity":sp.opacity_up,"display":sp.display?sp.display+" up":id+" up"};this.colors[id+" dn"]={"color":sp.fill_color_down,"opacity":sp.opacity_down,"display":sp.display?sp.display+" down":id+" down"};}else{this.colors[id]={"color":sp.fill_color_up,"opacity":sp.opacity_up,"display":sp.display?sp.display:id};}if(rParams.yAxis){rParams.yAxis=stx.addYAxis(stx.panels[rParams.panel],rParams.yAxis);rParams.yAxis.needsInitialPadding=true;}return this;};/**
	 * Removes a series from the renderer. The yAxis and actual series data will also be removed if no longer used by any other renderers.
	 * When the last series is removed from the renderer, the chart it is attached to will remove the renderer.
	 * Will [turn off comparison mode]{@link CIQ.ChartEngine#setComparison} if there are no more comparisons on the chart if {@link CIQ.ChartEngine.Chart#forcePercentComparison} is true.
	 * @param  {string} id          The field name of the series.
	 * @param  {boolean} [preserveSeries=false] Set to true to keep the series data in the CIQ.ChartEngine object.
	 * @return {CIQ.Renderer}                A copy of this for chaining
	 * @memberof CIQ.Renderer
	 * @since
	 * <br>&bull; 2015-07-01 'preserveSeries' is now available
	 * <br>&bull; 3.0.0 series is now removed even if series parameter 'permanent' is set to true. The permanent parameter only prevents right click user interaction and not programmatically requested removals.
	 * <br>&bull; 4.0.0 series data is now totally removed from masterData if no longer used by any other renderers.
	 * <br>&bull; 6.2.0 No longer force 'percent'/'linear', when adding/removing comparison series, respectively, unless {@link CIQ.ChartEngine.Chart#forcePercentComparison} is true. This allows for backwards compatibility with previous UI modules.
	 */CIQ.Renderer.prototype.removeSeries=function(id,preserveSeries){var spliceIndex=null,comparing=false;var chart=this.stx.chart;for(var r in chart.seriesRenderers){var renderer=chart.seriesRenderers[r];for(var sp=0;sp<renderer.seriesParams.length;sp++){var seriesParams=renderer.seriesParams[sp];if(seriesParams.id==id&&this===renderer)spliceIndex=sp;else if(seriesParams.isComparison&&renderer.params.panel==chart.panel.name&&(!renderer.params.yAxis||renderer.params.yAxis==chart.yAxis))comparing=true;}}if(spliceIndex!==null){if(chart.forcePercentComparison&&!comparing&&this.seriesParams[spliceIndex].isComparison&&this.stx.layout.chartScale!="linear"){this.stx.setChartScale();}this.seriesParams.splice(spliceIndex,1);}delete this.colors[id+" up"];delete this.colors[id+" dn"];delete this.colors[id];if(!preserveSeries){//if(!this.stx.chart.series[id] || !this.stx.chart.series[id].parameters.permanent){
var seriesInUse=false;for(var plot in chart.seriesRenderers){var myPlot=chart.seriesRenderers[plot];for(var s=0;s<myPlot.seriesParams.length;s++){if(myPlot.seriesParams[s].id==id){seriesInUse=true;break;}}if(seriesInUse)break;}if(!seriesInUse){this.stx.deleteSeries(id,this.stx.chart);}//}
}this.stx.deleteYAxisIfUnused(this.stx.panels[this.params.panel],this.params.yAxis);return this;};/**
	 * Removes all series from the renderer and the yAxis from the panel if it is not being used by any current renderers.
	 * @param {boolean} [eraseData=false] Set to true to erase the actual series data in the CIQ.ChartEngine otherwise it will be retained
	 * @return {CIQ.Renderer} A copy of this for chaining
	 * @memberof CIQ.Renderer
	 */CIQ.Renderer.prototype.removeAllSeries=function(eraseData){if(eraseData){var arr=[];// Compile a list of all of the fields
for(var sp=0;sp<this.seriesParams.length;sp++){arr.push(this.seriesParams[sp].id);}for(var i=0;i<arr.length;i++){this.removeSeries(arr[i]);}}this.seriesParams=[];this.colors={};this.stx.deleteYAxisIfUnused(this.stx.panels[this.params.panel],this.params.yAxis);return this;};/**
	 * Call this to immediately render the visualization, at the end of a chain of commands.
	 * @return {CIQ.Renderer} A copy of this for chaining
	 * @memberof CIQ.Renderer
	 */CIQ.Renderer.prototype.ready=function(){this.stx.createDataSet();this.stx.draw();return this;};/**
	 * Creates a Lines renderer. 
	 * 
	 * This renderer will draw lines of various color, thickness and pattern on a chart.
	 *
	 * The Lines renderer is used to create the following drawing types: line, mountain, baseline, wave, step chart, and colored versions of these.
	 * Note: by default the renderer will display lines as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {number} [config.params.width] Width of the rendered line
	 * @param  {string} [config.params.type="line"] Type of rendering "line", "mountain", ["wave"]{@link CIQ.ChartEngine#drawWaveChart}
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {boolean} [config.params.highlightable=true] Set to false to prevent selection of series via hover
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.step] Specifies a step chart
	 * @param  {boolean} [config.params.baseline] Specifies a baseline chart
	 * @param  {boolean} [config.params.colored] Specifies the use of a colorFunction to dictate color of the segment
	 * @param  {boolean} [config.params.vertex] Specifies drawing a dot on every vertex
	 * @param  {boolean} [config.params.vertex_color] Specifies a color for the vertices.  If omitted, will use defaultColor.
	 * @param  {string} [config.params.colorFunction] Override string (or function) used to determine color of bar.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 *
	 * Common valid parameters for use by attachSeries. See also {@link CIQ.ChartEngine#plotLine}:<br>
	 * `color` - Specify the color for the line in rgba, hex or by name.<br>
	 * `pattern` - Specify the pattern as an array. For instance [5,5] would be five pixels and then five empty pixels.<br>
	 * `width` - Specify the width of the line.<br>
	 * `baseColor` - Specify the color of the base of a mountain.<br>
	 * `fillStyle` - Specify an alternate color to fill a mountain (other than `color`).<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.Lines
	 * @since
	 * <br>&bull; 4.0.0 - New `config.params.useChartLegend` added
	 * <br>&bull; 5.1.0 removed subtype parameter, this will be determined internally from config.params.step=true
	 * <br>&bull; 5.1.0 added highlightable, overChart, step, baseline, vertex, style, colored, and colorFunction parameters
	 *
	 * @example
	 *	// add multiple series and attach to a custom y-axis on the left.
	 *	// See this example working here : https://jsfiddle.net/chartiq/b6pkzrad
	 *
	 *	// note how the addSeries callback is used to ensure the data is present before the series is displayed
	 *
	 *	//create the custom axis
	 *	var axis=new CIQ.ChartEngine.YAxis();
	 *	axis.position="left";
	 *	axis.textStyle="#FFBE00";
	 *	axis.decimalPlaces=0;			// no decimal places on the axis labels
	 *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
	 *
	 *	//create the renderer
	 *	var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));
	 *
	 *	// create your series and attach them to the chart when the data is loaded.
	 *	stxx.addSeries("NOK", {display:"NOK",width:4},function(){
	 *		renderer.attachSeries("NOK", "#FFBE00").ready();
	 *	});
	 *
	 *	stxx.addSeries("SNE", {display:"Sony",width:4},function(){
	 *		renderer.attachSeries("SNE", "#FF9300").ready();
	 *	});
	 *
	 * @example
		// This is an example on how completely remove a renderer and all associated data.
		// This should only be necessary if you are also removing the chart itself.

		// remove all series from the renderer including series data from the masterData
  		renderer.removeAllSeries(true);

  		// detach the series renderer from the chart.
  		stxx.removeSeriesRenderer(renderer);

  		// delete the renderer itself.
  		renderer=null;
	 *
	 * @example
	 	// Colored step baseline mountain with vertices
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", baseline:true, step:true, colored:true, vertex:true, yAxis:axis}}));
	 *
	 */CIQ.Renderer.Lines=function(config){this.construct(config);var params=this.params;if(!params.type)params.type="line";if(!params.style){switch(params.type){case"mountain":if(params.baseline)params.style="stx_baseline_delta_mountain";else if(params.colored)params.style="stx_colored_mountain_chart";else params.style="stx_mountain_chart";break;default:params.style="stx_line_chart";}}this.supportsAnimation=true;if(params.type=="wave"){// wave charts don't support these options and no gap support either.
params.step=params.vertex=params.baseline=params.colored=false;this.highLowBars=this.barsHaveWidth=true;this.supportsAnimation=false;}else if(params.type=="step"){params.step=true;}};CIQ.Renderer.Lines.ciqInheritsFrom(CIQ.Renderer,false);/**
	 * Returns a new Lines renderer if the featureList calls for it
	 * FeatureList should contain whatever features requested; valid features:
	 * 	line, mountain, baseline (delta), step, vertex, colored, wave
	 * Anything else is an invalid feature and will cause function to return null
	 * Called by {@link CIQ.Renderer.produce} to create a renderer for the main series
	 * @param {array} featureList List of rendering terms requested by the user, parsed from the chartType
	 * @param {object} [config.params] Parameters used for the series to be created, used to create the renderer
	 * @return {CIQ.Renderer.Lines} A new instance of the Lines renderer, if the featureList matches
	 * @memberof CIQ.Renderer.Lines
	 * @since 5.1.0
	 */CIQ.Renderer.Lines.requestNew=function(featureList,params){var type=null,isStep=params.step,isColored=params.colored,isBaseline=params.baseline,isVertex=params.vertex;for(var pt=0;pt<featureList.length;pt++){var pType=featureList[pt];switch(pType){case"line":case"mountain":case"wave":type=pType;break;case"baseline":isBaseline=true;break;case"colored":isColored=true;break;case"step":isStep=true;break;case"vertex":isVertex=true;break;case"delta":break;default:return null;// invalid chart type for this renderer
}}if(type===null&&!isBaseline&&!isStep)return null;return new CIQ.Renderer.Lines({params:CIQ.extend(params,{type:type,step:isStep,colored:isColored,baseline:isBaseline,vertex:isVertex})});};CIQ.Renderer.Lines.prototype.draw=function(){var stx=this.stx,panel=this.stx.panels[this.params.panel],chart=panel.chart;var seriesMap={};var s,seriesParams=this.seriesParams;var colorFunction=this.params.colorFunction;function defaultColorFunction(param){var stxLineUpColor=param.fill_color_up||stx.getCanvasColor("stx_line_up");var stxLineDownColor=param.fill_color_down||stx.getCanvasColor("stx_line_down");var stxLineColor=param.color||stx.getCanvasColor("stx_line_chart");return function(stx,quote,mode){if(!quote.iqPrevClose&&quote.iqPrevClose!==0)return stxLineColor;if(quote.Close>quote.iqPrevClose)return stxLineUpColor;if(quote.Close<quote.iqPrevClose)return stxLineDownColor;return stxLineColor;};}if(this.params.vertex&&!stx.scatter){console.warn("Error, vertex option requires customChart.js");this.params.vertex=false;}for(s=0;s<seriesParams.length;s++){var sParam=seriesParams[s];if(this.params.colored){var parts=["_color_up","_color_down","_color"];for(var i=0;i<parts.length;i++){//if(!sParam["fill"+parts[i]]){
var b=sParam["border"+parts[i]];if(b&&b!="auto")sParam["fill"+parts[i]]=b;//}
}if(!colorFunction)colorFunction=defaultColorFunction(sParam);this.params.colorFunction=colorFunction;}var defaultParams={};if(chart.series[sParam.id]){// make sure the series is still there.
defaultParams=CIQ.clone(chart.series[sParam.id].parameters);}seriesMap[sParam.id]={parameters:CIQ.extend(CIQ.extend(defaultParams,this.params),sParam),yValueCache:this.caches[sParam.id]};if(this==stx.mainSeriesRenderer&&chart.customChart&&chart.customChart.colorFunction){seriesMap[sParam.id].parameters.colorFunction=chart.customChart.colorFunction;}}stx.drawSeries(chart,seriesMap,this.params.yAxis,this);for(s in seriesMap){this.caches[s]=seriesMap[s].yValueCache;}};CIQ.Renderer.Lines.prototype.drawIndividualSeries=function(chart,parameters){if(parameters.invalid)return;var stx=this.stx,context=chart.context,rc=null;var colorFunction=parameters.colorFunction,panel=stx.panels[parameters.panel]||chart.panel;if(typeof colorFunction=="string"){colorFunction=CIQ.Renderer.colorFunctions[colorFunction];if(!colorFunction)return;}if(parameters.vertex){context.save();context.lineJoin="bevel";}if(parameters.type=="wave"){rc=stx.drawWaveChart(panel,parameters);}else if(parameters.baseline){rc=stx.drawBaselineChart(panel,parameters);}else if(parameters.type=="mountain"){parameters.returnObject=true;rc=stx.drawMountainChart(panel,parameters,colorFunction);}else{parameters.returnObject=true;rc=stx.drawLineChart(panel,parameters.style,colorFunction,parameters);}if(parameters.vertex){stx.scatter(panel,{yAxis:parameters.yAxis,field:parameters.symbol||parameters.field,subField:parameters.subField,symbol:parameters.symbol,color:parameters.vertex_color,overlayScaling:parameters.overlayScaling});context.restore();}return rc;};/**
	 * Creates an OHLC renderer.
	 *
	 * Note: by default the renderer will display bars as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * The OHLC renderer is a base class for creating the following chart types: 
	 * - {@link CIQ.Renderer.HLC}
	 * - {@link CIQ.Renderer.Bars}
	 * - {@link CIQ.Renderer.Candles}
	 * - {@link CIQ.Renderer.SimpleHistogram}
	 * <br>and is normally not directly accessed.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {string} [config.params.type] Type of rendering "bar", "candle". Not needed if `params.histogram` is set)
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.colored] For bar or hlc, specifies using a condition or colorFunction to determine color
	 * @param  {boolean} [config.params.hollow] Specifies candles should be hollow candles
	 * @param  {boolean} [config.params.volume] Specifies candles should be volume candles
	 * @param  {boolean} [config.params.histogram] Specifies histogram chart (if set, `params.type` is not required). These are basic histograms that allow just one bar per tick; not to be confused with stackable histograms which require the more advanced {@link CIQ.Renderer.Histogram}
	 * @param  {boolean} [config.params.hlc] Specifies bar chart, with just hlc data; no open tick
	 * @param  {boolean} [config.params.gradient=true] Specifies histogram bars are to be drawn with a gradient; set to false to draw with solid colors
	 * @param  {string} [config.params.colorBasis="close"] For bar/hlc charts, will compute color based on whether current close is higher or lower than previous close.  Set to "open" to compute this off the open rather than yesterday's close.
	 * @param  {function} [config.params.colorFunction] Oerride function (or string) used to determine color of bar.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 * @constructor
	 * @name  CIQ.Renderer.OHLC
	 * @since 5.1.0
	 * @example
	 	// Colored hlc chart
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.OHLC({params:{name:"bars", type:"bar", hlc:true, colored:true}}));
	 *
	 */CIQ.Renderer.OHLC=function(config){this.construct(config);var params=this.params;if(!params.type)params.type="candle";this.highLowBars=this.barsHaveWidth=this.standaloneBars=true;if(params.histogram){params.type="candle";this.highLowBars=false;params.volume=params.hollow=false;}if(params.type=="bar")params.volume=params.hollow=params.histogram=false;if(params.type=="candle")params.hlc=params.colored=false;if(params.volume)params.hollow=true;};CIQ.Renderer.OHLC.ciqInheritsFrom(CIQ.Renderer,false);/**
	 * Returns a new OHLC renderer if the featureList calls for it
	 * FeatureList should contain whatever features requested; valid features:
	 * 	bar, hlc, candle, colored, histogram, hollow, volume
	 * Anything else is an invalid feature and will cause function to return null
	 * Called by {@link CIQ.Renderer.produce} to create a renderer for the main series
	 * @param {array} featureList List of rendering terms requested by the user, parsed from the chartType
	 * @param {object} [config.params] Parameters used for the series to be created, used to create the renderer
	 * @return {CIQ.Renderer.OHLC} A new instance of the OHLC renderer, if the featureList matches
	 * @memberof CIQ.Renderer.OHLC
	 * @since 5.1.0
	 */CIQ.Renderer.OHLC.requestNew=function(featureList,params){var type=null,isHlc=params.hlc,isColored=params.colored,isHollow=params.hollow,isVolume=params.volume,histogram=params.histogram;for(var pt=0;pt<featureList.length;pt++){var pType=featureList[pt];switch(pType){case"bar":case"candle":type=pType;break;case"volume":isVolume=true;break;case"hollow":isHollow=true;break;case"colored":isColored=true;break;case"histogram":histogram=true;type="candle";break;case"hlc":isHlc=true;type="bar";break;default:return null;// invalid chartType for this renderer
}}if(type===null)return null;return new CIQ.Renderer.OHLC({params:CIQ.extend(params,{type:type,hlc:isHlc,colored:isColored,hollow:isHollow,volume:isVolume,histogram:histogram})});};CIQ.Renderer.OHLC.prototype.draw=function(){var stx=this.stx,panel=this.stx.panels[this.params.panel],chart=panel.chart;var seriesMap={};var s,seriesParams=this.seriesParams;for(s=0;s<seriesParams.length;s++){var sParam=seriesParams[s];var defaultParams={};if(chart.series[sParam.id]){// make sure the series is still there.
defaultParams=CIQ.clone(chart.series[sParam.id].parameters);}seriesMap[sParam.id]={parameters:CIQ.extend(CIQ.extend(defaultParams,this.params),sParam)//yValueCache: this.caches[sParam.id]
};if(this==stx.mainSeriesRenderer&&chart.customChart&&chart.customChart.colorFunction){seriesMap[sParam.id].parameters.colorFunction=chart.customChart.colorFunction;}}stx.drawSeries(chart,seriesMap,this.params.yAxis,this);for(s in seriesMap){if(seriesMap[s].yValueCache)this.caches[s]=seriesMap[s].yValueCache;}};CIQ.Renderer.OHLC.prototype.getColor=function(stx,panel,style,isBorder,isGradient,overrideColor){var color=overrideColor||style.color;if(isBorder){color=overrideColor||style.borderLeftColor||style["border-left-color"];if(!color)return null;}if(!isGradient)return color;var top=stx.pixelFromTransformedValue(panel.chart.highValue,panel);if(isNaN(top))top=0;// 32 bit IE doesn't like large numbers
var backgroundColor=style.backgroundColor;if(color&&!CIQ.isTransparent(color)){var gradient=stx.chart.context.createLinearGradient(0,top,0,2*panel.yAxis.bottom-top);gradient.addColorStop(0,color);gradient.addColorStop(1,backgroundColor);return gradient;}return backgroundColor;};CIQ.Renderer.OHLC.prototype.drawIndividualSeries=function(chart,parameters){if(parameters.invalid)return;var stx=this.stx,context=chart.context;var colorFunction=parameters.colorFunction,panel=stx.panels[parameters.panel]||chart.panel;if(typeof colorFunction=="string"){colorFunction=CIQ.Renderer.colorFunctions[colorFunction];if(!colorFunction)return;}var noBorders=stx.layout.candleWidth-chart.tmpWidth<=2&&chart.tmpWidth<=3;var CLOSEUP=1;// today's close greater than yesterday's close
var CLOSEDOWN=2;// today's close less than yesterday's close
var CLOSEEVEN=4;// today's close the same as yesterday's close
var CANDLEUP=8;// today's close greater than today's open
var CANDLEDOWN=16;// today's close less than today's open
var CANDLEEVEN=32;// today's close equal to today's open
if(!chart.state.chartType)chart.state.chartType={};var pass=chart.state.chartType.pass={};var colorUseOpen=stx.colorByCandleDirection;if(parameters.colorBasis)colorUseOpen=parameters.colorBasis=="open";var isHistogram=parameters.histogram,type=parameters.type,hollow=parameters.hollow;var noWicks=stx.noWicksOnCandles[type];stx.startClip(panel.name);var colors=null,rc={colors:[],cache:[]},caches=[];if(colorFunction){var drawingParams={isHistogram:isHistogram,field:parameters.field,yAxis:parameters.yAxis,volume:parameters.volume,overlayScaling:parameters.overlayScaling,highlight:parameters.highlight};if(!isHistogram&&type=="bar"){drawingParams.type=parameters.hlc?"hlc":"bar";rc=stx.drawBarChart(panel,"stx_bar_chart",colorFunction,drawingParams);}else{if(type=="candle"&&!noWicks)stx.drawShadows(panel,colorFunction,drawingParams);rc=stx.drawCandles(panel,colorFunction,drawingParams);//all bars
drawingParams.isOutline=true;if(hollow||!noBorders)stx.drawCandles(panel,colorFunction,drawingParams);//all bar borders, if candlewidth is too small then don't draw the borders
}}else{var isGradient=isHistogram&&parameters.gradient!==false;var chartParts=[{type:"histogram",drawType:"histogram",style:"stx_histogram_up",condition:CANDLEUP,fill:"fill_color_up",border:"border_color_up",useColorInMap:true,useBorderStyleProp:true},{type:"histogram",drawType:"histogram",style:"stx_histogram_down",condition:CANDLEDOWN,fill:"fill_color_down",border:"border_color_down",useColorInMap:true,useBorderStyleProp:true},{type:"histogram",drawType:"histogram",style:"stx_histogram_even",condition:CANDLEEVEN,fill:"fill_color_even",border:"border_color_even",skipIfPass:true,useColorInMap:true,useBorderStyleProp:true},{type:"bar",drawType:"bar",style:parameters.style||"stx_bar_chart",border:"border_color",useColorInMap:true},{type:"bar",drawType:"bar",style:"stx_bar_up",condition:colorUseOpen?CANDLEUP:CLOSEUP,border:"border_color_up",useColorInMap:true},{type:"bar",drawType:"bar",style:"stx_bar_down",condition:colorUseOpen?CANDLEDOWN:CLOSEDOWN,border:"border_color_down",useColorInMap:true},{type:"bar",drawType:"bar",style:"stx_bar_even",condition:colorUseOpen?CANDLEEVEN:CLOSEEVEN,border:"border_color_even",skipIfPass:true,useColorInMap:true},{type:"candle",drawType:"shadow",style:"stx_candle_shadow",border:"border_color_up"},{type:"candle",drawType:"shadow",style:"stx_candle_shadow_up",condition:CANDLEUP,border:"border_color_up"},{type:"candle",drawType:"shadow",style:"stx_candle_shadow_down",condition:CANDLEDOWN,border:"border_color_down"},{type:"candle",drawType:"shadow",style:"stx_candle_shadow_even",condition:CANDLEEVEN,border:"border_color_even",skipIfPass:true},{type:"candle",drawType:"candle",style:"stx_candle_up",condition:CANDLEUP,fill:"fill_color_up",border:"border_color_up",useColorInMap:true,useBorderStyleProp:true},{type:"candle",drawType:"candle",style:"stx_candle_down",condition:CANDLEDOWN,fill:"fill_color_down",border:"border_color_down",useColorInMap:true,useBorderStyleProp:true},{type:"hollow",drawType:"shadow",style:"stx_hollow_candle_up",condition:CLOSEUP,border:"border_color_up"},{type:"hollow",drawType:"shadow",style:"stx_hollow_candle_down",condition:CLOSEDOWN,border:"border_color_down"},{type:"hollow",drawType:"shadow",style:"stx_hollow_candle_even",condition:CLOSEEVEN,border:"border_color_even",skipIfPass:true},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_up",condition:CLOSEUP|CANDLEDOWN,fill:"fill_color_up",border:"border_color_up",useColorInMap:true},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_down",condition:CLOSEDOWN|CANDLEDOWN,fill:"fill_color_down",border:"border_color_down",useColorInMap:true},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_even",condition:CLOSEEVEN|CANDLEDOWN,fill:"fill_color_even",border:"border_color_even",skipIfPass:true,useColorInMap:true},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_up",condition:CLOSEUP|CANDLEUP,fill:"fill_color_up",border:"border_color_up"},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_down",condition:CLOSEDOWN|CANDLEUP,fill:"fill_color_down",border:"border_color_down"},{type:"hollow",drawType:"candle",style:"stx_hollow_candle_even",condition:CLOSEEVEN|CANDLEUP,fill:"fill_color_even",border:"border_color_even"}];for(var i=0;i<chartParts.length;i++){var chartPart=chartParts[i];if(chartPart.skipIfPass&&!pass.even)continue;else if(isHistogram){if(chartPart.type!="histogram")continue;}else if(type=="bar"){if(chartPart.type!="bar")continue;else if(parameters.colored&&!chartPart.condition)continue;else if(!parameters.colored&&chartPart.condition)continue;}else if(hollow){if(chartPart.type!="hollow")continue;else if(chartPart.drawType=="shadow"&&noWicks)continue;}else if(type=="candle"){if(chartPart.type!="candle")continue;else if(chartPart.drawType=="shadow"){if(noWicks)continue;var coloredShadowUp=parameters.border_color_up||stx.getCanvasColor("stx_candle_shadow_up");var coloredShadowDown=parameters.border_color_down||stx.getCanvasColor("stx_candle_shadow_down");var coloredShadowEven=parameters.border_color_even||stx.getCanvasColor("stx_candle_shadow_even");if(!CIQ.colorsEqual(coloredShadowUp,coloredShadowDown)||!CIQ.colorsEqual(coloredShadowUp,coloredShadowEven)||!CIQ.colorsEqual(coloredShadowUp,stx.defaultColor)){if(!chartPart.condition)continue;}else if(chartPart.condition)continue;}}else continue;var styleArray=stx.canvasStyle(chartPart.style);var legendColor=this.getColor(stx,panel,styleArray,false,false,parameters[chartPart.fill]);var fillColor=this.getColor(stx,panel,styleArray,false,isGradient,parameters[chartPart.fill]);var borderColor=this.getColor(stx,panel,styleArray,chartPart.useBorderStyleProp&&!noBorders,isGradient,parameters[chartPart.border]);if(chartPart.drawType=="candle"){if(chartPart.type=="hollow"){// Solid candles get no border unless the border color is different than the fill color
if(!CIQ.isTransparent(fillColor)&&CIQ.colorsEqual(borderColor,fillColor))borderColor=chartPart.useColorInMap?"transparent":fillColor;if(!chartPart.useColorInMap)fillColor=stx.containerColor;}else if(chartPart.type=="candle"){// Check to see if the candles are too small for borders
if(noBorders){if(CIQ.isTransparent(fillColor))fillColor=borderColor;// transparent candle, draw it with the border color
else borderColor=fillColor;// non-transparent candle, set the border to the fill color
}}}caches.push(stx.drawBarTypeChartInner({fillColor:fillColor,borderColor:borderColor,condition:chartPart.condition,style:chartPart.style,type:parameters.hlc?"hlc":chartPart.drawType,panel:panel,field:parameters.field,yAxis:parameters.yAxis,volume:parameters.volume,overlayScaling:parameters.overlayScaling,highlight:parameters.highlight}));if(!colors)colors={};if(chartPart.useColorInMap)colors[legendColor]=1;}}stx.endClip();for(var c in colors){if(!parameters.hollow||!CIQ.equals(c,stx.containerColor)){rc.colors.push(c);}}for(c=0;c<caches.length;c++){for(var x=0;x<caches[c].cache.length;x++){var v=caches[c].cache[x];if(v||v===0)rc.cache[x]=v;}}return rc;};/**
	 * Creates a Bars renderer, a derivation of the OHLC renderer.
	 *
	 * Note: by default the renderer will display bars as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * The Bars renderer is used to create the following drawing types: bar, colored bar.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.colored] For bar or hlc, specifies using a condition or colorFunction to determine color
	 * @param  {string} [config.params.colorBasis="close"] Will compute color based on whether current close is higher or lower than previous close.  Set to "open" to compute this off the open rather than yesterday's close.
	 * @param  {function} [config.params.colorFunction] Override function (or string) used to determine color of bar.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 *
	 * Common valid parameters for use by attachSeries.:<br>
	 * `border_color` - Color to use for uncolored bars.<br>
	 * `border_color_up` - Color to use for up bars.<br>
	 * `border_color_down` - Color to use for down bars.<br>
	 * `border_color_even` - Color to use for even bars.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.Bars
	 * @since 5.1.1, creates only Bar type charts
	 * @example
	 	// Colored bar chart
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Bars({params:{name:"bars", colored:true}}));
	 */CIQ.Renderer.Bars=function(config){this.construct(config);var params=this.params;params.type="bar";this.highLowBars=this.barsHaveWidth=this.standaloneBars=true;params.hlc=params.volume=params.hollow=params.histogram=false;};CIQ.Renderer.Bars.ciqInheritsFrom(CIQ.Renderer.OHLC,false);/**
	 * Creates a HLC renderer, a derivation of the Bars renderer.
	 *
	 * Note: by default the renderer will display bars as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * The HLC renderer is used to create the following drawing types: hlc, colored hlc.
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.colored] For bar or hlc, specifies using a condition or colorFunction to determine color
	 * @param  {string} [config.params.colorBasis="close"] Will compute color based on whether current close is higher or lower than previous close.  Set to "open" to compute this off the open rather than yesterday's close.
	 * @param  {function} [config.params.colorFunction] Override function (or string) used to determine color of bar.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 *
	 * Common valid parameters for use by attachSeries.:<br>
	 * `border_color` - Color to use for uncolored bars.<br>
	 * `border_color_up` - Color to use for up bars.<br>
	 * `border_color_down` - Color to use for down bars.<br>
	 * `border_color_even` - Color to use for even bars.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.HLC
	 * @since 5.1.1
	 * @example
	 	// Colored hlc chart
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.HLC({params:{name:"hlc", colored:true}}));
	 */CIQ.Renderer.HLC=function(config){this.construct(config);var params=this.params;params.type="bar";params.hlc=true;this.highLowBars=this.barsHaveWidth=this.standaloneBars=true;params.volume=params.hollow=params.histogram=false;};CIQ.Renderer.HLC.ciqInheritsFrom(CIQ.Renderer.Bars,false);/**
	 * Creates a Candles renderer, a derivation of the OHLC renderer.
	 *
	 * Note: by default the renderer will display candles as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * The Candles renderer is used to create the following drawing types: candle, hollow candle, volume candle
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.hollow] Specifies candles should be hollow candles
	 * @param  {boolean} [config.params.volume] Specifies candles should be volume candles
	 * @param  {function} [config.params.colorFunction] Override function (or string) used to determine color of candle.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 *
	 * Common valid parameters for use by attachSeries.:<br>
	 * `fill_color_up` - Color to use for up candles.<br>
	 * `fill_color_down` - Color to use for down candles.<br>
	 * `fill_color_even` - Color to use for even candles.<br>
	 * `border_color_up` - Color to use for the border of up candles.<br>
	 * `border_color_down` - Color to use for the order of down candles.<br>
	 * `border_color_even` - Color to use for the order of even candles.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.Candles
	 * @since 5.1.1
	 * @example
	 	// Hollow candle chart
		var renderer=stxx.setSeriesRenderer(new Candles({params:{name:"candles", hollow:true}}));
	 *
	 */CIQ.Renderer.Candles=function(config){this.construct(config);var params=this.params;params.type="candle";this.highLowBars=this.barsHaveWidth=this.standaloneBars=true;params.hlc=params.colored=params.histogram=false;if(params.volume)params.hollow=true;};CIQ.Renderer.Candles.ciqInheritsFrom(CIQ.Renderer.OHLC,false);/**
	 * Creates a SimpleHistogram renderer, a derivation of the Candles renderer.
	 *
	 * Note: by default the renderer will display histogram as underlays. As such, they will appear below any other studies or drawings.
	 *
	 * The SimpleHistogram renderer is used to create a histogram with the top of each bar representing the value of the field.
	 * It is a much simpler form of histogram than that produced by the Histogram renderer (advanced package).
	 *
	 * See {@link CIQ.Renderer#construct} for parameters required by all renderers
	 * @param {object} config Config for renderer
	 * @param  {object} [config.params] Parameters to control the renderer itself
	 * @param  {boolean} [config.params.useChartLegend=false] Set to true to use the built in canvas legend renderer. See {@link CIQ.ChartEngine.Chart#legendRenderer};
	 * @param  {string} [config.params.style] Style name to use in lieu of defaults for the type
	 * @param  {boolean} [config.params.gradient=true] Specifies histogram bars are to be drawn with a gradient; set to false to draw with solid colors
	 * @param  {function} [config.params.colorFunction] Override function (or string) used to determine color of bar.  May be an actual function or a string name of the registered function (see {@link CIQ.Renderer.registerColorFunction})
	 *
	 * Valid parameters for use by attachSeries.:<br>
	 * `fill_color_up` - Color to use for up histogram bars.<br>
	 * `fill_color_down` - Color to use for down histogram bars.<br>
	 * `fill_color_even` - Color to use for even histogram bars.<br>
	 * `border_color_up` - Color to use for the border of up histogram bars.<br>
	 * `border_color_down` - Color to use for the order of down histogram bars.<br>
	 * `border_color_even` - Color to use for the order of even histogram bars.<br>
	 *
	 * @constructor
	 * @name  CIQ.Renderer.SimpleHistogram
	 * @since 5.1.1
	 * @example
	 	// SimpleHistogram under the main chart plot
		var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.SimpleHistogram({params:{name:"histogram", overChart:false}}));
	 *
	 */CIQ.Renderer.SimpleHistogram=function(config){this.construct(config);var params=this.params;params.type="candle";params.histogram=true;this.barsHaveWidth=this.standaloneBars=true;this.highLowBars=false;params.hlc=params.colored=params.hollow=params.volume=false;};CIQ.Renderer.SimpleHistogram.ciqInheritsFrom(CIQ.Renderer.Candles,false);return _exports;};var __js_core_engine_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_core_engine_(_exports,market){var CIQ=_exports.CIQ,$$=_exports.$$,$$$=_exports.$$$,splinePlotter=_exports.SplinePlotter,timezoneJS=_exports.timezoneJS;/**
		 * Previously `STXChart`.
		 * This is the constructor that creates a chart engine, instantiates its basic chart object and links it to its DOM container.
		 * Before any chart operations can be performed, this constructor must be called.
		 *
		 * Multiple CIQ.ChartEngine (stx) objects can exist on an HTML document.
		 *
		 * Once instantiated, the chart engine will never need to be constructed again, unless it is [destroyed]{@link CIQ.ChartEngine#destroy}.
		 * To load or change symbols on the chart, simply call {@link {@link CIQ.ChartEngine#newChart}.
		 *
		 * @constructor
		 * @param {object} config Configuration object. Any field or object within the config parameter will be preset or added to the CIQ.ChartEngine object itself.
		 * Generally you will want to at least include {container: <your div element>}.
		 * @name  CIQ.ChartEngine
		 * @example
		 * // declare a chart
		 * var stxx=new CIQ.ChartEngine({container: $$$(".chartContainer")});
		 * // override defaults after a chart object is declared (this can be done at any time. If the chart has already been rendered, you will need to call `stx.draw();` to immediately see your changes )
		 * stxx.yaxisLabelStyle="roundRectArrow";
		 * stxx.layout.chartType="bar";
		 * @example
		 * // declare a chart and preset defaults
		 * var stxx=new CIQ.ChartEngine({container: $$$(".chartContainer"),layout:{"chartType": "candle","candleWidth": 16}});
		 * @since
		 * <br>&bull; 15-07-01 deprecated CIQ.ChartEngine#underlayPercentage
		 * <br>&bull; m-2016-12-01 deprecated renamed `CIQ.ChartEngine` from `STXChart`
		 */CIQ.ChartEngine=function(config){if(!config){config={container:null};}else if(config.constructor==HTMLDivElement){// legacy versions accepted the chart container as the first parameters rather than a config object
var newConfig={container:config};config=newConfig;}/**
		     * READ ONLY. A map of marker objects, sorted by label.
		     * @type object
		     * @alias markers
		     * @memberof CIQ.ChartEngine.prototype
		     */this.markers={};/**
		     * READ ONLY. An array of currently enabled panels
		     * @type object
		     * @alias panels
		     * @memberof CIQ.ChartEngine.prototype
		     */this.panels={};/**
		     * READ ONLY. An array of currently enabled overlay studies
		     * @type object
		     * @alias overlays
		     * @memberof CIQ.ChartEngine.prototype
		     */this.overlays={};/**
		     * READ ONLY. The charts on the screen. Will contain at least one item, "chart"
		     * @type object
		     * @alias charts
		     * @memberof CIQ.ChartEngine.prototype
		     */this.charts={};/**
		     * READ ONLY. Array of event listeners currently attached to the engine.
		     * These listeners will be killed when {@link CIQ.ChartEngine#destroy} is called.
		     *
		     * See {@link CIQ.ChartEngine#addEventListener} and {@link CIQ.ChartEngine#removeEventListener}
		     * @type array
		     * @alias eventListeners
		     * @memberof CIQ.ChartEngine.prototype
		     */this.eventListeners=[];/**
			 * Animations. These can be overridden with customized EaseMachines
			 * To disable an animation replace with an EaseMchine with one ms as the second parameter.
			 * @type {object}
		     * @alias animations
		     * @memberof CIQ.ChartEngine.prototype
			 * @example
			 * stxx.animations.zoom=new CIQ.EaseMachine(Math.easeOutCubic,1);
			 */this.animations={zoom:new CIQ.EaseMachine(Math.easeOutCubic,400)};/**
			 * Specify a callback by assigning a function to the event. Once the event triggers the callback will be executed.
			 *
			 * ** Note: All callbacks have been deprecated in favor of {@link CIQ.ChartEngine#addEventListener}**
			 *
		     * @type object
		     * @alias callbacks
		     * @memberof CIQ.ChartEngine#
			 * @example
			 * // using event listener
			 * stxx.addEventListener("callbackNameHere", function(callBackParametersHere){
			 * 	CIQ.alert('triggered!');
			 * });
			 * @example
			 * // using callback function
			 * stxx.callbacks.callbackNameHere=function(callBackPatamerersHere){
			 * 	CIQ.alert('triggered!');
			 * };
			 * @deprecated 4.0.0
			 */this.callbacks={/**
			     * Called when a user right clicks on an overlay study. If `forceEdit==true` then a user has clicked
			     * on an edit button (cog wheel) so pull up an edit dialog. Otherwise they have simply right clicked so
			     * give them a context menu.
			     *
			     * ***Please note that this callback must be set *before* you call {@link CIQ.ChartEngine#importLayout}.
			     * Otherwise your imported studies will not have an edit capability***
			     *
			     * Format:<br>
			     * studyOverlayEdit({stx:stx,sd:sd,inputs:inputs,outputs:outputs, parameters:parameters, forceEdit: forceEdit});
			     *
			     * The following CSS entry must also be present to enable the `Right click to Manage` text on the mouse-over context menu (div class="mSticky" generated by {@link CIQ.ChartEngine.htmlControls}):
			     * ```
			     * .rightclick_study .mouseManageText {
			     * display: inline; }
			     * ```
			     * See {@link CIQ.Studies.addStudy} for more details.
			     *
			     * @type function
				 * @alias callbacks[`studyOverlayEdit`]
				 * @memberof! CIQ.ChartEngine#
			     */studyOverlayEdit:null,/**
			     * Called when a user clicks the edit button on a study panel.
			     *
			     * ***Please note that this callback should be set *before* you call {@link CIQ.ChartEngine#importLayout}.
			     * Otherwise your imported studies will not have an edit capability***
			     *
			     * Format:<br>
			     * studyPanelEdit({stx:stx,sd:sd,inputs:inputs,outputs:outputs, parameters:parameters});
			     *
			     * See {@link CIQ.Studies.addStudy} for more details.
			     *
			     * @type function
				 * @alias callbacks[`studyPanelEdit`]
				 * @memberof! CIQ.ChartEngine#
			     */studyPanelEdit:null,/**
			     * Called when a user clicks or taps on the chart. Not called if a drawing tool is active!
			     *
			     * Format:<br>
			     * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
			     * @type function
				 * @alias callbacks[`tap`]
				 * @memberof! CIQ.ChartEngine#
				 * @example
				 * // using event listener
				 * stxx.addEventListener("tap", function(tapObject){
				 * 	CIQ.alert('tap event at x: ' + tapObject.x + ' y: '+ tapObject.y);
				 * });
				 * @example
				 * // using callback
				 * // this example  uses barFromPixel() to get the actual bar from the pixel location
				 * stxx.callbacks.tap= function(tapObject){
				 *	var msg= 'tap event at x: ' + tapObject.x + ' y: '+ tapObject.y;
				 *	var bar=this.barFromPixel(this.cx);
				 *  if(this.chart.dataSegment[bar]) {
				 * 	  msg+=' Date:' + this.chart.dataSegment[bar].DT;
				 * 	  msg+=' Close:' + this.chart.dataSegment[bar].Close;
				 *  }
				 *  alert (msg);
				 * };
				 */tap:null,/**
			     * Called when a user clicks or right clicks on the chart. Not called if the user right clicks on a drawing or study
			     * when [stxx.bypassRightClick]{@link CIQ.ChartEngine#bypassRightClick}=true
			     *
			     * Format:<br>
			     * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
			     * @type function
				 * @alias callbacks[`rightClick`]
				 * @memberof! CIQ.ChartEngine#
				 * @example
				 * // using event listener
				 * stxx.addEventListener("rightClick", function(rcObject){
				 * 	alert('right click event at x: ' + rcObject.x + ' y: '+ rcObject.y);
				 * });
				 * @since  09-2016-19
			     */rightClick:null,/**
			     * Called when a user "long holds" on the chart. By default this is set to 1000 milliseconds.
			     * Optionally change the value of stxx.longHoldTime to a different setting, or set to zero to disable.
			     *
			     * Format:<br>
			     * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy})
			     * @type function
				 * @alias callbacks[`longhold`]
				 * @memberof! CIQ.ChartEngine#
				 * @example
				 * // using event listener
				 * stxx.longHoldTime=... // Optionally override default value of 1000ms
				 * stxx.addEventListener("longhold", function(lhObject){
				 * 	CIQ.alert('longhold event at x: ' + lhObject.x + ' y: '+ lhObject.y);
				 * });
				 * @example
				 * // using callback function
				 * stxx.longHoldTime=... // Optionally override default value of 1000ms
				 * stxx.callbacks.longhold=function(lhObject){
				 * 	CIQ.alert('longhold event at x: ' + lhObject.x + ' y: '+ lhObject.y);
				 * });
				 * @memberof! CIQ.ChartEngine#
				 * @since 2016-06-22
			     */longhold:null,/**
			     * Called when a user moves on the chart. Not called if a drawing tool is active, panel resizing, etc
			     * grab is true if a mouse user has the mouse button down while moving. For touch users it is true
			     * if they do not have the crosshair tool enabled.
			     *
			     * Format:<br>
			     * callback({stx:CIQ.ChartEngine, panel:CIQ.ChartEngine.Panel, x:this.cx, y:this.cy, grab:boolean})
			     * @type function
				 * @alias callbacks[`move`]
				 * @memberof! CIQ.ChartEngine#
			     */move:null,/**
				 * Called when the layout changes
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, chart:CIQ.ChartEngine.Chart, symbol: String, symbolObject:Object, layout: Object})
				 * @type function
				 * @alias callbacks[`layout`]
				 * @memberof! CIQ.ChartEngine#
				 */layout:null,/**
				 * Called when a drawing is added or deleted (all the drawings are returned, not just the new one)
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, symbol: String, symbolObject:Object, drawings: Object})
				 * @type function
				 * @alias callbacks[`drawing`]
				 * @memberof! CIQ.ChartEngine#
				 */drawing:null,/**
				 * Called when a right-click id detected on a highlighted drawing.
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, drawing:CIQ.Drawing})
				 * @type function
				 * @alias callbacks[`drawingEdit`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 6.2.0
				 * @private
				 */drawingEdit:null,/**
				 * Called when preferences are changed
				 * calback({stx:CIQ.ChartEngine})
				 * @type function
				 * @alias callbacks[`preferences`]
				 * @memberof! CIQ.ChartEngine#
				 */preferences:null,/**
				 * Called when a theme is changed
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine})
				 * @type function
				 * @alias callbacks[`theme`]
				 * @memberof! CIQ.ChartEngine#
				 */theme:null,/**
				 * Called when the symbol is changed (when newChart is called), added (addSeries, addStudy) or removed (removeSeries, removeStudy). Note
				 * that this is not called if the symbol change occurs during an importLayout
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, symbol: String, symbolObject:Object, action:["master"|"add-series"|"remove-series"})
				 * @type function
				 * @alias callbacks[`symbolChange`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 06-2016-21
				 */symbolChange:null,/**
				 * Called when the symbol is first imported into the layout.
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, symbol: String, symbolObject:Object, action:"master"})
				 * @type function
				 * @alias callbacks[`symbolImport`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 4.0.0
				 */symbolImport:null,/**
				 * Called to determine how many decimal places the stock trades in. This is used for head's up display
				 * and also for the current price pointer label.
				 *
				 * Format:<br>
				 * callback({stx:CIQ.ChartEngine, chart:CIQ.ChartEngine.Chart, symbol: String, symbolObject:Object})
				 * @type function
				 * @alias callbacks[`calculateTradingDecimalPlaces`]
				 * @memberof! CIQ.ChartEngine#
				 */calculateTradingDecimalPlaces:CIQ.calculateTradingDecimalPlaces};/**
		     * Holds the HTML control elements managed by the chart. Usually this will be a copy of the default [htmlControls]{@link CIQ.ChartEngine#htmlControls}.
		     * These are not the GUI elements around the chart, but rather the HTML elements that the library will directly interact with on the canvas
		     * for things like panel resizing, study edit controls, zooming controls, etc. See {@link CIQ.ChartEngine#htmlControls} for more details.
		     * @type object
		     * @alias controls
		     * @memberof CIQ.ChartEngine.prototype
		     */this.controls={};// contains the HTML controls for the chart (zoom, home, etc)
this.goneVertical=false;// Used internally for pinching algorithm
/**
		     * READ ONLY.. Toggles to true when the screen is being pinched
		     * @type boolean
		     * @default
		     * @alias pinchingScreen
		     * @memberof CIQ.ChartEngine.prototype
		     */this.pinchingScreen=false;/**
		     * READ ONLY.. Toggles to true when the screen is being panned
		     * @type boolean
		     * @default
		     * @alias grabbingScreen
		     * @memberof CIQ.ChartEngine.prototype
		     */this.grabbingScreen=false;this.grabStartX=0;// Used internally for panning
this.grabStartY=0;// "
this.grabStartScrollX=0;// "
this.grabStartScrollY=0;// "
this.swipe={};// "
/**
		     * Number of pixels the mouse needs to move in vertical direction to "unlock" vertical panning/scrolling.
		     * Setting to a number larger than the pixels on the canvas will also disable vertical scrolling
		     * @type number
		     * @default
		     * @alias yTolerance
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * //This will disable the tolerance, so panning will immediately follow the user actions without maintaining a locked vertical location when panning left or right.
		     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		     * stxx.yTolerance=0;
		     */this.yTolerance=100;/**
			 * Number of bars to always keep in view when the user pans forwards or backwards.
			 * If this is set to less than 1, it will be possible to have a blank chart.
			 *
			 * See {@link CIQ.ChartEngine.Chart#allowScrollPast} and {@link CIQ.ChartEngine.Chart#allowScrollFuture} for instructions on how to prevent users from scrolling past the last bar on the chart in either direction; which may supersede this setting.
			 * @type number
			 * @default
			 * @alias minimumLeftBars
			 * @memberof CIQ.ChartEngine.prototype
			 * @since 05-2016-10
			 */this.minimumLeftBars=1;this.grabStartCandleWidth=0;// Used internally for zooming
this.grabStartZoom=0;// "
this.grabOverrideClick=false;// "
this.grabMode="";// Used internally. Set to either pan, zoom-x or zoom-y when grabbing screen
this.vectorsShowing=false;// Used internally to ensure that vectors aren't drawn more than once
this.mouseMode=true;// Used internally. For Windows8 devices this is set to true or false depending on whether the last touch was a mouse click or touch event. To support all-in-one computers
/**
		     * Set to true to reverse direction of mousewheel for zooming
		     * @type boolean
		     * @default
		     * @alias reverseMouseWheel
		     * @memberof CIQ.ChartEngine.prototype
		     */this.reverseMouseWheel=false;/**
		     * Set to false to turn off mousewheel acceleration
		     * @type boolean
		     * @default
		     * @alias mouseWheelAcceleration
		     * @since 2015-11-1
		     * @memberof CIQ.ChartEngine.prototype
		     */this.mouseWheelAcceleration=true;/**
		     * Minimum candleWidth (in pixels) allowed when zooming out. This will determine the maximum number of ticks to display on the chart.
		     * Anything smaller than **0.5 pixels** may cause performance issues when zooming out.
		     * @type number
		     * @default
		     * @alias minimumCandleWidth
		     * @memberof CIQ.ChartEngine.prototype
		     */this.minimumCandleWidth=1;/**
		     * Minimum number of ticks to display when zooming in.
		     * @type number
		     * @default
		     * @alias minimumZoomTicks
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 07-2016-16.6
		     */this.minimumZoomTicks=9;/**
		     * Set to false to disable any user zooming on the chart
		     * @type boolean
		     * @default
		     * @alias allowZoom
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 04-2015
		     * @example
		     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), allowZoom:false, layout:{"candleWidth": 16, "crosshair":true}});
		     */this.allowZoom=true;/**
		     * Set to false to disable any user scrolling of the chart
		     * @type boolean
		     * @default
		     * @alias allowScroll
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 04-2015
			 * @example
		     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), allowScroll:false, layout:{"candleWidth": 16, "crosshair":true}});
		     */this.allowScroll=true;/**
		     * Set to false to disable 2 finger side swipe motion for scrolling
		     * @type boolean
		     * @default
		     * @alias allowSideswipe
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 2015-12-08
		     */this.allowSideswipe=true;/**
		     * If set to true then a three finger movement will increment periodicity.
		     * @type boolean
		     * @default
		     * @alias allowThreeFingerTouch
		     * @memberof CIQ.ChartEngine.prototype
		     */this.allowThreeFingerTouch=false;/**
			 * Set to `true` to bypass right clicks on **all** overlay types.
			 * Or define independent settings for series, studies, and drawings by using an object instead.
		     * Also see:
		     * - <a href="CIQ.ChartEngine.html#callbacks%5B%60rightClick%60%5D">CIQ.ChartEngine#callbacks.rightClick</a>
		     * - {@link CIQ.ChartEngine.AdvancedInjectable#rightClickHighlighted}

		     * @type object
		     * @default
		     * @alias bypassRightClick
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 2016-07-16
		     * <br>&bull;  5.1.0: An object containing booleans to separate series, studies, and drawings.
		     * @example
			 * this.bypassRightClick={
			 *	series: false,
			 *	study: false,
			 *	drawing: false
			 * };
		     */this.bypassRightClick={series:false,study:false,drawing:false};this.anyHighlighted=false;// READ ONLY. Toggles to true if any drawing or overlay is highlighted for deletion
this.accessoryTimer=null;// Used internally to control drawing performance
this.lastAccessoryUpdate=new Date().getTime();// "
this.displayCrosshairs=true;// READ ONLY. Use doDisplayCrosshairs() or undisplayCrosshairs()
this.hrPanel=null;// READ ONLY. Current panel that mouse is hovering over
this.editingAnnotation=false;// READ ONLY. True if an annotation is open for editing
this.openDialog="";// Set this to non-blank to disable chart touch and mouse events use CIQ.ChartEngine.prototype.modalBegin() and CIQ.ChartEngine.prototype.modalEnd
/**
		     * Set these to false to not display the up and down arrows in the panel management component. See {@link CIQ.ChartEngine#controls} for alternate methods and more details.
		     * @type boolean
		     * @default
		     * @alias displayIconsUpDown
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * stxx.displayIconsUpDown=false;
		     */this.displayIconsUpDown=true;/**
		     * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine#controls} for alternate methods and more details.
		     * @type boolean
		     * @default
		     * @alias displayIconsSolo
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * stxx.displayIconsSolo=false;
		     */this.displayIconsSolo=true;/**
		     * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine#controls} for alternate methods and more details.
		     * @type boolean
		     * @default
		     * @alias displayIconsClose
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 3.0.7
		     * @example
		     * stxx.displayIconsClose=false;
		     */this.displayIconsClose=true;/**
		     * Set these to false to not display this panel management component. See {@link CIQ.ChartEngine#controls} for alternate methods and more details.
		     * @type boolean
		     * @default
		     * @alias displayPanelResize
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * stxx.displayPanelResize=false;
		     */this.displayPanelResize=true;/**
		     * Set this to true to hide even the chart panel when soloing a non-chart panel.  Normally chart panels are not hidden when soloing.
		     * @type boolean
		     * @default
		     * @alias soloPanelToFullScreen
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 3.0.7
		     * @example
		     * stxx.soloPanelToFullScreen=true;
		     */this.soloPanelToFullScreen=false;/**
		     * Only reposition markers this many milliseconds. Set to zero or null for no visible delay. (lower numbers are more CPU intensive).
		     * See {@tutorial Markers} for more details on adding markers to your charts
		     * @type number
		     * @default
		     * @alias markerDelay
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * stxx.markerDelay=25;
		     */this.markerDelay=0;/**
		     * When set to true, the backing store for the canvas is used.
		     * This results in crisper display but with a noticeable performance penalty in some browsers.
		     * The default is true.
		     * If improved performance is necessary, set the variable as shown in the example.
		     * The example allows mobile devices (android/ipad/iphone) to continue using the backing store while being bypassed in others (desktop browsers).
		     *
		     * @type boolean
		     * @default
		     * @alias useBackingStore
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 3.0.0
		     * @example
		     * stxx.useBackingStore=CIQ.isMobile;
		     */this.useBackingStore=true;/**
			 * On touch devices, when set to true, the backing store will be turned off while a user is panning or zooming the chart. This increases performance during the operation by reducing
			 * resolution. Resolution is restored once the user lifts their finger. Generally, you'll want to enable this dynamically when you know that a particular device has poor canvas performance.
			 * This defaults to true but can be disabled by setting to false.
			 * @type boolean
			 * @default
			 * @alias disableBackingStoreDuringTouch
			 * @memberOf  CIQ.ChartEngine.prototype
			 * @since  4.0.0
			 */this.disableBackingStoreDuringTouch=CIQ.isMobile||CIQ.isSurface&&CIQ.isFF;/**
		     * If true when the chart initially is rendered, then the CIQ.ChartEngine object will register to listen and manage touch and mouse browser events within then canvas by attaching them to the container div.
		     *
		     * Set to false, and all interactivity with the chart will cease; turning it into a static display and 'shedding' all HTML overlays and events required for user interaction, for a much more lightweight interface.
		     * Alternatively you can selectively set any {@link CIQ.ChartEngine#htmlControls} id to null, including `CIQ.ChartEngine.htmlControls=null` to disable them all.
		     * See {@tutorial Creating Static Charts} for more details on creating static charts.
		     *
		     * It is possible to re-enable the events after the chart has been rendered, but you must call stx.initializeChart(); stx.draw(); to register the events once again.
		     * @type boolean
		     * @default
		     * @alias manageTouchAndMouse
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * // if enabling events after the chart was already rendered, you must reinitialize to re register the browser events.
		     * stxx.manageTouchAndMouse = true;
		     * stxx.initializeChart();
		     * stxx.draw();
		     */this.manageTouchAndMouse=true;/**
		     * Primarily intended for mobile devices, if set to `false` it will allow up/down swiping to pass through the chart container so the main page can manage it.
		     * This allows a user swiping up and down to swipe trough the chart instead of having the chart capture the event and prevent the page from continue moving.
		     * It therefore produces a more natural up/down swiping motion throughout the page.
		     * @type boolean
		     * @default
		     * @alias captureTouchEvents
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 12-2015-08
		     */this.captureTouchEvents=true;/**
		     * If set to `false` it will allow up/down mouseWheel / touchPad swiping to pass trough the chart container so the main page can manage it.
		     * This allows a user swiping up and down to swipe trough the chart instead of having the chart capture the event and prevent the page from continue moving.
		     * It therefore produces a more natural up/down sliding of the page.
		     * @type boolean
		     * @default
		     * @alias captureMouseWheelEvents
		     * @memberof CIQ.ChartEngine.prototype
		     * @since m-2016-12-01.4
		     */this.captureMouseWheelEvents=true;this.touches=[];// Used internally for touch
this.changedTouches=[];// Used internally for touch
/**
		     * The value (price) representing the crosshair cursor point
		     * @type number
		     * @alias crosshairTick
		     * @memberof CIQ.ChartEngine.prototype
		     */this.crosshairTick=null;/**
		     * READ ONLY.. The value (price) representing the crosshair cursor point
		     * @type number
		     * @alias crosshairValue
		     * @memberof CIQ.ChartEngine.prototype
		     */this.crosshairValue=null;/**
		     * Shape of the floating y axis label.
		     *
		     * Available options:
		     *  - ["roundRectArrow"]{@link CIQ.roundRectArrow}
		     *  - ["semiRoundRect"]{@link CIQ.semiRoundRect}
		     *  - ["roundRect"]{@link CIQ.roundRect}
		     *  - ["tickedRect"]{@link CIQ.tickedRect}
		     *  - ["rect"]{@link CIQ.rect}
		     *  - ["noop"]{@link CIQ.noop}
		     * @type string
		     * @default
		     * @alias yaxisLabelStyle
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * var stxx=new CIQ.ChartEngine({container: $$$(".chartContainer")});
		     * stxx.yaxisLabelStyle="roundRectArrow";
		     */this.yaxisLabelStyle="roundRectArrow";/**
		     * Set to false if you don't want the axis borders drawn. This will override individual settings on yaxis and xaxis.
		     * @type boolean
		     * @default
		     * @alias axisBorders
		     * @memberof CIQ.ChartEngine.prototype
		     */this.axisBorders=null;this.pt={x1:-1,x2:-1,y1:-1,y2:-1};this.moveA=-1;// Used internally for touch
this.moveB=-1;// "
this.touchStartTime=-1;// "
this.touchPointerType="";// "
this.gestureStartDistance=-1;// "
this.grabStartPeriodicity=1;// "
this.grabEndPeriodicity=-1;// "
this.scrollEvent=null;// "
this.cmd=false;// "
this.ctrl=false;// "
this.shift=false;// "
this.userPointerDown=false;//represents either mouse button or finger on touch device
/**
		     * Set to true based on a key stroke, button press, etc, when you want to enable the ability to clone a highlighted drawing.
		     * Reset to false when you want the cloning to end.
		     * For example, you can set to true when the `control` key is pressed and disable when it is released.
		     * @type number
		     * @default
		     * @alias cloneDrawing
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 07-2016-16.7
		     * @example
		     *
				document.onkeyup=keyup;
				document.onkeydown=keydown;

				// disable cloning if the ctl key is released
				function keyup(e){
					var key = (window.event) ? event.keyCode : e.keyCode;
					if (key == 18 ) stxx.cloneDrawing=false;
				}

				// enable cloning if the ctl key is pressed
				function keydown(e){
					var key = (window.event) ? event.keyCode : e.keyCode;
					if (key == 18 ) stxx.cloneDrawing=true;
				}
		     */this.cloneDrawing=false;/**
			 * Set to true to have drawings highlight only the last applied drawing if more than one is intersected at a time.
			 * @type boolean
			 * @default
			 * @since 5.0.0
			 * @alias singleDrawingHighlight
			 * @memberof CIQ.ChartEngine.prototype
			 */this.singleDrawingHighlight=true;/**
		     * X axis offset for touch devices so that finger isn't blocking crosshair
		     * @type number
		     * @default
		     * @alias crosshairXOffset
		     * @memberof CIQ.ChartEngine.prototype
		     */this.crosshairXOffset=-40;/**
		     * Y axis Offset for touch devices so that finger isn't blocking crosshair
		     * @type number
		     * @default
		     * @alias crosshairYOffset
		     * @memberof CIQ.ChartEngine.prototype
		     */this.crosshairYOffset=-40;/**
		     * READ ONLY. This gets set to true when the chart display has been initialized.
		     * @type boolean
		     * @default
		     * @alias displayInitialized
		     * @memberof CIQ.ChartEngine.prototype
		     */this.displayInitialized=false;/**
		     * READ ONLY. Mouse pointer X pixel location in reference to the chart canvas. where cx=0 and cy=0 is the upper left corner of the chart.
		     * @type number
		     * @alias cx
		     * @memberof CIQ.ChartEngine.prototype
		     */this.cx=null;/**
		     * READ ONLY. Mouse pointer Y pixel location in reference to the chart canvas. where cx=0 and cy=0 is the upper left corner of the chart.
		     * @type number
		     * @alias cy
		     * @memberof CIQ.ChartEngine.prototype
		     */this.cy=null;/**
		     * When set to true, line and mountain charts are extended slightly in order to reduce whitespace at the right edge of the chart
		     * @type boolean
		     * @default
		     * @alias extendLastTick
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 05-2016-10 The line will be extended to the end of the chart (full candle width) instead of the candle border, even when using yaxisLabelStyle "roundRectArrow"
		     */this.extendLastTick=false;this.clicks={s1MS:-1,e1MS:-1,s2MS:-1,e2MS:-1};this.cancelTouchSingleClick=false;// Set this to true whenever a screen item is touched so as to avoid a chart touch event
/**
		     * Contains the current chart layout.
		     *
		     * Layout parameters can be directly **pre-set** on a chart at the time the engine is instantiated.<br>
		     * The following is an example for setting some of the available layout parameters:
		     * ```
		     * var stxx=new CIQ.ChartEngine({container: $$$(".chartContainer"),layout:{"crosshair":true,"interval":"day","periodicity":1,"chartType": "candle","candleWidth": 16}});
		     * ```
		     * These parameters will then be activated when [newChart()]{@link CIQ.ChartEngine#newChart} is called to render the chart.<br>
		     * Once a chart is rendered, most of these parameters become READ ONLY,and must be modified using their corresponding methods, as indicated in the documentation, to ensure chart integrity.
		     *
		     * See [importLayout]{@link CIQ.ChartEngine#importLayout} and [exportLayout]{@link CIQ.ChartEngine#exportLayout} for methods to serialize a layout and restore previously saved settings.
		     *
		     * @type object
		     * @alias layout
		     * @memberof CIQ.ChartEngine#
		     */this.layout={/**
			     * READ ONLY. Chart interval.
			     *
			     * Note that internal interval format will differ from API parameters used in {@link CIQ.ChartEngine#setPeriodicity}
			     *
			     * Available options are:
			     *  - [number] representing minutes
			     *  - "day"
			     *  - "week"
			     *  - "month"
			     *
			     * See the [Periodicity and Quote feed]{@tutorial Periodicity} tutorial.
			     * @type string
			     * @default
			     * @alias layout[`interval`]
			     * @memberof! CIQ.ChartEngine#
			     */interval:"day",/**
			     * READ ONLY. Number of periods per interval/timeUnit
			     *
			     * See the [Periodicity and Quote feed]{@tutorial Periodicity} tutorial.
			     * @type number
			     * @default
			     * @alias layout[`periodicity`]
			     * @memberof! CIQ.ChartEngine#
			     */periodicity:1,/**
				 * READ ONLY. Time unit for the interval.
				 *
				 * Note that internal timeUnit format will differ from API parameters used in {@link CIQ.ChartEngine#setPeriodicity}
				 *
			     * See the [Periodicity and Quote feed]{@tutorial Periodicity} tutorial.

				 * Available options are:
				 *  - "millisecond"
				 *  - "second"
				 *  - "minute"
				 *  - null for "day", "week", "month" periodicity
				 * @type string
				 * @default
			     * @alias layout[`timeUnit`]
			     * @memberof! CIQ.ChartEngine#
				 */timeUnit:null,/**
			     * READ ONLY. Candle Width In pixels ( see {@tutorial Understanding Chart Range} )
			     * @type number
			     * @default
			     * @alias layout[`candleWidth`]
			     * @memberof! CIQ.ChartEngine#
			     */candleWidth:8,volumeUnderlay:false,/**
			     * Whether adjusted or nominal prices are being displayed.
			     * If true then the chart will look for "Adj_Close" in the masterData as an alternative to "Close".
			     * @type boolean
			     * @default
			     * @alias layout[`adj`]
			     * @memberof! CIQ.ChartEngine#
			     * @instance
			     */adj:true,/**
			     * Set to `true` to enable crosshairs in the active layout.
			     *
			     * Also see {@link CIQ.ChartEngine.AdvancedInjectable#doDisplayCrosshairs} for more details on crosshairs behavior.
			     *
			     * @example
			     * // enable crosshair (usually called from a UI button/toggle)
			     * stx.layout.crosshair=true;
			     * // add this if you want the crosshair to display right away instead of when the user starts moving the mouse over the chart
			     * stx.doDisplayCrosshairs();
			     * // add this if you want to trigger a layout change event; maybe to save the layout.
			     * stx.dispatch("layout", {stx:stx, symbol: stx.chart.symbol, symbolObject:stx.chart.symbolObject, layout:stx.layout, drawings:stx.drawingObjects});
			     *
			     * @type boolean
			     * @default
			     * @alias layout[`crosshair`]
			     * @memberof! CIQ.ChartEngine#
			     * @instance
			     */crosshair:false,/**
			     * READ ONLY. The primary chart type.
			     *
			     * Available options are:
			     *  - "none"
			     *  - "line"
			     *  - "step"
			     *  - "mountain"
			     *  - "baseline_delta"
			     *  - "candle"
			     *  - "bar"
			     *  - "hlc"
			     *  - "hlc_box" **Requires "js/extras/hlcbox.js"**
			     *  - "hlc_shaded_box" **Requires "js/extras/hlcbox.js"**
			     *  - "wave"
			     *  - "scatterplot"
			     *  - "histogram"
			     *  - "rangechannel"
			     *  - "marketdepth" **Requires [cryptoIQ]{@link CIQ.MarketDepth} pugin. See {@link CIQ.ChartEngine#updateCurrentMarketData} for data requirements**
			     *
			     * Variations of these types are available by prepending terms to the options as follows:
			     *  - "step_" - add to mountain, baseline_delta, marketdepth e.g. step_mountain, baseline_delta_step, step_volume_marketdepth
			     *  - "vertex_" - add to line, step, mountain, baseline_delta
			     *  - "hollow_" - add to candle
			     *  - "volume_" - add to candle, marketdepth e.g. mountain_volume_marketdepth (Adding volume to marketdepth also creates a volume histogram in the same panel)
			     *  - "colored_" - add to line, mountain, step, bar, hlc
			     *  - "mountain_" - add to baseline_delta, marketdepth e.g. mountain_volume_marketdepth
			     *
			     * Other options are available provided a renderer is created with a `requestNew` function which will support the option, see {@link CIQ.Renderer.Lines#requestNew} and {@link CIQ.Renderer.OHLC#requestNew}
			     *
			     * Use {@link CIQ.ChartEngine#setChartType} to set this value.
			     *
			     * See {@tutorial Chart Styles and Types} for more details.
			     *
			     * @type string
			     * @default
			     * @alias layout[`chartType`]
			     * @memberof! CIQ.ChartEngine#
			     * @since
			     * <br>&bull; 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are now available
			     * <br>&bull; 3.0.0 "histogram" and  "step" are now available
			     * <br>&bull; 3.0.7 "hlc" now available
			     * <br>&bull; 4.0.0 "colored_step", "colored_hlc" is now available
			     * <br>&bull; 5.1.0 More chart types available using combinations of terms
			     * <br>&bull; 6.1.0 "marketdepth" is now available
			     */chartType:"candle",/**
			     * READ ONLY. Flag for extended hours time-frames.
			     *
			     * The chart includes the 'extended' parameter in the `params` object sent into the `fetch()` call.
			     * Your quote feed must be able to provide extended hours data when requested (`extended:true`) for any extended hours functionality to work.
			     *
			     * See {@link CIQ.ExtendedHours} and {@link CIQ.Market} for more details on how extended hours are set and used.
			     * @type boolean
			     * @default
			     * @alias layout[`extended`]
			     * @memberof! CIQ.ChartEngine#
			     */extended:false,/**
				 * READ ONLY. Tracks the extended market sessions to display on the chart.
				 *
				 * See {@link CIQ.ExtendedHours} and {@link CIQ.Market} for more details on how extended hours are set and used.
			     * @type object
			     * @default
			     * @alias layout[`marketSessions`]
			     * @memberof! CIQ.ChartEngine#
				 * @example
				 * marketSessions = {
				 *      "session1": true,
				 *      "session2": true,
				 *      "session3": false,
				 *      "pre": true,
				 *      "post": true
				 * }
				 * @since  06-2016-02
				 */marketSessions:{},//use defaults
/**
			     * READ ONLY. Active aggregation for the chart.
			     *
			     * Available options are:
			     *  - "rangebars"
			     *  - "ohlc"
			     *  - "kagi"
			     *  - "pandf"
			     *  - "heikinashi"
			     *  - "linebreak"
			     *  - "renko"
			     *
			     * Use {@link CIQ.ChartEngine#setAggregationType} to set this value.
			     *
			     * See {@tutorial Chart Styles and Types} for more details.
			     * @type string
			     * @default
			     * @alias layout[`aggregationType`]
			     * @memberof! CIQ.ChartEngine#
			     */aggregationType:"ohlc",/**
			     * READ ONLY. Active scale for the chart.
			     *
			     * See {@link CIQ.ChartEngine#setChartScale}
			     *
			     * **Replaces CIQ.ChartEngine.layout.semiLog**
			     *
			     * @type string
			     * @default
			     * @alias layout[`chartScale`]
			     * @memberof! CIQ.ChartEngine#
			     */chartScale:"linear",/**
			     * READ ONLY. List of [study descriptors]{@link studyDescriptor} for the active studies on the chart.
			     *
			     * ** Please note: ** To facilitate study name translations, study names use zero-width non-joiner (unprintable) characters to delimit the general study name from the specific study parameters.
			     * Example: "\u200c"+Aroon+"\u200c"+(14).
			     * At translation time, the library will split the text into pieces using the ZWNJ characters, parentheses and commas to just translate the required part of a study name.
			     * For more information on ZWNJ characters see: [Zero-width_non-joiner](https://en.wikipedia.org/wiki/Zero-width_non-joiner).
			     * Please be aware of these ZWNJ characters, which will now be present in all study names and corresponding panel names; including the `layout.studies` study keys.
			     * Affected fields in the study descriptors could be `id	`, `display`, `name` and `panel`.
			     * <br>To prevent issues, always use the names returned in the **study descriptor**. This will ensure compatibility between versions.
			     * >Example:
			     * ><br>Correct reference:
			     * ><br>	`stxx.layout.studies["\u200c"+Aroon+"\u200c"+(14)];`
			     * ><br>Incorrect reference:
			     * ><br>	`stxx.layout.studies["Aroon (14)"];`
			     *
			     * See {@link CIQ.Studies.addStudy} for more details
			     *
			     * @type object
			     * @default
			     * @alias layout[`studies`]
			     * @memberof! CIQ.ChartEngine#
			     */studies:{},panels:{},setSpan:{}};/**
		     * Contains the chart preferences.
		     *
		     * Preferences parameters, unless otherwise indicated, can be set at any time and only require a [draw()]{@link CIQ.ChartEngine#draw} call to activate.
		     *
		     * See [importPreferences]{@link CIQ.ChartEngine#importPreferences} and [exportPreferences]{@link CIQ.ChartEngine#exportPreferences} for methods to serialize and restore previously saved preferences.

		     * @type object
		     * @alias preferences
		     * @memberof CIQ.ChartEngine#
		     */this.preferences={/**
				* Pixel radius for the invisible intersection box around the cursor used to determine if it has intersected with an element to be highlighted.
				* This value is used primarily for non-touch cursor events (mouse, touchpad).  Used on items removed with a right click such as series and drawings.
				*
				* Only applicable if the user has **not** tapped on the screen to set the location of the cross-hair.
				*
				* @type number
				* @default
				* @alias preferences[`highlightsRadius`]
				* @memberof! CIQ.ChartEngine#
				* @since 3.0.0
				*/highlightsRadius:10,/**
				* For touch events on the chart canvas.  Pixel radius for the invisible intersection box around the cursor used to determine if it has intersected
				* with an element to be highlighted. The larger highlight radius is more suitable for the less precise input from touch events.  Used on
				* items removed with a right click such as series and drawings.
				*
				* ** Only applicable for touch events while the cursor is not controlling the crosshair tool. Otherwise, highlightsRadius is used. **
				*
				* @type number
				* @default
				* @alias preferences[`highlightsTapRadius`]
				* @memberof! CIQ.ChartEngine#
				* @since 3.0.0
				*/highlightsTapRadius:30,/**
				* Draw a horizontal line at the current price.
				* Only drawn if the most recent tick is visible.
				*
				* See {@link CIQ.ChartEngine.AdvancedInjectable#drawCurrentHR}
				*
				* @type boolean
				* @default
				* @alias preferences[`currentPriceLine`]
				* @memberof! CIQ.ChartEngine#
				* @since 05-2016-10
				*/currentPriceLine:false,/**
			     * When using drawing tools, this will become an object when user saves the drawing parameters.
			     * A sub-object is created for each drawing tool.
			     * These preferences are used whenever the user selects that drawing object, and overrides the default stxx.currentVectorParameters.
			     * Use {@link CIQ.Drawing.saveConfig} to save the parameters to this object.
			     * @type object
			     * @default
			     * @alias preferences[`drawings`]
			     * @memberof! CIQ.ChartEngine#
			     * @since 6.0.0
			     */drawings:null,/**
			     * Magnetizes the crosshairs to datapoints during drawing operations to improve initial placement accuracy.
			     * <br>It will not be used when an existing drawing is being repositioned.<br>
			     * See {@link CIQ.ChartEngine.AdvancedInjectable#magnetize} for more details.
			     * @type boolean
			     * @default
			     * @alias preferences[`magnet`]
			     * @memberof! CIQ.ChartEngine#
			     */magnet:false,/**
				 * Locks the crosshair Y value to the value of the field name specified
				 * for the tick under the cursor on the primary chart.
				 *
				 * For studies create a horizontalCrosshairFieldFN function that will be called by
				 * CIQ.Studies.addStudy. The function must return the field name in the dataSet to
				 * reference. The function will not be called when the study is set to overly or
				 * underlay the chart's panel.
				 *
				 * @example
				 * // Have the crosshair lock to the "Close" field of the tick under the cursor
				 * stxx.preferences.horizontalCrosshairField = "Close";
				 *
				 * @example
				 * // Have the crosshair lock to the "ATR ATR (14)" field for a ATR study with a period of 14
				 * CIQ.Studies.studyLibrary["ATR"].horizontalCrosshairFieldFN = function(stx, sd) {
				 * 	// returns the field name, which should be created by the study's "calculateFN"
				 * 	return "ATR " + sd.name;
				 * };
				 *
				 * @type string
				 * @default
				 * @alias preferences[`horizontalCrosshairField`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 04-2016-08
				 */horizontalCrosshairField:null,/**
			     * Set to true to display labels on y-axis for line based studies using {@link CIQ.Studies.displayIndividualSeriesAsLine} or {@link CIQ.Studies.displaySeriesAsLine} (this is overridden by the particular y-axis setting of {@link CIQ.ChartEngine.YAxis#drawPriceLabels}).
			     * This flag is checked inside these 2 functions to decide if a label should be set, as such if you do not wish to have a label on a particular study line, you can set this flag to `false`, before calling the function, and then back to `true`.
			     * @type boolean
			     * @default
			     * @alias preferences[`labels`]
			     * @memberof! CIQ.ChartEngine#
			     * @example
					//do not display the price labels for this study
					stxx.preferences.labels=false;
					CIQ.Studies.displaySeriesAsLine(stx, sd, quotes);

					//restore price labels to default value
					stxx.preferences.labels=true;
			     */labels:true,/**
				 * Stores preferred language for the chart.
				 *
				 * It can be individually restored using {@link CIQ.I18N.setLanguage} and activated by {@link CIQ.I18N.translateUI}
				 * @type {string}
				 * @alias preferences[`language`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 4.0.0
				 */language:null,/**
				 * Stores the preferred timezone for the display of the x axis labels.
				 *
				 * It is automatically set and can be individually restored by {@link CIQ.ChartEngine#setTimeZone}.
				 * @type {string}
				 * @alias preferences[`timezone`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 4.0.0
				 */timeZone:null,/**
			     * Initial whitespace on right of the screen in pixels.
			     * @type number
			     * @default
			     * @alias preferences[`whitespace`]
			     * @memberof! CIQ.ChartEngine#
			     * @example
			     * // override the default value at declaration time
			     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"whitespace": 20}});
			     */whitespace:50,/**
			     * zoom-in speed for mousewheel and zoom button.
			     *
			     * Range: **0 -.99999**. The closer to 1 the slower the zoom.
			     * @type number
			     * @default
			     * @alias preferences[`zoomInSpeed`]
			     * @memberof! CIQ.ChartEngine#
			     * @example
			     * stxx.preferences.zoomInSpeed=.91;
			     * @example
			     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"zoomInSpeed": .98}});
			     * @since 07/01/2015
			     */zoomInSpeed:null,/**
			     * zoom-out speed for mousewheel and zoom button.
			     *
			     * Range: **1-2**. The closer to 1 the slower the zoom.
			     * @type number
			     * @default
			     * @alias preferences[`zoomOutSpeed`]
			     * @memberof! CIQ.ChartEngine#
			     * @example
			     * stxx.preferences.zoomOutSpeed=1.1;
			     * @example
			     * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{"zoomOutSpeed": 1}});
			     * @since 07/01/2015
			     */zoomOutSpeed:null,/**
				 * If set to 'true', the mouse wheel zooming is centered by the mouse position.
				 *
				 * @type boolean
				 * @default
				 * @alias preferences[`zoomAtCurrentMousePosition`]
				 * @memberof! CIQ.ChartEngine#
				 * @since 4.0.0
				 */zoomAtCurrentMousePosition:false};/**
		     * Used to control the behavior and throttling of real time updates in [updateChartData()]{@link CIQ.ChartEngine#updateChartData} to prevent overloading the chart engine
		     * @type object
		     * @alias streamParameters
		     * @memberof CIQ.ChartEngine#
		     * @example
		     * // this will cause updates to be applied to the dataSegment immediately
		     * stxx.streamParameters.maxTicks=0;
		     *
		     * // here is how you would override all options
		     * stxx.streamParameters= {"maxWait":1000,"maxTicks":100}
		     */this.streamParameters={count:0,/**
			     * ms to wait before allowing update to occur (if this condition is met, the update will occur and all pending ticks will be loaded - exclusive of maxTicks)
			     * @type number
			     * @default
			     * @alias streamParameters[`maxWait`]
			     * @memberof! CIQ.ChartEngine#
			     */maxWait:1000,/**
			     * ticks to wait before allowing update to occur (if this condition is met, the update will occur and all pending ticks will be loaded - exclusive of maxWait)
			     * @type number
			     * @default
			     * @alias streamParameters[`maxTicks`]
			     * @memberof! CIQ.ChartEngine#
			     */maxTicks:100,timeout:-1,/**
			     * If true then {@link CIQ.ChartEngine#doCleanupGaps} is called so long as {@link CIQ.ChartEngine#cleanupGaps} is also set.
			     * This will ensure gaps will be filled in the master data from the last tick in the chart to the date of the trade.
			     *
			     * **Only applicable when using streamTrade()**.<BR> Reminder: `tick` does not fill any gaps as it is not a predictable interval.
			     *
			     * @type boolean
			     * @default
			     * @alias streamParameters[`fillGaps`]
			     * @memberof! CIQ.ChartEngine#
			     * @since 2016-03-11
			     * @deprecated See deprecation of {@link CIQ.ChartEngine#streamTrade}. Use {@link CIQ.ChartEngine#updateChartData} instead,
			     * with params.fillGaps=true or rely on cleanupGaps as default behavior.
			     */fillGaps:true};/**
			 * This is the callback function used to translate languages.
			 * Should return a translated phrase given the English phrase. See separate translation file for list of phrases.
			 *
			 * Expected format :
			 *
			 * 		var translatedWord = fc(english);
			 *
			 * Defaults to {@link CIQ.I18N.translate}
			 * @type {function}
			 * @alias translationCallback
			 * @memberof CIQ.ChartEngine.prototype
			 */this.translationCallback=null;this.locale=null;// set by setLocale()
/**
		   * READ ONLY. Timezone of the masterData, set by {@link CIQ.ChartEngine#setTimeZone}.
			 * @type {string}
		   * @alias dataZone
		   * @memberof CIQ.ChartEngine.prototype
			 */this.dataZone=null;/**
		   * READ ONLY. Timezone to display on the chart, set by {@link CIQ.ChartEngine#setTimeZone}.
			 * @type {string}
		   * @alias displayZone
		   * @memberof CIQ.ChartEngine.prototype
		   */this.displayZone=null;this.timeZoneOffset=0;// use setTimeZone() to compute this value
/**
			 * This is the callback function used to react to {@link CIQ.ChartEngine#changeOccurred}.
			 *
			 * This function has been deprecated.
			 * Please use {@link CIQ.ChartEngine#addEventListener} instead.
			 *
			 * Use this for storing chart configurations or drawings real time as users make changes.
			 *
			 * Expected format :
			 *
			 * 		fc(stxChart, eventType);
			 *
			 * Currently implemented values for  "eventType" are "layout" and "vector".
			 *
			 * You can create any additional event types and trigger them by calling 'CIQ.ChartEngine.changeOccurred(eventType)'
			 *
			 * **Note** only one changeCallback function can be registered per chart object. As such, you must program it to handle any and all possible events triggered by {@link CIQ.ChartEngine#changeOccurred}.
			 * @type {function}
			 * @alias changeCallback
			 * @memberof CIQ.ChartEngine.prototype
			 * @deprecated
			 * @since 4.0.0 - Deprecated
			 * @example
			 * stxx.changeCallback=function(stxx, eventType){
			 *		if(eventType=="layout") saveLayout();
			 *		if(eventType=="vector") saveDrawing();
			 * }
		   */this.changeCallback=null;this.masterData=null;// Contains the historical quotes for the current chart
/**
		   * Register this function to transform the data set before a createDataSet() event; such as change in periodicity.
		   * You can also explicitly call  <code>stxx.createDataSet(); stxx.draw();</code> to trigger this function.
		   *
			 * Expected Format :
			 *
			 * 		fc(stxChart, dataSet);
			 *
			 * @type {function}
			 * @alias transformDataSetPre
			 * @memberof CIQ.ChartEngine.prototype
			 * @example
			 * stxx.transformDataSetPre=function(stxx, dataSet){
			 *		for(var i=0;i < dataSet.length;i++){
			 *			// do something to the dataset here
			 *		}
			 * }
			*/this.transformDataSetPre=null;/**
		     * Register this function to transform the data set after a createDataSet() event; such as change in periodicity.
		     * You can also explicitly call  <code>stxx.createDataSet(); stxx.draw();</code> to trigger this function.
		     *
			 * Expected Format :
			 *
			 * 		fc(stxChart, dataSet, min low price in the dataset, max high price in the dataset);
			 *
			 * @type {function}
		     * @alias transformDataSetPost
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
			 * stxx.transformDataSetPost=function(self, dataSet, min, max){
			 *		for(var i=0;i < dataSet.length;i++){
			 *			// do something to the dataset here
			 *		}
			 * }
			*/this.transformDataSetPost=null;/**
		     * This is the callback function used by {@link CIQ.ChartEngine#setPeriodicity} when no quotefeed has been attached to the chart.
		     * Called if the masterData does not have the interval requested.
		     *
		     * Do not initialize if you are using a quotefeed ( {@link CIQ.QuoteFeed } )
		     *
			 * @type {function}
		     * @alias dataCallback
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
		     * stxx.dataCallback=function(){
			 *		// put code here to get the new data in the correct periodicity.
			 *		// use layout.interval and layout.periodicity to determine what you need.
			 *		// finally call stxx.newChart(symbol,data) to load the data and render the chart.
			 * }
		     */this.dataCallback=null;/**
		     * Set this to `true` if your server returns data in  week or monthly ticks, and doesn't require rolling computation from daily.
		     *
		     * If set to `false`:
		     * - 'weekly' bars will be aligned to the first open market day of the week according to the active [market definitions]{@link CIQ.Market} (Weeks start Sunday).
		     * - 'monthly' bar will be aligned to the first market day of the month according to the active [market definitions]{@link CIQ.Market}.
		     *
		     * @type boolean
		     * @default
		     * @alias dontRoll
		     * @memberof CIQ.ChartEngine.prototype
		     */this.dontRoll=false;/**
		     * Set to true to allow an equation to be entered into the symbol input.  For example, =2*IBM-GM
		     * NOTE: the equation needs to be preceded by an equals sign (=) in order for it to be parsed as an equation.
		     * See {@link CIQ.formatEquation} and {@link CIQ.computeEquationChart} for more details on allowed syntax.
		     * @type boolean
		     * @default
		     * @alias allowEquations
		     * @memberof CIQ.ChartEngine.prototype
		     */this.allowEquations=true;/**
		     * Stores a list of active drawing object on the chart. Serialized renditions of drawings can be added using {@link CIQ.ChartEngine#createDrawing} and removed using {@link CIQ.ChartEngine#removeDrawing}
		     * @type array
		     * @default
		     * @alias drawingObjects
		     * @memberof CIQ.ChartEngine.prototype
		     */this.drawingObjects=[];this.undoStamps=[];/**
		     * If set, {@link CIQ.ChartEngine#doCleanupGaps} will be automatically called
		     * on intra-day or daily interval charts to create missing data points during market hours/days for stocks that may have missing bars.
		     *
		     * <br>`carry` will cause the closing price to be carried forward, resulting in dashes on a candle/bar chart or continuous line on a line or mountain chart.
		     * <br>`gap` will cause physical breaks to occur on the chart in the gapped position.
		     *
		     * **Note:** the clean up process leverages the current periodicity and the active market definition, if any.
		     * So you must first set those to ensure proper clean up.
		     * If no market definition is enabled, the clean up will assume gaps need to be added during the entire 24 hours period, every day.
		     * See "{@link CIQ.Market}" for details on how to properly configure the library to your market hours requirements.
		     * <br>No gaps will be cleaned for `tick` since by nature it is no a predictable interval.
		     *
		     * **Important information to prevent inaccurate 'gapping'**
		     * The cleanup process leverages the current market iterator which traverses along the timeline on the exact minute/second/millisecond mark for intro-day data.
		     * As such, you must ensure your time stamps match this requirement.
		     * If your data does not comply, you must round your timestamps before sending the data into the chart.
		     * <br>For example, if in minute periodicity, seconds and milliseconds should not be present or be set to zero.
		     *
		     * @type string
		     * @default
		     * @alias cleanupGaps
		     * @memberof CIQ.ChartEngine.prototype
			 *
			 * @example  <caption>If using a quoteFeed, just set the parameter will automatically call {@link CIQ.ChartEngine#doCleanupGaps} </caption>
			 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer")});
			 * stxx.attachQuoteFeed(yourFeed,{refreshInterval:1});
			 * stxx.setMarketFactory(CIQ.Market.Symbology.factory);
			 * stxx.cleanupGaps='carry';
			 * stxx.setPeriodicity({period:1, interval:5, timeUnit:"minute"});
			 * stxx.newChart("SPY");
			 *
		     * @since
		     * <br>&bull; 15-07-01 gaps are automatically cleaned up unless this flag is set to false
		     * <br>&bull; 2015-11-1, gaps are not automatically cleaned unless this flag is set to true
		     * <br>&bull; m-2016-12-01.4 "carry" and "gap" values now supported. Setting to non-false will default to "carry" for backward compatibility with prior versions.
		     */this.cleanupGaps=false;/**
			 * When set to true, the requested range will be visually preserved even if the data required to fill the left and/or right side of the x axis if not present.
			 * This behavior is similar to setting `goIntoPast` and `goIntoFuture` when calling [setRange]{@link CIQ.ChartEngine#setRange}/[setSpan]{@link CIQ.ChartEngine#setSpan} explicitly, but will persist between symbol changes or when a layout is imported.
		     * @type boolean
		     * @default
		     * @alias staticRange
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 5.1.2
		     */this.staticRange=false;/**
			 * Set a maximum size for the dataSet to prevent it from growing excessively large.
			 * Older data will be sliced off of the end (historical) of the dataSet array as new bars arrive.
			 * Set to 0 to let it grow forever.
		     * @type number
		     * @default
		     * @alias maxDataSetSize
		     * @memberof CIQ.ChartEngine.prototype
		     */this.maxDataSetSize=20000;/**
			 * Set a maximum size for masterData to prevent it from growing excessively large.
			 * Older data will be sliced off of the end of masterData array as new bars arrive.
			 * By default (set to 0) masterData is unlimited and will grow forever.
			 * Note: when rolling up data due to periodicity, you should anticipate large enough masterData to accomodate the desired chart length.
			 *
			 * @type {number}
			 * @default false
			 * @alias maxMasterDataSize
			 * @memberof CIQ.ChartEngine.prototype
			 * @since 3.0.0
			 */this.maxMasterDataSize=0;/**
		     * Set to zero to avoid resize checking loop. See {@link CIQ.ChartEngine#setResizeTimer} for more details
		     * @type number
		     * @default
		     * @alias resizeDetectMS
		     * @memberof CIQ.ChartEngine.prototype
		     */this.resizeDetectMS=1000;/**
			 * Set to true to display the xAxis below all panels.
			 * By default, the x axis will be rendered right under the main chart panel.
			 * @type boolean
			 * @default
			 * @alias xAxisAsFooter
			 * @memberof CIQ.ChartEngine.prototype
			 * @since
			 * <br>&bull; 05-2016-10
			 * <br>&bull; 4.1.0 now defaults to true
			 * <br>&bull; 5.2.0 vertical grid lines in study panels no longer dependent on this property and will be always displayed.
			 */this.xAxisAsFooter=true;/**
			 * Sets the x axis height in pixels.
			 * @type boolean
			 * @default
			 * @alias xaxisHeight
			 * @memberof CIQ.ChartEngine.prototype
			 * @since 4.1.0 Now defaults to 30 px
			 */this.xaxisHeight=30;/**
			 * Set to true to display horizontal grid lines on studies.
			 * This parameter is only used when a custom y axis is **not** defined for the study.
			 * @type boolean
			 * @default false
			 * @alias displayGridLinesInStudies
			 * @memberof 	CIQ.ChartEngine.prototype
			 * @since 3.0.0
			 */this.displayGridLinesInStudies=false;/**
			 * When true serialize methods may escape their values with encodeURIComponent.
			 * @type boolean
			 * @default
			 * @alias escapeOnSerialize
			 * @memberof CIQ.ChartEngine.prototype
			 * @since 4.1.0
			 */this.escapeOnSerialize=true;/**
			 * Holds {@link CIQ.ChartEngine.Chart} object
			 * @type object
			 * @default
			 * @alias chart
			 * @memberof 	CIQ.ChartEngine.prototype
			 */this.chart=new CIQ.ChartEngine.Chart();this.chart.name="chart";this.chart.canvas=null;// Contains the HTML5 canvas with the chart and drawings
this.chart.tempCanvas=null;// lays on top of the canvas and is used when creating drawings
this.chart.container=config.container;this.chart.market=new CIQ.Market();//create a default market, always open
/**
		     * Adjust to increase or decrease the default width of candles
		     * @type boolean
		     * @default
		     * @alias candleWidthPercent
		     * @memberof CIQ.ChartEngine.prototype
		     */this.candleWidthPercent=0.65;/**
		     * Color a colored bar or a volume bar based on difference between open and close, rather than difference between previous close and close.
		     * @type boolean
		     * @default
		     * @alias colorByCandleDirection
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 4.0.0
		     */this.colorByCandleDirection=false;/**
		     * chart types which do not draw wicks on candles
		     * @type object
		     * @default
		     * @alias noWicksOnCandles
		     * @memberof CIQ.ChartEngine.prototype
		     */this.noWicksOnCandles={"renko":true,"linebreak":true};/**
		     * chart types which require fetching as many bars as possible (since they aggregate data)
		     * @type object
		     * @default
		     * @alias fetchMaximumBars
		     * @memberof CIQ.ChartEngine.prototype
		     */this.fetchMaximumBars={"rangebars":true,"kagi":true,"renko":true,"linebreak":true,"pandf":true};/**
		     * READ ONLY. Access the renderer controlling the main series.
		     * @type CIQ.Renderer
		     * @default
		     * @alias mainSeriesRenderer
		     * @memberof CIQ.ChartEngine
		     */this.mainSeriesRenderer=null;/**
		     * Chart types which plot more than one data field (OHLC charts).
		     * Putting a chart type here will disable the use of {@link CIQ.ChartEngine.Chart#defaultPlotField}.
		     * @type object
		     * @default
		     * @alias highLowBars
		     * @deprecated, access property in chart instead (stxx.chart.highLowBars)
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 4.0.0
		     */this.highLowBars={"bar":true,"colored_bar":true,"candle":true,"hollow_candle":true,"volume_candle":true,"hlc":true,"colored_hlc":true,"hlc_box":true,"hlc_shaded_box":true,"wave":true,"rangechannel":true,"none":true};/**
		     * Chart types whose bars represent a stand-alone entity as opposed to a vertex in a line-type chart.
		     * This is important when the engine tries to render the data points right off the chart; in a stand-alone bar,
		     * the points right off the chart need not be considered.
		     * @type object
		     * @default
		     * @alias standaloneBars
		     * @deprecated, access property in chart instead (stxx.chart.standaloneBars)
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 4.0.0
		     */this.standaloneBars={"bar":true,"colored_bar":true,"candle":true,"hollow_candle":true,"volume_candle":true,"hlc":true,"colored_hlc":true,"hlc_box":true,"hlc_shaded_box":true,"histogram":true,"scatterplot":true};/**
		     * Chart types whose bars have width, as opposed to a line-type chart whose "bars" are just a point on the chart.
		     * This is useful when the engine adjusts the chart for smooth scrolling and homing.
		     * @type object
		     * @default
		     * @alias barsHaveWidth
		     * @deprecated, access property in chart instead (stxx.chart.barsHaveWidth)
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 4.0.0
		     */this.barsHaveWidth={"bar":true,"colored_bar":true,"candle":true,"hollow_candle":true,"volume_candle":true,"hlc":true,"colored_hlc":true,"hlc_box":true,"hlc_shaded_box":true,"histogram":true,"scatterplot":true,"wave":true};/**
		     * Allow the candle width to be determined dynamically when using {@link CIQ.ChartEngine#setRange}.
		     * This will require a valid {@link CIQ.ChartEngine#dynamicRangePeriodicityMap}
		     * @type object
		     * @default
		     * @alias autoPickCandleWidth
		     * @memberof CIQ.ChartEngine.prototype
		     * @example
				autoPickCandleWidth:{
					turnOn: true,
					candleWidth: 5
				}
		     * @since m-2016-12-01
		     */this.autoPickCandleWidth={/**
				     * Turn to 'true' if you want the periodicity to be determined dynamically when using {@link CIQ.ChartEngine#setRange}.
				     * This will require a valid {@link CIQ.ChartEngine#dynamicRangePeriodicityMap}
				     * @type boolean
				     * @default
				     * @alias autoPickCandleWidth[`turnOn`]
				     * @memberof! CIQ.ChartEngine#
				     */turnOn:false,/**
				     * Set if you want to set a specific candle width when using {@link CIQ.ChartEngine#setRange}.
				     * This will require a valid {@link CIQ.ChartEngine#dynamicRangePeriodicityMap}.
				     * Set to '0' if you want the candle width to be determined according to chart type
				     * @type number
				     * @default
				     * @alias autoPickCandleWidth[`candleWidth`]
				     * @memberof! CIQ.ChartEngine#
				     */candleWidth:5};/**
		     * Map of default values to be used to statically set periodicity (candle width) upon range selection when using {@link CIQ.ChartEngine#setRange}
		     *
		     * **Default Value:**
		     * ```
				[
					{
						rangeInMS : CIQ.WEEK,	// Any range less than a week, load 5 minute bars
						periodicity : 1,
						interval : 5,
						timeUnit : 'minute'
					},
					{
						rangeInMS : CIQ.MONTH,	// Any range less than a month, load 30 minute bars
						periodicity : 1,
						interval : 30,
						timeUnit : 'minute'
					},
					{
						rangeInMS : CIQ.YEAR,	// Any range less than a year, load day bars
						periodicity : 1,
						interval : "day"
					},
					{
						rangeInMS : CIQ.DECADE,	// Any range less than 10 years, load weekly bars
						periodicity : 1,
						interval : "week"
					},
					{
						rangeInMS : CIQ.DECADE * 10,	// Any range less than a century, load monthly bars
						periodicity : 1,
						interval : "month"
					},
					{
						rangeInMS : Number.MAX_VALUE,	// Anything greater than a century, load yearly bars
						periodicity : 12,
						interval : "month"
					}
				]
		     * ```
		     * @type array
		     * @alias staticRangePeriodicityMap
		     * @memberof CIQ.ChartEngine.prototype
		     * @since m-2016-12-01
		     */this.staticRangePeriodicityMap=[{rangeInMS:CIQ.WEEK,// Any range less than a week, load 5 minute bars
periodicity:1,interval:5,timeUnit:'minute'},{rangeInMS:CIQ.MONTH,// Any range less than a month, load 30 minute bars
periodicity:1,interval:30,timeUnit:'minute'},{rangeInMS:CIQ.YEAR,// Any range less than a year, load day bars
periodicity:1,interval:"day"},{rangeInMS:CIQ.DECADE,// Any range less than 10 years, load weekly bars
periodicity:1,interval:"week"},{rangeInMS:CIQ.DECADE*10,// Any range less than a century, load monthly bars
periodicity:1,interval:"month"},{rangeInMS:Number.MAX_VALUE,// Anything greater than a century, load yearly bars
periodicity:12,interval:"month"}];/**
		     * Map of multiples to be used to dynamically determine periodicity (candle width) upon range selection when using {@link CIQ.ChartEngine#setRange}
		     * Used when {@link CIQ.ChartEngine#autoPickCandleWidth} is enabled
		     *
		     * **Default Value:**
		     * ```
				[
					{
						interval : 1,
						rangeInMS : CIQ.MINUTE
					},
					{
						interval : 5,
						rangeInMS : CIQ.MINUTE * 5
					},
					{
						interval : 30,
						rangeInMS : CIQ.MINUTE * 30
					},
					{
						interval : 60,
						rangeInMS : CIQ.MINUTE * 60
					},
					{
						interval : "day",
						rangeInMS : CIQ.DAY
					},
					{
						interval : "month",
						rangeInMS : CIQ.MONTH
					},
					{
						interval : "year",
						rangeInMS : CIQ.YEAR
					}
				]
		     * ```

		     * @type array
		     * @alias dynamicRangePeriodicityMap
		     * @memberof CIQ.ChartEngine.prototype
		     * @since 11-2016-29
		     */this.dynamicRangePeriodicityMap=[{interval:1,timeUnit:'minute',rangeInMS:CIQ.MINUTE},{interval:5,timeUnit:'minute',rangeInMS:CIQ.MINUTE*5},{interval:30,timeUnit:'minute',rangeInMS:CIQ.MINUTE*30},{interval:60,timeUnit:'minute',rangeInMS:CIQ.MINUTE*60},{interval:"day",rangeInMS:CIQ.DAY},{interval:"month",rangeInMS:CIQ.MONTH},{interval:"year",rangeInMS:CIQ.YEAR}];this.charts.chart=this.chart;this.styles={};// Contains CSS styles used internally to render canvas elements
this.currentVectorParameters=CIQ.clone(CIQ.ChartEngine.currentVectorParameters);// contains the current drawing parameters for this chart
CIQ.extend(this,config);if(config.container){this.registerHTMLElements();// Initialize the very basic dimensions of chart so that it is operational immediately
this.chart.width=this.chart.container.clientWidth-this.chart.yAxis.width;this.setCandleWidth(this.layout.candleWidth,this.chart);this.chart.canvasHeight=this.chart.container.clientHeight;// This prevents mousewheel events from inadvertently triggering page scroll in Firefox and IE
if(CIQ.useOldWheelLogic&&!CIQ.FireFoxWheelWorkaround){var wheelListener;if(CIQ.isIE){wheelListener=function wheelListener(e){if(CIQ.ChartEngine.insideChart){e.preventDefault();// IE won't propagate the event so we need to manually figure out if we're inside the chart
for(var i=0;i<CIQ.ChartEngine.registeredContainers.length;i++){var stx=CIQ.ChartEngine.registeredContainers[i].stx;if(CIQ.ChartEngine.crosshairX>=stx.left&&CIQ.ChartEngine.crosshairX<=stx.right&&CIQ.ChartEngine.crosshairY>=stx.top&&CIQ.ChartEngine.crosshairY<=stx.bottom){stx.mouseWheel(e,"onmousewheel");}}}};}else{wheelListener=function wheelListener(e){if(CIQ.ChartEngine.insideChart)e.preventDefault();};}this.addDomEventListener(document.body,"wheel",wheelListener);CIQ.FireFoxWheelWorkaround=true;}}this.construct();};/**
	     * READ ONLY. Toggles to true when a drawing is initiated
	     * @type boolean
	     * @default
	     * @alias drawingLine
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.drawingLine=false;/**
	     * READ ONLY. Toggles to true when a panel is being resized
	     * @type boolean
	     * @default
	     * @alias resizingPanel
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.resizingPanel=null;CIQ.ChartEngine.vectorType="";// @deprecated
/**
	     * READ ONLY. Current X screen coordinate of the crosshair.
	     * @type number
	     * @default
	     * @alias crosshairX
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.crosshairX=0;/**
	     * READ ONLY. Current Y screen coordinate of the crosshair.
	     * @type number
	     * @default
	     * @alias crosshairY
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.crosshairY=0;/**
	     * READ ONLY. Toggles to true whenever the mouse cursor is within the chart (canvas)
	     * @type boolean
	     * @default
	     * @alias insideChart
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.insideChart=false;/**
	     * READ ONLY. Toggles to true if the mouse cursor is over the X Axis.
	     * @type boolean
	     * @default
	     * @alias overXAxis
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.overXAxis=false;/**
	     * READ ONLY. Toggles to true if the mouse cursor is over the Y Axis.
	     * @type boolean
	     * @default
	     * @alias overYAxis
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.overYAxis=false;CIQ.ChartEngine.currentColor="auto";// @deprecated Currently selected color for drawing tools. This may be changed by developing a menu with a color picker.
CIQ.ChartEngine.drawingTools={};/**
	     * [Browser animation API](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is on by default.
	     * @type boolean
	     * @default
	     * @alias useAnimation
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.useAnimation=true;/**
	     * This setting limits the maximum number of bars to be drawn on an iOS device to help address performance limitations on that OS.
	     * @type number
	     * @default
	     * @alias ipadMaxTicks
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.ipadMaxTicks=1500;CIQ.ChartEngine.enableCaching=false;/**
	     * Set to true to true to bypass all touch event handling.
	     * @type number
	     * @default
	     * @alias ignoreTouch
	     * @memberof CIQ.ChartEngine
	     */CIQ.ChartEngine.ignoreTouch=false;CIQ.ChartEngine.useOldAndroidClear=true;// Turn this off to boost native android browser performance, but at risk of "double candle" display errors on some devices
/**
		 * Each CIQ.ChartEngine object will clone a copy of this object template and use it to store the settings for the active drawing tool.
		 * The default settings can be changed by overriding these defaults on your own files.
		 * See {@tutorial Custom Drawing Toolbar} for details on how to use this template to replace the standard drawing toolbar.
		 * <br>This object can be extended to support additional drawing tools (for instance note the extensive customization capabilities for fibonacci)
		 * @type {object}
	     * @alias currentVectorParameters
		 * @memberof! CIQ.ChartEngine#
		 */CIQ.ChartEngine.currentVectorParameters={/**
			 *  Drawing to activate.
		     * <br>See 'Classes' in {@link CIQ.Drawing} for available drawings.
		     * Use {@link CIQ.ChartEngine#changeVectorType} to activate.
		     * @type string
		     * @alias currentVectorParameters[`vectorType`]
		     * @memberof! CIQ.ChartEngine#
		     */vectorType:null,/**
			 *  Line pattern.
			 * <br><B>Valid values for pattern: solid, dotted, dashed, none</B>
			 * <br>Not all parameters/values are valid on all drawings. See the specific `reconstruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
		     * @type string
		     * @default
		     * @alias currentVectorParameters[`pattern`]
		     * @memberof! CIQ.ChartEngine
		     */pattern:"solid",/**
			 *  Line width
			 * <br>Not all parameters/values are valid on all drawings. See the specific `reconstruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
		     * @type number
		     * @default
		     * @alias currentVectorParameters[`lineWidth`]
		     * @memberof! CIQ.ChartEngine#
		     */lineWidth:1,/**
			 *  Fill color.
			 * <br>Not all parameters/values are valid on all drawings. See the specific `reconstruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
		     * @type string
		     * @default
		     * @alias currentVectorParameters[`fillColor`]
		     * @memberof! CIQ.ChartEngine#
		     */fillColor:"#7DA6F5",/**
			 * Line color.
			 * <br>Not all parameters/values are valid on all drawings. See the specific `reconstruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
		     * @type string
		     * @default
		     * @alias currentVectorParameters[`currentColor`]
		     * @memberof! CIQ.ChartEngine#
		     */currentColor:"auto",/**
			 * Axis Label.
			 * Set to 'true' to display a label on the x axis.
			 * <br>Not all parameters/values are valid on all drawings. See the specific `reconstruct` method for your desired drawing for more details(Example: {@link CIQ.Drawing.horizontal#reconstruct})
		     * @type string
		     * @default
		     * @alias currentVectorParameters[`axisLabel`]
		     * @memberof! CIQ.ChartEngine#
		     */axisLabel:true,/**
			 * Fibonacci settings.
			 * See {@link CIQ.Drawing.fibonacci#reconstruct} `parameters` object for valid options
		     * @type object
		     * @alias currentVectorParameters[`fibonacci`]
		     * @memberof! CIQ.ChartEngine#
		     * @example
				fibonacci:{
					trend:{color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					fibs:[
						  {level:-0.786, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:-0.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:-0.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:0, color:"auto", parameters:{pattern:"solid", lineWidth:1}, display: true},
					      {level:0.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:0.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:0.786, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}},
					      {level:0.5, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:1, color:"auto", parameters:{pattern:"solid", lineWidth:1}, display: true},
					      {level:1.382, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true},
					      {level:1.618, color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}, display: true}
					      ],
					extendLeft: false,
					printLevels: true, // display the % levels to the right of the drawing
					printValues: false, // display the values on the y axis
					timezone:{color:"auto", parameters:{pattern:"solid", opacity:0.25, lineWidth:1}}
				}
			 * @since
			 * <br>&bull; 3.0.9 '0.786' and '-0.786' levels added
			 * <br>&bull; 5.2.0 '1.272' level added
		     */fibonacci:{trend:{color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},fibs:[{level:-0.786,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:-0.618,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:-0.5,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:-0.382,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:-0.236,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:0,color:"auto",parameters:{pattern:"solid",lineWidth:1},display:true},{level:0.236,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:0.382,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:0.5,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:0.618,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:0.786,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:1,color:"auto",parameters:{pattern:"solid",lineWidth:1},display:true},{level:1.272,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:1.382,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:1.618,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1},display:true},{level:2.618,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}},{level:4.236,color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}}],extendLeft:false,printLevels:true,printValues:false,timezone:{color:"auto",parameters:{pattern:"solid",opacity:0.25,lineWidth:1}}},/**
			 * Annotation settings.
		     * @type object
		     * @alias currentVectorParameters[`annotation`]
		     * @memberof! CIQ.ChartEngine#
		     * @example
				annotation:{
					font:{
						style:null,
						size:null,	// override .stx_annotation default
						weight:null, // override .stx_annotation default
						family:null // override .stx_annotation default
					}
				}
		     */annotation:{font:{style:null,size:null,// override .stx_annotation default
weight:null,// override .stx_annotation default
family:null// override .stx_annotation default
}}};CIQ.ChartEngine.defaultDisplayTimeZone=null;// If set, then new CIQ.ChartEngine objects will pull their display timezone from this
/**
		 * Defines an object used for rendering a chart and is automatically created by the {@link CIQ.ChartEngine}.
		 * Chart objects contain the data and config for each chart but they don't actually exist on the screen until a panel is attached.
		 * A chart object is attached to both the main chart panel and any related study panels so they can share the same chart data.
		 *
		 * Example: stxx.panels['chart'].chart
		 *
		 * Example: stxx.chart (convenience shortcut for accessing the main chart object - same as above)
		 *
		 * Example stxx.panels['Aroon (14)'].chart
		 *
		 * @constructor
		 * @name  CIQ.ChartEngine.Chart
		 */CIQ.ChartEngine.Chart=function(){this.xAxis=new CIQ.ChartEngine.XAxis();this.yAxis=new CIQ.ChartEngine.YAxis();this.symbolObject={symbol:null};this.series={};this.seriesRenderers={};this.xaxis=[];this.state={};this.endPoints={};this.defaultChartStyleConfig={};this.baseline=CIQ.clone(this.baseline);// copy from prototype
};/**
		 * Defines an object used for rendering the Y-axis on a panel.
		 * Each panel object will automatically include a YAxis object, which can be adjusted immediately after declaring your `new CIQ.ChartEngine();`
		 * Any adjustments to the Y-axis members after it has been rendered and will require a draw() call to apply the changes ( initializeChart() may be required as well depending on the setting being changed).
		 *
		 * See {@tutorial Gridlines and axis labels}, {@link CIQ.ChartEngine.AdvancedInjectable#createYAxis} and {@link CIQ.ChartEngine.AdvancedInjectable#drawYAxis} for additional customization instructions.
		 *
		 * Example: stxx.panels['chart'].yAxis
		 *
		 * Example: stxx.chart.yAxis (convenience shortcut for accessing the main panel object - same as above)
		 *
		 * Example: stxx.panels['Aroon (14)'].yAxis
		 *
		 * **Note:** If modifying a y-axis placement setting (widht, margins, position left/right, etc) after the axis has been rendered, you will need to call
		 * {@link CIQ.ChartEngine#calculateYAxisMargins} or {@link CIQ.ChartEngine#calculateYAxisPositions} followed by {@link CIQ.ChartEngine#draw} to activate the change.
		 *
		 * @constructor
		 * @name  CIQ.ChartEngine.YAxis
		 * @param {object} init Object containing custom values for Y-axis members
		 * @example
		 * // here is an example on how to override the default top and bottom margins after the initial axis has already been rendered
		 * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
		 *    	// callback - your code to be executed after the chart is loaded
		 * 		stxx.chart.yAxis.initialMarginTop=50;
		 * 		stxx.chart.yAxis.initialMarginBottom=50;
		 * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // must recalculate the margins after they are changed.
		 * 		stxx.draw();
		 * });
		 * @example
		 * // here is an example on how to override the default top and bottom margins before the initial axis has been rendered
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.setPeriodicity({period:1, interval:1, timeUnit:"minute"}); 			// set your default periodicity to match your data. In this case one minute.
		 * stx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
		 * stx.chart.yAxis.initialMarginBottom=50;
		 * stx.newChart("SPY", yourData);
		 * @example
		 * // here is an example on how to turn off the last price label (main chart panel) before the initial axis has already been rendered
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.chart.panel.yAxis.drawCurrentPriceLabel=false;
		 *
		 * @since 5.1.0 created a name member which is used to determine if the yAxis is the same as another.
		 */CIQ.ChartEngine.YAxis=function(init){for(var field in init){this[field]=init[field];}if(!this.name)this.name=CIQ.uniqueID();};/**
		 * Defines an object used for rendering the X-axis on the chart, which can be adjusted immediately after declaring your `new CIQ.ChartEngine();`
		 * The CIQ.ChartEngine.XAxis object is created by and part of the {@link CIQ.ChartEngine.Chart} object and is used on the main chart pannel only.
		 * There is only one x axis per chart container.
		 *
		 * Colors and fonts for the x axis can be controlled by manipulating the CSS.
		 * You can override the `stx_xaxis` class to change the font or colors.
		 *
		 * For full customization instructions see:
		 * - {@tutorial Custom X-axis}
		 * - {@link CIQ.ChartEngine.AdvancedInjectable#createXAxis}
		 * - {@link CIQ.ChartEngine#createTickXAxisWithDates}
		 *
		 * Example: stxx.chart.xAxis
		 *
		 * @constructor
		 * @name  CIQ.ChartEngine.XAxis
		 * @param {object} init Object containing custom values for X-axis members
		 * @example
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.chart.xAxis.formatter=formatFunction;
		 */CIQ.ChartEngine.XAxis=function(init){for(var field in init){this[field]=init[field];}};/**
		 * Defines a Panel object.
		 * Every chart or study is rendered in a panel.
		 *
		 * Example: stxx.panels['chart']
		 *
		 * Example: stxx.panels['Aroon (14)']

		 * @param {string} name The name of the panel.
		 * @param {CIQ.ChartEngine.YAxis} [yAxis] Y axis ({@link CIQ.ChartEngine.YAxis}) object for the panel.
		 * @constructor
		 * @name  CIQ.ChartEngine.Panel
		 */CIQ.ChartEngine.Panel=function(name,yAxis){if(yAxis)this.yAxis=yAxis;else this.yAxis=new CIQ.ChartEngine.YAxis();this.name=name;this.state={};// drawing state of the panel, can be studies, drawings, or any panel-scoped object
};CIQ.extend(CIQ.ChartEngine.YAxis.prototype,{high:null,// High value on y axis (read only)
low:null,// Low value on y axis (read only)
shadow:null,// high - low (read only)
logHigh:null,// High log value on y axis (read only)
logLow:null,// Low log value on y axis (read only)
logShadow:null,// logHigh - logLow (read only)
multiplier:null,// Computed automatically. Divide pixel by this to get the price (then add to low). Or multiply price by this to get the pixel (then add to top)
bottom:null,// calculated automatically (panel.bottom-yAxis.bottomOffset)
top:null,// calculated automatically (panel.top+yAxis.topOffset;)
height:null,// bottom - top
left:null,// calculated left position on canvas to begin drawing.
width:null// calculated width of y axis
},true);/**
		 * Controls maximum number of decimal places to ever display on a y-axis floating price label.
		 *
		 * Set to the maximum decimal places from 0 to 10, or leave null and the chart will choose automatically based on {@link CIQ.ChartEngine.YAxis#shadowBreaks}.
		 * - See {@link CIQ.ChartEngine.YAxis#decimalPlaces} for controlling decimal places on the axis itself.
		 * - See {@link CIQ.ChartEngine.YAxis#width} and {@link CIQ.ChartEngine.Chart#dynamicYAxis} to manage the width of the y axis.
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since 5.2.1 default is changed to null
		 */CIQ.ChartEngine.YAxis.prototype.maxDecimalPlaces=null;/**
		 * Optionally hard set the high (top value) of the yAxis (for instance when plotting 0 - 100% charts)
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.max=null;/**
		 * Optionally hard set the low (bottom value) of the yAxis (for instance when plotting 0 - 100% charts)
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.min=null;/**
		 * Controls the number of decimal places on the y axis labels.
		 *
		 * Set to the preferred number of decimal places from 0 to 10, or leave null and the chart will choose automatically based on {@link CIQ.ChartEngine.YAxis#shadowBreaks}
		 * - **Note:**  study panel axis will be condensed if over 999 by the use of {@link condenseInt}.
		 *
		 * - See {@link CIQ.ChartEngine.YAxis#maxDecimalPlaces} for further controlling decimal places on floating labels.<br>
		 * - See {@link CIQ.ChartEngine.YAxis#width} and {@link CIQ.ChartEngine.Chart#dynamicYAxis} to manage the width of the y axis.
		 * - See {@link CIQ.ChartEngine.YAxis#shadowBreaks} to override how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
		 *
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since 5.2.0 default is changed to null
		 */CIQ.ChartEngine.YAxis.prototype.decimalPlaces=null;/**
		 * Ideal size between y-axis values in pixels. Leave null to automatically calculate.
		 * See {@tutorial Gridlines and  axis labels} for additional details.
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.idealTickSizePixels=null;/**
		 * Set to specify that the y-axis vertical grid be drawn with specific intervals between ticks.
		 * This amount will be overridden if it will result  in y axis crowding.
		 * In which chase, multiples of the original interval will be used.
		 * For example, if `.25` is selected, and that will cause labels to be on top of or too close to each other, `.50` may be used.
		 * Crowding is prevented by allowing for a minimum of space equating the y-axis font height between labels.
		 *
		 * **This parameter is also used in the 'Trade From Chart' (TFC) module**. If set, it will force the widget to skip certain price values and instead 'snap' to your desired intervals. This will guarantee that an order is only placed at the allowed price intervals for the security in question.
		 *
		 * **Note that this parameter will be ignored if {@link CIQ.ChartEngine.YAxis#pretty} is set to `true`. If you require specific price intervals, please set {@link CIQ.ChartEngine.YAxis#pretty} to 'false' before setting `minimumPriceTick` **
		 *
		 * Visual Reference:<br>
		 * ![yAxis.minimumPriceTick](yAxis.minimumPriceTick.png "yAxis.minimumPriceTick")
		 *
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // Declare a CIQ.ChartEngine object. This is the main object for drawing charts
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * // set interval between ticks
		 * stxx.chart.yAxis.minimumPriceTick=.50;
		 */CIQ.ChartEngine.YAxis.prototype.minimumPriceTick=null;/**
		 * Set to specify that the y-axis vertical grid be drawn with fractional intervals.
		 * This is checked in {@link CIQ.ChartEngine.AdvancedInjectable#drawYAxis} and if it is not null,
		 * and there is no existing yAxis.priceFormatter, one is created to specially format the y-axis ticks.
		 *
		 * To disable the formatting you must reset both the yAxis.priceFormatter and this fractional object to 'null'.
		 * <br>Example:
		 * ```
		 * stxx.chart.yAxis.priceFormatter=stxx.chart.yAxis.fractional=null;
     	 * ```
		 *
		 * @type object
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // Declare a CIQ.ChartEngine object. This is the main object for drawing charts
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * // set axis to display in 1/32nds; for example, 100 5/32 will display as 100'05.  If there is a price midway between
		 * // two ticks (for example, 11/64), a plus (+) will follow the price; for example 100 11/64 will display as 100'11+.
		 * stxx.chart.yAxis.fractional={
				formatter: "'",				// This is the character used to separate he whole number portion from the numerator (' default)
				resolution: 1/32			// Set to smallest increment for the quoted amounts
			}
		 */CIQ.ChartEngine.YAxis.prototype.fractional=null;/**
		 * Set to `true` to draw tick marks and a vertical border line at the edge of the y-axis  (use with CIQ.ChartEngine#yaxisPaddingRight and CIQ.ChartEngine#yaxisPaddingLeft)
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.displayBorder=true;/**
		 * Set to `false` to hide grid lines. See {@tutorial Gridlines and  axis labels} for additional details.
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.displayGridLines=true;/**
		 * Switch to 'temporarily' hide the y-axis. Set to `true' to activate.
		 * Will not modify the location of the axis; to do that use {@link CIQ.ChartEngine#setYAxisPosition} instead.
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.noDraw=null;/**
		 * Set to `false` to hide the current price label <b>in the main panel's y-axis</b>.
		 *
		 * See {@link CIQ.ChartEngine.AdvancedInjectable#drawCurrentHR}
		 *
		 * Visual Reference:<br>
		 * ![yAxis.drawCurrentPriceLabel](drawCurrentPriceLabel.png "yAxis.drawCurrentPriceLabel")
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  04-2015
		 */CIQ.ChartEngine.YAxis.prototype.drawCurrentPriceLabel=true;/**
		 * Set to `false` to hide the series price labels <b>in the main panel's y-axis</b>.
		 *
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  3.0.0
		 */CIQ.ChartEngine.YAxis.prototype.drawSeriesPriceLabels=true;/**
		 * Set to false to hide **all** price labels on the particular y axis.
		 * <br>See {@link CIQ.ChartEngine.YAxis#drawCurrentPriceLabel} to disable just the current price label on the main chart panel.
		 * <br>See <a href="CIQ.ChartEngine.html#preferences%5B%60labels%60%5D">CIQ.ChartEngine.preferences.labels</a> to disable just the last value label on studies.
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  04-2015
		 */CIQ.ChartEngine.YAxis.prototype.drawPriceLabels=true;/**
		 * When `true`, will attempt to create grid lines that approximate a `golden ratio` between x and y axis by basing grid on {@link CIQ.ChartEngine.YAxis#idealTickSizePixels}.
		 * This creates an "airy" modern looking chart.
		 * If set to false, each axis will be adjusted separately and may create long and narrow rectangular greeds depending on date or price range.
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since
		 * <br>&bull; 04-2015
		 * <br>&bull; 4.0.0 Now defaults to true.
		 */CIQ.ChartEngine.YAxis.prototype.goldenRatioYAxis=true;/**
		 * Shape of the floating y axis label.
		 *
		 * Available options:
		 *  - ["roundRectArrow"]{@link CIQ.roundRectArrow}
		 *  - ["semiRoundRect"]{@link CIQ.semiRoundRect}
		 *  - ["roundRect"]{@link CIQ.roundRect}
		 *  - ["tickedRect"]{@link CIQ.tickedRect}
		 *  - ["rect"]{@link CIQ.rect}
		 *  - ["noop"]{@link CIQ.noop}
		 *
		 * It will default to {@link CIQ.ChartEngine#yaxisLabelStyle}.
		 * This could be set independently on each panel if desired.
		 * @type string
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  04-2015
		 * @example
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.chart.yAxis.yaxisLabelStyle="rect"
		 */CIQ.ChartEngine.YAxis.prototype.yaxisLabelStyle=null;/**
		 * Set to `true` to right justify the yaxis labels
		 * Set to `false` to force-left justify the labels, even when the axis is on the left.
		 * Set to null to have the justification automatically adjusted based on the axis position. Right axis will justify left, and left axis will justify right.

		 *
		 * This setting does not control the floating last price. See {@link CIQ.ChartEngine.AdvancedInjectable#drawCurrentHR} and {@link CIQ.ChartEngine#createYAxisLabel}
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since
		 * <br>&bull; 15-07-01
		 * <br>&bull; 6.2.0 Formalized distinction between null and false values
		 */CIQ.ChartEngine.YAxis.prototype.justifyRight=null;/**
		 * Set to true to put a rectangle behind the yaxis text (use with CIQ.ChartEngine#yaxisPaddingRight and CIQ.ChartEngine#yaxisPaddingLeft)
		 * @type boolean
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  15-07-01
		 */CIQ.ChartEngine.YAxis.prototype.textBackground=false;/**
		 * Optional function used to override default formatting of Y-axis values, including the floating HUD value of the crosshair.
		 *
		 * Expected format :
		 *
		 * 		function(stx, panel, price, decimalPlaces)
		 *
		 * Parameters:
		 *
		 * 		stx           - {@link CIQ.ChartEngine}       - The chart object
		 *		panel         - {@link CIQ.ChartEngine.Panel} - The panel
		 *		price         - number                - The price to format
		 *		decimalPlaces - number                - Optional - Number of decimal places to use
		 *													(may not always be present)
		 *
		 * Returns:
		 *
		 *		text - Formated text label for the price
		 *
		 * @type function
		 * @example
		 * stxx.chart.yAxis.priceFormatter=function(stx, panel, price, decimalPlaces){
		 * 	var convertedPrice;
		 * 	  // add our logic here to convert 'price' to 'convertedPrice'
		 *    return convertedPrice; // string
		 * }
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.priceFormatter=null;/**
		 * Sets the y-axis bottom on any panel.
		 * Rendering will start this number of pixels above the panel's bottom.
		 * Note that {@link CIQ.ChartEngine#adjustPanelPositions} and {@link CIQ.ChartEngine#draw} will need to be called to immediately activate this setting after the axis has already been drawn.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.bottomOffset.png "yAxis.bottomOffset")
		 * ![yAxis.width](yAxis.bottomTopOffset.png "yAxis.bottomTopOffset")
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // The list of current panels can be found in "stxx.panels".
		 * stxx.panels[panelName].yAxis.bottomOffset=20;
		 * stxx.panels[panelName].yAxis.topOffset=60;
		 * stxx.adjustPanelPositions();	// !!!! must recalculate the margins after they are changed. !!!!
		 * stxx.draw();
		 */CIQ.ChartEngine.YAxis.prototype.bottomOffset=0;/**
		 * Sets y-axis top on Study panels.
		 * Rendering will start this number of pixels below the panel's top.
		 * Note that {@link CIQ.ChartEngine#adjustPanelPositions} and {@link CIQ.ChartEngine#draw} will need to be called to immediately activate this setting after the axis has already been drawn.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.bottomTopOffset.png "yAxis.bottomTopOffset")
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // The list of current panels can be found in "stxx.panels".
		 * stxx.panels[panelName].yAxis.bottomOffset=20;
		 * stxx.panels[panelName].yAxis.topOffset=60;
		 * stxx.adjustPanelPositions();	// !!!! must recalculate the margins after they are changed. !!!!
		 * stxx.draw();
		 */CIQ.ChartEngine.YAxis.prototype.topOffset=0;/**
		 * Set this to automatically compress and offset the y-axis so that this many pixels of white space is above the display.
		 * Note that {@link CIQ.ChartEngine#calculateYAxisMargins} and {@link CIQ.ChartEngine#draw} will need to be called to immediately activate this setting after the axis has already been drawn.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.initialMarginTop.png "yAxis.initialMarginTop")
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // Here is an example on how to override the default top and bottom margins **before** the initial axis has been rendered
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.setPeriodicity({period:1, interval:1, timeUnit:"minute"});				// set your default periodicity to match your data. In this case one minute.
		 * stxx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
		 * stxx.chart.yAxis.initialMarginBottom=50;
		 * stxx.newChart("SPY", yourData);
		 * @example
		 * // Here is an example on how to override the default top and bottom margins **after** the initial axis has already been rendered
		 * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
		 *    	// callback - your code to be executed after the chart is loaded
		 * 		stxx.chart.yAxis.initialMarginTop=50;
		 * 		stxx.chart.yAxis.initialMarginBottom=50;
		 * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // !!!! must recalculate the margins after they are changed. !!!!
		 * 		stxx.draw();
		 * });
		 * @example
		 * // Here is an example on how to override the default top and bottom margins for a specific panel **after** the initial axis has already been rendered
		 * // The list of current panels can be found in "stxx.panels".
		 * stxx.panels[panelName].yAxis.initialMarginTop=100;
		 * stxx.panels[panelName].yAxis.initialMarginBottom=100;
		 * stxx.calculateYAxisMargins(stxx.panels[panelName].panel.yAxis); // !!!! must recalculate the margins after they are changed. !!!!
		 * stxx.draw();
		 */CIQ.ChartEngine.YAxis.prototype.initialMarginTop=10;/**
		 * set this to automatically compress and offset the y-axis to that this many pixels of white space is below the display
		 * Note that {@link CIQ.ChartEngine#calculateYAxisMargins} and {@link CIQ.ChartEngine#draw} will need to be called to immediately activate this setting after the axis has already been drawn.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.initialMarginTop.png "yAxis.initialMarginTop")
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * // here is an example on how to override the default top and bottom margins **before** the initial axis has been rendered
		 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
		 * stxx.setPeriodicity({period:1, interval:1, timeUnit:"minute"});				// set your default periodicity to match your data. In this case one minute.
		 * stxx.chart.yAxis.initialMarginTop=50;		// set default margins so they do not bump on to the legend
		 * stxx.chart.yAxis.initialMarginBottom=50;
		 * stxx.newChart("SPY", yourData);
		 * @example
		 * // here is an example on how to override the default top and bottom margins **after** the initial axis has already been rendered
		 * stxx.newChart(symbol, yourData, null, function () {    // call new chart to render your data
		 *    	// callback - your code to be executed after the chart is loaded
		 * 		stxx.chart.yAxis.initialMarginTop=50;
		 * 		stxx.chart.yAxis.initialMarginBottom=50;
		 * 		stxx.calculateYAxisMargins(stxx.chart.panel.yAxis); // !!!! must recalculate the margins after they are changed. !!!!
		 * 		stxx.draw();
		 * });
		 *
		 *
		 */CIQ.ChartEngine.YAxis.prototype.initialMarginBottom=10;/**
		 * Set this to the number of pixels to zoomed in or out, positive or negative.
		 * This is defined as the number of pixels to add or subtract from both top and bottom of panel for calculations.
		 *
		 * Please note that the zoom level will be reset as determined by {@link CIQ.ChartEngine.YAxis#initialMarginTop} and
		 * {@link CIQ.ChartEngine.YAxis#initialMarginBottom} when a {@link CIQ.ChartEngine#newChart} is rendered, the {@link CIQ.ChartEngine#home} button is pressed, or when {@link CIQ.ChartEngine.AdvancedInjectable#touchDoubleClick} is activated on a touch device.
		 *
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.zoom=0;/**
		 * set this to the number of pixels to offset the y-axis, positive or negative.
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 */CIQ.ChartEngine.YAxis.prototype.scroll=0;// get/set width to allow {@link CIQ.ChartEngine.Chart#dynamicYAxis} feature
// to set _dynamicWidth instead of _width. This allows user widths to be
// restored easily when the feature is not needed.
Object.defineProperty(CIQ.ChartEngine.YAxis.prototype,'width',{configurable:true,enumerable:true,get:function get(){// _dynamicWidth is set by {@link CIQ.ChartEngine#drawYAxis} and
// cleared by {@link CIQ.ChartEngine.Chart#resetDynamicYAxis}
return this._dynamicWidth||this._width;},set:function set(value){this._width=value;// the calculated width is less than user value, getter should return the user value
if(this._dynamicWidth<value)this._dynamicWidth=NaN;}});/**
		 * The width in pixels.
		 *
		 * See {@link CIQ.ChartEngine.Chart#dynamicYAxis} to set automatically.
		 *
		 * Visual Reference:<br>
		 * ![yAxis.width](yAxis.width.png "yAxis.width")
		 * @type number
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example
		 * stxx.chart.yAxis.width=50;
		 * //must call the following 2 lines to activate if the axis is already drawn.
		 * stxx.calculateYAxisPositions();
		 * stxx.draw();
		 * @example
		 * // reset width to default
		 * stxx.chart.yAxis.width = CIQ.ChartEngine.YAxis.prototype.width;
		 */CIQ.ChartEngine.YAxis.prototype.width=50;/**
		 * Override the default stx_yaxis style for text by setting this to the desired CSS style. This would typically be used to set a secondary axis to a particular color.
		 * @type string
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  15-07-01
		 */CIQ.ChartEngine.YAxis.prototype.textStyle=null;/**
		 * Set to "left" or "right" to **initialize** the y-axis location.
		 *
		 * By default y-axis are drawn on the right side of the chart.
		 * The main y-axis for any study panel will follow the main chart axis as long as this is set to null.
		 *
		 * Do not use this method to change the location of an existing y-axis.
		 * Once initialized, y axis location can be changed at any time by calling {@link CIQ.ChartEngine#setYAxisPosition}
		 *
		 * @type string
		 * @default
		 * @memberof CIQ.ChartEngine.YAxis
		 * @example  <caption>Pre-set the main y-axis for the chart on the left; **before it is initially rendered**.</caption>
		 * stxx.chart.yAxis.position = 'left';
		 * @example  <caption>Re-set the main y-axis for the chart on the right; **after it is initially rendered**.</caption>
		 * stxx.setYAxisPosition(stxx.chart.yAxis,'right');
		 * @since  15-07-01
		 */CIQ.ChartEngine.YAxis.prototype.position=null;/**
		 * Default setting for the array that determines how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
		 * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
		 * See {@link CIQ.ChartEngine.YAxis#shadowBreaks}
		 * @type array
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since
		 * <br>&bull; 2015-11-1
		 * <br>&bull; 5.2.0 additioonal break added
		 * @default
		 */CIQ.ChartEngine.YAxis.defaultShadowBreaks=[[1000,2],[5,4],[0.001,8]];/**
		 * Alternative setting (for small charts)  array that determines how many decimal places to print based on the size of the shadow (the difference between chart high and chart low).
		 * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
		 * See {@link CIQ.ChartEngine.YAxis#shadowBreaks}
		 * @type array
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  2015-11-1
		 * @default
		 */CIQ.ChartEngine.YAxis.smallChartShadowBreaks=[[10,2],[1,4]];/**
		 * If true then uses the "pretty" algorithm instead of the "best fit" algorithm. The pretty algorithm
		 * uses the values specified in {@link CIQ.ChartEngine.YAxis#increments} to set axis label locations.
		 *
		 * **Note that this algorithm will override the {@link CIQ.ChartEngine.YAxis#minimumPriceTick}. If you require specific price intervals, please set this parameter to 'false' before setting `minimumPriceTick` **
		 *
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since 2015-11-1
		 * @type boolean
		 * @default
		 */CIQ.ChartEngine.YAxis.prototype.pretty=true;/**
		 * Values used by the {@link CIQ.ChartEngine.YAxis#pretty} algorithm to set axis label locations.
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since 2015-11-1
		 * @type array
		 * @default
		 */CIQ.ChartEngine.YAxis.prototype.increments=[1,2.5,5];/**
		 * If true then uses an additional step in the "pretty" algorithm for the log
		 * scale. This allows the algorithm to lower the grid to fill large visual gaps.
		 * The "increments" are not fully respected by this approach.
		 *
		 * Only applicable when using *both* pretty mode and semiLog.
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since 2016-03-11
		 * @type boolean
		 * @default
		 */CIQ.ChartEngine.YAxis.prototype.prettySemiLog=true;/**
		 * A matrix used to determine how many decimal places to print on y axis labels based on the size of the shadow (the difference between chart high and chart low).
		 * The array consists of tuples in descending order. If the shadow is less than n1 then n2 decimal places will be printed.
		 * See {@link CIQ.ChartEngine.YAxis.defaultShadowBreaks} and {@link CIQ.ChartEngine.YAxis.smallChartShadowBreaks} for default settings.
		 *
		 * This can be overridden, however, by setting{@link CIQ.ChartEngine.YAxis#decimalPlaces}.
		 * If you wish to further configure the current price label floating over the y axis to display less decimal places than the axis labels, set {@link CIQ.ChartEngine.YAxis#maxDecimalPlaces}.
		 * Also see {@link CIQ.ChartEngine.Chart#dynamicYAxis} to allow the y axis to automatically determine its width based on the text length of quotes in a dataSet.
		 *
		 * @type array
		 * @memberof CIQ.ChartEngine.YAxis
		 * @since  2015-11-1
		 * @example
		 * stxx.chart.yAxis.shadowBreaks=CIQ.ChartEngine.YAxis.defaultShadowBreaks;
		 * @example
		 * stxx.chart.yAxis.shadowBreaks=CIQ.ChartEngine.YAxis.smallChartShadowBreaks;
		 */CIQ.ChartEngine.YAxis.prototype.shadowBreaks=CIQ.ChartEngine.YAxis.defaultShadowBreaks;CIQ.extend(CIQ.ChartEngine.Panel.prototype,{name:null,// Name of panel
display:null,// Display text of panel
chart:null,// The chart from which this panel derives its data
yAxis:null,// Y axis object for this panel, this is the same object as chart.yAxis on chart panels
shareChartXAxis:null,// Set to false to indicate panel does not share x axis with its chart
top:null,// Y location of top of chart
bottom:null,// Y location of bottom of chart
height:null,// height of chart in pixels
percent:null// percent of overall window this panel takes up
},true);CIQ.extend(CIQ.ChartEngine.XAxis.prototype,{/**
		     * Optional function to format dates on x-axis.
		     * If defined, will be used to completely control x-axis formatting, including the floating HUD date of the crosshair.
		     *
		     * This function **should not** be used to alter the timezone of the displayed date/time. For time zone conversions use {@link CIQ.ChartEngine#setTimeZone}
		     *
			 * **Expected format:**
			 *
			 * - `function(labelDate, gridType, timeUnit, timeUnitMultiplier);`
			 *
			 * **Parameters:**
			 * <table>
			 * <tr><th>Name</th><th>Type</th><th>Description</th></tr>
			 * <tr><td>labelDate</td><td>Date</td><td>javaScript date to format</td></tr>
			 * <tr><td>gridType</td><td>String</td><td>"boundary" or "line" for the axis labels<br>absent for the floating crosshair label</td></tr>
			 * <tr><td>timeUnit</td><td>Enumerated type</td><td>CIQ.MILLISECOND <br>CIQ.SECOND <br>CIQ.MINUTE <br>CIQ.HOUR <br>CIQ.DAY <br>CIQ.MONTH <br>CIQ.YEAR <br>CIQ.DECADE <br>absent for the floating crosshair label</td></tr>
			 * <tr><td>timeUnitMultiplier</td><td>Number</td><td>how many timeUnits <br>absent for the floating crosshair label</td></tr>
			 * </table>
			 *
			 * **Returns:**
			 * - Formatted text label for the particular date passed in
			 *
		     * @type function
		     * @memberof CIQ.ChartEngine.XAxis#
		     * @example
		     * stxx.chart.xAxis.formatter = function(labelDate, gridType, timeUnit, timeUnitMultiplier){
		     * 		// your code here to format your string
		     * 		// Example: always return HH:MM regardless of gridType,
		     * 		// even if gridType is a 'boundary' that normally would display a date in intro-day periodicity
		     * 		// or a month in daily periodicity
		     *
		     * 		var stringDate = labelDate.getHours() + ':' + labelDate.getMinutes();
		     * 		return stringDate;
		     * }
		     * @since 3.0.0 Using x axis formatter now is available for year and month boundaries.
			 */formatter:null,/**
		     * If true, the user selected (default browser if none selected) timezone will be used on the x axis.
		     * If not set to true, the data timezone will be used even if a user timezone was set.
		     * @type boolean
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */adjustTimeZone:true,/**
		     * Ideal space between x-axis labels in pixels.
		     * If null then the chart will attempt a tick size and time unit in proportion to the chart.
		     * Please note that if `stxx.chart.yAxis.goldenRatioYAxis` is set to `true`, this setting will also affect the spacing between y-axis labels.
		     * Please note that this setting will be overwritten at rendering time if too small to prevent labels from covering each other.
		     * Not applicable if {@link CIQ.ChartEngine.XAxis#timeUnit} is manually set.
		     * See {@tutorial Custom X-axis} for additional details.
		     * @type number
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */idealTickSizePixels:null,/**
		     * Overrides default used in {@link CIQ.ChartEngine#createTickXAxisWithDates}
		     * <br>Allowable values:
		     * - CIQ.MILLISECOND,
		     * - CIQ.SECOND
		     * - CIQ.MINUTE
		     * - CIQ.HOUR
		     * - CIQ.DAY
		     * - CIQ.WEEK
		     * - CIQ.MONTH
		     * - CIQ.YEAR
		     * - CIQ.DECADE
		     *
		     * Visual Reference for sample code below (draw a label every 5 seconds using 1 second periodicity ) :<br>
		     * ![xAxis.timeUnit](xAxis.timeUnit.png "xAxis.timeUnit")
		     * @type number
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     * @example
		     * // The following will cause the default implementation of createTickXAxisWithDates to print labels in seconds every 5 seconds.
		     * // masterData is in 1 second intervals for this particular example.
				 * stxx.chart.xAxis.timeUnit = CIQ.SECOND;
				 * stxx.chart.xAxis.timeUnitMultiplier = 5;
		     */timeUnit:null,/**
			 * Overrides default used in {@link CIQ.ChartEngine#createTickXAxisWithDates}
			 * @type number
			 * @default
			 * @memberof CIQ.ChartEngine.XAxis#
			 * @example
			 * // The following will cause the default implementation of createTickXAxisWithDates to print labels in seconds every 5 seconds.
			 * // masterData is in 1 second intervals for this particular example.
			 * stxx.chart.xAxis.timeUnit = CIQ.SECOND;
			 * stxx.chart.xAxis.timeUnitMultiplier = 5;
			 */timeUnitMultiplier:null,/**
		     * Set to true to draw a line above the x-axis.
		     * @type boolean
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */displayBorder:true,/**
		     * Set to false to suppress grid lines
		     * @type boolean
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */displayGridLines:true,/**
		     * Switch to temporarily hide the x-axis. Set to `true' to activate.
		     * @type boolean
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     * @since 3.0.0
		     */noDraw:null,/**
		     * Minimum size for label. This ensures adequate padding so that labels don't collide with one another.
		     * Please note that this setting is used during the rendering process, not during the label spacing calculation process and will be overwritten if too small to prevent labels from covering each other.
		     * To modify at what interval labels will be placed, please see {@tutorial Custom X-axis} for more details
		     * @type number
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */minimumLabelWidth:50,/**
		     * Set to false to hide axis markings in the future.
		     * @type boolean
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     */futureTicks:true,/**
		     * Set to the number of minutes ticks will move by when iterating in "tick" interval.
		     * <P>
		     * Since 'tick' is not a time based display, there is no way to predict what the time between ticks will be.
		     * Ticks can come a second later, a minute later or even more depending on how active a particular instrument may be.
		     * As such, if iterating through the market day in 'tick' periodicity, the library uses a pre-defined number of minutes to move around.
		     * This will be primarily used when deciding where to put x axis labels when going into the future in 'tick' mode.
		     *
		     * @type number
		     * @default
		     * @memberof CIQ.ChartEngine.XAxis#
		     * @example
		     * //You can override this behavior as follows:
			 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
			 * stxx.chart.xAxis.futureTicksInterval=1; // to set to 1 minute, for example
			 * @since 3.0.0 default changed from 10 to 1.
		     */futureTicksInterval:1},true);CIQ.extend(CIQ.ChartEngine.Chart.prototype,{/**
				 * The current symbol for the chart
				 * @type string
			     * @memberof CIQ.ChartEngine.Chart#
				 */symbol:null,/**
				 * The current symbolObject for the chart. Generally this is simply `{symbol: symbol}`.
				 * This is initialized by {@link CIQ.ChartEngine#newChart}.
				 * @type {object}
			     * @memberof CIQ.ChartEngine.Chart#
				 */symbolObject:{symbol:null},/**
			     * Set this to presnet an alternate name for the symbol on the chart label and comparison legend.
			     * You can set  `stxx.chart.symbolDisplay='yourName'; ` right before calling `newChart()`.
			     * Alternatively, a good place to set it is in your fetch() function, if using {@link CIQ.QuoteFeed}. See example.
			     * @type string
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @example
				 * // on your fetch initial load add the following
				 * params.stx.chart.symbolDisplay='yourName for '+params.symbol;
			     */symbolDisplay:null,/**
				 * Contains information about the series that are associated with the chart.
				 * Series are additional data sets, such as used for comparison charts.
				 * Note that a series may have a different y-axis calculation than the price chart.
				 * See the "parameters" section of {@link CIQ.ChartEngine#addSeries} for details
				 * @type {object}
			     * @memberof CIQ.ChartEngine.Chart#
				 */series:{},/**
			     * Contains "renderers" that are used to create the visualizations for series.
			     * @type {object}
			     * @memberof CIQ.ChartEngine.Chart#
			     */seriesRenderers:{},/**
			     * Current number of ticks scrolled in from the end of the chart.
			     * Setting to zero would theoretically cause the chart to be scrolled completely to the left showing an empty canvas.
			     * Setting to 10 would display the last 10 candles on the chart.
			     * Setting to `maxTicks` would display a full screen on the chart (assuming enough data is available).
			     *
			     * To immediately activate, call [draw()]{@link CIQ.ChartEngine#draw}
			     * @type number
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @example <caption> Scroll to the most current (beginning) position in the chart.</caption>
			     * stxx.chart.scroll=0;
			     * @example <caption> Scroll to the end of the chart.</caption>
			     * stxx.chart.scroll=stxx.chart.dataSet.length;
			     */scroll:0,isComparison:false,// Used internally, indicates if chart is in comparison mode
/**
			     * If true, [comparisons]{@link CIQ.ChartEngine#addSeries} force a 'percent' chart scale every time a new series is added,
			     * and once the last comparison series is removed, the chart will be forced to 'linear' scale.
			     * In between adding series, the scale can be changed at any time by programmatically calling calling {@link CIQ.ChartEngine#setChartScale}
			     *
			     * If false, the chart will not change scale when a comparison series is added or removed and {@link CIQ.ChartEngine#setChartScale} must be explicitly called to set the desired scale.
			     * This allows for more flexibility in case 'linear' and 'percent' are not the preferred default scales, or the UI is requires to manage the scale separately.
				 *
			     * Note this will only take effect on the main chart panel's main axis.
			     *
			     * @type boolean
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 6.2.0
			     */forcePercentComparison:true,/**
				 * Will contain the maximum number of bars that can be displayed on the chart.
				 * This number is auto-computed by the ChartEngine when the user zooms or the size of the chart changes.
				 * Since charts can pan slightly off the edge of the screen, this number is width/candleWidth + 2 in order allow partial candles to be displayed on both edges.
				 * @type number
			     * @memberof CIQ.ChartEngine.Chart#
				 */maxTicks:0,// Horizontal number of chart ticks that currently fit in the canvas, based on candlewidth and spacing. This is generally one greater than the actual size of the canvas due to candle clipping.
/**
			     * Set to a value between 0 and 1 to soften the curves on a line or mountain chart.
			     *
			     * This only affects the primary chart series. For setting tension on additional series see {@link CIQ.ChartEngine#addSeries}
			     * @type number
			     * @memberof CIQ.ChartEngine.Chart#
			     */tension:null,/**
			     * READ ONLY. A "snapshot" of the market for the active instrument.
			     * This data is ephemeral in nature and not used to produce a time series chart.
			     * But rather used on our peripheral plugins that require more details on the current market, such as [TFC]{@link CIQ.TFC} and [cryptoIQ]{@link CIQ.MarketDepth}.
			     * This data is programmatically collated from the incoming data and is updated with the most recent information so it should not be altered manually.
			     *
			     * The `currentMarketData` object contains the following information:
			     *  - Last Bid
			     *  - Last Ask
			     *  - Last Price
			     *  - Last Size
			     *  - Lastest Level 2 information
			     *
			     * For more details see {@link CIQ.ChartEngine#updateCurrentMarketData}
			     * @type object
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 6.1.0
			     */currentMarketData:{},/**
			     * The master data for this chart. This data is never modified by the chart engine itself and should not be altered directly. Use {@link CIQ.ChartEngine#setMasterData} , {@link CIQ.ChartEngine#updateChartData} to manipulate this object. See the [Data Integration]{@tutorial DataIntegrationOverview} tutorial for details.
			     * @type array
			     * @memberof CIQ.ChartEngine.Chart#
			     */masterData:null,/**
			     * Contains the current complete data set created by {@link CIQ.ChartEngine#createDataSet}, adjusted for periodicity and with calculated studies. See the [Data Integration]{@tutorial DataIntegrationOverview} tutorial for details.
			     * @type array
			     * @memberof CIQ.ChartEngine.Chart#
			     */dataSet:null,/**
				 * Contains a copy of the dataSet, scrubbed for null entries (gap dates).
				 * This is used by studies to avoid gaps being interpreted as "zero" values and throwing off calculations.
				 * @type array
			     * @memberof CIQ.ChartEngine.Chart#
				 */scrubbed:null,/**
			     * Contains the segment of the data set that is displayed on the screen (view-window). See the [Data Integration]{@tutorial DataIntegrationOverview} tutorial for details.
			     * @type array
			     * @memberof CIQ.ChartEngine.Chart#
			     */dataSegment:null,/**
			     * Contains data pertaining to variable width candles, used to determine location of bars on the screen
			     * @type array
			     * @memberof CIQ.ChartEngine.Chart#
			     */segmentImage:null,/**
				 * Parameters used to control the baseline in baseline_delta charts
				 * @type object
				 * @alias baseline
				 * @inner
				 * @memberof! CIQ.ChartEngine.Chart#
				 */baseline:{/**
					 * includeInDataSegment - If set to true, forces a line chart (usually a baseline chart) to begin inside the chart,
				     *                        whereas normally the first point in a line chart is off the left edge of the screen.
				     * @type boolean
				     * @default
						 * @inner
				     * @alias baseline[`includeInDataSegment`]
				     * @memberof! CIQ.ChartEngine.Chart#
					 */includeInDataSegment:false,/**
				     * defaultLevel - If set to a value, overrides the default behavior of baseline chart
				     *                which is to set baseline to leftmost point visible on the chart.
				     * @type number
				     * @default
						 * @inner
						 * @alias baseline[`defaultLevel`]
				     * @memberof! CIQ.ChartEngine.Chart#
				     */defaultLevel:null,/**
				     * userLevel - Value of the user-set baseline level.  To prevent user from adjusting the baseline,
				     *             set this property to false.
				     * @type boolean|number
				     * @default
						 * @alias baseline[`userLevel`]
				     * @memberof! CIQ.ChartEngine.Chart#
				     */userLevel:null,/**
				     * actualLevel - This is computed automatically.  Do not set.
				     * @type number
				     * @default
				     * @alias baseline[`actualLevel`]
				     * @memberof! CIQ.ChartEngine.Chart#
				     */actualLevel:null},/**
			     * Contains the {@CIQ.ChartEngine.XAxis} object for the chart.
			     * @type CIQ.ChartEngine.XAxis
			     * @memberof CIQ.ChartEngine.Chart#
			     */xAxis:null,// x Axis for the chart
/**
				 * Contains data entries for the full xaxis, including entries for "future" bars that are displayed on the chart.
				 * floatDate and headsUp use these values for display to the user.
				 * It is a superset of dataSegment.
				 * @type {array}
			     * @memberof CIQ.ChartEngine.Chart#
				 */xaxis:[],/**
			     * Determines at which zoom level interior axis points are displayed. Value in pixels.
			     * @type number
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     */xaxisFactor:30,/**
				 * Maximum number of decimal places in data set. Computed automatically by calculateTradingDecimalPlaces
				 * @type number
			     * @memberof CIQ.ChartEngine.Chart#
				 */decimalPlaces:2,/**
				 * If set to `true` the y-axes width will be automatically set based on the length of the displayed prices. Otherwise {@link CIQ.ChartEngine.YAxis#width} will be used.
				 *
				 * Works on all axis attached to a chart.
				 * @type boolean
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 5.1.1
				 */dynamicYAxis:false,roundit:100,// Computed automatically to round y-axis display
/**
			     * Function used to render the Legend when multiple series are being displayed on the main chart panel.
			     * Update your prototype or a specific chart instance, if you want to use a different rendering method for legend.
			     *
			     * To activate the legend, you must first define the location in `stx.chart.legend`.
			     * This is done by providing the x and y coordinates for the first element in the legend as follows:
			     * ```
			     * stxx.chart.legend={
			     * 		x: yourXlocation,
			     * 		y: yourYlocation
			     * };
			     * ```
			     *
			     * Once set, a legend item for each series you add will be added as defined by this function.
			     *
			     * Defaults to {@link CIQ.drawLegend}, which uses {@link CIQ.drawLegendItem}
			     * @type function
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @example
			     * // define yuur legend renderer
			     * stxx.chart.legendRenderer = yourFunction; // must follow the function signature of {@link CIQ.drawLegend};
			     * // actiate the legend
			     * stxx.chart.legend={
			     * 		x: 50,
			     * 		y: 50
			     * };
			     * @example
			     * // sample series legend function
				 	stxx.chart.legendRenderer = function(stx, params){
						var coordinates=params.coordinates;
						var context=stx.chart.context;
						context.textBaseline="top";
						var rememberFont=context.font;
						stx.canvasFont("stx-legend",context);

						var chart=params.chart;
						if(!coordinates) coordinates=chart.legend;
						var xy=[coordinates.x, coordinates.y];
						var lineColor=stx.defaultColor;

						for(var i=0;i<2;i++){ // loop twice, first for the base then again for the series
							for(var field in params.legendColorMap){
								var legendItem=params.legendColorMap[field];
								if(legendItem.isBase && (i || params.noBase)) continue;
								if(!legendItem.isBase && !i) continue;
								var c;
								if(legendItem.color instanceof Array){
									var colors=legendItem.color;
									for(c=colors.length-1;c>=0;c--){
										if(CIQ.isTransparent(colors[c])) colors.splice(c,1);
									}
									if(colors.length>1){
										var grd=context.createLinearGradient(xy[0],xy[1],xy[0]+10,xy[1]);
										for(c=0;c<colors.length;c++){
											grd.addColorStop(c/(colors.length-1),colors[c]);
										}
										lineColor=grd;
									}else if(colors.length>0){
										lineColor=colors[0];
									}else{
										lineColor=stx.getCanvasColor("stx_line_chart");
									}
								}else{
									lineColor=null;
								}
								if(lineColor) {
									var display = field;
									if (legendItem.display){
										display = legendItem.display;
									}
									if(!display){
										if(chart.symbolDisplay){
											display=chart.symbolDisplay;
										}else{
											display=chart.symbol;
										}
									}
									if(xy[0]+context.measureText(display).width>chart.panel.right){
										xy=[coordinates.x, coordinates.y+context.measureText("M").width+6];  // M is squarish, with width roughly equaling height: https://stackoverflow.com/questions/1134586/how-can-you-find-the-height-of-text-on-an-html-canvas
									}
									xy=CIQ.drawLegendItem(stx, xy, display, lineColor, legendItem.opacity);
								}
							}
						}
						context.font=rememberFont;
					};
			     * @since 07/01/2015
			     */legendRenderer:CIQ.drawLegend,/**
			     * This structure is used to temporarily override the layout.chartType.  It can also be used to override the coloring function used when drawing
			     * bars, candles, etc.
				 *
				 * Expected format :
				 *
				 * 		customChart={chartType:myChartType, colorFunction: myColorFunction}
				 *
				 * 		myChartType is any valid chartType
				 * 		myColorFunction needs to support the following parameters: stx, quote, mode
				 * 		Example: myColorFunction(stx,quote,mode)
				 *
				 * 		Parameters:
				 *
				 *		{@link CIQ.ChartEngine} stx	- A chart object
				 *		{object} quote	- A properly formatted OHLC object.
				 *		{string} mode	- Applicable on 'candle', 'hollow_candle' and 'volume_candle' charts only. Allowed values: "shadow", "outline", and "solid".
				 *							`shadow`- indicates the function is asking for the candle wick color
				 *							`outline` indicates the function is asking for the candle border color
				 *							`solid` indicates the function is asking for the candle fill color
				 *										(Inside of candle. Not applicable on 'hollow_candle' or 'volume_candle')
				 *
				 * 		Returns:
				 *
				 *		{string|object} Color to use for the bar, candle or line segment component. Set to null to skip bar or line segment.
				 *		For colored line charts a color/pattern combination can be returned in an object of the follwing format: `{pattern:[3,3],color:"red"}`
				 *
				 * You may omit either of the properties to default to existing settings.
				 * Note: After setting the chartType property, it is necessary to call stx.setMainSeriesRenderer() to change the chart rendering.
				 *
				 * To restore the original chart settings, set this object to null (and call setMainSeriesRenderer() if necessary)
				 *
				 * See {@tutorial Chart Styles and Types} for more details.
			     * @type object
			     * @default
			     * @alias customChart
			     * @memberof! CIQ.ChartEngine.Chart#
			     * @example
				 * stxx.chart.customChart={colorFunction: function(stx, quote, mode){
				 *		if(mode=="shadow" || mode=="outline") return "black";  //draw black wicks and borders
				 *		else{
				 *			if(quote.Close>100) return "green";
				 * 			else if(quote.DT.getHours()<12) return "yellow";
				 *			else return "orange";
				 *		}
				 *		return null;
				 *	  }
				 * 	};
			     */customChart:null,/**
			     * How much padding to leave for the right y-axis. Default is enough for the axis. Set to zero to overlap y-axis onto chart.
			     * @type number
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 07/01/2015
			     * @example
			     * stxx.chart.yaxisPaddingRight=0;
			     * stxx.chart.yAxis.displayBorder=false; // hide the vertical axis line.
			     * //must call the following 2 lines to activate if the axis is already drawn.
			     * stxx.calculateYAxisPositions();
			     * stxx.draw();
			     */yaxisPaddingRight:null,/**
			     * How much padding to leave for the left y-axis. Default is enough for the axis. Set to zero to overlap y-axis onto chart.
			     * @type number
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 07/01/2015
			     * @example
			     * stxx.chart.yaxisPaddingLeft=0;
			     * stxx.chart.yAxis.displayBorder=false; // hide the vertical axis line.
			     * //must call the following 2 lines to activate if the axis is already drawn.
			     * stxx.calculateYAxisPositions();
			     * stxx.draw();
			     */yaxisPaddingLeft:null,tickCache:{},// private
/**
			     * If set to false, during zooming and panning operations the chart will be anchored on left side preventing white space to be created past the oldest tick.
			     * If both {@link CIQ.ChartEngine.Chart#allowScrollPast} and {@link CIQ.ChartEngine.Chart#allowScrollFuture} are set to false, allowScrollFuture will take precedence if the candle is manually set to create space ({@link CIQ.ChartEngine#setCandleWidth}), but automated zoom operations ({@link CIQ.ChartEngine#zoomOut}) will maintain both scroll restrictions.
			     *
			     * The amount of white space allowed on the right will be limited by {@link CIQ.ChartEngine#minimumLeftBars}
			     * @type boolean
			     * @default
				 * @memberof CIQ.ChartEngine.Chart#
			     */allowScrollPast:true,/**
			     * If set to false, during zooming and panning operations the chart will be anchored on right side preventing white space to be created beyond the newest tick.
			     * If both {@link CIQ.ChartEngine.Chart#allowScrollPast} and {@link CIQ.ChartEngine.Chart#allowScrollFuture} are set to false, allowScrollFuture will take precedence if the candle is manually set to create space ({@link CIQ.ChartEngine#setCandleWidth}), but automated zoom operations ({@link CIQ.ChartEngine#zoomOut}) will maintain both scroll restrictions.
				 * When viewing a specified date range on the chart, if this flag is set to false, any portion of the range beyond the last quote will not be displayed.
			     * @type boolean
			     * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 6.1.0 Also respects studies that render into the future, such as the Ichimoku cloud.
			     */allowScrollFuture:true,/**
			     * READ ONLY. Tracks the number of ticks to display as "whitespace" beyond the rightmost area of the chart
			     * when {@link CIQ.ChartEngine.Chart#allowScrollFuture} is set to false.
			     * @type number
			     * @default
			     * @alias whiteSpaceFutureTicks
			     * @memberof CIQ.ChartEngine.prototype
			     * @private
			     * @since 6.1.0
			     */whiteSpaceFutureTicks:0,/**
			     * Set to true to temporarily hide drawings
			     * @type boolean
			     * @default
				 * @memberof CIQ.ChartEngine.Chart#
			     */hideDrawings:false,/**
				 * For line and mountain type charts set this to a value other than "Close" to have those chart types plot a different field.
				 *
				 * @type {string}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 3.0.0
				 */defaultPlotField:"Close",/**
				 * For chart types which have configuration settings (such as the aggregate charts renko, kagi, etc) contains those default settings.
				 * This object holds the settings for the current chart type only.
				 * @type {object}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 3.0.0
				 */defaultChartStyleConfig:{},/**
				 * Set this to true to turn off auto-scrolling when fresh data comes in. By default, the chart will scroll backward
				 * whenever a new bar comes in, so as to maintain the chart's forward position on the screen. If lockScroll is
				 * true then fresh bars with advance the chart forward (and eventually off the right edge of the screen)
				 *
				 * Note that setSpan({base:"today"}) will set an internal variable that accomplishes the same thing. This is a unique case.
				 * @type {boolean}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 05-2016-10
				 */lockScroll:false,/**
				 * Set this to true to include the chart overlay/study values in the calculation to determine the high and low values for the chart.
				 * This may cause the chart to shrink vertically to ensure all study/overlay data is in view.
				 * Setting it to false, will maintain the current candle's height, but some of the study/overlay data may be out of the display range.
				 * @type {boolean}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since
				 * <br>&bull; 2016-12-01.4.13
				 * <br>&bull; 3.0.10 switched default to true
				 */includeOverlaysInMinMax:true,/**
				 * READ ONLY. Gap filling style for the primary chart (line/mountain chart types only).
				 * By default gaps on lines and mountain charts will not be connected.
				 * Modify by using {@link CIQ.ChartEngine#setGapLines}.
				 * @type {object}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 4.0.0
				 */gaplines:null,/**
				 * READ ONLY. Style for the main series renderer.
				 * Set by using {@link CIQ.ChartEngine#setLineStyle}.
				 * @type {object}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 4.0.0
				 */lineStyle:null,/**
				 * When candleWidth<1, setting to true will create approximation of a line chart to improve rendering performance.
				 *
				 * Must allow for smaller candle sizes by lowering {@link CIQ.ChartEngine#minimumCandleWidth}
				 * and allow for larger dataset by increasing {@link CIQ.ChartEngine#maxDataSetSize} or setting it to 0.
				 * @type {boolean}
				 * @default
				 * @memberof CIQ.ChartEngine.Chart#
				 * @since 4.1.0
				 */lineApproximation:true,/**
			     * Whether chart's main renderer's bars plot more than one data field (OHLC charts).
			     * When this is true, will disable the use of {@link CIQ.ChartEngine.Chart#defaultPlotField}.
			     * @type boolean
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 5.1.0
			     */highLowBars:false,/**
			     * Whether chart's main renderer's bars represent a stand-alone entity as opposed to a vertex in a line-type chart.
			     * This is important when the engine tries to render the data points right off the chart; in a stand-alone bar,
			     * the points right off the chart need not be considered.
			     * @type boolean
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 5.1.0
			     */standaloneBars:false,/**
			     * Whether chart's main renderer's bars have width, as opposed to a line-type chart whose "bars" are just a point on the chart.
			     * This is useful when the engine adjusts the chart for smooth scrolling and homing.
			     * @type boolean
			     * @default
			     * @memberof CIQ.ChartEngine.Chart#
			     * @since 5.1.0
			     */barsHaveWidth:false},true);/**
		 * Given an html element, this allows the chart container to keep track of its own drawing container
		 * (where appropriate)
		 * @param {object} htmlElement The html element where the chart container is for 'this' chart
		 * @memberof CIQ.ChartEngine
		 * @example
		 *	var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), preferences:{labels:false, currentPriceLine:true, whitespace:0}});
		 *	stxx.setDrawingContainer($$$('cq-toolbar'));
		 * @since 6.0.0
		 */CIQ.ChartEngine.prototype.setDrawingContainer=function(htmlElement){this.drawingContainer=htmlElement;};/**
		 * Based on the standardMarketIterator and the last entry of masterData, determines whether the chart contains data up till the current iterators next tick.
		 *
		 * For efficiency once {@link CIQ.ChartEngine.isHistoricalMode} is set to false, this will always return false.
		 * @return {boolean} True if viewing historical mode
		 * @since 6.0.0
		 * @private
		 */CIQ.ChartEngine.prototype.isHistoricalMode=function(){var dateNow=new Date(),historic=true,masterData=this.masterData;if(!this.isHistoricalModeSet){return false;}if(masterData.length){var lastDate=this.getFirstLastDataRecord(masterData,"DT",true);var iter=this.standardMarketIterator(lastDate.DT);historic=iter.next()<=dateNow;// special case: daily chart, market has not opened yet today
// historic would always be set even though we have all the data
if(historic&&CIQ.ChartEngine.isDailyInterval(iter.interval)){var open=this.chart.market.getOpen();if(open&&dateNow<open){dateNow.setHours(0,0,0,0);if(+dateNow==+iter.begin)historic=false;}}}return historic;};/**
		 * Given a browser time it will return the date in dataZone time. See {@link CIQ.ChartEngine#setTimeZone} for more details.
		 * If no dataZone is set, it will return the original date passed in.
		 * @param {date} browserDate Date in browser time - as in 'new Date();'
		 * @return {date} Date converted to dataZone
		 * @memberof CIQ.ChartEngine
		 * @since 07-2016-16.6
		 */CIQ.ChartEngine.prototype.convertToDataZone=function(browserDate){if((browserDate||browserDate===0)&&this.dataZone){// convert the current time to the dataZone
var tzNow=CIQ.convertTimeZone(browserDate,null,this.dataZone);// remember the the masterData is in local time but really representing the dataZone time.
// now build a browser timezone time using the dataZone time so it will match the offset of the existing data in masterData.
browserDate=new Date(tzNow.getFullYear(),tzNow.getMonth(),tzNow.getDate(),tzNow.getHours(),tzNow.getMinutes(),tzNow.getSeconds(),tzNow.getMilliseconds());}return browserDate;};/**
		 * Returns true if the internal chart periodicity is based off of a daily interval ("day","week" or "month")
		 *
		 * **Please note:** This function is intended to be used on the internal periodicity as stored in the {@link CIQ.ChartEngine#layout}.
		 * See:
		 *  - <a href="CIQ.ChartEngine.html#layout%5B%60periodicity%60%5D">CIQ.ChartEngine.layout.periodicity</a>.
		 *  - <a href="CIQ.ChartEngine.html#layout%5B%60interval%60%5D">CIQ.ChartEngine.layout.interval</a>.
		 *  - <a href="CIQ.ChartEngine.html#layout%5B%60timeUnit%60%5D">CIQ.ChartEngine.layout.timeUnit</a>.
		 * @param  {string}  interval The interval
		 * @return {boolean}          True if it's a daily interval
		 * @memberof CIQ.ChartEngine
		 */CIQ.ChartEngine.isDailyInterval=function(interval){if(interval=="day")return true;if(interval=="week")return true;if(interval=="month")return true;return false;};/**
		 * Returns true if the chart needs new data to conform with the new periodicity.
		 * @param {object} newPeriodicity			newPeriodicity. See {@link CIQ.ChartEngine#setPeriodicity}
		 * @param {number} newPeriodicity.period 	`period` as required by {@link CIQ.ChartEngine#setPeriodicity}
		 * @param {string} newPeriodicity.interval 	`interval` as required by {@link CIQ.ChartEngine#setPeriodicity}
		 * @param {string} newPeriodicity.timeUnit 	`timeUnit` as required by {@link CIQ.ChartEngine#setPeriodicity}
		 * @return {boolean} True if the cart needs data in a new periodicity
		 * @memberof CIQ.ChartEngine
		 * @since 4.0.0
		 */CIQ.ChartEngine.prototype.needDifferentData=function(newPeriodicity){var layout=this.layout;var isDaily=CIQ.ChartEngine.isDailyInterval(newPeriodicity.interval),wasDaily=CIQ.ChartEngine.isDailyInterval(layout.interval);var getDifferentData=false;if(this.dontRoll||!wasDaily){// we are not rolling so monthly and weekly are not the same as daily or any of the intraday... so simply check for different interval.
if(layout.interval!=newPeriodicity.interval)getDifferentData=true;}else{//we are rolling weeekly and monthly and wasn't intraday mode...so check to see if we an still use daily data for the new periodicity
if(isDaily!=wasDaily)getDifferentData=true;}// safety check to deal with defaults.
if(!isDaily&&!newPeriodicity.timeUnit)newPeriodicity.timeUnit='minute';if(!wasDaily&&!layout.timeUnit)layout.timeUnit='minute';if(newPeriodicity.timeUnit!=layout.timeUnit)getDifferentData=true;// !!! Do not change to !==
return getDifferentData;};/**
		 * Returns true if the chartType displays OHL data.
		 * @param  {string} chartType The chart type (layout.chartType)
		 * @return {boolean} True if the chart type only displays close values
		 * @memberof CIQ.ChartEngine
		 * @since 05-2016-10.1 "baseline_delta_mountain" and  "colored_mountain" are also available
		 * @deprecated
		 */CIQ.ChartEngine.chartShowsHighs=function(chartType){console.warn('CIQ.ChartEngine.chartShowsHighs() has been deprecated. Please check one of the appropriate renderer properties instead: stxx.chart.highLowBars, stxx.chart.standaloneBars, or stxx.chart.barsHaveWidth.');if({"line":1,"colored_line":1,"mountain":1,"colored_mountain":1,"baseline_delta":1,"baseline_delta_mountain":1,"histogram":1,"scatterplot":1,"step":1,"colored_step":1}[chartType]==1)return false;return true;};/**
		 * This method does nothing. It is just a known location to put a break point for debugging the kernel.
		 * @private
		 */CIQ.ChartEngine.prototype.debug=function(){};/**
		 * Measures frames per second. Use this from the console.
		 * @param {number} [seconds = 5] Polling interval length
		 * @param {function} cb Callback to invoke when done polling
		 * @private
		 */CIQ.ChartEngine.prototype.fps=function(seconds,cb){seconds=seconds||5;var start=new Date().getTime();var frames=0;var self=this;console.log("Running fps() for "+seconds+" seconds");function render(){var duration=(new Date().getTime()-start)/1000;if(duration>seconds){var fps=frames/duration;console.log("FPS="+fps);if(cb)cb(fps);return;}self.draw();frames++;if(CIQ.ChartEngine.useAnimation){requestAnimationFrame(render);}else{setTimeout(render,0);}}render();};_exports.STXChart=CIQ.ChartEngine;// backward compatibility
/**
		 * @deprecated
		 * @memberOf  CIQ.ChartEngine
		 */CIQ.ChartEngine.DrawingDescriptor={"name":"","render":null,/// function(vector, color, context, highlight (boolean), temporary (boolean), stx)
"intersected":null,/// function(vector, x, y) returns whether coordinates intersect the object
"click":null,/// function(vector, clickNumber) called when mouse click or tap. Return true to end drawing. False to accept more clicks.
"abort":null/// called when user has aborted drawing action (esc key for instance)
};/**
		 * The following is a list of ADVANCED injectable methods.
		 *
		 * **These methods should not be normally called by your code, but rather injections should be used to modify their behavior within the library Kernel.**
		 *
		 * The "Injection API" provides prepend and append functionality to any built-in method.
		 * Essentially what this means is that a developer can write code that will be run either before (prepend) or after (append) any internal {@link CIQ.ChartEngine} function (such as draw() or mouseMove()).
		 * This gives developers the ability to supplement, override or ignore any of the built in functionality.
		 *
		 * Note that you may prepend or append multiple functions. Each injected function is stacked "outward" (daisy-chained) from the core function.
		 *
		 * _prepend >> prepend >> prepend >> function << append << append << append_
		 *
		 * You may prepend/append either to CIQ.ChartEngine.prototype or directly to a CIQ.ChartEngine instance.
		 *
		 * See the {@tutorial Using the Injection API} and [Customization Basics](tutorial-Customization%20Basics.html#injections) tutorials for additional guidance and examples.
		 * @namespace CIQ.ChartEngine.AdvancedInjectable
		 * @example
		 * CIQ.ChartEngine.prototype.append("method_name_goes_here", function(){
		 * 	// do something here
		 * });
		 * @example
		 * CIQ.ChartEngine.prototype.prepend("method_name_goes_here", function(){
		 * 	// do something here
		 * 	// return true; // if you want to exit the method after your injection
		 * 	// return false; // if you want the standard code to follow the prepend
		 * });
		 */ /**
		 * Prepends custom developer functionality to an internal chart member. See [“Injection API"]{@tutorial Using the Injection API}.
		 * @param  {string} o Signature of member
		 * @param  {function} n Callback function, will be called with "apply"
		 * @memberof CIQ.ChartEngine
		 * @since
		 * <br>&bull; 04-2015 You can append either to an {@link CIQ.ChartEngine} instance, or to the prototype. The first will affect only a single
		 * chart while the latter will affect any chart (if you have multiple on the screen).
		 * <br>&bull; 15-07-01 function returns a descriptor which can be passed in to [removeInjection()]{@link CIQ.ChartEngine#removeInjection} to remove it later on.
		 * @return {object} Injection descriptor which can be passed in to {@link CIQ.ChartEngine#removeInjection} to remove it later on.
		 */CIQ.ChartEngine.prototype.prepend=function(o,n){var m="prepend"+o;var prepends;if(this instanceof CIQ.ChartEngine){prepends=this.hasOwnProperty(m)?this[m]:[];this[m]=[n].concat(prepends);}else{prepends=CIQ.ChartEngine.prototype[m]||[];CIQ.ChartEngine.prototype[m]=[n].concat(prepends);}return{method:m,func:n};};/**
		 * Appends custom developer functionality to an internal chart member. See [“Injection API"]{@tutorial Using the Injection API}.
		 * @param  {string} o Signature of member
		 * @param  {function} n Callback function, will be called with "apply"
		 * @memberof CIQ.ChartEngine
		 * @since
		 * <br>&bull; 04-2015 You can append either to an {@link CIQ.ChartEngine} instance, or to the prototype. The first will affect only a single
		 * chart while the latter will affect any chart (if you have multiple on the screen)
		 * <br>&bull; 15-07-01 function returns a descriptor which can be passed in to [removeInjection()]{@link CIQ.ChartEngine#removeInjection} to remove it later on.
		 * @return {object} Injection descriptor which can be passed in to {@link CIQ.ChartEngine#removeInjection} to remove it later on.
		 */CIQ.ChartEngine.prototype.append=function(o,n){var m="append"+o;var appends;if(this instanceof CIQ.ChartEngine){appends=this.hasOwnProperty(m)?this[m]:[];this[m]=appends.concat(n);}else{appends=CIQ.ChartEngine.prototype[m]||[];CIQ.ChartEngine.prototype[m]=appends.concat(n);}return{method:m,func:n};};/**
		 * Removes a specific injection.  One can remove either an instance injection or a prototype injection, depending on how the function is called.
		 * @param  {object} id The injection descriptor returned from {@link CIQ.ChartEngine#prepend} or {@link CIQ.ChartEngine#append}
		 * @since 07/01/2015
		 * @memberof CIQ.ChartEngine
		 */CIQ.ChartEngine.prototype.removeInjection=function(id){var method=id.method;var i;if(this instanceof CIQ.ChartEngine){if(!this[method])return;for(i=0;i<this[method].length;i++){if(this[method][i]==id.func){this[method].splice(i,1);return;}}}else{if(!CIQ.ChartEngine.prototype[method])return;for(i=0;i<CIQ.ChartEngine.prototype[method].length;i++){if(CIQ.ChartEngine.prototype[method][i]==id.func){CIQ.ChartEngine.prototype[method].splice(i,1);return;}}}};/**
		 * Removes any and all prepend and append injections from a specified CIQ.ChartEngine function.
		 * If called as an instance method, will remove the instance injections.
		 * If called as a prototype method, will remove the prototype injections.
		 * @example
		 * stxx.remove("displayChart");  // removes instance injections
		 * CIQ.ChartEngine.prototpye.remove("displayChart");  // removes prototype injections
		 * @param  {string} o Signature of function which has injections to remove
		 * @memberof CIQ.ChartEngine
		 */CIQ.ChartEngine.prototype.remove=function(o){if(this instanceof CIQ.ChartEngine){delete this["append"+o];delete this["prepend"+o];}else{delete CIQ.ChartEngine.prototype["append"+o];delete CIQ.ChartEngine.prototype["prepend"+o];}};CIQ.ChartEngine.registeredContainers=[];// This will contain an array of all of the CIQ container objects
// Note that if you are dynamically destroying containers in the DOM you should delete them from this array when you do so
/**
		 * This code prevents the browser context menu from popping up when right-clicking on a drawing or overlay
		 * @param {object} [e=event] Event
		 * @return {boolean}
		 * @memberOf  CIQ.ChartEngine
		 * @deprecated Use CIQ.ScrollManager.attachRightClick
		 */CIQ.ChartEngine.handleContextMenu=function(e){if(!e)e=event;for(var i=0;i<CIQ.ChartEngine.registeredContainers.length;i++){var stx=CIQ.ChartEngine.registeredContainers[i].stx;if(stx){if(stx.anyHighlighted){if(e.preventDefault)e.preventDefault();return false;}}}};CIQ.ChartEngine.prototype.positionMarkers=function(){};/**
	 * Placeholder for plugin data sets. This array will register each plug in object, complete with their functions.
	 * See our Plug-in {@tutorial Markers} tutorial for complete details and examples on registering and implementing a plug-in.
	 *
	 * If defined, Plug-in instances will be called by their corresponding native functions for the following:
	 * - consolidate ( called by {@link CIQ.ChartEngine#consolidatedQuote})
	 * - drawUnder (called by draw before rendering underlays)
	 * - drawOver (called by draw after rendering overlays)
	 * - {@link CIQ.ChartEngine#setMasterData}
	 * - {@link CIQ.ChartEngine#updateChartData}
	 * - {@link CIQ.ChartEngine#initializeChart}
	 * - {@link CIQ.ChartEngine#createDataSet}
	 * @type array
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.plugins={};/*
	 * remove the items from chart and into stx
	 */ /**
	 * Defines raw html for the chart controls.
	 *
	 * These controls can be overridden by manually placing HTML elements in the chart container with the same ID.
	 *
	 * To completely disable a chart control, programmatically set `controls[controlID]=null` where controlID is the control to disable.
	 * You can also set the main `htmlControls` object to null to disable all controls at once.
	 * @example
	 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), controls: {chartControls:null}});
	 * @example
	 * // before calling newChart(). Disables all controls
	 * stxx.controls=null;
	 * @example
	 * // before calling newChart(). Disables only the chartControls (zoom on and out buttons)
	 * stxx.controls["chartControls"]=null;
	 * @type {object}
	 * @alias htmlControls
	 * @memberof! CIQ.ChartEngine#
	 * @since 5.2.0 Any id can be set to null to disable
	 */CIQ.ChartEngine.htmlControls={/**
			 * controlID for the Annotation Save button (class="stx-btn stx_annotation_save").
			 * @alias htmlControls[`annotationSave`]
			 * @memberof! CIQ.ChartEngine#
			 */"annotationSave":'<span class="stx-btn stx_annotation_save" style="display: none;">save</span>',/**
			 * controlID for the Annotation Cancel button (class="stx-btn stx_annotation_cancel").
			 * @alias htmlControls[`annotationCancel`]
			 * @memberof! CIQ.ChartEngine#
			 */"annotationCancel":'<span class="stx-btn stx_annotation_cancel" style="display: none; margin-left:10px;">cancel</span>',/**
			 * controlID for the Trash Can button / Series delete panel (class="mSticky"). Also see {@link CIQ.ChartEngine#displaySticky}
			 * @alias htmlControls[`mSticky`]
			 * @memberof! CIQ.ChartEngine#
			 * @example
			 * // disable the tool tip that appears when hovering over an overlay ( drawing, line study, etc.)
			 * stxx.controls["mSticky"]=null;
			 */"mSticky":'<div class="stx_sticky"> <span class="mStickyInterior"></span> <span class="mStickyRightClick"><span class="overlayEdit stx-btn" style="display:none"><span>&nbsp;</span></span> <span class="overlayTrashCan stx-btn" style="display:none"><span>&nbsp;</span></span> <span class="mouseDeleteInstructions"><span>(</span><span class="mouseDeleteText">right-click to delete</span><span class="mouseManageText">right-click to manage</span><span>)</span></span></span></div>',/**
			 * controlID for the Horizontal Crosshair line (class="stx_crosshair stx_crosshair_x").
			 * @alias htmlControls[`crossX`]
			 * @memberof! CIQ.ChartEngine#
			 */"crossX":'<div class="stx_crosshair stx_crosshair_x" style="display: none;"></div>',/**
			 * controlID for the Vertical Crosshair line (class="stx_crosshair stx_crosshair_y").
			 * @alias htmlControls[`crossY`]
			 * @memberof! CIQ.ChartEngine#
			 */"crossY":'<div class="stx_crosshair stx_crosshair_y" style="display: none;"></div>',/**
			 * controlID for the zoom-in and zoom-out buttons (class="stx_chart_controls").
			 * @alias htmlControls[`chartControls`]
			 * @memberof! CIQ.ChartEngine#
			 */"chartControls":'<div class="stx_chart_controls" style="display: none; bottom: 22px;"><div class="chartSize"><span class="stx-zoom-out"></span><span class="stx-zoom-in"></span></div></div>',/**
			 * controlID for the home button (class="stx_jump_today home").
			 * The button goes away if you are showing the most current data. See example to manually turn it off.
			 * You can call `stxx.home();` programmatically.	 See {@link CIQ.ChartEngine#home} for more details
			 * @alias htmlControls[`home`]
			 * @memberof! CIQ.ChartEngine#
			 * @example
			 * // disable the home button
			 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
			 * stxx.controls["home"]=null;
			 */"home":'<div class="stx_jump_today" style="display:none"><span></span></div>',/**
			 * controlID for div which floats along the X axis with the crosshair date (class="stx-float-date").
			 * @alias htmlControls[`floatDate`]
			 * @memberof! CIQ.ChartEngine#
			 */"floatDate":'<div class="stx-float-date" style="visibility: hidden;"></div>',/**
			 * controlID for div which controls the handle to resize panels (class="stx-ico-handle").
			 * @alias htmlControls[`handleTemplate`]
			 * @memberof! CIQ.ChartEngine#
			 * @example
			 * // example to hide the handle and prevent resizing of panels
			 * .stx-ico-handle {
			 *		display: none;
			 * }
			 */"handleTemplate":'<div class="stx-ico-handle" style="display: none;"><span></span></div> ',/**
			 * controlID for the div which hosts the panel title (symbol name, study name ) and the study control icons on the on the upper left hand corner of each panel (class="stx-panel-control")
			 * This control can not be disabled, but can be manipulated using the corresponding CSS style classes.
			 * On the main chart panel, `stx-chart-panel` is added to the class definition ( in addition to `stx-panel-title` which just controls the tile) so you can manipulate the entire chart controls section, separately from the rest of the study panel controls.
			 *
			 * @example
			 * // example to hide the chart symbol title
			 * .stx-panel-control.stx-chart-panel .stx-panel-title{
			 * 		display:none;
			 * }
			 *
			 * // for backwards compatibility, this is still supported:
			 * .chart-title{
			 *		display	: none;
			 *	}
			 *
			 * @example
			 * // example to hide all panels titles
			 * .stx-panel-control .stx-panel-title{
			 * 		display:none;
			 * }
			 *
			 * @alias htmlControls[`iconsTemplate`]
			 * @memberof! CIQ.ChartEngine#
			 */"iconsTemplate":'<div class="stx-panel-control"><div class="stx-panel-title"></div><div class="stx-btn-panel"><span class="stx-ico-up"></span></div><div class="stx-btn-panel"><span class="stx-ico-focus"></span></div><div class="stx-btn-panel"><span class="stx-ico-down"></span></div><div class="stx-btn-panel"><span class="stx-ico-edit"></span></div><div class="stx-btn-panel"><span class="stx-ico-close"></span></div></div>',/**
			 * controlID for grabber which sits to right of baseline so it can be moved.
			 * @alias htmlControls[`baselineHandle`]
			 * @memberof! CIQ.ChartEngine#
			 */"baselineHandle":'<div class="stx-baseline-handle" style="display: none;"></div>'};/**
	 * Registers the Chart controls and attaches event handlers to the zoom and home controls.
	 * @private
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.registerHTMLElements=function(){var c=this.chart.container;for(var control in CIQ.ChartEngine.htmlControls){if(typeof this.chart[control]=="undefined"&&typeof this.controls[control]=="undefined"){if(!this.allowZoom&&control=="chartControls")continue;var el=$$$("."+control,c);if(el){this.chart[control]=el;this.controls[control]=el;}else{var rawHTML=CIQ.ChartEngine.htmlControls[control];if(!rawHTML)continue;var div=document.createElement("DIV");div.innerHTML=rawHTML;el=div.firstChild;c.appendChild(el);this.chart[control]=el;this.controls[control]=el;CIQ.appendClassName(el,control);}}}var chartControls=this.controls.chartControls,home=this.controls.home;if(chartControls){var zoomIn=$$$(".stx-zoom-in",chartControls);var zoomOut=$$$(".stx-zoom-out",chartControls);CIQ.safeClickTouch(zoomIn,function(self){return function(e){if(self.allowZoom)self.zoomIn(e);e.stopPropagation();};}(this));CIQ.safeClickTouch(zoomOut,function(self){return function(e){if(self.allowZoom)self.zoomOut(e);e.stopPropagation();};}(this));if(!CIQ.touchDevice){this.makeModal(zoomIn);this.makeModal(zoomOut);}}if(home){CIQ.safeClickTouch(home,function(self){return function(e){e.stopPropagation();// If we are not in historical mode then scroll home
if(!self.isHistoricalMode()){self.home({animate:true});return;}// If in historical mode delete any range the chart might have to prevent setting it again and call newChart
// This will be fast than scrolling and paginating forward as the chart progresses towards the current day
delete self.layout.range;self.newChart(self.chart.symbol,null,null,function(){self.home({animate:false});},null);};}(this));if(!CIQ.touchDevice){this.makeModal(home);}}};/**
	 * Convenience function to attach a modal on mouse events
	 * @param {HTMLElement} Element to attach the modal to
	 * @private
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.makeModal=function(element){var self=this;element.onmouseover=function(event){self.modalBegin();};element.onmouseout=function(event){self.modalEnd();};};/**
	 * Clones a style from a style object (obtained from getComputedStyle). Any styles are converted to camel case. This method automatically
	 * converts from browsers that store styles as numeric arrays rather than as property objects.
	 * @param  {object} styleObject A style object derived from getComputedStyle
	 * @return {object}	A new style object that will match properties
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.cloneStyle=function(styleObject){var rc={};var nativeCamelSupport=false;function capitalize(g){return g[1].toUpperCase();}for(var i in styleObject){var v=styleObject[i];// do *not* check styleObject["backgroundAttachment"]. Android browsers return bogus results.
// instead we iterate through the object
if(i=="backgroundAttachment")nativeCamelSupport=true;// modern browsers contain both camel and hyphenated. We can avoid the camelCase conversion
// logic to save a little bit of startup time
if(nativeCamelSupport){if(v&&v.constructor==String&&isNaN(i)){rc[i]=v;}}else if(!isNaN(i)){// old android browsers fall into here
var x=styleObject.getPropertyValue(v);if(x){//var vcc=v.replace(CIQ.camelCaseRegExp, function (g) { return g[1].toUpperCase(); })
// much more efficient camel case conversion algorithm
v=v.split("-");var ii=0,jj=v.length;var vcc=v[0];while(++ii<jj){vcc+=v[ii].charAt(0).toUpperCase()+v[ii].slice(1);}rc[vcc]=x;}}else{// old internet explorer falls into here
var icc=i.replace(CIQ.camelCaseRegExp,capitalize);rc[icc]=v;}}return rc;};/**
	 * Returns an object containing the class style given a css class name (used by plotLine() for instance). A caching mechanism is used
	 * for performance. If styles are changed dynamically then use CIQ.ChartEngine.prototype.clearStyles to reset.
	 * @param  {string} className The CSS class name to get the styles
	 * @return {object}			  An object containing each style, in camel case.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.canvasStyle=function(className){var s=this.styles[className];if(!s){var div=document.createElement("div");// Create a dummy div
div.className=className;this.container.appendChild(div);var styles=getComputedStyle(div);s=this.styles[className]=this.cloneStyle(styles);this.container.removeChild(div);if(!styles){// css not initialized, possibly hidden iframe in firefox
this.styles[className]=null;}}return s;};/**
	 * Detects if a string is a valid CSS color and if so returns that string. Otherwise it
	 * returns a style object, assuming that the string is a classname.
	 * @param  {string} str Either a color or a className
	 * @return {object}		Either the color or a class object
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.colorOrStyle=function(str){if(str.indexOf("#")!=-1)return str;if(str.indexOf("(")!=-1)return str;// rgb() or rgba()
if(str=="transparent")return str;return this.canvasStyle(str);};/**
		Call this to remove all of the loaded canvas styles, for instance after loading a new css file
		@memberof CIQ.ChartEngine
	*/CIQ.ChartEngine.prototype.clearStyles=function(){this.styles={};};/**
	* Convenience method to programmatically set or change a style on the chart.
	*
	* To see immediate results, call {@link CIQ.ChartEngine#draw} once this method is used.
	*
	* Primarily used in the {@link CIQ.ThemeHelper} to programmatically override defaults CSS colors to create custom themes.
	*
	* For more details on customizing colors in the chart see {@tutorial Chart Styles and Types}.
	* @param  {string} obj The object whose style you wish to change (stx_grid, stx_xaxis, etc)
	* @param  {string} attribute The style name of the object you wish to change. It will accept hyphenated or camel case formats.
	* @param  {string} value The value to assign to the attribute
	* @example
	* stxx.setStyle("stx_candle_up","borderLeftColor","green");
	* stxx.setStyle("stx_candle_down","borderLeftColor","red");
	* stxx.draw();
	* @memberof CIQ.ChartEngine
	*/CIQ.ChartEngine.prototype.setStyle=function(obj,attribute,value){if(!this.styles[obj]){this.canvasStyle(obj);}if(!this.styles[obj])this.styles[obj]={};this.styles[obj][CIQ.makeCamelCase(attribute)]=value;};/**
	 * Sets canvas font context given a css class name. Supports fontStyle, fontWeight, fontSize and fontFamily.
	 * @param  {string} className The name of the CSS class to pull font from
	 * @param  {external:CanvasRenderingContext2D} ctx		 An HTML Context
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.canvasFont=function(className,ctx){if(!ctx)ctx=this.chart.context;var style=this.canvasStyle(className);if(!style)return;var result=style.fontStyle+" "+style.fontWeight+" "+style.fontSize+" "+style.fontFamily;if(result.indexOf("undefined")==-1){ctx.font=result;}else{this.styles[className]=null;console.log("bad css style for class "+className);}};/**
	 * Sets color and globalAlpha (opacity) for the canvas given a css class name. Call this before drawing on the canvas.
	 * @param  {string} className A CSS style. Supports "color" and "opacity"
	 * @param  {external:CanvasRenderingContext2D} [ctx]	   An HTML Context
	 * @example
	 * stxx.canvasColor("myStyle");
	 * // draw a line using canvas primitives, will be color defined in .myStyle
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 Allow color:"transparent" to pass through and not use defaultColor.  Instead, use defaultColor if there is no style.color.
	 */CIQ.ChartEngine.prototype.canvasColor=function(className,ctx){if(!ctx)ctx=this.chart.context;var style=this.canvasStyle(className);if(!style)return;var color=style.color;if(!color)color=this.defaultColor;ctx.globalAlpha=1;ctx.fillStyle=color;ctx.strokeStyle=color;var opacity=style.opacity;if(typeof opacity!="undefined")ctx.globalAlpha=opacity;};/**
	 * Returns the font size defined by the requested class name. Defaults to 12 if undefined. Use this to determine vertical heights so that lettering isn't clipped.
	 * @param  {string} className Class name
	 * @return {number}			  The font size (px is stripped)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.getCanvasFontSize=function(className){var s=this.canvasStyle(className);var fs=s.fontSize;if(!fs)fs="12";return parseInt(CIQ.stripPX(fs),10);};/**
	 * Returns the canvas color specified in the class name
	 * @param  {string} className The class name
	 * @return {string}			  The color specified (May be undefined if none specified)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.getCanvasColor=function(className){var s=this.canvasStyle(className);return s.color;};/**
	 * **Deprecated.**  Use {@link CIQ.ChartEngine.XAxis#noDraw} and {@link CIQ.ChartEngine.YAxis#noDraw} instead.
	 *
	 * Override this function to hide the date which floats along the X axis when crosshairs are enabled. Return `true` to hide the date or `false` to display.
	 * @memberof CIQ.ChartEngine
	 * @deprecated as of 6.0.0 no longer used in library.
	 */CIQ.ChartEngine.hideDates=function(){return false;};/**
	 * Runs the prepend injections. A prepend function that returns true will short circuit any proceeding prepend functions, and the core functionality.
	 * @private
	 * @param  {string} o	 The function name
	 * @param  {arguments} args The arguments to the function
	 * @param  {object} self The this object
	 * @return {boolean}	  Returns true if any prepend function returns true.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.runPrepend=function(o,args,self){var n="prepend"+o;var prepends=this.hasOwnProperty(n)?this[n]:[];prepends=prepends.concat(CIQ.ChartEngine.prototype[n]||[]);if(!prepends.length)return false;if(!self)self=this;for(var i=0;i<prepends.length;i++){var rv=prepends[i].apply(self,args);if(rv)return rv;}return false;};/**
	 * Runs the append injections. An append function that returns true will short circuit any proceeding append functions (but not the core functionality since that has already ocurred).
	 * @private
	 * @param  {string} o	 The function name
	 * @param  {arguments} args The arguments to the function
	 * @param  {object} self The this object
	 * @return {boolean}	  Returns true if any append function returns true.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.runAppend=function(o,args,self){var n="append"+o;var appends=this.hasOwnProperty(n)?this[n]:[];appends=appends.concat(CIQ.ChartEngine.prototype[n]||[]);if(!appends.length)return false;if(!self)self=this;for(var i=0;i<appends.length;i++){var rv=appends[i].apply(self,args);if(rv)return rv;}return false;};/**
	 * Registers a drawing tool. This is typically done using lazy eval.
	 * @private
	 * @param  {string} name Name of drawing tool
	 * @param  {function} func Constructor for drawing tool
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.registerDrawingTool=function(name,func){CIQ.ChartEngine.drawingTools[name]=func;};/**
	 * @memberOf  CIQ.ChartEngine
	 * @deprecated
	 */CIQ.ChartEngine.prototype.createBlock=function(left,width,top,height,className,context){if(!context)context=this.chart.context;if(typeof height=="undefined"){return;}this.canvasColor(className,context);context.fillRect(left,top,width,height);context.globalAlpha=1;};/**
	 * Legacy method used to internally dispatch a registered event whenever a change to layout, drawings or theme occurs.
	 * Events must be registered using {@link CIQ.ChartEngine#addDomEventListener} for "layout", "drawing", "theme" and "preferences".
	 *
	 * This is simply a proxy method that calls the corresponding {@link CIQ.ChartEngine#dispatch} method.
	 *
	 * Developers creating their own custom functionality should call {@link CIQ.ChartEngine#dispatch} instead.
	 *
	 * @param  {string} change Type of change that occurred. Any string that {@link CIQ.ChartEngine#changeCallback} has been programmed to handle is valid.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.changeOccurred=function(change){if(this.currentlyImporting)return;// changes actually occurring because of an import, not user activity
if(this.changeCallback){console.warn('CIQ.ChartEngine.changeCallback has been deprecated. Please use addEventListener()');this.changeCallback(this,change);}var obj={stx:this,symbol:this.chart.symbol,symbolObject:this.chart.symbolObject,layout:this.layout,drawings:this.drawingObjects};if(change=="layout"){this.dispatch("layout",obj);}else if(change=="vector"){this.dispatch("drawing",obj);}else if(change=="theme"){this.dispatch("theme",obj);}else if(change=="preferences"){this.dispatch("preferences",obj);}};/**
	 * Sets the base chart type for the primary symbol.
	 * @param {string} chartType The chart type. See <a href="CIQ.ChartEngine.html#layout%5B%60chartType%60%5D">CIQ.ChartEngine.layout.chartType</a> for valid options.
	 *
	 * See {@tutorial Chart Styles and Types} for more details.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setChartType=function(chartType){var layout=this.layout,chart=this.chart;if(layout.aggregationType!="ohlc"){layout.aggregationType="ohlc";if(chart.canvas)this.createDataSet();}layout.chartType=chartType;this.setMainSeriesRenderer(true);chart.defaultChartStyleConfig={type:chartType};if(this.displayInitialized)this.draw();this.changeOccurred("layout");};/**
	 * Sets the base aggregation type for the primary symbol.
	 * @param {string} chartType The chart type. See <a href="CIQ.ChartEngine.html#layout%5B%60aggregationType%60%5D">CIQ.ChartEngine.layout.aggregationType</a> for valid options.
	 *
	 * See {@tutorial Chart Styles and Types} for more details.
	 * See the [Overriding Defaults Section](tutorial-Chart Styles and Types.html#OverridingDefaults) for details on how to override aggregation type defaults.
	 * @param {string} aggregationType The chart type
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setAggregationType=function(aggregationType){this.layout.chartType='candle';var chart=this.chart;if(chart.baseline.userLevel!==false){chart.baseline.userLevel=chart.baseline.defaultLevel;chart.panel.yAxis.scroll=CIQ.ChartEngine.YAxis.prototype.scroll;}this.layout.aggregationType=aggregationType;this.setMainSeriesRenderer();if(chart.canvas){this.createDataSet();this.draw();}this.changeOccurred("layout");};/**
	 * Sets the chart scale.
	 * @param {string} chartScale "log", "linear", "percent", "relative".
	 *  - Setting to "percent" or "relative" will call {@link CIQ.ChartEngine#setComparison} even if no comparisons are present; which sets `stxx.chart.isComparison=true`.
	 *    - To check if scale is in percentage mode use `stxx.chart.isComparison` instead of using the {@link CIQ.ChartEngine#chartScale} value.
	 *  - See {@link CIQ.Comparison.initialPrice} for details on how to set basis for "relative" scale.
	 * @memberof CIQ.ChartEngine
	 * @since 4.1.0 added "percent"
	 * @since 5.1.0 added "relative"
	 */CIQ.ChartEngine.prototype.setChartScale=function(chartScale){var chart=this.chart;var needsTransform={"percent":true,"relative":true};if(!chartScale)chartScale="linear";if(needsTransform[chartScale]){this.setComparison(chartScale,chart,CIQ.Comparison.initialPrice);}else if(needsTransform[this.layout.chartScale]){this.setComparison(false,chart);}this.layout.chartScale=chartScale;if(chart.canvas)this.draw();this.changeOccurred("layout");};/**
	 * Sets the charts to adjusted values rather than standard values. Adjusted values are calculated outside of the chart engine (and may be splits, dividends or both).
	 * When charts are using adjusted values, a computed ratio for each tick is used for price to pixel calculations which keeps drawings accurate
	 * @param {boolean} data True to use adjusted values (Adj_Close), false to use Close values
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setAdjusted=function(data){this.layout.adj=data;if(this.chart.canvas){this.createDataSet();this.draw();}this.changeOccurred("layout");};/**
	 * Turns on or off the volume underlay indicator
	 * @param {boolean} data True to turn on the underlay
	 * @memberof CIQ.ChartEngine
	 * @deprecated
	 */CIQ.ChartEngine.prototype.setVolumeUnderlay=function(data){this.layout.volumeUnderlay=data;if(this.chart.canvas)this.draw();this.changeOccurred("layout");};/**
	 * Exports all of the drawings on the chart(s) so that they can be saved to an external database and later reconstructed.
	 *
	 * Note: This function has been renamed {@link CIQ.ChartEngine#exportDrawings}.
	 *
	 * @see {@link CIQ.ChartEngine#exportDrawings}
	 * @see {@link CIQ.ChartEngine#importDrawings}
	 * @return {array} An array of objects representing each drawing
	 * @memberof CIQ.ChartEngine
	 * @deprecated since 3.0.0
	 */CIQ.ChartEngine.prototype.serializeDrawings=function(){console.warn('CIQ.ChartEngine.serializeDrawings() has been deprecated. Please use exportDrawings()');return this.exportDrawings();};/**
	 * Exports all of the drawings on the chart(s) so that they can be saved to an external database and later imported with {@link CIQ.ChartEngine#importDrawings}.
	 * @see {@link CIQ.ChartEngine#importDrawings}
	 * @return {array} An array of objects representing each drawing
	 * @memberof CIQ.ChartEngine
	 * @since 3.0.0 Replaces serializeDrawings
	 */CIQ.ChartEngine.prototype.exportDrawings=function(){var arr=[];for(var i=0;i<this.drawingObjects.length;i++){arr.push(this.drawingObjects[i].serialize());}return arr;};/**
	 * Causes all drawings to delete themselves. External access should be made through @see CIQ.ChartEngine.prototype.clearDrawings
	 * @param {boolean} deletePermanent Set to false to not delete permanent drawings
	 * @private
	 * @memberof CIQ.ChartEngine
	 * @since 6.0.0 deletePermanent argument added
	 */CIQ.ChartEngine.prototype.abortDrawings=function(deletePermanent){if(deletePermanent!==false)deletePermanent=true;for(var i=this.drawingObjects.length-1;i>=0;i--){var drawing=this.drawingObjects[i];drawing.abort(true);if(deletePermanent||!drawing.permanent)this.drawingObjects.splice(i,1);}};/**
	 * Imports drawings from an array originally created by {@link CIQ.ChartEngine#serializeDrawings}.
	 *
	 * Note: This function and serializeDrawings have been renamed {@link CIQ.ChartEngine#importDrawings} and {@link CIQ.ChartEngine#exportDrawings} respectively.
	 *
	 * To immediately render the reconstructed drawings, you must call `draw()`.
	 * See {@tutorial Using and Customizing Drawing Tools} for more details.
	 * @see {@link CIQ.ChartEngine#exportDrawings}
	 * @see {@link CIQ.ChartEngine#importDrawings}
	 * @param  {array} arr An array of serialized drawings
	 * @memberof CIQ.ChartEngine
	 * @deprecated since 4.0.0
	*/CIQ.ChartEngine.prototype.reconstructDrawings=function(arr){console.warn('CIQ.ChartEngine.reconstructDrawings() has been deprecated. Please use importDrawings()');this.importDrawings(arr);};/**
	 * Imports drawings from an array originally created by {@link CIQ.ChartEngine#exportDrawings}.
	 * To immediately render the reconstructed drawings, you must call `draw()`.
	 * See {@tutorial Using and Customizing Drawing Tools} for more details.
	 *
	 * **Important:**
	 * Calling this function in a way that will cause it to run simultaneously with [importLayout]{@link CIQ.ChartEngine#importLayout}
	 * will damage the results on the layout load. To prevent this, use the {@link CIQ.ChartEngine#importLayout} or {@link CIQ.ChartEngine#newChart} callbacks.
	 *
	 * @see {@link CIQ.ChartEngine#exportDrawings}
	 * @param  {array} arr An array of serialized drawings
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 Replaces reconstructDrawings
	 * @example
	 * // programmatically add a rectangle
	 * stxx.importDrawings([{"name":"rectangle","pnl":"chart","col":"transparent","fc":"#7DA6F5","ptrn":"solid","lw":1.1,"d0":"20151216030000000","d1":"20151216081000000","tzo0":300,"tzo1":300,"v0":152.5508906882591,"v1":143.3385829959514}]);
	 * // programmatically add a vertical line
	 * stxx.importDrawings([{"name":"vertical","pnl":"chart","col":"transparent","ptrn":"solid","lw":1.1,"v0":147.45987854251013,"d0":"20151216023000000","tzo0":300,"al":true}]);
	 * // now render the reconstructed drawings
	 * stxx.draw();
	 */CIQ.ChartEngine.prototype.importDrawings=function(arr){if(!CIQ.Drawing)return;for(var i=0;i<arr.length;i++){var rep=arr[i];if(rep.name=="fibonacci")rep.name="retracement";var Factory=CIQ.ChartEngine.drawingTools[rep.name];if(!Factory){if(CIQ.Drawing[rep.name]){Factory=CIQ.Drawing[rep.name];CIQ.ChartEngine.registerDrawingTool(rep.name,Factory);}}if(Factory){var drawing=new Factory();drawing.reconstruct(this,rep);this.drawingObjects.push(drawing);}}};/**
	 * Clears all the drawings on the chart. (Do not call abortDrawings directly).
	 * @param {boolean} cantUndo Set to true to make this an "non-undoable" operation
	 * @param {boolean} deletePermanent Set to false to not delete permanent drawings
	 * @memberof CIQ.ChartEngine
	 * @since 6.0.0 deletePermanent argument added
	 */CIQ.ChartEngine.prototype.clearDrawings=function(cantUndo,deletePermanent){if(deletePermanent!==false)deletePermanent=true;var before=CIQ.shallowClone(this.drawingObjects);this.abortDrawings(deletePermanent);if(cantUndo){this.undoStamps=[];}else{this.undoStamp(before,CIQ.shallowClone(this.drawingObjects));}this.changeOccurred("vector");//this.createDataSet();
//this.deleteHighlighted(); // this will remove any stickies and also call draw()
// deleteHighlighted was doing too much, so next we call 'just' what we need.
this.cancelTouchSingleClick=true;CIQ.clearCanvas(this.chart.tempCanvas,this);this.draw();var mSticky=this.controls.mSticky;if(mSticky){mSticky.style.display="none";mSticky.children[0].innerHTML="";}};/**
	 * Creates a new drawing of the specified type with the specified parameters. See {@tutorial Using and Customizing Drawing Tools} for more details.
	 * @param  {string} type	   Drawing name
	 * @param  {object} parameters Parameters that describe the drawing
	 * @return {CIQ.Drawing}			A drawing object
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.createDrawing=function(type,parameters){if(!CIQ.Drawing)return;var drawing=new CIQ.Drawing[type]();drawing.reconstruct(this,parameters);//set default configs if not provided
var config=new CIQ.Drawing[type]();config.stx=this;config.copyConfig();for(var prop in config){drawing[prop]=drawing[prop]||config[prop];}this.drawingObjects.push(drawing);this.draw();return drawing;};/**
	 * Removes the drawing. Drawing object should be one returned from {@link CIQ.ChartEngine#createDrawing}. See {@tutorial Using and Customizing Drawing Tools} for more details.
	 * @param  {object} drawing Drawing object
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.removeDrawing=function(drawing){for(var i=0;i<this.drawingObjects.length;i++){if(this.drawingObjects[i]==drawing){this.drawingObjects.splice(i,1);this.changeOccurred("vector");this.draw();return;}}};/**
	 * Returns a date (in yyyymmddhhmm form) given a tick (location in the dataSet).
	 * If the tick lies outside of the dataSet then the date will be arrived at algorithmically by calculating into the past or future.
	 * @param  {number} tick  Location in the dataSet
	 * @param  {CIQ.ChartEngine.Chart} [chart] A chart object
	 * @param  {boolean} [nativeDate] True to return as date object otherwise returns in yyyymmddhhmm form
	 * @return {string}		  The date form dictated by native param
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.dateFromTick=function(tick,chart,nativeDate){if(!chart)chart=this.chart;var data_len=chart.dataSet.length;var dt;var iter;var result;var addedTempDate=false;// if empty chart then add current date so this function supports initializing an empty chart in quotefeed
if(data_len===0){chart.dataSet[0]={};chart.dataSet[0].DT=new Date();data_len=chart.dataSet.length;addedTempDate=true;}if(tick<0){iter=this.standardMarketIterator(chart.dataSet[0].DT);dt=iter.previous(Math.abs(tick));}else if(tick>=data_len){iter=this.standardMarketIterator(chart.dataSet[data_len-1].DT);dt=iter.next(tick-(data_len-1));}else{dt=chart.dataSet[tick].DT;}if(nativeDate){result=new Date(dt.getTime());}else{result=CIQ.yyyymmddhhmm(dt);}if(addedTempDate){delete chart.dataSet[0].DT;}return result;};/**
	 * Calculates and sets the value of zoom and scroll for y-axis based on yAxis.initialMarginTop and yAxis.initialMarginBottom.
	 * This method will automatically translate those into starting scroll and zoom factors.
	 * If the combined initial values are greater than the y-axis height, then both zoom and scroll will be reset to 0;
	 * @param {CIQ.ChartEngine.YAxis} yAxis The yAxis to reset
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateYAxisMargins=function(yAxis){yAxis.zoom=yAxis.initialMarginTop+yAxis.initialMarginBottom;yAxis.scroll=(yAxis.initialMarginTop-yAxis.initialMarginBottom)/2;if(yAxis.zoom>yAxis.height){//console.log('calculateYAxisMargins adjusted zoom and scroll to 0. zoom',yAxis.zoom,'  |  height=',yAxis.height);
yAxis.zoom=0;// If the zoom is greater than the height then we'll have an upside down y-axis
yAxis.scroll=0;}};/**
	 * Returns the minimum spacing required between the latest tick on the chart and the price label.
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {string} chartType	The chart rendering type (candle, line, etc)
	 * @returns  {number} pixels to offset
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 * @since 5.1.0 removed stx param
	 */CIQ.ChartEngine.prototype.getLabelOffsetInPixels=function(chart,chartType){var isLineType=(!this.mainSeriesRenderer||!this.mainSeriesRenderer.standaloneBars)&&!this.standaloneBars[chartType];if(this.yaxisLabelStyle=="roundRectArrow"&&!(isLineType&&this.extendLastTick&&chart.yaxisPaddingRight!==0)){// Special case when we have a pointy arrow we want the current tick to be right
// at the arrow point, not buried underneath it
// unless the developer set the flags to extend the line/mountain to the very edge of the chart.
// or unless the y-axis is overlaying the chart
var margin=3;// should be the same from createYAxisLabel
var height=this.getCanvasFontSize("stx_yaxis")+margin*2;return height*0.66;}return 0;};/**
	 * Returns the chart to the home position, where the most recent tick is on the right side of the screen.
	 *
	 * By default the home() behavior is to maintain the white space currently on the right side of the chart.
	 * To align the chart to the right edge instead, set the white space to 0  by calling: `stxx.home({whitespace:0});` or `stxx.home({maintainWhitespace:false});`
	 *
	 * @param {object} params Object containing the following keys:
	 * @param {boolean} [params.animate = false] Set to true to animate a smooth scroll to the home position.
	 * @param {boolean} [params.maintainWhitespace = true] Set to `true` to maintain the currently visible white space on the right of the chart, or to `false` to align to the right edge.
	 * @param {number} [params.whitespace = 0] Override to force a specific amount of whitespace on the right of the chart.
	 *		This will take precedence over `params.maintainWhitespace`
	 * @param {CIQ.ChartEngine.Chart} [params.chart] Chart to scroll home. If not defined, all chart objects will be returned to the home position.
	 * @memberof CIQ.ChartEngine
	 * @example
	 * stxx.home({maintainWhitespace:false});
	 */CIQ.ChartEngine.prototype.home=function(params){this.swipe.amplitude=0;var layout=this.layout;if(_typeof(params)!="object"){// backward compatibility
params={maintainWhitespace:params};}function resetPanelZooms(stx){for(var p in stx.panels){var yAxes=stx.panels[p].yaxisLHS.concat(stx.panels[p].yaxisRHS);for(var a=0;a<yAxes.length;a++){stx.calculateYAxisMargins(yAxes[a]);}}}function scrollToCallback(self,chart,exactScroll){return function(){resetPanelZooms(self);chart.scroll=exactScroll;self.draw();};}if(typeof params.maintainWhitespace=="undefined")params.maintainWhitespace=true;// maintain the whitespace unless set to false
this.cancelTouchSingleClick=true;if(!this.chart.dataSet||!this.chart.dataSet.length){// to clear out anything that may have been on the screen. Otherwise we still show stale data.
this.draw();return;}this.micropixels=0;var barsDisplayedOnScreen=Math.floor(this.chart.width/layout.candleWidth);for(var chartName in this.charts){var chart=this.charts[chartName];if(params.chart&&params.chart!=chart)continue;var whitespace=0;if(params.maintainWhitespace&&this.preferences.whitespace>=0)whitespace=this.preferences.whitespace;if(params.whitespace||params.whitespace===0)whitespace=params.whitespace;var leftMargin=this.getLabelOffsetInPixels(chart,layout.chartType);if(leftMargin>whitespace)whitespace=leftMargin;var exactScroll=Math.min(barsDisplayedOnScreen,chart.dataSet.length);// the scroll must be the number of bars you want to see.
if(this.chart.allowScrollPast)exactScroll=barsDisplayedOnScreen;// If whitespace allowed on left of screen
this.micropixels=this.chart.width-exactScroll*layout.candleWidth-whitespace;this.preferences.whitespace=whitespace;while(this.micropixels>layout.candleWidth){// If micropixels is larger than a candle then scroll back further
exactScroll++;this.micropixels-=layout.candleWidth;}while(this.micropixels<0){exactScroll--;this.micropixels+=layout.candleWidth;}this.micropixels-=layout.candleWidth;exactScroll++;if((!this.mainSeriesRenderer||!this.mainSeriesRenderer.standaloneBars)&&!this.standaloneBars[layout.chartType])this.micropixels+=layout.candleWidth/2;// bar charts display at beginning of candle
if(params.animate){var self=this;this.scrollTo(chart,exactScroll,scrollToCallback(self,chart,exactScroll));}else{chart.scroll=exactScroll;resetPanelZooms(this);}}this.draw();};/**
	 * Whether the chart is scrolled to a home position.
	 *
	 * @returns {boolean} true when the scroll position shows the last tick of the dataSet
	 * @memberof CIQ.ChartEngine
	 * @since 2016-06-21
	 */CIQ.ChartEngine.prototype.isHome=function(){var chart=this.chart,dataSet=chart.dataSet,animating=chart.animatingHorizontalScroll;return this.pixelFromTick(dataSet.length-(animating?2:1),chart)<chart.width+chart.panel.left;//return ((this.chart.scroll-1)*this.layout.candleWidth)+this.micropixels<=this.chart.width+1;
};/**
	 * Returns the tick (position in dataSet) given the requested date.
	 *
	 * The date does not need to match exactly. If the date lies between ticks then the earlier will be returned by default.
	 *
	 * @param  {string} dt	  Date in string format
	 * @param  {CIQ.ChartEngine.Chart} [chart] Chart object
	 * @param  {number} [adj] Timezone adjustment in minutes to apply to date before getting tick
	 * @param  {boolean} [forward] Switch to return the next tick as opposed to the previous, in case an exact match is not found
	 * @return {number}		  The tick location
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.tickFromDate=function(dt,chart,adj,forward){if(!chart)chart=this.chart;if(!chart.dataSet||!chart.dataSet.length)return 0;if(!adj)adj=0;if(!chart){chart=this.chart;}var target=dt.constructor==Date?dt:CIQ.strToDateTime(dt);// This line is used by drawings which are saved with a gmt offset.
if(!CIQ.ChartEngine.isDailyInterval(this.layout.interval))target.setMinutes(target.getMinutes()+adj);var ms=target.getTime();var total=chart.tickCache[ms];if(total||total===0){return total+(forward?1:0);}var firstDate=chart.dataSet[0].DT;var lastDate=chart.dataSet[chart.dataSet.length-1].DT;if(target>=firstDate&&target<=lastDate){var begin=0,end=chart.dataSet.length,attempts=0;while(++attempts<100){var i=Math.floor((end+begin)/2);var d=chart.dataSet[i].DT;if(+d==+target){chart.tickCache[ms]=i;return i;}if(d<target){begin=i;}if(d>target){if(chart.dataSet[i-1].DT<target){chart.tickCache[ms]=i-1;return chart.tickCache[ms]+(forward?1:0);}if(+chart.dataSet[i-1].DT==+target){// efficiency
chart.tickCache[ms]=i-1;return i-1;}end=i;}}if(attempts>=100){console.log("!!!Warning: tickFromDate() did not find match.");return chart.dataSet.length;}}var intoThePast=target<firstDate;// start at beginning of chart and work backward into the past, or end of chart and into the future
var start=intoThePast?firstDate:lastDate;var iter=this.standardMarketIterator(start);var ticks=iter.futureTick({end:target});total=intoThePast?ticks*-1:chart.dataSet.length-1+ticks;chart.tickCache[ms]=total;return total;};/**
	 * This is the object stored in CIQ.ChartEngine.chart.xaxis array which contains information regarding an x-axis tick.
	 * See {@link CIQ.ChartEngine.AdvancedInjectable#createXAxis} for more detail.
	 * @constructor
	 * @param {number} hz Horizontal position of center of label in pixels. Any elements with negative positions will be off the edge of the screen, and are only maintained to help produce a more predictable display as the chart is zoomed and paned.
	 * @param {string} grid Either "line" or "boundary" depending on whether the label should be a date/time boundary or just a grid line
	 * @param {string} text The text to display in the label
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.XAxisLabel=function(hz,grid,text){this.hz=hz;this.grid=grid;this.text=text;};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Call this method to create the X axis (date axis). Uses {@link CIQ.ChartEngine#createTickXAxisWithDates}.
	 *
	 * Use css styles `stx_xaxis` to control colors and fonts for the dates. <br>
	 * Use css styles `stx_xaxis_dark` to control **color only** for the divider dates. <br>
	 * Use css styles `stx_grid_border`, `stx_grid` and `stx_grid_dark` to control the grid line colors. <br>
	 * The dark styles are used for dividers; when the grid changes to a major point such as the start of a new day on an intraday chart, or a new month on a daily chart.
	 *
	 * See {@tutorial Custom X-axis} and {@tutorial CSS Overview} for additional details.
	 *
	 * @param  {CIQ.ChartEngine.Chart} chart	The chart to create an x-axis for
	 * @return {CIQ.ChartEngine.XAxisLabel[]}			axisRepresentation that can be passed in to {@link CIQ.ChartEngine#drawXAxis}
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias createXAxis
	 *
	 */CIQ.ChartEngine.prototype.createXAxis=function(chart){//TODO caching of xaxis probably in this function.
if(chart.dataSegment.length<=0)return null;if(chart.xAxis.noDraw)return null;var arguments$=[chart];var axisRepresentation=this.runPrepend("createXAxis",arguments$);if(axisRepresentation)return axisRepresentation;if(this.mainSeriesRenderer&&this.mainSeriesRenderer.createXAxis){axisRepresentation=this.mainSeriesRenderer.createXAxis(chart);}else{axisRepresentation=this.createTickXAxisWithDates(chart);}this.headsUpHR();this.runAppend("createXAxis",arguments$);return axisRepresentation;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Resets the YAxis width to the last known user value (or default).
	 * <br>Called internally whenever the YAxis label width might change.
	 *
	 * @param {Object} [params]
	 * @param {boolean} [params.noRecalculate=false] when true {@link CIQ.ChartEngine#calculateYAxisPositions} will never be called
	 * @param {string} [params.chartName] only reset dynamic values for YAxis of the given chart.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias resetDynamicYAxis
	 * @see {@link CIQ.ChartEngine.Chart#dynamicYAxis} the flag to enable this feature.
	 * @since 6.0.0
	 */CIQ.ChartEngine.prototype.resetDynamicYAxis=function(params){if(this.runPrepend("resetDynamicYAxis",arguments))return;var resetting=false;for(var panelName in this.panels){var panel=this.panels[panelName];if(params&&params.chartName&&panel.chart.name!==params.chartName)continue;if(!panel.yaxisLHS||!panel.yaxisRHS)continue;var yaxis=panel.yaxisLHS.concat(panel.yaxisRHS);for(var i=0;i<yaxis.length;i++){if(yaxis[i]._dynamicWidth){// NaN is falsy, see the {@link CIQ.ChartEngine.YAxis#width} getter for context
yaxis[i]._dynamicWidth=NaN;resetting=true;}}}if(resetting&&(!params||!params.noRecalculate)){this.calculateYAxisPositions();}this.runAppend("resetDynamicYAxis",arguments);};/**
	 * Change the yAxis.top and yAxis.bottom to create drawing space
	 * for the xAxis.
	 *
	 * @param {CIQ.ChartEngine.Panel} panel	Panel to adjust, used to check location
	 * @param {CIQ.ChartEngine.YAxis} yAxis	yAxis to adjust
	 * @private
	 */CIQ.ChartEngine.prototype.adjustYAxisHeightOffset=function(panel,yAxis){var topOffset=yAxis.topOffset,bottomOffset=yAxis.bottomOffset;//If the sum of bottomOffset and topOffset is larger than the panel height reset them
if(topOffset+bottomOffset>panel.height){console.log("The sum of yAxis.topOffset and yAxis.bottomOffset cannot be greater than the panel height. Both values will be reset to 0.");yAxis.bottomOffset=0;yAxis.topOffset=0;}if(!this.xaxisHeight&&this.xaxisHeight!==0){this.xaxisHeight=this.getCanvasFontSize("stx_xaxis")+4;if(this.chart.xAxis.displayBorder||this.axisBorders)this.xaxisHeight+=3;}var panelHasTheAxis=this.xAxisAsFooter&&panel.bottom>this.chart.canvasHeight-this.xaxisHeight||!this.xAxisAsFooter&&panel==this.chart.panel;if(panelHasTheAxis)bottomOffset+=this.xaxisHeight;yAxis.top=panel.top+topOffset;yAxis.bottom=panel.bottom-bottomOffset;};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 *
	 * Draws the grid for the y-axis.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias plotYAxisGrid
	 */CIQ.ChartEngine.prototype.plotYAxisGrid=function(panel){if(this.runPrepend("plotYAxisGrid",arguments))return;var context=this.chart.context;if(panel.yAxis.yAxisPlotter){panel.yAxis.yAxisPlotter.draw(context,"grid");}this.runAppend("plotYAxisGrid",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 *
	 * Plots the text on the y-axis.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias plotYAxisText
	 */CIQ.ChartEngine.prototype.plotYAxisText=function(panel){if(this.runPrepend("plotYAxisText",arguments))return;this.canvasFont("stx_yaxis");this.canvasColor("stx_yaxis");var context=this.chart.context;context.textBaseline="middle";function drawText(yAxis){if(!yAxis.yAxisPlotter)return;if(yAxis.noDraw||!yAxis.width)return;if(yAxis.justifyRight)context.textAlign="right";else if(yAxis.justifyRight===false)context.textAlign="left";yAxis.yAxisPlotter.draw(context,"text");context.textBaseline="alphabetic";context.textAlign="left";}var arr=panel.yaxisLHS,i;context.textAlign="right";for(i=0;i<arr.length;i++){drawText(arr[i]);}arr=panel.yaxisRHS;context.textAlign="left";for(i=0;i<arr.length;i++){drawText(arr[i]);}this.runAppend("plotYAxisText",arguments);};/**
	 * Returns the appropriate number of decimal points to show for a given priceTick (distance between two ticks)
	 * @param  {number} priceTick The distance between two ticks
	 * @return {number}		  The number of decimal places appropriate to show
	 * @memberof CIQ.ChartEngine
	 * @since 5.2.0
	 */CIQ.ChartEngine.prototype.decimalPlacesFromPriceTick=function(priceTick){if(priceTick<0.0001)return 8;if(priceTick<0.01)return 4;if(priceTick<0.1)return 2;if(priceTick<1)return 1;return 0;};/**
	 * Formats prices for the Y-axis.
	 *
	 * Intelligently computes the decimal places based on the size of the y-axis ticks.

	 * If the panel is a study panel, then prices will be condensed by {@link CIQ.condenseInt} if equal or over 1000.
	 * This can be overridden by manually setting {@link CIQ.ChartEngine.YAxis#decimalPlaces}.

	 * You can call this method to ensure that any prices that you are using outside of the chart are formatted the same as the prices on the y-axis.
	 * @param  {number} price The price to be formatted
	 * @param  {CIQ.ChartEngine.Panel} panel The panel for the y-axis.
	 * @param {number} [requestedDecimalPlaces] Number of decimal places, otherwise it will be determined by the yaxis setting, or if not set, determined automatically
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] yAxis. If not present, the panel's y-axis will be used.
	 * @param  {boolean} internationalize Normally this function will return an internationalized result.  Set this param to false to bypass.
	 * @return {number}		  The formatted price
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 4.0.0 CondenseInt will be called only if equal or over 1000 rather than 100.
	 * <br>&bull; 5.2.0 All axes will be condensed to some degree to allow for more uniform decimal precision
	 * <br>&bull; 6.1.0 Added internationalize argument
	 */CIQ.ChartEngine.prototype.formatYAxisPrice=function(price,panel,requestedDecimalPlaces,yAxis,internationalize){if(price===null||typeof price=="undefined"||isNaN(price))return"";var yax=yAxis?yAxis:panel.yAxis;var decimalPlaces=requestedDecimalPlaces;if(!decimalPlaces&&decimalPlaces!==0)decimalPlaces=yax.printDecimalPlaces;if(!decimalPlaces&&decimalPlaces!==0){decimalPlaces=this.decimalPlacesFromPriceTick(yax.priceTick);}var minCondense=yax==panel.chart.yAxis?20000:1000;if(yax.priceTick>=minCondense){// k or m for thousands or millions
return CIQ.condenseInt(price);}var internationalizer=this.internationalizer;if(internationalizer&&internationalize!==false){var l=internationalizer.priceFormatters.length;if(decimalPlaces>=l)decimalPlaces=l-1;price=internationalizer.priceFormatters[decimalPlaces].format(price);}else{price=price.toFixed(decimalPlaces);// the above may be a problem at some point for datasets with very small shadows because the rounding skews the real number.
// We should truncate the decimal places instead of rounding to preserve the accuracy,
// but for now the above seems to work fine so we will leave it alone.
// And also the amount of rounding being done here actually "corrects" some of differences introduced elsewhere in the yAxis price calculations. ugg!
// Use the flowing code when ready to show truncated vs. rounded values
//price = price.toString();
//if(price.indexOf(".") > 0){
//	price = price.slice(0, (price.indexOf("."))+decimalPlaces+1)
//};
}return price;};/**
	 * Pads out the decimal places given only a price. It will not truncate, but will
	 * add zeroes. Prices under 2 will be padded to 4 decimal places. Prices over 1000
	 * will not be padded. All other prices will be padded to 2 decimal places.
	 * @param  {number} price A price
	 * @param  {number} [determinant] Value to determine the decimal places. For
	 * instance, if you want to determine the number of decimals for today's change based on the actual price
	 * @return {string}       A price padded for decimal places
	 * @memberOf  CIQ.ChartEngine
	 * @since 2016-07-16
	 */CIQ.ChartEngine.prototype.padOutPrice=function(price,determinant){if(price!==0&&(!price||typeof price!="number"))return"";if(!determinant&&determinant!==0)determinant=price;var str=""+determinant;var decimalPlaces=str.substring(str.indexOf(".")).length-1;if(determinant>=1000)decimalPlaces=Math.max(decimalPlaces,0);else if(determinant<2)decimalPlaces=Math.max(decimalPlaces,4);else decimalPlaces=Math.max(decimalPlaces,2);var internationalizer=this.internationalizer;if(internationalizer){var l=internationalizer.priceFormatters.length;if(decimalPlaces>=l)decimalPlaces=l-1;price=internationalizer.priceFormatters[decimalPlaces].format(price);}else{price=price.toFixed(decimalPlaces);}return price;};/**
	 * Formats a price according to the decimalPlaces specified in either the panel or chart.
	 * It will then format to international standards if the internationalizer is set.
	 * This method *does not* condense prices.
	 * @param  {number} price The price to be formatted
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to use to determine the number of decimal places.
	 * @return {string}		  The formatted price
	 * @memberof CIQ.ChartEngine
	 * @since 6.2.0 Return value will always be a string
	 */CIQ.ChartEngine.prototype.formatPrice=function(price,panel){if(price!==0&&(!price||typeof price=="undefined"))return"";if(!panel)panel=this.currentPanel;if(!panel)panel=this.chart.panel;if(!panel)return price.toString();var decimalPlaces=panel.decimalPlaces;if(!decimalPlaces&&decimalPlaces!==0){decimalPlaces=panel.chart.decimalPlaces;}if(!decimalPlaces&&decimalPlaces!==0){return price.toString();}var internationalizer=this.internationalizer;if(internationalizer){var l=internationalizer.priceFormatters.length;if(decimalPlaces>=l)decimalPlaces=l-1;price=internationalizer.priceFormatters[decimalPlaces].format(price);}else{price=price.toFixed(decimalPlaces);}return price;};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Registers mouse events for the crosshair elements (to prevent them from picking up events)
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias createCrosshairs
	 */CIQ.ChartEngine.prototype.createCrosshairs=function(){if(this.runPrepend("createCrosshairs",arguments))return;if(!this.manageTouchAndMouse)return;var crossX=this.controls.crossX,crossY=this.controls.crossY;if(crossX){if(!crossX.onmousedown){crossX.onmousedown=function(e){if(!e)e=event;if(e.preventDefault)e.preventDefault();return false;};}}if(crossY){if(!crossY.onmousedown){crossY.onmousedown=function(e){if(!e)e=event;if(e.preventDefault)e.preventDefault();return false;};}}this.runAppend("createCrosshairs",arguments);};/**
	 * This method determines the high and low values for the data set. It requires an array of fields to check. For instance
	 * the array might contain ["Close","Series1","Series2"] which would return the max and min of all of those values for each
	 * quote.
	 *
	 * @param  {array} quotes The array of quotes to evaluate for min and max (typically CIQ.ChartEngine.chart.dataSegment)
	 * @param  {array} fields A list of fields to compare
	 * @param {boolean} [sum] If true then compute maximum sum rather than the maximum single value
	 * @param {boolean} [bypassTransform] If true then bypass any transformations
	 * @param {number} [length] Specifies how much of the quotes to process
	 * @return {array}		  A tuple, min and max values
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.determineMinMax=function(quotes,fields,sum,bypassTransform,length){var highValue=Number.MAX_VALUE*-1;var lowValue=Number.MAX_VALUE;var isTransform=false;var l=quotes.length;if(length)l=length;for(var i=0;i<=l+1;i++){var quote;//if(i==l && lowValue!=Number.MAX_VALUE && lowValue!=highValue) break;  // no need to examine off-chart values
// Here only the first field in the fields array is checked.  A different approach might be to check all the fields.
if(fields.length){if(i==l){//if(leftmostQuoteExists) continue;  // no need to fetch bar to left of dataSegment
quote=this.getPreviousBar(this.chart,fields[0],0);}else if(i==l+1){//if(rightmostQuoteExists) continue;  // no need to fetch bar to right of dataSegment
quote=this.getNextBar(this.chart,fields[0],l-1);}else quote=quotes[i];}if(!quote)continue;if(!bypassTransform){if(quote.transform){isTransform=true;quote=quote.transform;}else if(isTransform)continue;//don't include points without transforms if we have been including points with transforms
}var acc=0;for(var j=0;j<fields.length;j++){var tuple=CIQ.existsInObjectChain(quote,fields[j]);if(!tuple)continue;var f=tuple.obj[tuple.member];if(typeof f=="number")f=[f];for(var v=0;v<f.length;v++){var val=f[v];if(val||val===0){if(sum){acc+=val;if(acc>highValue)highValue=acc;if(acc<lowValue)lowValue=acc;}else{if(val>highValue)highValue=val;if(val<lowValue)lowValue=val;}//if(i===0) leftmostQuoteExists=true;
//if(i==l-1) rightmostQuoteExists=true;
}}}}if(highValue==Number.MAX_VALUE*-1)highValue=0;if(lowValue==Number.MAX_VALUE)lowValue=0;return[lowValue,highValue];};/**
	 * Here we calculate the range for the yaxis and set appropriate member variables.
	 * @private
	 * @param  {CIQ.ChartEngine.Panel} panel The panel containing the yaxis
	 * @param  {CIQ.ChartEngine.YAxis} yAxis The yaxis to work on
	 * @param {number} [low] The low value for the axis
	 * @param {number} [high] The high value for the axis
	 * @since 5.2.0 when y axis is zoomed in, there will be no limitation on vertical panning
	 */CIQ.ChartEngine.prototype.calculateYAxisRange=function(panel,yAxis,low,high){if(low==Number.MAX_VALUE){low=0;high=0;}var cheight=panel.height,newHigh=null,newLow=null;this.adjustYAxisHeightOffset(panel,yAxis);yAxis.height=yAxis.bottom-yAxis.top;// Ensure the user hasn't scrolled off the top or the bottom of the chart when the chart is not zoomed in
var verticalPad=Math.round(Math.abs(cheight/5));if(yAxis.zoom>=0&&cheight-Math.abs(yAxis.scroll)<verticalPad){yAxis.scroll=(cheight-verticalPad)*(yAxis.scroll<0?-1:1);}if(low||low===0){if(high-low===0){// A stock that has no movement, so we create some padding so that a straight line will appear
var padding=Math.pow(10,-(low.toString()+".").split(".")[1].length);if(padding==1)padding=100;// For whole number prices, widen the shadow
newHigh=low+padding;newLow=low-padding;}else{if((this.layout.semiLog||this.layout.chartScale=="log")&&newHigh){// When in log scale, the yAxis high and low will be the log10 of the prices. The actual values are just for display, not for calculation.
var logLow=Math.log(low)/Math.LN10;var logHigh=Math.log(high)/Math.LN10;newHigh=Math.pow(10,logHigh);newLow=Math.pow(10,logLow);}else{newHigh=high;newLow=low;}}yAxis.high=newHigh;yAxis.low=newLow;}if(yAxis.max||yAxis.max===0)yAxis.high=yAxis.max;if(yAxis.min||yAxis.min===0)yAxis.low=yAxis.min;yAxis.shadow=yAxis.high-yAxis.low;if(panel.chart.name===panel.name&&panel.yAxis.name===yAxis.name){// For the main yaxis on the main chart only check for semilog
var isLogScale=low>0&&(this.layout.semiLog||this.layout.chartScale=="log");if(panel.chart.isComparison||this.layout.aggregationType=="pandf")isLogScale=false;if(yAxis.semiLog!=isLogScale){this.clearPixelCache();yAxis.semiLog=isLogScale;}}};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 *
	 * This method creates and draws all y-axes for all panels
	 *
	 * yAxis.high - The highest value on the y-axis
	 * yAxis.low - The lowest value on the y-axis
	 *
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to create y-axis
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias renderYAxis
	 * @since  15-07-01
	 */CIQ.ChartEngine.prototype.renderYAxis=function(chart){if(this.runPrepend("renderYAxis",arguments))return;this.rendererAction(chart,"yAxis");for(var p in this.panels){var panel=this.panels[p];if(panel.chart!=chart)continue;var arr=panel.yaxisRHS.concat(panel.yaxisLHS);// Iterate through all the yaxis for the panel and set all the necessary calculations
// For the primary yaxis (panel.yAxis) we will set the low and high values based on the range
// of values in the chart itself
var i,yAxis,parameters={};for(i=0;i<arr.length;i++){yAxis=arr[i];this.calculateYAxisRange(panel,yAxis,yAxis.lowValue,yAxis.highValue);if(CIQ.Studies)parameters=CIQ.Studies.getYAxisParameters(this,yAxis);parameters.yAxis=yAxis;this.createYAxis(panel,parameters);this.drawYAxis(panel,parameters);if(CIQ.Studies)CIQ.Studies.doPostDrawYAxis(this,yAxis);}}this.runAppend("renderYAxis",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 *
	 * This method initializes display variables for the chart.
	 * It is part of the animation loop and called with every draw() operation.
	 * The high and low values for the displayed chart are calculated.
	 * Those values are subsequently used by {@link CIQ.ChartEngine.AdvancedInjectable#createYAxis} which is called from within this method.
	 * This method also calls {@link CIQ.ChartEngine#createCrosshairs}.
	 *
	 * chart.highValue - The highest value on the chart
	 * chart.lowValue - The lowest value on the chart
	 *
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to initialize
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias initializeDisplay
	 * @since 5.2.0. It now also calculates the minimum and maximum points in all study panels. This calculation was previously done using {@link CIQ.Studies.determineMinMax}, now deprecated.
	 */CIQ.ChartEngine.prototype.initializeDisplay=function(chart){if(this.runPrepend("initializeDisplay",arguments))return;var fields=[];var self=this;function setYAxisFields(yAxis,panel){// first see if this is an axis for a study; if so, get the fields
var isStudyAxis=false;var sd=self.layout&&self.layout.studies&&self.layout.studies[yAxis.name];if(sd){for(var j in sd.outputMap){fields.push(j);}if(sd.study&&sd.study.renderer){// if there is a study renderer, just assume it requires OHLC regardless of the renderer type
fields=fields.concat(CIQ.createObjectChainNames(j,["Close","Open","High","Low"]));}for(var h=0;h<=2;h++){fields.push(sd.name+"_hist"+(h?h:""));}isStudyAxis=true;}if(!panel)return;//to end recursion from includeOverlaysInMinMax below
// then check renderers and add fields for each series in the renderer using this yaxis
var baseFields=[];for(var id in chart.seriesRenderers){var renderer=chart.seriesRenderers[id],params=renderer.params,panelName=params.panel;if((params.yAxis||!self.panels[panelName]||self.panels[panelName].yAxis)!=yAxis)continue;if(renderer.highLowBars)baseFields=["Close","Open","High","Low"];else baseFields=[chart.defaultPlotField||"Close"];for(var id2=0;id2<renderer.seriesParams.length;id2++){// Find any series that share the Y axis
var seriesParams=renderer.seriesParams[id2];if(seriesParams.subField){fields=fields.concat(CIQ.createObjectChainNames(seriesParams.symbol,[seriesParams.subField])).concat(seriesParams.symbol);}else if(seriesParams.symbol){fields=fields.concat(CIQ.createObjectChainNames(seriesParams.symbol,baseFields)).concat(seriesParams.symbol);}else if(seriesParams.field){fields.push(seriesParams.field);}else if(yAxis==chart.panel.yAxis){// only if the main chart panel's yAxis include baseFields
fields=fields.concat(baseFields);}}}// Finally add any fields used by overlay studies
if(chart.includeOverlaysInMinMax){for(var overlay in self.overlays){var o=self.overlays[overlay];if(o.panel!=panel.name)continue;if(o.name==yAxis.name)continue;// don't loop thru the same axis twice and create duplicates
var oAxis=self.getYAxisByName(o.panel,o.name)||panel.yAxis;if(oAxis!=yAxis)continue;setYAxisFields({name:o.name});}}}var minMax;var length=null;// We often have an extra tick hanging off the edge of the screen. We don't want this
// tick to affect the high and low calculation though. That causes jumpiness when
// zooming because the chart is alternately including and excluding that tick
var ticksOnScreen=Math.floor((chart.width-this.micropixels)/this.layout.candleWidth);if(chart.scroll>chart.maxTicks&&chart.maxTicks>ticksOnScreen+1)length=chart.dataSegment.length-1;var arr=[];for(var p in this.panels){var myPanel=this.panels[p];arr=myPanel.yaxisLHS.concat(myPanel.yaxisRHS);for(var y=0;y<arr.length;y++){var yAxis=arr[y];fields=[];var doTransform=chart.transformFunc&&yAxis==chart.panel.yAxis;setYAxisFields(yAxis,myPanel);if(this.mainSeriesRenderer&&this.mainSeriesRenderer.determineMax){minMax=this.mainSeriesRenderer.determineMax(chart.dataSegment,fields,null,!doTransform,length);}else{minMax=this.determineMinMax(chart.dataSegment,fields,null,!doTransform,length);}if(this.mainSeriesRenderer&&chart.yAxis==yAxis){if(!this.mainSeriesRenderer.highLowBars||!this.highLowBars[this.layout.chartType]){// line charts shouldn't take into account high and low values, just close
var mainSeriesRenderer=this.mainSeriesRenderer||{};if(chart.panel==myPanel&&mainSeriesRenderer.params&&mainSeriesRenderer.params.baseline&&mainSeriesRenderer.params.type!="mountain"){var base=chart.baseline.actualLevel;if(base||base===0){if(doTransform)base=chart.transformFunc(this,chart,base);var diff=Math.max(base-minMax[0],minMax[1]-base);if(this.repositioningBaseline){minMax=[chart.lowValue,chart.highValue];}else{minMax[0]=base-diff;minMax[1]=base+diff;}}}}}yAxis.lowValue=minMax[0];yAxis.highValue=minMax[1];if(yAxis==chart.panel.yAxis){chart.lowValue=yAxis.lowValue;chart.highValue=yAxis.highValue;}}}var aggregation=chart.state.aggregation;if(aggregation&&aggregation.box){// Make room for X and O rendering since half of it lies beyond the high/low
chart.lowValue-=aggregation.box/2;chart.highValue+=aggregation.box/2;}this.runAppend("initializeDisplay",arguments);};// @deprecated Use pixelFromBar
CIQ.ChartEngine.prototype.computePosition=function(x,offset){if(typeof offset=="undefined")offset=0;var position=x*this.layout.candleWidth+offset+this.micropixels;return position;};// @deprecated
CIQ.ChartEngine.prototype.computeColor=function(open,close){if(open<close)return"stx_candle_up";if(open>close)return"stx_candle_down";return"stx_candle_shadow";};// @deprecated
CIQ.ChartEngine.prototype.computeLength=function(high,low){var h=this.pixelFromPrice(high);var l=this.pixelFromPrice(low);return l-h;};/**
	 * Adds a series renderer to the chart, or updates it.	A series renderer manages a group of series which are rendered on the chart
	 * in the same manner. For instance, several series which are part of the same stacked histogram.
	 *
	 * Example 1 <iframe width="100%" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/b6pkzrad/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 * Example 2 <iframe width="100%" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/rb423n71/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 * You must manage the persistency of a renderer, and remove individual series ({@link CIQ.Renderer#removeSeries} ) , remove all series ({@link CIQ.Renderer#removeAllSeries}) or even delete the renderer ({@link CIQ.ChartEngine#removeSeriesRenderer}) as needed by your application
	 *
	 * Note: once a renderer is set for a chart it will remain loaded with all its series definitions and y axis (if one used) even if a new symbol is loaded.
	 * Calling setSeriesRenderer again with the same renderer name, will just return the previously created renderer.
	 * **Be careful not to send a different yAxis object unless you have deleted the previous one by completely removing all of its associated series** (see {@link CIQ.Renderer#removeAllSeries}).
	 * Failure to do this will cause multiple axis to be displayed, the original one becoming orphan.
	 *
	 * See {@link CIQ.Renderer}
	 *
	 * See {@link CIQ.ChartEngine#removeSeriesRenderer} for release functionality.
	 *
	 * See {@link CIQ.ChartEngine#addSeries} for additional implementation examples.
	 *
	 * @param {CIQ.Renderer} renderer The renderer
	 * @returns {CIQ.Renderer} This seriesRenderer
	 * @memberof CIQ.ChartEngine
	 * @since 07/01/2015
	 * @example
	 *	// group the series together and select "line" as the rendering type to display the series.
	 *	var mdataRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"My Line Series", type:"line", width:4, callback:mdataLegend}}))
	 *			.removeAllSeries()
	 *			.attachSeries(symbol1,{color:"red",permanent:true})
	 *			.attachSeries(symbol2,"blue")
	 *			.attachSeries(symbol3,"yellow")
	 *			.ready()
	 */CIQ.ChartEngine.prototype.setSeriesRenderer=function(renderer){var params=renderer.params;if(this.chart.seriesRenderers[params.name])return this.chart.seriesRenderers[params.name];// renderer already created
if(params.yAxis){params.yAxis=this.addYAxis(this.panels[params.panel],params.yAxis);}renderer.stx=this;this.chart.seriesRenderers[params.name]=renderer;return renderer;};/** Sets a renderer for the main chart.  This is done by parsing the layout.chartType and layout.aggregationType and creating the renderer which will support those settings.
	 * @param {boolean} eraseData Set to true to erase any existing series data
	 * @memberOf  CIQ.ChartEngine
	 * @since 5.1.0
	 */CIQ.ChartEngine.prototype.setMainSeriesRenderer=function(eraseData){var chartType=this.layout.chartType,aggregationType=this.layout.aggregationType,custom=this.chart.customChart;var r=this.mainSeriesRenderer;if(r){r.removeAllSeries(eraseData);this.removeSeriesRenderer(r);r=this.mainSeriesRenderer=null;}var params={panel:this.chart.panel.name,name:"_main_series",highlightable:false,useChartLegend:true};if(custom&&custom.chartType)chartType=custom.chartType;if(chartType=="none")return;// no renderer and no default lines renderer
if(aggregationType&&aggregationType!="ohlc")chartType=aggregationType;var renderer=CIQ.Renderer.produce(chartType,params);if(renderer){this.setSeriesRenderer(renderer).attachSeries(null,{display:this.chart.symbol});this.mainSeriesRenderer=renderer;}// Convenience access
["highLowBars","standaloneBars","barsHaveWidth"].forEach(function(p){this.chart[p]=this.mainSeriesRenderer&&this.mainSeriesRenderer[p];}.bind(this));};/**
	 * Sets the market definition on the chart.
	 *
	 * Once set, the definition will not change until it is explicitly set to something else by calling this method again.
	 *
	 * A new definition for a chart should only be set once, right before a new instrument is loaded with the {@link CIQ.ChartEngine#newChart} call.
	 * Loading or modifying a market definition after a chart has loaded its data will result in unpredictable results.
	 *
	 * If a dynamic model is desired, where a new definition is loaded as different instruments are activated, see {@link CIQ.ChartEngine#setMarketFactory}.
	 *
	 * See {@link CIQ.Market} for market definition rules and examples.
	 *
	 * This is only required if your chart will need to know the operating hours for the different exchanges.
	 *
	 * If using a 24x7 chart, a market does not need to be set.
	 * @param {object} marketDefinition A market definition as required by {@link CIQ.Market}
	 * @param {CIQ.ChartEngine.Chart} chart An instance of {@link CIQ.ChartEngine.Chart}
	 * @memberof CIQ.ChartEngine
	 * @since 04-2016-08
	 * @example
	 * stxx.setMarket({
	 *   name: 'My_Market',
	 *   market_tz: 'My_Timezone', // Note you must specify the time zone for the market!
	 *   rules: [
	 *     { 'dayofweek': 1, 'open': '08:00', 'close': '14:30' },
	 *     { 'dayofweek': 2, 'open': '08:00', 'close': '14:30' },
	 *     { 'dayofweek': 3, 'open': '08:00', 'close': '14:30' },
	 *     { 'dayofweek': 4, 'open': '08:00', 'close': '14:30' },
	 *     { 'dayofweek': 5, 'open': '08:00', 'close': '14:30' },
	 *   ],
	 * });
	 */CIQ.ChartEngine.prototype.setMarket=function(marketDefinition,chart){if(!chart)chart=this.chart;chart.market=new CIQ.Market(marketDefinition);for(var session in this.layout.marketSessions){chart.market.disableSession(session,this.layout.marketSessions[session]);}};/**
	 * Links the chart to a method that given a symbol object of form accepted by {@link CIQ.ChartEngine#newChart}, can return a complete market definition object.
	 * Once linked, the market factory it will be used by the chart to ensure the market always matches the active instrument.
	 * This is only required if your chart will need to know the operating hours for the different exchanges.
	 * If using a 24x7 chart, a market factory does not need to be set.
	 *
	 * Please note that if using the default sample templates, this method is set to use the {@link CIQ.Market.Symbology} functions, which must be reviewed and adjust to comply with your quote feed and symbology format before they can be used.
	 * @param {function} factory A function that takes a symbolObject and returns a market definition. See {@link CIQ.Market} for instruction on how to create a market definition. See {@link CIQ.Market.Symbology.factory} for working example of a factory function.
	 * @memberof CIQ.ChartEngine
	 * @since 04-2016-08
	 * @example
	 * // example of a market factory that returns a different market definition based on the symbol passed in
	 * sampleFactory=function(symbolObject){
	 *		var symbol=symbolObject.symbol;
	 *		// isTypeX(symbol) is a function you would create to identify the market definition object that should be used.
	 *		if( isType1(symbol) ) return type1DefinitionObject;
	 *		if( isType2(symbol) ) return type2DefinitionObject;
	 *		if( isType3(symbol) ) return type3DefinitionObject;
	 *		return defaultDefinitionObject;
	 * };
	 *
	 * var stxx=new CIQ.ChartEngine({container:$("#chartContainer")[0], preferences:{labels:false, currentPriceLine:true, whitespace:0}});
	 * stxx.setMarketFactory(sampleFactory);
	 */CIQ.ChartEngine.prototype.setMarketFactory=function(factory){this.marketFactory=factory;};/**
	 * Detaches a series renderer from the chart and deletes its associated y-axis if no longer used by any other renderer.
	 *
	 * Note: the actual series and related data are not deleted with this command and can be attached or continue to be used with other renderers.
	 *
	 * Note: the actual renderer (created by using new `CIQ.Renderer.xxxxx`) is not deleted but simply detached from the chart. You can re-attach it again if needed.
	 * To delete the renderer use `delete myRenderer`. See example in {@link CIQ.Renderer.Lines}
	 *
	 * @param  {object} renderer The actual renderer instance to be removed
	 * @memberof CIQ.ChartEngine
	 * @since 07/01/2015
	 */CIQ.ChartEngine.prototype.removeSeriesRenderer=function(renderer){for(var r in this.chart.seriesRenderers){if(renderer.params.name===this.chart.seriesRenderers[r].params.name){var toDelete=this.chart.seriesRenderers[renderer.params.name];var yAxis=toDelete.params.yAxis;var panel=this.panels[toDelete.params.panel];delete this.chart.seriesRenderers[renderer.params.name];this.deleteYAxisIfUnused(panel,yAxis);return;}}};/**
	 * Retrieves a series renderer from the chart
	 * @param  {string} name Handle to access the renderer (params.name)
	 * @return {object} the matching series renderer if found
	 * @memberof CIQ.ChartEngine
	 * @since 07/01/2015
	 */CIQ.ChartEngine.prototype.getSeriesRenderer=function(name){return this.chart.seriesRenderers[name];};/**
	 * Initializes boundary clipping on the requested panel. Use this when you are drawing on the canvas and wish for the
	 * drawing to be contained within the panel. You must call {@link CIQ.ChartEngine#endClip} when your drawing functions are complete.
	 * @param  {string} [panelName] The name of the panel. Defaults to the chart itself.
	 * @param {boolean} [allowYAxis=false] If true then the clipping region will include the y-axis. By default the clipping region ends at the y-axis.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.startClip=function(panelName,allowYAxis){if(!panelName)panelName="chart";var panel=this.panels[panelName];var yAxis=panel.yAxis;this.chart.context.save();this.chart.context.beginPath();var left=panel.left;var width=panel.width;if(allowYAxis){left=0;width=this.width;}else if(panel.yaxisLHS&&panel.yaxisLHS.length){left++;width--;}this.chart.context.rect(left,yAxis.top,width,yAxis.height);this.chart.context.clip();};/**
	 * Completes a bounded clipping operation. See {@link CIQ.ChartEngine#startClip}.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.endClip=function(){this.chart.context.restore();};/**
	 * Sets the line style for the main chart.  Works for Lines renderer only.
	 * @param  {object} [obj]	Parameter object
	 * @param {string} [obj.color] A color on the canvas palette to use for line plot. Alternatively, obj may be set to the color string directly if no other parameters are needed.  This is ignored for a mountain chart.
	 * @param {array} [obj.pattern] Pattern to use as alternative to solid line for line plot, in array format, e.g. [1,2,3,2] or string format, e.g. "solid", "dashed", "dotted"
	 * @param {number} [obj.width] Width of the line plot
	 * @param  {object} [target=this.chart] Target to attach line style to.  Supported objects are CIQ.ChartEngine.Chart or CIQ.Studies.StudyDescriptor instances
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 * @example
	 *   stxx.setLineStyle({color:"rgb(127,127,127)",pattern:"dashed",width:3});
	 * @example
	 *   stxx.setLineStyle("blue");
	 */CIQ.ChartEngine.prototype.setLineStyle=function(obj,target){var res={};if(obj&&_typeof(obj)=="object"){res=obj;}else{res.color=obj;}if(!res.color&&!res.pattern&&!res.width)res=null;if(!target)target=this.chart;var width=1;if(res&&res.width)width=res.width;if(res&&res.pattern)res.pattern=CIQ.borderPatternToArray(width,res.pattern);target.lineStyle=res;};/**
	 * Creates a gap filling style object for lines which can be used with any API call requiring a gap object. This should be used intead of setting {@link CIQ.ChartEngine.Chart.gaplines} directly.
	 * The gap object, called `gaplines` will be attached to the `target` passed in, or will set the the primary chart's gap style if to target is provided. Valid styles include a boolean, a color string, or an object containing color and pattern information.
	 *
	 * When passing in a boolean value, `true` will configure the chart to continue to draw lines over the gaps in your chart. When set to `false` the chart will treat the color as transparent, and now draw lines over the gaps. It is important to note that this is NOT the same as filling the gaps, merely this describes how the chart displays the gaps.
	 *
	 * A gap is an area on a line type rendering ( mountain, baseline, step, etc) where the value for the plotted field is null, undefined, or missing.
	 * @param  {object} [obj|boolean|string]	Value for gap lines.
	 * @param {string} [obj.color] A color on the canvas palette to use for gap plot. Alternatively, obj may be set to the color string directly if no other parameters are needed.
	 * @param {array} [obj.pattern] Pattern to use as alternative to solid line for gap plot, in array format, e.g. [1,2,3,2].
	 * @param {number} [obj.width] Line width for gap plot, in pixels
	 * @param {boolean} [obj.fillMountain] Set to true to fill the gaps in a mountain chart with the gap color.  Otherwise the mountain chart is filled in with its default color.
	 * @param  {object} [target=this.chart] Target to attach `gaplines` object to.  If none provided it defaults to CIQ.ChartEngine.Chart.
	 * @memberof CIQ.ChartEngine
	 * @since 
	 * <br>&bull; 4.0.0
	 * <br>&bull; 6.2.3 Now accepts any valid parameter of chart.gaplines (boolean, color string, or color object)
	 * @example
	 * // shorthand if just setting a color as the the default style for the chart gaps
	 * stxx.setGapLines("blue");
	 * @example
	 * // the following will set stxx.chart.gaplines
	 * stxx.setGapLines({color:"transparent",pattern:[1,2],width:3,fillMountain:true});
	 * @example
	 * // the following will set objectTarget.gaplines
	 * stxx.setGapLines({color:"transparent",pattern:[1,2],width:3,fillMountain:true,target:objectTarget});
	 * @example
	 * // shorthand for setting gaps to transparent
	 * stxx.setGapLines(false)
	 *
	 * // shorthand for setting gaps to the color of your line or mountain chart
	 * stxx.setGapLines(true)
	 *
	 */CIQ.ChartEngine.prototype.setGapLines=function(obj,target){if(!target)target=this.chart;var res={};if(obj&&_typeof(obj)=="object"){res=obj;}else if(typeof obj==="boolean"){return target.gaplines=obj;}else{res.color=obj;}if(!res.color&&!res.pattern&&!res.fillMountain)res=null;if(res&&res.pattern)res.pattern=CIQ.borderPatternToArray(res.pattern);if(res&&res.width<=0)res.width=null;target.gaplines=res;};/**
	 * Generates a function used to return the color and pattern of a line chart over a gap area.
	 * A gap is an area where the value for the plotted field is null, undefined, or missing.
	 *
	 * See {@link CIQ.ChartEngine#setGapLines}.
	 *
	 * @param  {string} [symbol] Symbol of the series
	 * @param  {string} [field]	Field to plot, usually Close
	 * @param {object} [normal] Normal definition object containing color, pattern and width.  If only color is required, this may be set directly to the color string.
	 * @param {string} [normal.color] A color on the canvas palette to use for normal, non-gap plot
	 * @param {array} [normal.pattern] Pattern to use as alternative to solid line for normal, non-gap plot, in array format, e.g. [1,2,3,2]
	 * @param {number} [normal.width] Line with for normal plot, in pixels
	 * @param {object} [gaps] Gaps definition object containing color, pattern and width.  If only color is required, this may be set directly to the color string. If no gaps should be filled, leave out or set to false.
	 * @param {string} [gaps.color] A color on the canvas palette to use for gap plot
	 * @param {array} [gaps.pattern] Pattern to use as alternative to solid line for gap plot, in array format, e.g. [1,2,3,2]
	 * @param {number} [gaps.width] Line with for gap plot, in pixels
	 * @param {function} [colorFunction] Function to apply to plot to determine colors, for normal, non-gap portion
	 * @return {function} A function for generating color and pattern for the entire chart.
	 * @memberof CIQ.ChartEngine
	 * @private
	 * @since 5.1.0 changed signature, added width support
	 */CIQ.ChartEngine.prototype.getGapColorFunction=function(symbol,field,normal,gaps,colorFunction){if(_typeof(normal)!="object")normal={color:normal};return function(stx,quote,isGap){var myColor=colorFunction?colorFunction(stx,quote,isGap):normal;if(myColor.color)myColor=myColor.color;// in case the colorFunction returns an object
var q=quote[symbol];if(!q&&q!==0)q=quote[field];if(!isGap&&(q||q===0)){return{color:myColor,pattern:normal.pattern,width:normal.width};}if(!gaps)return null;// no color is returned if no gaps are needed.
if(_typeof(gaps)!="object"){if(typeof gaps=="string")gaps={color:gaps};else gaps={};}return{color:gaps.color||myColor,pattern:gaps.pattern||normal.pattern,width:gaps.width||normal.width};};};/**
	 * Draws a line chart.
	 *
	 * This method should rarely if ever be called directly.  Use {@link CIQ.Renderer.Lines} or {@link CIQ.ChartEngine#setChartType} instead.
	 *
	 * Uses CSS style `stx_line_chart` to control width and color of line charts, unless `params` are set.
	 *
	 * The default color function for the colored line chart uses the following CSS styles:
	 * - `stx_line_up`		- Color of the uptick portion of the line
	 * - `stx_line_down`	- Color of the downtick portion of the line
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel The panel on which to draw the line chart
	 * @param  {string} style	The style selector which contains the styling for the bar (width and color)
	 * @param  {function} [colorFunction]	A function which accepts an CIQ.ChartEngine and quote as its arguments and returns the appropriate color for drawing that mode.
											Returning a null will skip that bar.  If not passed as an argument, will use a default color.
	 * @param  {object} [params]	Listing of parameters to use when plotting the line chart.
	 * @param {boolean} [params.skipTransform] If true then any transformations (such as comparison charting) will not be applied
	 * @param {boolean} [params.label] If true then the y-axis will be marked with the value of the right-hand intercept of the line
	 * @param {boolean} [params.noSlopes] If set then chart will draw horizontal bars with no vertical lines.
	 * @param {boolean} [params.step] If set then chart will resemble a step chart.  Horizontal lines will begin at the center of the bar.
	 * @param {number} [params.tension] Tension for splining. Requires "js/thirdparty/splines.js"
	 * @param {boolean} [params.highlight] If set then line will be twice as wide.
	 * @param {string} [params.color] The color for the line. Defaults to CSS style
	 * @param {string} [params.pattern] The pattern for the line ("solid","dashed","dotted"). Defaults to CSS style
	 * @param {number} [params.width] The width in pixels for the line. Defaults to CSS style
	 * @param {object} [params.gapDisplayStyle] Gap object as set by See {@link CIQ.ChartEngine#setGapLines}. If not set `chart.gaplines` will be used.  Set to false to force gap lines to not be drawn, regardless of chart setting.
	 * @param {boolean} [params.labelDecimalPlaces] Specifies the number of decimal places to print on the label. If not set then it will match the y-axis.
	 * @return {object} Data generated by the plot, such as colors used if a colorFunction was passed, and the vertices of the line (points).
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 15-07-01 Changed signature from `chart` to `panel`
	 * <br>&bull; 3.0.0 added params argument
	 * <br>&bull; 5.2.0 `params.gaps` has been deprecated and replaced with `params.gapDisplayStyle`
	 * <br>&bull; 6.0.0 `params.gapDisplayStyle` can be set to false to suppress all gap drawing
	 */CIQ.ChartEngine.prototype.drawLineChart=function(panel,style,colorFunction,params){var chart=this.chart,context=chart.context,lineStyle=chart.lineStyle||{};var c=this.canvasStyle(style);if(!params)params={};this.startClip(panel.name);var width=params.width||lineStyle.width||c.width;if(width&&parseInt(width,10)<=25){context.lineWidth=Math.max(1,CIQ.stripPX(width));}else{context.lineWidth=1;}params.pattern=params.pattern||lineStyle.pattern||c.borderTopStyle;params.pattern=CIQ.borderPatternToArray(context.lineWidth,params.pattern);this.canvasColor(style);var color=params.color||lineStyle.color;if(color)context.strokeStyle=color;params.skipProjections=true;var field=params.field||chart.defaultPlotField;// usually the series
var plotField=params.subField||chart.defaultPlotField||"Close";// usually the field within the series
var gaps=params.gapDisplayStyle;if(!gaps&&gaps!==false)gaps=params.gaps;if(!gaps&&gaps!==false)gaps=chart.gaplines;if(!gaps)gaps="transparent";params.gapDisplayStyle=gaps;var myColorFunction=this.getGapColorFunction(field,plotField,{color:context.strokeStyle,pattern:params.pattern,width:context.lineWidth},gaps,colorFunction);if(panel.chart.tension)params.tension=panel.chart.tension;var rc=this.plotDataSegmentAsLine(field,panel,params,myColorFunction);if(!rc.colors.length)rc.colors.push(context.strokeStyle);context.lineWidth=1;this.endClip();return params.returnObject?rc:rc.colors;};/**
	 * Finds the previous element before dataSegment[bar] in the dataSet which has data for field
	 * @param {CIQ.ChartEngine.Chart} chart An instance of {@link CIQ.ChartEngine.Chart}
	 * @param {string} field The field to check for data
	 * @param {number} bar The index into the dataSegment
	 * @return {object} dataSet element which has data
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.getPreviousBar=function(chart,field,bar){return this.getNextBarInternal(chart,field,bar,-1);};/**
	 * Finds the next element after dataSegment[bar] in the dataSet which has data for field
	 * @param {CIQ.ChartEngine.Chart} chart An instance of {@link CIQ.ChartEngine.Chart}
	 * @param {string} field The field to check for data
	 * @param {number} bar The index into the dataSegment
	 * @return {object} dataSet element which has data
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.getNextBar=function(chart,field,bar){return this.getNextBarInternal(chart,field,bar,1);};/**
	 * @param {CIQ.ChartEngine.Chart} chart An instance of {@link CIQ.ChartEngine.Chart}
	 * @param {string} field The field to check for data
	 * @param {number} bar The index into the dataSegment
	 * @param {number} direction 1 or -1, for next or previous
	 * @return {object} dataSet element which has data
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 * @private
	 */CIQ.ChartEngine.prototype.getNextBarInternal=function(chart,field,bar,direction){var seg=chart.dataSegment&&chart.dataSegment[bar];if(seg){var tick=seg.tick;while(tick>0&&tick<chart.dataSet.length){tick=tick+direction;var ds=chart.dataSet[tick];if(ds){var tuple=CIQ.existsInObjectChain(ds,field);if(tuple&&tuple.obj[tuple.member])return ds;}}}return null;};/**
	 * Returns the first or last record in a quotes array (e.g. masterData, dataSet) containing the requested field.
	 * If no record is found, will return null
	 * @param  {CIQ.ChartEngine} [stx] Chart engine object
	 * @param  {array} data	  quotes array in which to search
	 * @param  {string} field	  field to search for
	 * @param  {boolean} [last] Switch to reverse direction; default is to find the first record.  Set to true to find the last record.
	 * @return {object} The found record, or null if not found
	 * @memberof CIQ.ChartEngine
	 * @since 5.2.0
	 */CIQ.ChartEngine.prototype.getFirstLastDataRecord=function(data,field,last){var c=last?data.length-1:0;while(c>=0&&c<data.length){if(data[c]&&typeof data[c][field]!="undefined"){return data[c];}if(last)c--;else c++;}return null;};/**
	 * Redraws the floating price label(s) for the crosshairs tool on the y axis using {@link CIQ.ChartEngine#createYAxisLabel} and sets the width of the y crosshair line to match pannel width.
	 *
	 * Label style: `stx-float-price` ( for price colors ) and `stx_crosshair_y` ( for cross hair line )
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel	The panel on which to print the label(s)
	 * @memberof CIQ.ChartEngine
	 * @example
	 * // controls primary default color scheme
	 * .stx-float-price { color:#fff; background-color: yellow;}
	 * @since 5.2.0 decimalPlaces for label determined by distance between ticks as opposed to shadow
	 */CIQ.ChartEngine.prototype.updateFloatHRLabel=function(panel){var arr=panel.yaxisLHS.concat(panel.yaxisRHS);var cy=this.crossYActualPos?this.crossYActualPos:this.cy;if(this.floatCanvas.isDirty)CIQ.clearCanvas(this.floatCanvas,this);if(this.controls.crossX&&this.controls.crossX.style.display=="none")return;if(this.controls.crossY){var crosshairWidth=panel.width;if(this.yaxisLabelStyle=="roundRectArrow")crosshairWidth-=7;this.controls.crossY.style.left=panel.left+"px";this.controls.crossY.style.width=crosshairWidth+"px";}for(var i=0;i<arr.length;i++){var yAxis=arr[i];var price=this.transformedPriceFromPixel(cy,panel,yAxis);if(isNaN(price))continue;if((yAxis.min||yAxis.min===0)&&price<yAxis.min)continue;if((yAxis.max||yAxis.max===0)&&price>yAxis.max)continue;var labelDecimalPlaces=null;if(yAxis!==panel.chart.yAxis){// If a study panel, this logic allows the cursor to print more decimal places than the yaxis default for panels
labelDecimalPlaces=this.decimalPlacesFromPriceTick(yAxis.priceTick);if(yAxis.decimalPlaces||yAxis.decimalPlaces===0)labelDecimalPlaces=yAxis.decimalPlaces;}if(yAxis.priceFormatter){price=yAxis.priceFormatter(this,panel,price,labelDecimalPlaces);}else{price=this.formatYAxisPrice(price,panel,labelDecimalPlaces,yAxis);}var style=this.canvasStyle("stx-float-price");this.createYAxisLabel(panel,price,cy,style.backgroundColor,style.color,this.floatCanvas.context,yAxis);this.floatCanvas.isDirty=true;}};/**
	 * <span class="injection">INJECTABLE</span>
	 * This method calls {@link CIQ.ChartEngine#updateFloatHRLabel} to draw the label that floats along the Y axis with the
	 * current price for the crosshair.
	 * It also fills the date in the "stxx.controls.floatDate" (Style: `stx-float-date`) div which floats along the X axis.
	 * This is an appropriate place to inject an append method for drawing a head's up display if desired.
	 *
	 * You can override the {@link CIQ.ChartEngine#hideDates} method to decide if/when you want to hide the floating date.
	 *
	 * It uses {@link CIQ.displayableDate} to format the floating label over the x axis, which can be overwritten as needed to achieve the desired results.
	 *
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias headsUpHR
	 * @since 09-2016-19 only year and month will be displayed in monthly periodicity
	 */CIQ.ChartEngine.prototype.headsUpHR=function(){if(this.runPrepend("headsUpHR",arguments))return;var panel=this.currentPanel;if(!panel)return;var chart=panel.chart;this.updateFloatHRLabel(panel);var floatDate=this.controls.floatDate;function setFloatDate(val){CIQ.efficientDOMUpdate(floatDate,"innerHTML",val);}if(floatDate&&!chart.xAxis.noDraw){var bar=this.barFromPixel(this.cx);var prices=chart.xaxis[bar];if(prices&&prices.DT){setFloatDate(CIQ.displayableDate(this,chart,prices.DT));}else if(prices&&prices.index){setFloatDate(prices.index);}else{setFloatDate("");// there is no date to display
}}this.runAppend("headsUpHR",arguments);};// TODO, deprecated
CIQ.ChartEngine.prototype.setCrosshairColors=function(){};/**
	 * <span class="injection">INJECTABLE</span>
	 * Calculates the magnet point for the current mouse cursor location. This is the nearest OHLC point. A small white
	 * circle is drawn on the temporary canvas to indicate this location for the end user. If the user initiates a drawing then
	 * the end point of the drawing will be tied to the magnet point.
	 * This function is only used when creating a new drawing if preferences.magnet is true and
	 * a drawing type (CIQ.ChartEngine#currentVectorParameters.vectorType) has been enabled. It will not be used when an existing drawing is being repositioned.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias magnetize
	 */CIQ.ChartEngine.prototype.magnetize=function(){this.magnetizedPrice=null;if(this.runPrepend("magnetize",arguments))return;if(this.repositioningDrawing)return;// Don't magnetize
var drawingTool=this.currentVectorParameters.vectorType;if((drawingTool=="annotation"||drawingTool=="callout")&&CIQ.ChartEngine.drawingLine)return;// Don't magnetize the end of an annotation
if(drawingTool=="projection")return;if(drawingTool=="freeform")return;var panel=this.currentPanel;if(panel.name==panel.chart.name){// panel is chart type
var chart=panel.chart;var tick=this.tickFromPixel(CIQ.ChartEngine.crosshairX-this.left,chart);//if(this.layout.interval!="minute") tick/=this.layout.periodicity;
if(tick>chart.dataSet.length)return;// Don't magnetize in the future
var prices=chart.dataSet[tick];if(!prices)return;var price=this.valueFromPixel(this.cy,panel);this.magnetizedPrice=prices.Close;var highLowBars=this.mainSeriesRenderer&&this.mainSeriesRenderer.highLowBars||this.highLowBars[this.layout.chartType];if(highLowBars){var fields=["Open","High","Low","Close"];var closest=1000000000;for(var i=0;i<fields.length;i++){var fp=prices[fields[i]];if(Math.abs(price-fp)<closest){closest=Math.abs(price-fp);this.magnetizedPrice=fp;}}}var x=this.pixelFromTick(tick,chart);var y=this.pixelFromPrice(this.magnetizedPrice,this.currentPanel);var ctx=this.chart.tempCanvas.context;ctx.beginPath();ctx.lineWidth=1;var radius=Math.max(this.layout.candleWidth,12)/3;// Limit the radius size to 8 to prevent a large arc
// when zooming in and increasing the candle width.
ctx.arc(x,y,Math.min(radius,8),0,2*Math.PI,false);ctx.fillStyle="#FFFFFF";ctx.strokeStyle="#000000";ctx.fill();ctx.stroke();ctx.closePath();this.chart.tempCanvas.style.display="block";}this.runAppend("magnetize",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Positions the crosshairs at the last known mouse/finger pointer position. This ensures
	 * on touch devices that the crosshairs are at a known position. It is called by the DrawingToolbar.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias positionCrosshairsAtPointer
	 */CIQ.ChartEngine.prototype.positionCrosshairsAtPointer=function(){var currentPanel=this.currentPanel;if(!currentPanel)return;if(!this.manageTouchAndMouse)return;if(this.runPrepend("positionCrosshairsAtPointer",arguments))return;var chart=currentPanel.chart;var rect=this.container.getBoundingClientRect();this.top=rect.top;this.left=rect.left;this.right=this.left+this.width;this.bottom=this.top+this.height;this.cy=this.crossYActualPos=this.backOutY(CIQ.ChartEngine.crosshairY);this.cx=this.backOutX(CIQ.ChartEngine.crosshairX);var crosshairTick=this.crosshairTick=this.tickFromPixel(this.cx,chart);var position=this.pixelFromTick(crosshairTick,chart)-1;if(this.controls.crossX)this.controls.crossX.style.left=position+"px";if(position>=currentPanel.right||position<=currentPanel.left){this.undisplayCrosshairs();return;}var chField=currentPanel.name=="chart"?this.preferences.horizontalCrosshairField:currentPanel.horizontalCrosshairField;var dataSet=chart.dataSet;if(chField&&dataSet&&crosshairTick<dataSet.length&&crosshairTick>-1){this.crossYActualPos=this.pixelFromPrice(dataSet[crosshairTick][chField],currentPanel);}if(this.controls.crossY)this.controls.crossY.style.top=this.crossYActualPos+"px";this.runAppend("positionCrosshairsAtPointer",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 *
	 * This is an internal method that makes the crosshair visible based on where the user's mouse pointer is located. It should not be called directly.
	 *
	 * - Crosshairs will only be made visible if enabled, unless a drawing tool is active;
	 * in which case they will be displayed automatically regardless of state.
	 * - When the user moves the mouse out of the chart, or over a modal, the crosshairs are automatically made invisible using {@link CIQ.ChartEngine.AdvancedInjectable#undisplayCrosshairs}
	 * - To temporarily hide/show an enabled crosshair for other reasons use {@link CIQ.ChartEngine#showCrosshairs} and {@link CIQ.ChartEngine#hideCrosshairs}
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias doDisplayCrosshairs
	 * @since 5.0.0 no longer allows the crosshair to be enabled if mouse pointer is outside the chart.
	 */CIQ.ChartEngine.prototype.doDisplayCrosshairs=function(){if(this.runPrepend("doDisplayCrosshairs",arguments))return;if(this.displayInitialized){var floatCanvas=this.floatCanvas;var drawingTool=this.currentVectorParameters.vectorType;if(!this.layout.crosshair&&(drawingTool===""||!drawingTool)){this.undisplayCrosshairs();}else if(CIQ.Drawing&&CIQ.Drawing[drawingTool]&&new CIQ.Drawing[drawingTool]().dragToDraw){this.undisplayCrosshairs();}else if(this.overXAxis||this.overYAxis||!CIQ.ChartEngine.insideChart&&!this.grabbingScreen){this.undisplayCrosshairs();}else if(this.openDialog!==""){this.undisplayCrosshairs();}else{var controls=this.controls,crossX=controls.crossX,crossY=controls.crossY;if(crossX&&crossX.style.display!==""){crossX.style.display="";if(crossY)crossY.style.display="";if(this.preferences.magnet&&drawingTool){CIQ.unappendClassName(this.container,"stx-crosshair-on");this.chart.tempCanvas.style.display="block";}else{CIQ.appendClassName(this.container,"stx-crosshair-on");}}if(controls.floatDate&&!this.chart.xAxis.noDraw){controls.floatDate.style.visibility="";if(this.currentPanel)this.updateFloatHRLabel(this.currentPanel);}if(floatCanvas){floatCanvas.style.display="block";}}}this.runAppend("doDisplayCrosshairs",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 *
	 * This is an internal method that makes the crosshairs invisible when the user mouses out of the chart or over a chart control.
	 * It should not be called drectly.
	 *
	 * See {@link CIQ.ChartEngine.AdvancedInjectable#doDisplayCrosshairs} for more details.
	 *
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias undisplayCrosshairs
	 */CIQ.ChartEngine.prototype.undisplayCrosshairs=function(){if(this.runPrepend("undisplayCrosshairs",arguments))return;var controls=this.controls,crossX=controls.crossX,crossY=controls.crossY;if(crossX){if(crossX.style.display!="none"){crossX.style.display="none";if(crossY)crossY.style.display="none";}}if(this.displayInitialized&&controls.floatDate){controls.floatDate.style.visibility="hidden";}CIQ.unappendClassName(this.container,"stx-crosshair-on");var floatCanvas=this.floatCanvas;if(floatCanvas&&floatCanvas.isDirty){CIQ.clearCanvas(floatCanvas,this);if(floatCanvas.style.display!="none")floatCanvas.style.display="none";}if(!this.activeDrawing&&!this.repositioningDrawing&&!this.editingAnnotation){var tempCanvas=this.chart.tempCanvas;if(tempCanvas&&tempCanvas.style.display!="none")tempCanvas.style.display="none";}this.runAppend("undisplayCrosshairs",arguments);};/**
	 * Sets the chart into a modal mode. Crosshairs are hidden and the chart will not respond to click or mouse events. Call this
	 * for instance if you are enabling a dialog box and don't want errant mouse activity to affect the chart.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.modalBegin=function(){this.openDialog="modal";this.undisplayCrosshairs();};/**
	 * Ends modal mode. See {@link CIQ.ChartEngine#modalBegin}
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.modalEnd=function(){this.cancelTouchSingleClick=true;this.openDialog="";this.doDisplayCrosshairs();};/**
	 * <span class="injection">INJECTABLE</span>
	 * Updates the position of the stxx.controls.floatDate element ( Style: `stx-float-date` ) and calls {@link CIQ.ChartEngine.AdvancedInjectable#headsUpHR} to display the crosshairs labels on both x and y axis.
	 * A timer is used to prevent this operation from being called more frequently than once every 100 milliseconds in order to
	 * improve performance during scrolling.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias updateChartAccessories
	 */CIQ.ChartEngine.prototype.updateChartAccessories=function(){if(this.accessoryTimer!==null)clearTimeout(this.accessoryTimer);if(!CIQ.ChartEngine.drawingLine&&CIQ.touchDevice){if(new Date().getTime()-this.lastAccessoryUpdate<100){this.accessoryTimer=setTimeout(function(stx){return function(){stx.updateChartAccessories();};}(this),10);return;}}if(!this.chart.dataSet)return;if(this.runPrepend("updateChartAccessories",arguments))return;this.positionCrosshairsAtPointer();this.accessoryTimer=null;this.lastAccessoryUpdate=new Date().getTime();var floatDate=this.controls.floatDate;if(floatDate){var panel=this.currentPanel;if(!panel)panel=this.chart.panel;if(panel){var chart=panel.chart;var bottom=this.xAxisAsFooter===true?0:this.chart.canvasHeight-panel.chart.bottom;var halfLabelWidth=floatDate.offsetWidth/2-0.5;var l=this.pixelFromTick(this.crosshairTick,chart)-halfLabelWidth;if(l<0)l=0;else if(l>this.width-2*halfLabelWidth-1)l=this.width-2*halfLabelWidth-1;CIQ.efficientDOMUpdate(floatDate.style,"left",l+"px");CIQ.efficientDOMUpdate(floatDate.style,"bottom",bottom+"px");}}this.headsUpHR();this.runAppend("updateChartAccessories",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Handles mouse movement events. This method calls {@link CIQ.ChartEngine#mousemoveinner} which has the core logic
	 * for dealing with panning and zooming. See also {@link CIQ.ChartEngine.AdvancedInjectable#touchmove} which is the equivalent method for touch events.
	 * @param {Event} mouseEvent A mouse move event
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias mousemove
	 */CIQ.ChartEngine.prototype.mousemove=function(mouseEvent){var e=mouseEvent?mouseEvent:event;/* use e.client instead of e.page since we need the value to be relative to the viewport instead of the overall document size.
		if(!e.pageX){
			e.pageX=e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			e.pageY=e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}
		*/CIQ.ChartEngine.crosshairX=e.clientX;// These are used by the UI so make sure they are set even if no chart is set
CIQ.ChartEngine.crosshairY=e.clientY;if(e.type.toLowerCase().indexOf("enter")>-1){this.positionCrosshairsAtPointer();return;}if(this.runPrepend("mousemove",arguments))return;if(!this.displayInitialized)return;// No chart displayed yet
if(this.openDialog!=="")return;// Don't show crosshairs when dialog is open
this.mousemoveinner(e.clientX,e.clientY);this.runAppend("mousemove",arguments);};/**
	 * Set a timer to check for chart resizing. Normally the chart is resized whenever the screen is resized
	 * by capturing a screen resize event. However if charts are embedded in a windowing GUI then they may not
	 * receive such events when windows are resized. Ideally, stxx.resizeChart() should be called whenever a window
	 * is resized however if this is inconvenient then the resize timer can be enabled to cover all bases without too much effort.
	 *
	 * On initialization, CIQ.ChartEngine.resizeDetectMS is checked for the default resize checking interval. The default is 1,000 milliseconds.
	 * To turn off resize checking simply set CIQ.ChartEngine.resizeDetectMS=0; when you declare your CIQ.ChartEngine object.
	 * @param {number} ms Number of milliseconds to poll. Zero to stop checking.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setResizeTimer=function(ms){this.resizeDetectMS=ms;function closure(self){return function(){if(!self.chart.canvas)return;if(!CIQ.isAndroid){if(self.chart.canvas.height!=Math.floor(self.devicePixelRatio*self.chart.container.clientHeight)||self.chart.canvas.width!=Math.floor(self.devicePixelRatio*self.chart.container.clientWidth)){self.resizeChart();}}};}if(ms){if(this.resizeTimeout)clearInterval(this.resizeTimeout);this.resizeTimeout=setInterval(closure(this),ms);}else{if(this.resizeTimeout)clearInterval(this.resizeTimeout);this.resizeTimeout=null;}};/**
	 * Returns the yaxis that the crosshairs (mouse) is on top of
	 * @param  {CIQ.ChartEngine.Panel} panel The panel
	 * @param  {number} [x]		The X location. Defaults to CIQ.ChartEngine#cx
	 * @return {CIQ.ChartEngine.YAxis}		  The yAxis that the crosshair is over
	 * @memberOf  CIQ.ChartEngine
	 * @since  15-07-01
	 * @since 6.1.0 returns null when no yAxis found
	 */CIQ.ChartEngine.prototype.whichYAxis=function(panel,x){if(typeof x==="undefined")x=this.cx;if(panel){var arr=panel.yaxisLHS.concat(panel.yaxisRHS);for(var i=0;i<arr.length;i++){var yAxis=arr[i];if(yAxis.left<=x&&yAxis.left+yAxis.width>=x)return yAxis;}}return null;};/**
	 * Finds any objects that should be highlighted by the current crosshair position. All drawing objects have their highlight() method
	 * called in order that they may draw themselves appropriately.
	 * @param  {boolean} isTap If true then it indicates that the user tapped the screen on a touch device, and thus a wider radius is used to determine which objects might have been highlighted.
	 * @param {boolean} clearOnly Set to true to clear highlights
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 {@link CIQ.ChartEngine#displaySticky} is now called to display the 'series.symbol' if the 'series.display' is not present
	 */CIQ.ChartEngine.prototype.findHighlights=function(isTap,clearOnly){var radius=this.preferences[isTap?"highlightsTapRadius":"highlightsRadius"];// 30:10
this.highlightViaTap=isTap;// internal use state var
var cy=this.cy;var cx=this.cx;this.anyHighlighted=false;if(!this.currentPanel)return;if(this.preferences.magnet&&!this.activeDrawing&&!this.repositioningDrawing){CIQ.clearCanvas(this.chart.tempCanvas,this);}if(this.activeDrawing)clearOnly=true;var somethingChanged=false;var drawingToMeasure=null;var stickyArgs=clearOnly?{}:{forceShow:true,type:"drawing"};var chart=this.currentPanel.chart;var box={x0:this.tickFromPixel(cx-radius,chart),x1:this.tickFromPixel(cx+radius,chart),y0:this.valueFromPixel(cy-radius,this.currentPanel),y1:this.valueFromPixel(cy+radius,this.currentPanel),r:radius};if(this.repositioningDrawing&&box.x1-box.x0<2){box.x1++;box.x0--;}else if(box.x1==box.x0){box.x0-=0.5;box.x1+=0.5;}/* begin test code
		// show the box
		this.chart.canvas.context.strokeStyle="red";
		this.chart.canvas.context.strokeRect(this.pixelFromTick(box.x0,chart),cy-radius,this.pixelFromTick(box.x1,chart)-this.pixelFromTick(box.x0,chart),2*radius);
		this.chart.canvas.context.strokeStyle="blue";
		this.chart.canvas.context.strokeRect(cx-radius,cy-radius,2*radius,2*radius);
		  end test code */if(!chart.hideDrawings){for(var i=this.drawingObjects.length-1;i>=0;i--){var drawing=this.drawingObjects[i];if(!this.panels[drawing.panelName])continue;if(this.repositioningDrawing&&this.repositioningDrawing!=drawing)continue;var prevHighlight=drawing.highlighted;var highlightMe=drawing.panelName==this.currentPanel.name;drawing.repositioner=drawing.intersected(this.crosshairTick,this.crosshairValue,box);highlightMe=highlightMe&&drawing.repositioner;if(!clearOnly&&highlightMe){if(prevHighlight){drawingToMeasure=drawing;if(this.anyHighlighted&&this.singleDrawingHighlight)drawing.highlighted=false;}else if(prevHighlight!=drawing.highlight(true)){if(!drawingToMeasure)drawingToMeasure=drawing;if(this.anyHighlighted&&this.singleDrawingHighlight)drawing.highlighted=false;somethingChanged=true;}this.anyHighlighted=true;}else{if(prevHighlight!=drawing.highlight(false)){somethingChanged=true;}}if(drawing.highlighted)stickyArgs.noDelete=drawing.permanent;}}var n,o,series;for(n in this.overlays){o=this.overlays[n];o.prev=o.highlight;o.highlight=false;}for(n in chart.seriesRenderers){var r=chart.seriesRenderers[n];for(var j=0;j<r.seriesParams.length;j++){series=r.seriesParams[j];series.prev=series.highlight;series.highlight=false;}}// Function to detect if a "box" drawn around the cursor position is intersected by the overlay.
// Up to two overlay segments may be tested:
// The segment endpointed by the previous dataSet element containing that field and the current dataSet element behind the cursor,
// and the current dataSet element behind the cursor and the next dataSet element containing that field.
// In case there are gaps in the data, one of these segments may not exist.
// This routine is designed to also handle comparison overlays which cause the dataSet to be transformed.
// The argument "fullField" represents the series symbol and the subField, separated by a period (e.g. GOOG.High).
// If there is no subField, a subField of Close is presumed.
function isOverlayIntersecting(refBar,box,fullField,yAxis,cache){var chart=this.chart,currentPanel=this.currentPanel;if(!yAxis)yAxis=currentPanel.yAxis;var parts=fullField.split("-->");var field=parts[0];var subField=parts[1];if(!subField)subField="Close";function getVal(quote){if(!quote)return null;var theVal=quote[field];if(theVal&&(theVal[subField]||theVal[subField]===0)){// TODO: allow OHLC range, right now need to hover over imaginary line connecting closes
theVal=theVal[subField];}if(!chart.transformFunc||yAxis!=chart.yAxis)return theVal;else if(quote.transform&&field in quote.transform){theVal=quote.transform[field];if(theVal&&(theVal[subField]||theVal[subField]===0)){// TODO: allow OHLC range, right now need to hover over imaginary line connecting closes
theVal=theVal[subField];}return theVal;}return chart.transformFunc(this,chart,theVal);}var quote=chart.dataSegment[bar],quotePrev,quoteNext;var val,valPrev,valNext,tick=null,tickPrev=null,tickNext=null;var usedCache=new Array(3);if(quote&&cache){val=cache[bar];tick=quote.tick;if(val||val===0)usedCache[0]=1;var ci;for(ci=bar-1;ci>=0;ci--){if(cache[ci]||cache[ci]===0){valPrev=cache[ci];tickPrev=tick-(bar-ci);usedCache[1]=1;break;}}for(ci=bar+1;ci<chart.dataSegment.length;ci++){if(cache[ci]||cache[ci]===0){valNext=cache[ci];tickNext=tick-(bar-ci);usedCache[2]=1;break;}}}if(tickPrev===null){quotePrev=this.getPreviousBar.call(this,chart,fullField,bar);if(quotePrev){tickPrev=quotePrev.tick;valPrev=getVal(quotePrev);}}if(tickNext===null){quoteNext=this.getNextBar.call(this,chart,fullField,bar);// Terry, getNextBar is failing when opening debugger. Not sure why.
if(quoteNext){tickNext=quoteNext.tick;valNext=getVal(quoteNext);}}if(tickPrev===null&&tickNext===null)return false;if(!cache){val=getVal(quote);valPrev=getVal(quotePrev);valNext=getVal(quoteNext);tick=quote.tick;if(quotePrev)tickPrev=quotePrev.tick;if(quoteNext)tickNext=quoteNext.tick;}if(!valPrev&&valPrev!==0){valPrev=0;tickPrev=0;}if(!valNext&&valNext!==0){if(val||val===0){valNext=val;usedCache[2]=usedCache[0];}else{valNext=valPrev;usedCache[2]=usedCache[1];}tickNext=chart.dataSet.length-1;}if(!val&&val!==0){val=valNext;tick=tickNext;usedCache[0]=usedCache[2];if(valPrev===0&&tickPrev===0){valPrev=val;tickPrev=tick;usedCache[1]=usedCache[0];}}// The following code will get the pixel value of the price from either the renderer's series cache or the computation.
// Then it will convert the pixel value back to the price value for the current panel's axis.
// Using the cache is the only way to go for an overlay.  There is a shortcoming for the overlay though, in that
// if valPrev or valNext were off the screen, they wouldn't be in the cache and so their y axis value would be inaccurate.
var pftv=this.pixelFromTransformedValue.bind(this),vfp=this.valueFromPixel.bind(this);val=vfp(usedCache[0]?val:pftv(val,currentPanel,yAxis),currentPanel);valPrev=vfp(usedCache[1]?valPrev:pftv(valPrev,currentPanel,yAxis),currentPanel);valNext=vfp(usedCache[2]?valNext:pftv(valNext,currentPanel,yAxis),currentPanel);var pixelBox=CIQ.convertBoxToPixels(this,currentPanel.name,box);var pixelPoint1=CIQ.convertBoxToPixels(this,currentPanel.name,{x0:tickPrev,y0:valPrev,x1:tick,y1:val});var pixelPoint2=CIQ.convertBoxToPixels(this,currentPanel.name,{x0:tick,y0:val,x1:tickNext,y1:valNext});if(CIQ.boxIntersects(pixelBox.x0,pixelBox.y0,pixelBox.x1,pixelBox.y1,pixelPoint1.x0,pixelPoint1.y0,pixelPoint1.x1,pixelPoint1.y1,"segment")||CIQ.boxIntersects(pixelBox.x0,pixelBox.y0,pixelBox.x1,pixelBox.y1,pixelPoint2.x0,pixelPoint2.y0,pixelPoint2.x1,pixelPoint2.y1,"segment")){return true;}return false;}if(!clearOnly){var bar=this.barFromPixel(cx);if(bar>=0&&bar<chart.dataSegment.length){var y;for(n in this.overlays){o=this.overlays[n];if(o.panel!=this.currentPanel.name)continue;//custom highlight detection
if(o.study.isHighlighted===false)continue;else if(typeof o.study.isHighlighted=="function"){if(o.study.isHighlighted(this,cx,cy)){o.highlight=true;this.anyHighlighted=true;}continue;}var quote=chart.dataSegment[bar];if(!quote)continue;for(var out in o.outputMap){if(!o.outputMap[out])continue;if(isOverlayIntersecting.call(this,bar,box,out,this.getYAxisByName(o.panel,o.name))){o.highlight=true;this.anyHighlighted=true;break;}}if(o.highlight)break;// only allow one overlay to be highlighted at a time
}for(n in chart.seriesRenderers){var renderer=chart.seriesRenderers[n];var rendererPanel=renderer.params.panel;if(!renderer.params.highlightable)continue;if(rendererPanel!=this.currentPanel.name)continue;for(var m=0;m<renderer.seriesParams.length;m++){series=renderer.seriesParams[m];var fullField=series.field;if(series.symbol&&series.subField)fullField+="-->"+series.subField;var yAxis=renderer.params.yAxis;if(!yAxis&&rendererPanel)yAxis=this.panels[rendererPanel].yAxis;if(renderer.params.step&&bar>0){// In a step series we also need to check for intersection with
// the vertical bar (the step) that connects two points
if(!renderer.caches[series.id])continue;y=renderer.caches[series.id][bar];if(!y&&y!==0)continue;var py=renderer.caches[series.id][bar-1];if((py||py===0)&&cy+radius>=y&&cy-radius<=py||cy-radius<=y&&cy+radius>=py){series.highlight=true;this.anyHighlighted=true;}}else if(isOverlayIntersecting.call(this,bar,box,fullField,yAxis,renderer.caches[series.id])){series.highlight=true;this.anyHighlighted=true;}}}}}for(n in this.overlays){o=this.overlays[n];if(o.highlight){this.anyHighlighted=true;var display=o.inputs.display||o.name;display=this.translateIf(display);stickyArgs={message:display,noDelete:o.permanent,type:"study"};drawingToMeasure=null;}if(o.prev!=o.highlight)somethingChanged=true;}for(n in chart.seriesRenderers){var r2=chart.seriesRenderers[n];if(!r2.params.highlightable)continue;//might not be necessary to check this here
var bColor=r2.params.yAxis?r2.params.yAxis.textStyle:null;for(var m2=0;m2<r2.seriesParams.length;m2++){series=r2.seriesParams[m2];if(series.highlight){this.anyHighlighted=true;stickyArgs={message:series.display||series.symbol,backgroundColor:series.color||bColor,noDelete:series.permanent,type:"series"};drawingToMeasure=null;}if(series.prev!=series.highlight)somethingChanged=true;}}if(somethingChanged){this.draw();this.displaySticky(this.anyHighlighted?stickyArgs:{});this.clearMeasure();if(drawingToMeasure)drawingToMeasure.measure();}if(!this.anyHighlighted){this.setMeasure();}};/**
	 * Positions a "sticky" (a tooltip element). It is positioned relative to the cursor but so that it is always available and never
	 * accidentally tappable on a touch device.
	 * @param  {HTMLElement} m The sticky
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.positionSticky=function(m){var top=Math.max(this.cy-m.offsetHeight-60,0);var right=Math.min(this.chart.canvasWidth-(this.cx-50),this.chart.canvasWidth-m.offsetWidth);m.style.top=top+"px";m.style.right=right+"px";};/**
	 * Displays the "sticky" (tooltip element). The sticky should be in `CIQ.ChartEngine.controls.mSticky`. To disable stickies, set that element to null. See {@link CIQ.ChartEngine.htmlControls}
	 * @param  {object} params			optional arguments to pass into function
	 * @param  {string} [params.message]			The message to display in the sticky
	 * @param  {string} [params.backgroundColor] The background color to set the sticky (the foreground color will be picked automatically)
	 * @param  {boolean} [params.forceShow] If true, will always show the sticky (as opposed to only on hover)
	 * @param  {boolean} [params.noDelete] If true, will hide the delete instructions/button
	 * @param  {string} [params.type]		 "study","drawing","series", or whatever is causing the sticky to be displayed.
	 * @memberof CIQ.ChartEngine
	 * @since 6.0.0 consolidated arguments into a params object
	 */CIQ.ChartEngine.prototype.displaySticky=function(params){var m=this.controls.mSticky;if(!m)return;var mi=$$$(".mStickyInterior",m);if(!mi)return;var overlayTrashCan=$$$(".overlayTrashCan",m);var overlayEdit=$$$(".overlayEdit",m);var mouseDeleteInstructions=$$$(".mouseDeleteInstructions",m);// backwards compatibility:
if(!params||_typeof(params)!="object")params={message:arguments[0],backgroundColor:arguments[1],forceShow:arguments[2],noDelete:arguments[3],type:arguments[4]};var message=params.message,backgroundColor=params.backgroundColor,forceShow=params.forceShow,noDelete=params.noDelete,type=params.type;if(!forceShow&&!message){mi.innerHTML="";m.style.display="none";if(overlayTrashCan)overlayTrashCan.style.display="none";if(overlayEdit)overlayEdit.style.display="none";if(mouseDeleteInstructions)mouseDeleteInstructions.style.display="none";}else{if(!message)message="";if(forceShow&&!message){mi.style.backgroundColor="";mi.style.color="";mi.style.display="none";}else if(backgroundColor){mi.style.backgroundColor=backgroundColor;mi.style.color=CIQ.chooseForegroundColor(backgroundColor);mi.style.display="inline-block";}else{mi.style.backgroundColor="";mi.style.color="";mi.style.display="inline-block";}mi.innerHTML=message;var rtClick=$$$(".mStickyRightClick",m);rtClick.className="mStickyRightClick";//reset
if(type)CIQ.appendClassName(rtClick,"rightclick_"+type);rtClick.style.display="";m.style.display="inline-block";this.positionSticky(m);if(noDelete||this.bypassRightClick===true||this.bypassRightClick[type]){rtClick.style.display="none";}else if(this.highlightViaTap||this.touches.length){if(overlayTrashCan)overlayTrashCan.style.display="inline-block";if(overlayEdit)overlayEdit.style.display="inline-block";if(mouseDeleteInstructions)mouseDeleteInstructions.style.display="none";CIQ[(message===""?"":"un")+"appendClassName"](m,"hide");}else{if(mouseDeleteInstructions)mouseDeleteInstructions.style.display="block";}}};/**
	 * <span class="injection">INJECTABLE</span>
	 * Sets the innerHTML value of the `.mMeasure` HTML DOM Node to contain a measurement (price differential and bars/line distance), usually when a user hovers over a drawing.
	 * It is also used to display measurement as a drawing is being created or when using the 'Measure' tool.
	 *
	 * It also sets `this.controls.mSticky` with the measurement and displays it on `mSticky` on hover.
	 *
	 * Example: <B>23.83 (-12%) 11 Bars</B>
	 *
	 * It requires the UI to include the following div: ```<div class="currentMeasure"><span class="mMeasure"></span></div>```
	 *
	 * It can be styled via CSS. See example.
	 *
	 * @param {number} price1 Beginning price of the drawing
	 * @param {number|boolean} price2 Ending price of the drawing, pass <code>false</code> if you want to skip price and percentage display
	 * @param {number} tick1  Beginning tick of the drawing
	 * @param {number|boolean} tick2  Ending tick of the drawing, pass <code>false</code> if you want to skip tick count display
	 * @param {boolean} hover  True to turn on the measurement, false to turn it off
	 * @param {string} [name]  Name of drawing, not used by default but passed into injection
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 4.0.0 added name argument
	 * <br>&bull; 6.0.0 allow price2 and tick2 to be false, skipping the respective display
	 * @example
	 * // Measuring tool styling CSS sample
		.currentMeasure {
			text-align: left;
			display: inline-block;
			margin: 4px 0 0 20px;
			height: 20px;
			line-height: 20px;
		}

		.mMeasure {
			display: inline-block;
			margin: 0 0 0 0;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
			width:140px;
		}
		@example
		// This is an example of the framework to use for writing a prepend to further manipulate/display the measurements
		CIQ.ChartEngine.prototype.prepend("setMeasure",function(){

			var m=$$$(".mMeasure");

			if(!m) return; // cant show a measurement if the div is not present.

		 	// add your logic to manage the display of the measurements (price1, price2, tick1, tick2)
		 	//*****************************************
		 	var message = 'blah measurement';
		 	//*****************************************

			m.innerHTML=message;

			if(this.activeDrawing) return;		// Don't show measurement Sticky when in the process of drawing

			m=this.controls.mSticky;
			if (m) {
				var mStickyInterior=m.children[0];
				if(hover){
					m.style.display="inline-block";
					mStickyInterior.style.display="inline-block";
					if(price1){
						mStickyInterior.innerHTML=message;
					}
					this.positionSticky(m);
				}else{
					m.style.display="none";
					mStickyInterior.innerHTML="";
				}
			}

		 //return true; //if you don't want to continue into the regular function
		 //return false; //if you want to run through the standard function once you are done with your custom code.
		});
	 */CIQ.ChartEngine.prototype.setMeasure=function(price1,price2,tick1,tick2,hover){if(this.runPrepend("setMeasure",arguments))return;var m=$$$('.mMeasure',this.chart.drawingContainer);var message="";if(!price1){if(!this.anyHighlighted&&this.currentVectorParameters.vectorType==="")this.clearMeasure();}else{if(price2!==false){var distance=Math.round(Math.abs(price1-price2)*this.chart.roundit)/this.chart.roundit;distance=distance.toFixed(this.chart.yAxis.printDecimalPlaces);if(this.internationalizer){message+=this.internationalizer.numbers.format(distance);}else{message+=distance;}var pct=(price2-price1)/price1;if(Math.abs(pct)>0.1){pct=Math.round(pct*100);}else if(Math.abs(pct)>0.01){pct=Math.round(pct*1000)/10;}else{pct=Math.round(pct*10000)/100;}if(this.internationalizer){pct=this.internationalizer.percent.format(pct/100);}else{pct=pct+"%";}message+=" ("+pct+")";}if(tick2!==false){var ticks=Math.abs(tick2-tick1);ticks=Math.round(ticks)+1;var barsStr=this.translateIf("Bars");message+=" "+ticks+" "+barsStr;}if(m)m.innerHTML=message;}if(this.activeDrawing)return;// Don't show measurement Sticky when in the process of drawing
m=this.controls.mSticky;if(m){var mStickyInterior=m.children[0];if(hover){m.style.display="inline-block";mStickyInterior.style.display="inline-block";if(price1){mStickyInterior.innerHTML=message;}CIQ[(message===""?"":"un")+"appendClassName"](m,"hide");this.positionSticky(m);}else{m.style.display="none";mStickyInterior.innerHTML="";}}this.runAppend("setMeasure",arguments);};/**
	 * Clears the innerHTML value of the `.mMeasure` HTML DOM Node.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.clearMeasure=function(){var m=$$$('.mMeasure',this.chart.drawingContainer);if(m)m.innerHTML="";};/**
	 * Returns the X pixel give the location of a bar (dataSegment) on the chart.
	 * @param  {number} bar The bar (position on the chart which is also the position in the dataSegment)
	 * @param {CIQ.ChartEngine.Chart} [chart] Which chart to use. Defaults to this.chart.
	 * @return {number}		The X pixel on the chart
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.pixelFromBar=function(bar,chart){if(!chart)chart=this.chart;var x=0,segmentImage=this.chart.segmentImage;if(segmentImage&&segmentImage[bar]&&segmentImage[bar].leftOffset){x=segmentImage[bar].leftOffset;}else{x=(bar+0.5)*this.layout.candleWidth;}x=chart.panel.left+Math.floor(x+this.micropixels)-1;return x;};/**
	 * Returns the position (array index) of the first **dataSegment** element encountered given the X pixel.
	 * Do not reference this into dataSegment without checking bounds, because the return value may be negative or greater than the dataSegment array length.
	 *
	 * See {@link CIQ.ChartEngine#tickFromPixel} if you wish to locate the dataSet position.
	 *
	 * @param  {number} x An X pixel location on the chart
	 * @param {CIQ.ChartEngine.Chart} [chart] Which chart to use. Defaults to this.chart.
	 * @return {number}	  The bar that lies on the X pixel (may be negative/before or after the chart)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.barFromPixel=function(x,chart){if(!chart)chart=this.chart;var segmentImage=this.chart.segmentImage,mp=this.micropixels,cw=this.layout.candleWidth;if(segmentImage){//binary search
var pixel=x-chart.panel.left-mp,mult=2,quote;var length=segmentImage.length;var bar=Math.round(length/mult);var leftOffset,halfCandleWidth;var rightofLastTick=segmentImage[length-1].leftOffset+segmentImage[length-1].candleWidth/2;if(pixel>rightofLastTick){//beyond the rightmost tick
return length+Math.floor((x-rightofLastTick-chart.panel.left-mp)/cw);}for(var i=1;i<length;i++){mult*=2;quote=segmentImage[bar];if(!quote)break;leftOffset=quote.leftOffset;halfCandleWidth=quote.candleWidth/2;var left=leftOffset-halfCandleWidth;var right=leftOffset+halfCandleWidth;if(bar===0||pixel>=left&&pixel<right)break;else if(pixel<left)bar-=Math.max(1,Math.round(length/mult));else bar+=Math.max(1,Math.round(length/mult));bar=Math.max(0,Math.min(length-1,bar));}if(!segmentImage[bar]){//sucks, we need to iterate through
for(i=0;i<length;i++){quote=segmentImage[i];if(!quote)continue;leftOffset=quote.leftOffset;halfCandleWidth=quote.candleWidth/2;if(pixel<leftOffset-halfCandleWidth)return Math.max(0,i-1);else if(pixel<leftOffset+halfCandleWidth)return i;else if(pixel>=leftOffset+halfCandleWidth)return i+1;}}return bar;}return Math.floor((x-chart.panel.left-mp)/cw);};/**
	 * Returns the position (array index) of the first **dataSet** element encountered given the X pixel.
	 *
	 * See {@link CIQ.ChartEngine#barFromPixel} if you wish to locate the dataSegment position.
	 *
	 * @param  {number} x	  X pixel location
	 * @param  {CIQ.ChartEngine.Chart} [chart] A chart object
	 * @return {number}		  The tick (position in the dataSet)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.tickFromPixel=function(x,chart){if(!chart)chart=this.chart;var tick=chart.dataSet.length-chart.scroll;if(chart.segmentImage){tick+=this.barFromPixel(x,chart);}else{tick+=Math.floor((x-chart.panel.left-this.micropixels)/this.layout.candleWidth);}return tick;};/**
	 * Returns an X pixel for the given tick. The X pixel will be the center of the tick location.
	 * Note that the pixel may be off of the visual canvas and that it might overlap the Y axis.
	 * @param  {number} tick  The tick (position in the dataSet array)
	 * @param  {CIQ.ChartEngine.Chart} [chart] A chart object
	 * @return {number}		  The X position in pixels (may be negative or may be greater than dataSet.length)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.pixelFromTick=function(tick,chart){if(!chart)chart=this.chart;var dataSegment=chart.dataSegment,dataSet=chart.dataSet,segmentImage=chart.segmentImage,mp=this.micropixels,length=dataSegment?dataSegment.length:0;var panel=chart.panel,scroll=chart.scroll;var bar=tick-dataSet.length+scroll,quote=length?dataSegment[bar]:null;if(segmentImage)quote=segmentImage[bar];if(quote&&quote.leftOffset){return panel.left+Math.floor(quote.leftOffset+mp);//in here for volume candle
}//in here for other chart types, or volume candle if bar lies outside of the actual quote data
var rightOffset=0,dsTicks=0;quote=length?dataSegment[length-1]:null;if(segmentImage)quote=segmentImage[length-1];if(quote&&quote.leftOffset){//volume candle
if(length<tick-dataSet.length+scroll){//in the "whitespace" area on the right of the chart
rightOffset=quote.leftOffset-quote.candleWidth/2;dsTicks=length;}}return rightOffset+panel.left+Math.floor((tick-dsTicks-dataSet.length+scroll+0.5)*this.layout.candleWidth+mp);};/**
	 * Returns the X pixel position for a tick of a given date.
	 *
	 * The date does not need to match exactly. If the date lies between ticks then the earlier will be returned.
	 *
	 * **Warning: this can be an expensive operation if the date is not in the dataSet.**
	 *
	 * @param  {string} date  String form date
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to look in
	 * @param  {number} [adj] Timezone adjustment in minutes to apply to date before getting tick
	 * @param  {boolean} [forward] Switch to return the next tick as opposed to the previous, in case an exact match is not found
	 * @return {number}		  The pixel location for the date
	 * @todo  Use Date object instead of string form date
	 * @memberof CIQ.ChartEngine
	 * @since added adj and forward arguments
	 */CIQ.ChartEngine.prototype.pixelFromDate=function(date,chart,adj,forward){return this.pixelFromTick(this.tickFromDate(date,chart,adj,forward),chart);};/**
	 * A version of {@link CIQ.ChartEngine#priceFromPixel} that will return the y-axis value given a Y pixel
	 * @param  {number} y	  The Y pixel location
	 * @param  {CIQ.ChartEngine.Panel} [panel] The panel (defaults to the chart)
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yAxis to use
	 * @return {number}		  The Y axis value
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.transformedPriceFromPixel=function(y,panel,yAxis){if(!panel)panel=this.chart.panel;var yax=yAxis?yAxis:panel.yAxis;y=yax.bottom-y;var price;if(yax.semiLog){var logPrice=yax.logLow+y*yax.logShadow/yax.height;price=Math.pow(10,logPrice);}else{if(!yax.multiplier)return null;price=yax.low+y/yax.multiplier;}return price;};/**
	 * Returns the actual value of the chart given a pixel regardless of any transformation such as a comparison chart.
	 * @param  {number} y	  The Y pixel location
	 * @param  {CIQ.ChartEngine.Panel} [panel] The panel to look. Defaults to the chart itself if not passed in.
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yAxis to use. Defaults to panel.yAxis.
	 * @return {number}		  The Y location. This may be off of the visible canvas.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.priceFromPixel=function(y,panel,yAxis){if(!panel)panel=this.chart.panel;var price=this.transformedPriceFromPixel(y,panel,yAxis);if(this.charts[panel.name]&&panel.chart.untransformFunc){if(!yAxis||yAxis==panel.yAxis){price=panel.chart.untransformFunc(this,panel.chart,price,yAxis);}}return price;};/**
	 * Returns the value (price) given a Y-axis pixel. The value is relative to the panel or the canvas.
	 * @param  {number} y	  The y pixel position
	 * @param  {CIQ.ChartEngine.Panel} [panel] A panel object. If passed then the value will be relative to that panel. If not passed then the value will be relative to the panel that is in the actual Y location.
	 * @param  {CIQ.ChartEngine.YAxis} [yAxis] Which yAxis. Defaults to panel.yAxis.
	 * @return {number}		  The value relative to the panel
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.valueFromPixel=function(y,panel,yAxis){if(!panel)panel=this.whichPanel(y);if(!panel){// If we're not in a current panel then we're off the screen, so choose the top or bottom panel
// Ideally we never get in here because panel is passed in by the developer!
if(y<=0){panel=this.panels[CIQ.first(this.panels)];}else{panel=this.panels[CIQ.last(this.panels)];}}return this.priceFromPixel(y,panel,yAxis);};/**
	 * A version of {@link CIQ.ChartEngine#valueFromPixel} that will untransform a transformation such as a comparison chart.
	 * @param  {number} y	  The y pixel location
	 * @param  {CIQ.ChartEngine.Panel} panel A panel object. It is strongly recommended to pass the panel! (see {@link CIQ.ChartEngine#valueFromPixel})
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use. Defaults to panel.yAxis.
	 * @return {number}		  The price or value
	 * @memberof CIQ.ChartEngine
	 * @deprecated Use {@link CIQ.ChartEngine#valueFromPixel} instead
	 */CIQ.ChartEngine.prototype.valueFromPixelUntransform=function(y,panel,yAxis){return this.valueFromPixel(y,panel,yAxis);};/**
	 * A version of {@link CIQ.ChartEngine#pixelFromPrice} that will apply a transformation such as a comparison chart.
	 * @param  {number} price	  The price or value
	 * @param  {CIQ.ChartEngine.Panel} panel A panel object (see {@link CIQ.ChartEngine#pixelFromPrice})
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use
	 * @return {number}		  The y axis pixel location
	 * @memberof CIQ.ChartEngine
	 * @deprecated Use {@link CIQ.ChartEngine#pixelFromPrice} instead
	 */CIQ.ChartEngine.prototype.pixelFromPriceTransform=function(price,panel,yAxis){return this.pixelFromPrice(price,panel,yAxis);};/**
	 * A version of {@link CIQ.ChartEngine#pixelFromPrice} that will return the Y pixel from a given price (or value)
	 * @param  {number} price The price
	 * @param  {CIQ.ChartEngine.Panel} [panel] The panel (defaults to the chart)
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yAxis to use
	 * @return {number}		  The Y pixel value
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.pixelFromTransformedValue=function(price,panel,yAxis){if(!panel)panel=this.chart.panel;var yax=yAxis?yAxis:panel.yAxis;var y=(yax.high-price)*yax.multiplier;if(yax.semiLog){var p=Math.max(price,0);var logPrice=Math.log(p)/Math.LN10;//if(price<=0) logPrice=0;
var height=yax.height;y=height-height*(logPrice-yax.logLow)/yax.logShadow;}y+=yax.top;return y;};/**
	 * Returns the Y pixel from a transformation such as a comparison chart or from the actual value otherwise.
	 * @param  {number} price	  The price or value
	 * @param  {CIQ.ChartEngine.Panel} panel A panel object (see {@link CIQ.ChartEngine#pixelFromPrice})
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use
	 * @return {number}		  The y axis pixel location
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.pixelFromPrice=function(price,panel,yAxis){if(!panel)panel=this.chart.panel;if(this.charts[panel.name]&&panel.chart.transformFunc){if(!yAxis||yAxis==panel.yAxis){price=panel.chart.transformFunc(this,panel.chart,price,yAxis);// transform should move to panel
}}return this.pixelFromTransformedValue(price,panel,yAxis);};/**
	 * Returns the Y pixel location for the (split) unadjusted price rather than the displayed price.
	 * This is important for drawing tools or any other device that requires the actual underlying price.
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to get the value from
	 * @param  {number} tick  The tick location (in the dataSet) to check for an adjusted value
	 * @param  {number} value The value
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] The yaxis to use
	 * @return {number}		  The pixel location
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.pixelFromValueAdjusted=function(panel,tick,value,yAxis){// If we're not showing unadjusted quotes, or if the panel isn't a chart then bypass
if(this.layout.adj||!this.charts[panel.name])return this.pixelFromPrice(value,panel,yAxis);var a=Math.round(tick);// Not sure why we're rounding this. Possible legacy code.
// Adjust if there's a ratio attached to the tick
var ratio;if(a>0&&a<panel.chart.dataSet.length&&(ratio=panel.chart.dataSet[a].ratio)){return this.pixelFromPrice(value*ratio,panel,yAxis);}// Otherwise pass through
return this.pixelFromPrice(value,panel,yAxis);};/**
	 * Returns the unadjusted value for a given value, if an adjustment (split) had been applied. This can return a value
	 * relative to the original closing price.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to check
	 * @param  {number} tick  The location in the dataset
	 * @param  {number} value The value to adjust
	 * @return {number}		  The adjusted value
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.adjustIfNecessary=function(panel,tick,value){if(this.layout.adj)return value;// Already adjusted prices
if(!panel||!this.charts[panel.name])return value;var a=Math.round(tick);var ratio;if(a>0&&a<panel.chart.dataSet.length&&(ratio=panel.chart.dataSet[a].ratio)){return value/ratio;}return value;};/**
	 * Sets a transformation and untransformation function. Transforms can be used to transform the Y-Axis from absolute
	 * to relative values. For instance, comparison charts use a transform that adjusts from price to percentage.
	 * After this is called, chart.transformFunc and chart.untransformFunc will be set to those functions.
	 * @param {CIQ.ChartEngine.Chart} chart			   The chart to transform
	 * @param {function} transformFunction	 A transformation callback function which takes a number and returns the transformation of that number
	 * @param {function} untransformFunction An untransformation callback function
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setTransform=function(chart,transformFunction,untransformFunction){chart.transformFunc=transformFunction;chart.untransformFunc=untransformFunction;};/**
	 * Removes a transformation/untransformation pair
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to remove transformations from
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.unsetTransform=function(chart){delete chart.transformFunc;delete chart.untransformFunc;for(var i=0;chart.dataSet&&i<chart.dataSet.length;i++){chart.dataSet[i].transform=null;}};/**
	 * <span class="injection">INJECTABLE</span>
	 * Stops (aborts) the current drawing. See {@link CIQ.ChartEngine#undoLast} for an actual "undo" operation.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias undo
	 */CIQ.ChartEngine.prototype.undo=function(){if(this.runPrepend("undo",arguments))return;if(this.activeDrawing){this.activeDrawing.abort();this.activateDrawing(null);CIQ.clearCanvas(this.chart.tempCanvas,this);this.draw();CIQ.swapClassName(this.controls.crossX,"stx_crosshair","stx_crosshair_drawing");CIQ.swapClassName(this.controls.crossY,"stx_crosshair","stx_crosshair_drawing");CIQ.ChartEngine.drawingLine=false;}this.runAppend("undo",arguments);};/**
	 * Creates an undo stamp for the chart's current drawing state and triggers a call to the {@link undoStampEventListener}.
	 *
	 * Every time a drawing is added or removed the {@link CIQ.ChartEngine#undoStamps} object is updated with a new entry containing the resulting set of drawings.
	 * Using the corresponding {@link CIQ.ChartEngine#undoLast} method, you can revert back to the last state, one at a time.
	 * You can also use the {@link undoStampEventListener} to create your own tracker to undo or redo drawings.
	 * @memberof CIQ.ChartEngine
	 * @param {array} before The chart's array of drawingObjects before being modified
	 * @param {array} after The chart's array of drawingObjects after being modified
	 */CIQ.ChartEngine.prototype.undoStamp=function(before,after){this.undoStamps.push(before);this.dispatch("undoStamp",{before:before,after:after,stx:this});};/**
	 * Revers back to the previous drawing state change.
	 * **Note: by design this method only manages drawings manually added during the current session and will not remove drawings restored from
	 * a previous session. ** If you wish to remove all drawings use {@link CIQ.ChartEngine#clearDrawings}.
	 *
	 * You can also view and interact with all drawings by traversing through the {@link CIQ.ChartEngine#drawingObjects} array which includes **all** drawings displayed
	 * on the chart, regardless of session. Removing a drawing from this list, will remove the drawing from the chart after a draw() operation is executed.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.undoLast=function(){if(this.activeDrawing){this.undo();}else{if(this.undoStamps.length){this.drawingObjects=this.undoStamps.pop();this.changeOccurred("vector");this.draw();}}};/**
	 * Programmatically add a drawing
	 * @param {object} drawing The drawing definition
	 * @todo  Document drawing JSON format
	 * @memberof CIQ.ChartEngine
	 * @private
	 */CIQ.ChartEngine.prototype.addDrawing=function(drawing){var drawings=CIQ.shallowClone(this.drawingObjects);this.drawingObjects.push(drawing);this.undoStamp(drawings,CIQ.shallowClone(this.drawingObjects));};/**
	 * Draws a series of connected lines on the canvas. The points are in a straight array for compactness. This is used
	 * for instance in the freeform (doodle) drawing tool
	 * @param  {array} points		  A series of points in the pattern x0,y0,x1,y1
	 * @param  {string} color		   Either a color or a Styles object as returned from {@link CIQ.ChartEngine#canvasStyle}
	 * @param  {string} type		   The type of line to draw ("segment","ray" or "line")
	 * @param  {external:CanvasRenderingContext2D} [context]		The canvas context. Defaults to the standard context.
	 * @param  {object} [confineToPanel] Panel the line should be drawn in, and not cross through. Or set to 'true' to confine to the main chart panel.
	 * @param  {object} [parameters]	 Additional parameters to describe the line
	 * @param {string} [parameters.pattern] The pattern for the line ("solid","dashed","dotted")
	 * @param {number} [parameters.width] The width in pixels for the line
	 * @param {number} [parameters.opacity] Opacity for the line
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.connectTheDots=function(points,color,type,context,confineToPanel,parameters){if(!parameters)parameters={};if(parameters.pattern=="none")return;if(confineToPanel===true)confineToPanel=this.chart.panel;if(context===null||typeof context=="undefined")context=this.chart.context;if(points.length<4)return;var edgeTop=0;var edgeBottom=this.chart.canvasHeight;var edgeLeft=0;var edgeRight=this.chart.width;if(confineToPanel){edgeBottom=confineToPanel.yAxis.bottom;edgeTop=confineToPanel.yAxis.top;}context.lineWidth=1.1;// Use 1.1 instead of 1 to get good anti-aliasing on Android Chrome
if(_typeof(color)=="object"){context.strokeStyle=color.color;if(color.opacity)context.globalAlpha=color.opacity;else context.globalAlpha=1;context.lineWidth=parseInt(CIQ.stripPX(color.width),10);}else{if(!color||color=="auto"||CIQ.isTransparent(color)){context.strokeStyle=this.defaultColor;}else{context.strokeStyle=color;}}if(parameters.opacity)context.globalAlpha=parameters.opacity;if(parameters.lineWidth)context.lineWidth=parameters.lineWidth;var pattern=CIQ.borderPatternToArray(context.lineWidth,parameters.pattern);context.beginPath();for(var i=0;i<points.length-2;i+=2){var x0=points[i];var y0=points[i+1];var x1=points[i+2];var y1=points[i+3];if(isNaN(x0)||isNaN(x1)||isNaN(y0)||isNaN(y1))return;var t0=0.0,t1=1.0;var xdelta=x1-x0;var ydelta=y1-y0;var p,q,r;for(var edge=0;edge<4;edge++){if(edge===0){p=-xdelta;q=-(edgeLeft-x0);}if(edge==1){p=xdelta;q=edgeRight-x0;}if(edge==2){p=-ydelta;q=-(edgeTop-y0);}if(edge==3){p=ydelta;q=edgeBottom-y0;}r=q/p;if((y1||y1===0)&&p===0&&q<0){return false;// Don't draw line at all. (parallel horizontal line outside)
}if(p<0){if(r>t1)return false;// Don't draw line at all.
else if(r>t0)t0=r;// Line is clipped!
}else if(p>0){if(r<t0)return false;// Don't draw line at all.
else if(r<t1)t1=r;// Line is clipped!
}}var x0clip=x0+t0*xdelta;var y0clip=y0+t0*ydelta;var x1clip=x0+t1*xdelta;var y1clip=y0+t1*ydelta;try{if(pattern&&pattern.length){context.dashedLineTo(x0clip,y0clip,x1clip,y1clip,pattern);}else{context.moveTo(x0clip,y0clip);context.lineTo(x1clip,y1clip);}}catch(e){//alert(x0clip + ":" + y0clip + " " + x1clip + ":" + y1clip);
}}context.stroke();context.closePath();context.globalAlpha=1;context.lineWidth=1;};// confineToPanel is not used because currently we are splining after the drawing is complete.
// should that change we will need to implement it
/**
	 * Draws a series of points and splines (smooths the curve) those points.
	 *
	 * This is uses for drawings, not series.
	 * @param  {array} points		  A series of points in the pattern x0,y0,x1,y1
	 * @param {number} tension Spline tension (0-1). Set to negative to not spline. Requires "js/thirdparty/splines.js"
	 * @param  {string} color		   Either a color or a Styles object as returned from {@link CIQ.ChartEngine#canvasStyle}
	 * @param  {string} type		   The type of line to draw ("segment","ray" or "line")
	 * @param  {external:CanvasRenderingContext2D} [context]		The canvas context. Defaults to the standard context.
	 * @param  {string} [confineToPanel] Not currently implemented
	 * @param  {object} [parameters]	 Additional parameters to describe the line
	 * @param {string} [parameters.pattern] The pattern for the line ("solid","dashed","dotted")
	 * @param {number} [parameters.width] The width in pixels for the line
	 * @param {number} [parameters.opacity] Opacity for the line
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.plotSpline=function(points,tension,color,type,context,confineToPanel,parameters){if(!parameters)parameters={};if(parameters.pattern=="none")return;if(confineToPanel===true)confineToPanel=this.chart.panel;if(context===null||typeof context=="undefined")context=this.chart.context;context.save();context.lineWidth=1.1;// Use 1.1 instead of 1 to get good anti-aliasing on Android Chrome
if(_typeof(color)=="object"){context.strokeStyle=color.color;if(color.opacity)context.globalAlpha=color.opacity;else context.globalAlpha=1;context.lineWidth=parseInt(CIQ.stripPX(color.width),10);}else{if(!color||color=="auto"||CIQ.isTransparent(color)){context.strokeStyle=this.defaultColor;}else{context.strokeStyle=color;}}if(parameters.opacity)context.globalAlpha=parameters.opacity;if(parameters.lineWidth)context.lineWidth=parameters.lineWidth;var pattern=CIQ.borderPatternToArray(context.lineWidth,parameters.pattern);if(parameters.pattern&&context.setLineDash){context.setLineDash(pattern);context.lineDashOffset=0;//start point in array
}//stxThirdParty
context.beginPath();splinePlotter.plotSpline(points,tension,context);context.stroke();context.closePath();context.restore();};/**
	 * Repositions a drawing onto the temporary canvas. Called when a user moves a drawing.
	 * @param  {CIQ.Drawing} drawing The drawing to reposition
	 * @param  {boolean} activating True when first activating "reposition", so the drawing simply gets re-rendered in the same spot but on the tempCanvas.
	 * (Otherwise it would jump immediately to the location of the next click/touch).
	 * @since  3.0.0
	 * @since 5.0.0 Added activating parameter
	 * @private
	 */CIQ.ChartEngine.prototype.repositionDrawing=function(drawing,activating){var panel=this.panels[drawing.panelName];var value=this.adjustIfNecessary(panel,this.crosshairTick,this.valueFromPixel(this.backOutY(CIQ.ChartEngine.crosshairY),panel));var tempCanvas=this.chart.tempCanvas;CIQ.clearCanvas(tempCanvas,this);if(activating){drawing.render(tempCanvas.context);}else{drawing.reposition(tempCanvas.context,drawing.repositioner,this.crosshairTick,value);}if(drawing.measure)drawing.measure();};/**
	 * Activates or deactivates repositioning on a drawings.
	 * @param  {CIQ.Drawing} drawing The drawing to activate. null to deactivate the current drawing.
	 * @memberOf  CIQ.ChartEngine
	 * @since  3.0.0
	 */CIQ.ChartEngine.prototype.activateRepositioning=function(drawing){var repositioningDrawing=this.repositioningDrawing=drawing;if(drawing){// Take the drawing off the main canvas and put it on the tempCanvas
this.draw();this.repositionDrawing(drawing,true);}this.chart.tempCanvas.style.display=drawing?"block":"none";};/**
	 * Activate a drawing. The user can then finish the drawing.
	 *
	 * Note: Some drawings labeled "chartsOnly" can only be activated on the chart panel.
	 * @param {string} drawingTool The tool to activate. Send null to deactivate.
	 * @param {CIQ.ChartEngine.Panel} [panel] The panel where to activate the tool. Defaults to the chart panel.
	 * @return {boolean} Returns true if the drawing was successfully activated. Returns false if unactivated or unsuccessful.
	 * @memberof CIQ.ChartEngine
	 * @since  3.0.0
	 */CIQ.ChartEngine.prototype.activateDrawing=function(drawingTool,panel){if(!drawingTool){this.activeDrawing=null;this.chart.tempCanvas.style.display="none";return false;}if(!panel)panel=this.chart.panel;var Factory=CIQ.ChartEngine.drawingTools[drawingTool];if(!Factory){if(CIQ.Drawing[drawingTool]){Factory=CIQ.Drawing[drawingTool];CIQ.ChartEngine.registerDrawingTool(drawingTool,Factory);}}if(Factory){this.activeDrawing=new Factory();this.activeDrawing.construct(this,panel);if(!this.charts[panel.name]){if(this.activeDrawing.chartsOnly){this.activeDrawing=null;return false;}}}this.chart.tempCanvas.style.display="block";return true;};/**
	 * This is called to send a potential click event to an active drawing, if one is active.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel in which the click occurred
	 * @param  {number} x	  The X pixel location of the click
	 * @param  {number} y	  The y pixel location of the click
	 * @return {boolean}	  Returns true if a drawing is active and received the click
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.drawingClick=function(panel,x,y){if(!CIQ.Drawing)return;if(!panel)return;// can be true if panel was closed in the middle of a drawing
if(this.openDialog!=="")return;// don't register a drawing click if in modal mode
if(!this.activeDrawing){if(!this.activateDrawing(this.currentVectorParameters.vectorType,panel))return;}if(this.activeDrawing){if(this.userPointerDown&&!this.activeDrawing.dragToDraw){if(!CIQ.ChartEngine.drawingLine)this.activateDrawing(null);return;}var tick=this.tickFromPixel(x,panel.chart);var dpanel=this.panels[this.activeDrawing.panelName];var value=this.adjustIfNecessary(dpanel,tick,this.valueFromPixel(y,dpanel));if(this.preferences.magnet&&this.magnetizedPrice){value=this.adjustIfNecessary(dpanel,tick,this.magnetizedPrice);}if(this.activeDrawing.click(this.chart.tempCanvas.context,tick,value)){if(this.activeDrawing){// Just in case the drawing aborted itself, such as measure
CIQ.ChartEngine.drawingLine=false;CIQ.clearCanvas(this.chart.tempCanvas,this);this.addDrawing(this.activeDrawing);// Save drawing
this.activateDrawing(null);this.adjustDrawings();//moved from individual drawing.click function to here --gus
this.draw();this.changeOccurred("vector");CIQ.swapClassName(this.controls.crossX,"stx_crosshair","stx_crosshair_drawing");CIQ.swapClassName(this.controls.crossY,"stx_crosshair","stx_crosshair_drawing");}}else{this.changeOccurred("drawing");CIQ.ChartEngine.drawingLine=true;CIQ.swapClassName(this.controls.crossX,"stx_crosshair_drawing","stx_crosshair");CIQ.swapClassName(this.controls.crossY,"stx_crosshair_drawing","stx_crosshair");}return true;}return false;};/**
	 * Returns the panel for the given Y pixel. Used for instance to determine which panel the crosshairs are in.
	 * @param  {number} y Y pixel location
	 * @return {CIQ.ChartEngine.Panel}	  The panel containing the Y location. Null if the Y location is outside of all panels.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.whichPanel=function(y){for(var p in this.panels){var panel=this.panels[p];if(panel.hidden)continue;if(y>panel.top&&y<panel.bottom)return panel;}return null;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Called whenever the user lifts the mousebutton up. This may send a click to a drawing, or cease a drag operation.
	 * @param  {Event} e A mouse event
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias mouseup
	 */CIQ.ChartEngine.prototype.mouseup=function(e){if(this.runPrepend("mouseup",arguments))return;this.swipe.end=true;this.cancelLongHold=true;if(this.repositioningDrawing){// if we single click with a drawing tool enabled, then start another drawing instead of moving current one
if(!this.currentVectorParameters.vectorType||Date.now()-this.mouseTimer>250){this.changeOccurred("vector");CIQ.clearCanvas(this.chart.tempCanvas,this);this.activateRepositioning(null);this.adjustDrawings();// added missing adjusts when repositioning a Drawing  --gus
this.draw();return;}this.activateRepositioning(null);}if(this.repositioningBaseline){this.repositioningBaseline=null;var mainSeriesRenderer=this.mainSeriesRenderer||{};if(mainSeriesRenderer.params&&mainSeriesRenderer.params.baseline&&mainSeriesRenderer.params.type!="mountain"){//this is so the baseline does not pop back to the center
this.chart.panel.yAxis.scroll=this.pixelFromPrice(this.chart.baseline.userLevel,this.chart.panel)-(this.chart.panel.yAxis.top+this.chart.panel.yAxis.bottom)/2;}this.draw();return;}var wasMouseDown=this.userPointerDown;this.userPointerDown=false;if(!this.displayInitialized)return;// No chart displayed yet
this.grabbingScreen=false;if(this.openDialog!==""){if(CIQ.ChartEngine.insideChart)CIQ.unappendClassName(this.container,"stx-drag-chart");//in case they were grabbing the screen and let go on top of the button.
return;}if(this.grabOverrideClick){if(!this.overXAxis&&!this.overYAxis)this.swipeRelease();CIQ.unappendClassName(this.container,"stx-drag-chart");this.grabOverrideClick=false;this.doDisplayCrosshairs();this.updateChartAccessories();return;}//if(!this.displayCrosshairs) return;
if(CIQ.ChartEngine.insideChart)CIQ.unappendClassName(this.container,"stx-drag-chart");if(CIQ.ChartEngine.resizingPanel){this.releaseHandle();//CIQ.clearCanvas(this.chart.tempCanvas, this);
//this.resizePanels();
//CIQ.ChartEngine.resizingPanel=null;
return;}if(!e)e=event;//IE8
var cy=this.backOutY(e.clientY);var cx=this.backOutX(e.clientX);if(e.which&&e.which>=2||e.button&&e.button>=2||e.ctrlKey){if(this.anyHighlighted&&this.bypassRightClick!==true){this.rightClickHighlighted();if(e.preventDefault&&this.captureTouchEvents)e.preventDefault();e.stopPropagation();return false;}this.dispatch("rightClick",{stx:this,panel:this.currentPanel,x:cx,y:cy});return true;}if(e.clientX<this.left||e.clientX>this.right)return;if(e.clientY<this.top||e.clientY>this.bottom)return;if(wasMouseDown&&(!this.longHoldTookEffect||this.activeDrawing)){//only completes drawing if you if don't leave chart and let go of mouse button
this.drawingClick(this.currentPanel,cx,cy);}if(!this.activeDrawing&&!this.longHoldTookEffect){this.dispatch("tap",{stx:this,panel:this.currentPanel,x:cx,y:cy});}this.runAppend("mouseup",arguments);};/**
	 * Turns on the grabbing hand cursor. It does this by appending the class "stx-drag-chart" to the chart container.
	 * If this is a problem then just eliminate this function from the prototype.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.grabbingHand=function(){if(!this.allowScroll)return;if(!this.grabbingScreen)return;if(CIQ.touchDevice)return;CIQ.appendClassName(this.container,"stx-drag-chart");};/**
	 * <span class="injection">INJECTABLE</span>
	 * Called when the user presses the mouse button down. This will activate dragging operations once the user moves a few pixels
	 * within {@link CIQ.ChartEngine#mousemoveinner}.
	 * @param  {Event} e The mouse event
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias mousedown
	 */CIQ.ChartEngine.prototype.mousedown=function(e){if(this.runPrepend("mousedown",arguments))return;this.grabOverrideClick=false;//if(this.openDialog!=="") return;
if(!this.displayInitialized)return;// No chart displayed yet
if(!this.displayCrosshairs)return;if(this.repositioningDrawing)return;// if mouse went off screen this might happen
if(this.editingAnnotation)return;if(!e)e=event;//IE8
if(e.which&&e.which>=2||e.button&&e.button>=2){// Added 9/19/13 to prevent mFinance bug where right click wouldn't eliminate drawing
return;}var rect=this.container.getBoundingClientRect();this.top=rect.top;this.left=rect.left;this.right=this.left+this.width;this.bottom=this.top+this.height;if(e.clientX>=this.left&&e.clientX<=this.right&&e.clientY>=this.top&&e.clientY<=this.bottom){CIQ.ChartEngine.insideChart=true;}else{CIQ.ChartEngine.insideChart=false;return;}if(!this.currentPanel)return;if(this.manageTouchAndMouse&&e&&e.preventDefault&&this.captureTouchEvents)e.preventDefault();// Added 9/19/13 to prevent IE from going into highlight mode when you mouseout of the container
this.mouseTimer=Date.now();this.longHoldTookEffect=false;this.hasDragged=false;this.userPointerDown=true;var chart=this.currentPanel.chart;for(var i=0;i<this.drawingObjects.length;i++){var drawing=this.drawingObjects[i];if(drawing.highlighted&&!drawing.permanent){if(this.cloneDrawing){// clone a drawing if flag set
var Factory=CIQ.ChartEngine.drawingTools[drawing.name];var clonedDrawing=new Factory();clonedDrawing.reconstruct(this,drawing.serialize());this.drawingObjects.push(clonedDrawing);this.activateRepositioning(clonedDrawing);clonedDrawing.repositioner=drawing.repositioner;return;}var drawingTool=this.currentVectorParameters.vectorType;// do not allow repositioning if the drawing tool has dragToDraw (like the freeform)
if(!CIQ.Drawing||!drawingTool||!CIQ.Drawing[drawingTool]||!new CIQ.Drawing[drawingTool]().dragToDraw){this.activateRepositioning(drawing);return;}}}var mainSeriesRenderer=this.mainSeriesRenderer||{};if(mainSeriesRenderer.params&&mainSeriesRenderer.params.baseline&&chart.baseline.userLevel!==false&&this.controls.baselineHandle){var y0=this.valueFromPixel(this.cy-5,this.currentPanel);var y1=this.valueFromPixel(this.cy+5,this.currentPanel);var x0=this.chart.right-parseInt(getComputedStyle(this.controls.baselineHandle).width,10);if(chart.baseline.actualLevel<y0&&chart.baseline.actualLevel>y1&&this.cx>x0){this.repositioningBaseline={lastDraw:Date.now()};return;}}this.drawingClick(this.currentPanel,this.cx,this.cy);if(this.activeDrawing&&this.activeDrawing.dragToDraw)return;this.grabbingScreen=true;chart.spanLock=false;this.yToleranceBroken=false;if(!e)e=event;//IE8
/* use e.client insead of e.page since we need the value to be relative to the viewport instead of the overall document size.
		if(!e.pageX){
			e.pageX=e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			e.pageY=e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}
		*/this.grabStartX=e.clientX;this.grabStartY=e.clientY;this.grabStartMicropixels=this.micropixels;this.grabStartScrollX=chart.scroll;this.grabStartScrollY=this.currentPanel.yAxis.scroll;this.grabStartCandleWidth=this.layout.candleWidth;this.grabStartYAxis=this.whichYAxis(this.currentPanel);this.grabStartZoom=this.grabStartYAxis?this.grabStartYAxis.zoom:0;this.grabStartPanel=this.currentPanel;setTimeout(function(self){return function(){self.grabbingHand();};}(this),100);this.swipeStart(chart);if(this.longHoldTime)this.startLongHoldTimer();this.runAppend("mousedown",arguments);};CIQ.ChartEngine.prototype.startLongHoldTimer=function(){var stx=this;this.cancelLongHold=false;if(this.longHoldTimeout)clearTimeout(this.longHoldTimeout);this.longHoldTimeout=setTimeout(function(){if(stx.cancelLongHold)return;stx.dispatch("longhold",{stx:stx,panel:stx.currentPanel,x:stx.cx,y:stx.cy});stx.longHoldTookEffect=true;},this.longHoldTime);};/**
	 * Sets the current drawing tool as described by {@link CIQ.ChartEngine#currentVectorParameters} (segment, line, etc)
	 * @param  {string} value The name of the drawing tool to enable
	 * @memberof CIQ.ChartEngine
	 * @example
	 * // activates a drawing type described by currentVectorParameters
	 * stxx.changeVectorType('rectangle');
	 * // deactivates drawing mode
	 * stxx.changeVectorType('');
	 * // clears the drawings
	 * stxx.clearDrawings()
	 */CIQ.ChartEngine.prototype.changeVectorType=function(value){this.currentVectorParameters.vectorType=value;CIQ.Drawing.initializeSettings(this,value);//if(value==""){  //need to always undo here to allow release of last drawing tool
if(CIQ.ChartEngine.drawingLine)this.undo();//}
this.setCrosshairColors();if(CIQ.ChartEngine.insideChart)this.doDisplayCrosshairs();};/**
	 * Sets the current drawing parameter as described by {@link CIQ.ChartEngine#currentVectorParameters} (color, pattern, etc)
	 * @param  {string} value The name of the drawing parameter to change (currentColor, fillColor, lineWidth, pattern, axisLabel, fontSize, fontStyle, fontWeight, fontFamily)
	 * @param  {string} value The value of the parameter
	 * @return  {boolean} True if property was assigned
	 * @memberof CIQ.ChartEngine
	 * @example
	 * 		this.stx.changeVectorParameter("currentColor","yellow");  // or rgb/hex
	 *		this.stx.changeVectorParameter("axisLabel",false);  // or "false"
	 *		this.stx.changeVectorParameter("lineWidth",5);  // or "5"
	 *		this.stx.changeVectorParameter("fontSize","12");  // or 12 or "12px"
	 *		this.stx.changeVectorParameter("pattern","dotted");
	 *
	 * @since 3.0.0
	 */CIQ.ChartEngine.prototype.changeVectorParameter=function(parameter,value){if(parameter=="axisLabel")value=value.toString()==="true"||Number(value);else if(parameter=="lineWidth")value=Number(value);else if(parameter=="fontSize")value=parseInt(value,10)+"px";var currentVectorParams=this.currentVectorParameters;if(typeof currentVectorParams[parameter]!=="undefined"){currentVectorParams[parameter]=value;return true;}else if(parameter.substr(0,4)=="font"){parameter=parameter.substr(4).toLowerCase();if(parameter=="family"&&value.toLowerCase()=="default")value=null;currentVectorParams=currentVectorParams.annotation.font;if(typeof currentVectorParams[parameter]!=="undefined"){currentVectorParams[parameter]=value;return true;}}return false;};/**
	 * Dispatch a {@link drawingEditEventListener} event if there are any listeners. Otherwise, remove the given drawing.
	 *
	 * @param {CIQ.Drawing} drawing The vector instance to edit, normally provided by deleteHighlighted.
	 * @param {boolean} forceEdit skip the context menu and begin editing. Used on touch devices.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias rightClickDrawing
	 * @since 6.2.0
	 */CIQ.ChartEngine.prototype.rightClickDrawing=function(drawing,forceEdit){if(this.runPrepend("rightClickDrawing",arguments))return;if(drawing.permanent)return;if(typeof this.callbacks.drawingEdit==='function'||this.callbackListeners.drawingEdit.length){this.dispatch('drawingEdit',{stx:this,drawing:drawing,forceEdit:forceEdit});}else{var dontDeleteMe=drawing.abort();if(!dontDeleteMe){var before=CIQ.shallowClone(this.drawingObjects);this.removeDrawing(drawing);this.undoStamp(before,CIQ.shallowClone(this.drawingObjects));}this.changeOccurred("vector");}this.runAppend("rightClickDrawing",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * This function is called when a highlighted study overly is right clicked. If the overlay has an edit function (as many studies do), it will be called. Otherwise it will remove the overlay
	 * @param  {string} name The name (id) of the overlay
	 * @param  {boolean} [forceEdit] If true then force edit menu
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias rightClickOverlay
	 */CIQ.ChartEngine.prototype.rightClickOverlay=function(name,forceEdit){if(this.runPrepend("rightClickOverlay",arguments))return;var sd=this.overlays[name];if(sd.editFunction){sd.editFunction(forceEdit);}else{this.removeOverlay(name);}this.runAppend("rightClickOverlay",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Registers an activated overlay study with the chart.
	 *
	 * This is the recommended method for registering an overlay study, rather than directly manipulating the [stxx.overlays]{@link CIQ.ChartEngine#overlays} object.
	 * @param {object} data.sd The study object studyDescriptor
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias addOverlay
	 * @since 5.2.0
	 */CIQ.ChartEngine.prototype.addOverlay=function(sd){if(this.runPrepend("addOverlay",arguments))return;this.overlays[sd.name]=sd;this.runAppend("addOverlay",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Removes an overlay (and the associated study)
	 * @param  {string} name The name (id) of the overlay
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias removeOverlay
	 */CIQ.ChartEngine.prototype.removeOverlay=function(name){if(this.runPrepend("removeOverlay",arguments))return;var mySD=this.overlays[name];for(var o in this.overlays){var sd=this.overlays[o];var fieldInputs=["Field"];if(CIQ.Studies)fieldInputs=CIQ.Studies.getFieldInputs(sd);for(var f=0;f<fieldInputs.length;f++){// Study sd is reliant on an output from the about-to-be-deleted overlay
if(mySD.outputMap[sd.inputs[fieldInputs[f]]]){// Yucky, we should move to explicit parent nodes
this.removeOverlay(sd.name);}}}if(CIQ.Studies){var study=this.layout.studies[name];CIQ.deleteRHS(CIQ.Studies.studyPanelMap,study);if(mySD)this.cleanupRemovedStudy(mySD);}if(mySD){var panel=this.panels[mySD.panel];delete this.overlays[name];this.deleteYAxisIfUnused(panel,this.getYAxisByName(panel,name));}if(!this.currentlyImporting){// silent mode while importing
this.displaySticky();this.createDataSet();this.changeOccurred("layout");}this.resetDynamicYAxis();this.runAppend("removeOverlay",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Adds a series of data to the chart. A series can be displayed (for instance like a comparison chart) or it can be hidden (for instance to drive a study).
	 *
	 * If you have a quotefeed attached to your chart, then just pass the symbol as the first parameter. There is no need to pass data since the chart will automatically fetch it from your quotefeed.
	 * If however you are using the "push" method to feed data to your chart then you must provide the data manually by passing it as a parameter.
	 *
	 * Here's how you would add a hidden series for symbol "IBM" when using a quotefeed:
	 * ```
	 * stxx.addSeries("IBM");
	 * ```
	 *
	 * That series will now be available for use by studies. If you wish to *display* your series you must specify how you wish the series to be renderered. The most basic case is when you want to display a series as a line.
	 * Simply specify a color for your line:
	 * ```
	 * stxx.addSeries("IBM", {color:"blue"});
	 * ```
	 *
	 * Example 1 - manually add data to a chart and a series<iframe width="100%" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/avem0zcx/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 * That example adds a series as an overlay, but more often you'll want to display series as comparisons.
	 * Comparisons are special because they change the chart from a price chart to a percentage chart.
	 * All series on the chart then begin at "zero", on the left side of the chart.
	 * Set isComparison=true when adding a series to make it a comparison chart.  As long as a comparison series is on a chart, the chart will display its y-axis in percent scale
	 * provided {@link CIQ.ChartEngine.Chart#forcePercentComparison} is true.
	 * ```
	 * stxx.addSeries("IBM", {color:"blue", isComparison:true});
	 * ```
	 *
	 * ** Complex Visualizations **
	 *
	 * Example 2 - use a custom renderer to display a series<iframe width="100%" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/b6pkzrad/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 *
	 * Behind the scenes, series are displayed by [renderers]{@link CIQ.Renderer}.
	 * Renderers can plot lines, mountains, bars, candles, and other types of visualizations.
	 * When adding a series, you can specify which renderer to use and set parameters to control your visual.
	 * For instance, this will display a series as a bar chart on its own left axis:
	 * ```
	 * stxx.addSeries("SNE", {display:"Sony",renderer:"Bars",name:"test", yAxis:new CIQ.ChartEngine.YAxis({position:"left", textStyle:"#FFBE00"})});
	 * ```
	 * Which is the same as explicitly declaring a renderer and then attaching it to the series:
	 * ```
	 * stxx.addSeries("SNE", {display:"Sony"},function(){
	 * 	// create the axis
	 * 	var axis=new CIQ.ChartEngine.YAxis();
	 * 	axis.position="left";
	 * 	axis.textStyle="#FFBE00";
	 *
	 * 	//create the renderer and attach
	 * 	var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Bars({params:{name:"test", yAxis:axis}}));
	 * 	renderer.attachSeries("SNE").ready();
	 * });
	 * ```
	 *
	 * ** Using a Symbol Object **
	 *
	 * The previous examples all assumed your chart uses "tickers" (stock symbols).
	 * We refer to complex (compound) symbols as "Symbol Objects" (see {@link CIQ.ChartEngine#newChart}).
	 * Here's how to set a series with a symbol object:
	 * ```
	 * stxx.addSeries(null, {color:"blue", symbolObject:yourSymbolObject});
	 * ```
	 *
	 * ** Advanced Visualizations **
	 *
	 * Some renderers are capable of rendering *multiple series*.
	 * For instance, the [Histogram]{@link CIQ.Renderer.Histogram} can display series stacked on top of one another.
	 * Use `[setSeriesRenderer()]{@link CIQ.ChartEngine#setSeriesRenderer}` in this case.
	 * Here is how we would create a stacked histogram from several series:
	 * ```
	 * var myRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({type:"histogram", subtype:"stacked"}));
	 *
	 * stxx.addSeries("^NIOALL", {}, function() {myRenderer.attachSeries("^NIOALL","#6B9CF7").ready();});
	 * stxx.addSeries("^NIOAFN", {}, function() {myRenderer.attachSeries("^NIOAFN","#95B7F6").ready();});
	 * stxx.addSeries("^NIOAMD", {}, function() {myRenderer.attachSeries("^NIOAMD","#B9D0F5").ready();});
	 * ```
	 *
	 * Example 3 - advanced stacked histogram renderer<iframe width="100%" height="500" scrolling="no" seamless="seamless" align="top" style="float:top" src="https://jsfiddle.net/chartiq/rb423n71/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="1"></iframe>
	 *
	 * ** Setting a Left YAxis **
	 *
	 * By default, series are displayed without a y-axis.
	 * They are either "overlayed" on the main chart, or if they are comparisons then they share the standard y-axis.
	 * A series can take an optional y-axis which can be displayed on the left (or can be stacked up on the right side).
	 * To do this, you must specify parameters for a [YAxis]{@link CIQ.ChartEngine.YAxis} object and pass to addSeries:
	 * ```
	 * stxx.addSeries("IBM", {color:"blue", yAxis:{ position:"left" }});
	 * ```
	 *
	 * @param {string} [id] The name of the series. If not passed then a unique ID will be assigned. (parameters.symbol and parameters.symbolObject will default to using id if they are not set explicitly *and* id is supplied.)
	 * @param {object} [parameters] Parameters to describe the series. Any valid [attachSeries parameters]{@link CIQ.Renderer#attachSeries} and [renderer parameters]{@link CIQ.Renderer} will be passed to attached renderers.
	 * @param {string} [parameters.renderer] <span class="injection">Rendering</span> Set to the desired [renderer]{@link CIQ.Renderer} for the series. Will cause the series to display on the screen. If not set, then the series will be hidden.
	 * - Defaults to [Lines]{@link CIQ.Renderer.Lines} if `color` is set.
	 * @param {string} [parameters.display] <span class="injection">Rendering</span> Set to the text to display on the legend. If not set, the id of the series will be used (usually symbol).  If id was not provided, will default to symbol.
	 * @param {string} [parameters.symbol] <span class="injection">Data Loading</span> The symbol to fetch in string format. This will be sent into the fetch() function, if no data is provided.  If no symbol is provided, series will use the `id` as the symbol. If both `symbol` and `symbolObject` are set, `symbolObject` will be used.
	 * @param {object} [parameters.symbolObject] <span class="injection">Data Loading</span> The symbol to fetch in object format. This will be sent into the fetch() function, if no data is provided. If no symbolObject is provided, series will use the `id` as the symbol. You can send anything you want in the symbol object, but you must always include at least a 'symbol' element. If both `symbol` and `symbolObject` are set, `symbolObject` will be used.
	 * @param {string} [parameters.field] <span class="injection">Data Loading</span> Specify an alternative field to draw data from (other than the Close/Value). Must be present in your pushed data objects or returned from the quoteFeed.
	 * @param {boolean} [parameters.isComparison] <span class="injection">Rendering</span> If set to true, shareYAxis is automatically set to true to display relative values instead of the primary symbol's price labels. {@link CIQ.ChartEngine#setComparison} is also called and set to `true`. This is only applicable when using the primary Y axis, and should only be used with internal addSeries renderers.
	 * @param {boolean} [parameters.shareYAxis] <span class="injection">Rendering</span> Set to `true` so that the series shares the Y-axis and renders along actual values and print its corresponding current price label on the y axis. When set to `false` the series is superimposed on the chart maintaining the relative shape of the line but not on the actual y axes values and no current price will be displayed(used when rendering multiple series that do not share a common value range). Will automatically override to true if 'isComparison' is set. This is only applicable when using the primary Y axis.
	 * @param {number} [parameters.marginTop] <span class="injection">Rendering</span> Percentage (if less than 1) or pixels (if greater than 1) from top of panel to set the top margin for the series.<BR>**Note:** this parameter is to be used on **subsequent** series rendered on the same axis. To set margins for the first series, {@link CIQ.ChartEngine.YAxis#initialMarginTop} needs to be used.<BR>**Note:** not applicable if shareYAxis is set.
	 * @param {number} [parameters.marginBottom] <span class="injection">Rendering</span> Percentage (if less than 1) or pixels (if greater than 1) from the bottom of panel to set the bottom margin for the series.<BR>**Note:** this parameter is to be used on **subsequent** series rendered on the same axis. To set margins for the first series, {@link CIQ.ChartEngine.YAxis#initialMarginBottom} needs to be used.<BR>**Note:** not applicable if shareYAxis is set.
	 * @param {number} [parameters.width] <span class="injection">Rendering</span> Width of line
	 * @param {number} [parameters.minimum]	 <span class="injection">Rendering</span> Minimum value for the series. Overrides CIQ.minMax result.
	 * @param {number} [parameters.maximum]	 <span class="injection">Rendering</span> Maximum value for the series. Overrides CIQ.minMax result.
	 * @param {string} [parameters.color] <span class="injection">Rendering</span> Color to draw line. Will cause the line to immediately render an overlay. Only applicable for default/'Lines' renderer. See {@link CIQ.Renderer#attachSeries} for additional color options.
	 * @param {string} [parameters.baseColor] <span class="injection">Rendering</span> Color for the base of a mountain series. Defaults to `parameters.color`.
	 * @param {array|string} [parameters.pattern] <span class="injection">Rendering</span> Pattern to draw line, array elements are pixels on and off, or a string e.g. "solid", "dotted", "dashed"
	 * @param {boolean|string} [parameters.fillGaps] <span class="injection">Data Loading</span> If {@link CIQ.ChartEngine#cleanupGaps} is enabled to clean gaps (not 'false'), you can use this parameter to override the global setting for this series.
	 * - If `fillGaps` not present
	 *  - No gaps will be filled for the series.
	 * - If `fillGaps` is set to 'false'
	 *  - No gaps will be filled for the series.
	 * - If `fillGaps` is set to 'true',
	 *  - Gap filling will match {@link CIQ.ChartEngine#cleanupGaps}.
	 * - If `fillGaps` is set to  'carry' or 'gaps'
	 *  - Will use that filling method even if `cleanupGaps` is set differently.
	 * @param {object} [parameters.gapDisplayStyle] <span class="injection">Rendering</span> Defines how (or if) to **render** (style) connecting lines where there are gaps in the data (missing data points).
	 * - Applicable for line-like renderers only (lines, mountains, baselines, etc).
	 * - Set to `false` to always show gaps regardless of value set by {@link CIQ.ChartEngine#setGapLines}.
	 * - Set to `true` (or do not set) to use the color and pattern defined by {@link CIQ.ChartEngine#setGapLines} for the chart.
	 * - Or Set to a custom color-pattern object as formatted by {@link CIQ.ChartEngine#setGapLines} to have
	 * - If not set, and the series is a comparison, the gaps will always be rendered transparent.
	 * @param {string} [parameters.fillStyle] <span class="injection">Rendering</span> Fill style for mountain chart (if selected). For semi-opaque use rgba(R,G,B,.1).  If not provided a gradient is created with color and baseColor.
	 * @param {boolean} [parameters.permanent] <span class="injection">Rendering</span> Set to `true` to activate. Makes series unremoveable by a user **when attached to the default renderer**. If explicitly linked to a renderer, see {@link CIQ.Renderer#attachSeries} for details on how to prevent an attached series from being removed by a user.
	 * @param {object} [parameters.data] <span class="injection">Data Loading</span> Data source for the series.
	 * <P>&bull; If this field is omitted, the library will connect to the QuoteFeed (if available) to fetch initial data ( unless `parameters.loadData` is set to `false`), and manage pagination and updates.
	 * <P>&bull; If data is sent in this field, it will be loaded into the masterData, but series will **not** be managed by the QuoteFeed (if available) for pagination or updates.
	 * <P>&bull; Items in this array *must* be ordered from earliest to latest date.<br>
	 * <P>&bull; Accepted formats:
	 * <br><br><br>**Full OHLC:**<br>
	 * An array of properly formatted OHLC quote object(s). [See OHLC Data Format]{@tutorial InputDataFormat}.<br>
	 * <br>----<br><br>**Close Price Only:**<br>
	 * An array of of objects, each one with the followng elements:<br>
	 * @param {date}   [parameters.data.DT] JavaScript date object or epoch representing data point (overrides Date parameter if present)
	 * @param {string} [parameters.data.Date] string date representing data point ( only used if DT parameter is not present)
	 * @param {number} parameters.data.Value value of the data point ( As an alternative, you can send `parameters.data.Close` since your quote feed may already be returning the data using this element name)
	 * @param {string} [parameters.panel] <span class="injection">Rendering</span> the panel name on which the series should display
	 * @param {string} [parameters.action="add-series"] <span class="injection">Rendering</span> Overrides what action is sent in symbolChange events. Set to null to prevent a symbolChange event.
	 * @param {boolean} [parameters.loadData=true] <span class="injection">Data Loading</span> Include and set to false if you know the initial data is already in the masterData array or will be loaded by another method. The series will be added but no data requested. Note that if you remove this series, the data points linked to it will also be removed which may create issues if required by the chart. If that is the case, you will need to manually remove from the renderer linked to it instead of the underlying series itself.
	 * @param {boolean} [parameters.extendToEndOfDataSet] <span class="injection">Rendering</span> Set to true to plot any gap at the front of the chart.  Automatically done for step charts or if parameters.gapDisplayStyle are set (see {@link CIQ.ChartEngine#addSeries})
	 * @param {function} [cb] Callback function to be executed once the fetch returns data from the quoteFeed. It will be called with an error message if the fetch failed: `cb(err);`. Only applicable if no data is provided.
	 *
	 * @return {object} The series object
	 * @memberof CIQ.ChartEngine
	 *
	 *
	 * @example
	 * // add a series overlay and display it as a dashed line.
	 * stxx.addSeries(
	 *		"IBM",
	 *		{color:"purple", pattern:[3,3]}
	 * );
	 *
	 * @example
	 * // Add a series onto the main axis and then create a moving average study that uses it.
	 * // Note, this will work for any study that accepts a *"Field"* parameter.
	 *
	 *	stxx.addSeries("ge", {color:"yellow", shareYAxis:true}, function(){
	 *		var inputs = {
	 *	        "Period": 20,
	 *	        "Field": "ge",
	 *	        "Type": "ma"
	 *	    };
	 *	    var outputs = {
	 *	        "MA": "red"
	 *	    };
	 *	    CIQ.Studies.addStudy(stxx, "ma", inputs, outputs);
	 *	});
	 *
	 * @example
	 * // add series using a symbolObject which includes the data source key.
	 * // This key will be sent into the fetch 'params' for use in your quoteFeed.
	 * var mySymbol={symbol:"GE", source:"realtimedb"};
	 * var mySymbol2={symbol:"GDP", source:"fundamentaldb"};
	 *
	 * stxx.addSeries(null, {color:"purple", symbolObject:mySymbol});
	 * stxx.addSeries(null, {color:"green", symbolObject:mySymbol2});
	 *
	 * @example
	 * // The engine is smart enough to use the series symbol, or "Close" if the symbol doesn't exist in the returned data from your quotefeed
	 * // but if you want to use any other field then you'll need to specify it like this.
	 * stxx.addSeries("GE", {color:"purple", field: "Open"});
	 *
	 * @example
	 * // add the comparison series with a color to immediately render using default renderer (as lines) and dashes for gaps fillers
	 *	stxx.addSeries(symbol1, {display:"Description 1",isComparison:true,color:"purple", gapDisplayStyle:{pattern:[3,3]},width:4,permanent:true});
	 *	stxx.addSeries(symbol2, {display:"Description 2",isComparison:true,color:"pink", gapDisplayStyle:{pattern:[3,3]},width:4});
	 *	stxx.addSeries(symbol3, {display:"Description 3",isComparison:true,color:"brown", gapDisplayStyle:{pattern:[3,3]},width:4});
	 *
	 * @example
	 *	// add the series with only default parameters (no color).
	 *	// The series will not display on the chart after it is added,
	 *	// but the data will be available ready to be attached to a renderer.
	 *	stxx.addSeries(symbol1, {display:"Description 1"});
	 *	stxx.addSeries(symbol2, {display:"Description 2"});
	 *	stxx.addSeries(symbol3, {display:"Description 3"});
	 *
	 * @example
	 *	// add a series with a color to immediately render. It also calls callbackFunct after the data is returned from the fetch.
	 *	function callbackFunct(field){
	 *		 return function(err) {
	 *			CIQ.alert(field);
	 *		}
	 *	}
	 *
	 *	stxx.addSeries(symbol1, {display:"Description",color:"brown"}, callbackFunct(symbol1));
	 *
	 * @example
	 * // add a stacked historam with 3 series usng an external renderer.
	 *
	 *	// note how the addSeries callback is used to ensure the data is present before the series  is displayed
	 *
	 * // configure the histogram display
	 * var params={
	 *	name:				"Sentiment Data",
	 *	type:				"histogram",
	 *	subtype:			"stacked",
	 *	heightPercentage:	.7,	 // how high to go. 1 = 100%
	 *	opacity:			.7,  // only needed if supporting IE8, otherwise can use rgba values in histMap instead
	 *	widthFactor:		.8	 // to control space between bars. 1 = no space in between
	 * };
	 *
	 * //legend creation callback
	 * function histogramLegend(colors){
	 * 	stxx.chart.legendRenderer(stxx,{legendColorMap:colors, coordinates:{x:260, y:stxx.panels["chart"].yAxis.top+30}, noBase:true});
	 * }
	 *
	 * var histRenderer=stxx.setSeriesRenderer(new CIQ.Renderer.Histogram({params: params, callback: histogramLegend}));
	 *
	 * stxx.addSeries("^NIOALL", {display:"Symbol 1"}, function() {histRenderer.attachSeries("^NIOALL","#6B9CF7").ready();});
	 * stxx.addSeries("^NIOAFN", {display:"Symbol 2"}, function() {histRenderer.attachSeries("^NIOAFN","#95B7F6").ready();});
	 * stxx.addSeries("^NIOAMD", {display:"Symbol 3"}, function() {histRenderer.attachSeries("^NIOAMD","#B9D0F5").ready();});
	 *
	 * @example
	 * // add a series overlay for data that *already exists in the chart*.
	 * By setting loadData to false, the chart will assume the data exists, and not request it from the quotefeed.
	 * stxx.addSeries(
	 *		"Close",
	 *		{color:"purple", loadData:false}
	 * );
	 *
	 * @example
	 *	// add multiple series and attach to a custom y-axis on the left.
	 *	// See this example working here : https://jsfiddle.net/chartiq/b6pkzrad
	 *
	 *	// note how the addSeries callback is used to ensure the data is present before the series is displayed
	 *
	 *	//create the custom axis
	 *	var axis=new CIQ.ChartEngine.YAxis();
	 *	axis.position="left";
	 *	axis.textStyle="#FFBE00";
	 *	axis.decimalPlaces=0;			// no decimal places on the axis labels
	 *	axis.maxDecimalPlaces=0;		// no decimal places on the last price pointer
	 *
	 *	//create the renderer
	 *	var renderer=stxx.setSeriesRenderer(new CIQ.Renderer.Lines({params:{name:"lines", type:"mountain", yAxis:axis}}));
	 *
	 *	// create your series and attach them to the chart when the data is loaded.
	 *	stxx.addSeries("NOK", {display:"NOK",width:4},function(){
	 *		renderer.attachSeries("NOK", "#FFBE00").ready();
	 *	});
	 *
	 *	stxx.addSeries("SNE", {display:"Sony",width:4},function(){
	 *		renderer.attachSeries("SNE", "#FF9300").ready();
	 *	});
	 *
	 * @example
	 * // add a series with a colored bar renderer; usng default colors
	 * stxx.addSeries("MSFT",{renderer:"Bars", colored:true});
	 *
	 * @example
	 * // add a series with a candle renderer; using custom colors
	 *stxx.addSeries("MSFT",{renderer:"Candles", fill_color_up:"magenta", border_color_up:"purple", fill_color_down:"lightgreen", border_color_down:"green"});
	 *
	 *@example
	 * // add a series with Histrogram renderer; using default colors
	 * stxx.addSeries('ge', {renderer:"Histogram", color: 'red'});
	 *
	 * @example
	 * // add a series with tension to cause the lines to be curved instead of straight
	 * // 'tension' is a line renderer parameter.
	 * // the renderer:"Lines" parameter could theoretically be omitted since it is the default renderer.
	 * stxx.addSeries('GE',{renderer:"Lines", type:'mountain',color:'yellow',tension:0.3})
	 *
	 * @example
	 * // using equations as symbols, this will display an inverted chart for instrument 'T'
	 * // note the formatter used to change the sign of the axis values
	 * var axis2=new CIQ.ChartEngine.YAxis({position:"left",textStyle:"#FFBE00",priceFormatter:function(stx, panel, price, decimalPlaces){return stx.formatYAxisPrice(price, panel, decimalPlaces)*-1}});
	 * stxx.addSeries("=-1*T", {display:"Test",width:4,renderer:"Lines",color:"#FFBEDD",yAxis:axis2},function(){});
	 *
	 * //this will display the same series in the standard scale.
	 * var axis3=new CIQ.ChartEngine.YAxis({position:"left",textStyle:"#FFBE00"});
	 * stxx.addSeries("T", {display:"Test",width:4,renderer:"Lines",color:"#FFBEDD",yAxis:axis3},function(){});
	 *
	 * @since
	 * <br>&bull; 04-2015 if `isComparison` is true shareYAxis is automatically set to true and setComparison(true) called. createDataSet() and draw() are automatically called to immediately render the series.
	 * <br>&bull; 15-07-01 if `color` is defined and chartStyle is not set then it is automatically set to "line".
	 * <br>&bull; 15-07-01 ability to use setSeriesRenderer().
	 * <br>&bull; 15-07-01 ability to automatically initialize using the quoteFeed.
	 * <br>&bull; 15-07-01 `parameters.quoteFeedCallbackRefresh` no longer used. Instead if `parameters.data.useDefaultQuoteFeed` is set to `true` the series will be initialized and refreshed using the default quote feed. ( Original documentation:  {boolean} [parameters.quoteFeedCallbackRefresh] Set to true if you want the series to use the attached quote feed (if any) to stay in sync with the main symbol as new data is fetched (only available in Advanced package). )
	 * <br>&bull; 2015-11-1 `parameters.symbolObject` is now available
	 * <br>&bull; 05-2016-10  `parameters.forceData` is now available.
	 * <br>&bull; 09-2016-19  `parameters.data.DT` can also take an epoch number.
	 * <br>&bull; 09-2016-19  `parameters.data.useDefaultQuoteFeed` no longer used. If no `parameters.data` is provided the quotefeed will be used.
	 * <br>&bull; 3.0.8  `parameters.forceData` no longer used, now all data sent in will be forced.
	 * <br>&bull; 3.0.8 parameters.loadData added.
	 * <br>&bull; 4.0.0 Added parameters.symbol (string equivalent of parameters.symboObject)
	 * <br>&bull; 4.0.0 Multiple series can now be added for the same underlying symbol. parameters.field or parameters.symbolObject can be used to accomplish this.
	 * <br>&bull; 4.0.0 Added `parameters.baseColor`.
	 * <br>&bull; 5.1.0 Series data now added to masterData as an object.  This allows storage of more than just one data point, facilitating OHLC series!
	 * <br>&bull; 5.1.0 addSeries will now create a renderer unless renderer, name and color parameters are all omitted
	 * <br>&bull; 5.1.0 Now also dispatches a "symbolChange" event when pushing data into the chart, rather than only when using a quote feed.
	 * <br>&bull; 5.1.1 Added `parameters.extendToEndOfDataSet`.
	 * <br>&bull; 5.1.1 `parameters.chartType`, originally used to draw "mountain" series, has been deprecated in favor of the more flexible 'renderer' parameter. It is being maintained for backwards compatibility
	 * <br>&bull; 5.2.0 `parameters.gaps` has been deprecated (but maintained for backwards compatibility) and replaced with `parameters.gapDisplayStyle`
	 * <br>&bull; 6.0.0 `parameters.fillGaps` is now a string type and can accept either "carry" or "gap".  Setting to true will use the value of stxx.cleanupGaps.
	 * <br>&bull; 6.2.0 No longer force 'percent'/'linear', when adding/removing comparison series, respectively, unless {@link CIQ.ChartEngine.Chart#forcePercentComparison} is true. This allows for backwards compatibility with previous UI modules.
	 */CIQ.ChartEngine.prototype.addSeries=function(id,parameters,cb){var injectionResult=this.runPrepend("addSeries",arguments);if(injectionResult)return injectionResult;var display=id?id:null;// if id is passed then we default display to the same value (we can always override with parameters.display)
var symbol=id;if(!id)id=CIQ.uniqueID();var obj={parameters:parameters?CIQ.clone(parameters):{},yValueCache:[],display:display,id:id,loading:parameters?parameters.loadData!==false:true};parameters=obj.parameters;if(parameters.symbol)symbol=parameters.symbol;if(parameters.yAxis)parameters.yAxis=new CIQ.ChartEngine.YAxis(parameters.yAxis);// in case it gets passed as a plain object
CIQ.ensureDefaults(parameters,{chartName:this.chart.name,symbolObject:{symbol:symbol},panel:this.chart.panel.name,fillGaps:false,action:"add-series"});if("display"in parameters)obj.display=parameters.display;if(parameters.isComparison)parameters.shareYAxis=true;var chart=this.charts[parameters.chartName];var symbolObject=parameters.symbolObject;symbol=parameters.symbol=symbolObject.symbol;if(!obj.display)obj.display=symbol||parameters.field;// If after all this time, we still don't have a display, then resort to the reasonable alternative of using the symbol or field
obj.endPoints={};// backwards compatability for pre 4.0
if(!parameters.gapDisplayStyle&&parameters.gapDisplayStyle!==false)parameters.gapDisplayStyle=parameters.gaps;if(parameters.isComparison){// if gapDisplayStyle parameters isn't defined the gaps will be rendered transparent
if(parameters.gapDisplayStyle===undefined)parameters.gapDisplayStyle="transparent";}var existsAlready=this.getSeries({symbolObject:symbolObject,chart:chart,includeMaster:true});chart.series[id]=obj;var self=this;function setUpRenderer(stx,obj){var renderer=parameters.renderer||"Lines";var name=parameters.name||CIQ.uniqueID();if(!parameters.renderer&&!parameters.name&&!parameters.color&&!parameters.chartType)return;// if no renderer, name, color, nor chartType set, assume will be set later on manual call to attachSeries.
var r=stx.getSeriesRenderer(name);if(!r){var params={name:name,overChart:true,useChartLegend:true};if(parameters.chartType){params=CIQ.extend({panel:parameters.panel,yAxis:parameters.yAxis},params);r=CIQ.Renderer.produce(parameters.chartType,params);}else{CIQ.ensureDefaults(parameters,{name:params.name,overChart:true,useChartLegend:true});r=new CIQ.Renderer[renderer]({params:parameters});}if(!r)return;stx.setSeriesRenderer(r);}r.attachSeries(id,parameters);if(parameters.loadData!==false)r.ready();}function handleResponse(params){return function(dataCallback){if(!dataCallback.error){var qts=dataCallback.quotes,fillGaps=parameters.fillGaps;if(!self.cleanupGaps)fillGaps=false;// disable override
qts=self.doCleanupGaps(qts,self.chart,{cleanupGaps:fillGaps});self.updateChartData(qts,self.chart,{secondarySeries:symbol,noCreateDataSet:true,noCleanupDates:true,allowReplaceOHL:true});obj.loading=false;setUpRenderer(self,obj);}if(parameters.action!==null&&!existsAlready.length)self.dispatch(self.currentlyImporting?"symbolImport":"symbolChange",{stx:self,symbol:params.symbol,symbolObject:params.symbolObject,action:parameters.action});if(cb)cb.call(self,dataCallback.error,obj);};}if(parameters.isComparison&&chart.forcePercentComparison&&parameters.panel==chart.panel.name&&(!parameters.yAxis||parameters.yAxis==chart.yAxis))this.setChartScale("percent");var masterData=chart.masterData;if(!masterData)masterData=chart.masterData=this.masterData=[];var masterLength=masterData.length;if(parameters.data&&!parameters.data.useDefaultQuoteFeed/* legacy */){var parms={symbol:symbol,symbolObject:symbolObject,action:parameters.action};handleResponse(parms)({quotes:parameters.data});}else if(existsAlready.length){// This symbol is already in the series
obj.endPoints=existsAlready[0].endPoints;setUpRenderer(this,obj);if(cb){setTimeout(function(){cb.call(self,null,obj);},0);}}else if(this.quoteDriver&&parameters.loadData!==false){// if we have a quote feed, go and fetch it.
var driver=this.quoteDriver;var fetchParams=driver.makeParams(symbol,symbolObject,chart);// for comparisons, you must fetch enough data on the new Comparison to match the beginning of the masterData until the current tick.
// The current tick may be newer than master data last tick, so set the end Date to right now.
// If the chart is empty, then don't send any dates and allow the fetch to do an initial load
if(masterLength){fetchParams.startDate=masterData[0].DT;fetchParams.endDate=this.isHistoricalMode()?masterData[masterData.length-1].DT:new Date();}if(fetchParams.stx.isEquationChart(fetchParams.symbol)){//equation chart
CIQ.fetchEquationChart(fetchParams,handleResponse(fetchParams));}else{CIQ.ChartEngine.Driver.fetchData(CIQ.QuoteFeed.SERIES,driver.quoteFeed,fetchParams,handleResponse(fetchParams));}}else{// It might get in here if we depend on loadDependents to initialize the series, such as from importLayout
setUpRenderer(this,obj);if(cb)cb.call(this,null,obj);}this.runAppend("addSeries",arguments);return obj;};/**
	 * Returns an array of series that match the given filters.
	 *
	 * If any series is an equation chart then the equation will be searched for the matching symbol.
	 *
	 * @param  {object} params Parameters
	 * @param {string} [params.symbol] Filter for only series that contain this symbol
	 * @param {object} [params.symbolObject] Filter for only series that contain this symbolObject
	 * @param {boolean} [params.includeMaster] If true then the masterSymbol will be checked for a match too. A blank object will be returned. You should only use this if you're just using this to look for yes/no dependency on a symbol.
	 * @param {CIQ.ChartEngine.Chart} [params.chart] Chart object to target
	 * @return {array}        Array of series descriptors
	 * @memberOf  CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.getSeries=function(params){var chart=params.chart?params.chart:this.chart;var series=chart.series;var symbolObject=params.symbolObject;if(!symbolObject)symbolObject={symbol:params.symbol};var arr=[];for(var id in series){var sd=series[id];if(CIQ.symbolEqual(symbolObject,sd.parameters.symbolObject))arr.push(sd);}if(params.includeMaster){if(CIQ.symbolEqual(symbolObject,chart.symbolObject))arr.push({});}return arr;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Modify an existing series. Any passed parameters will extend the existing parameters.
	 *
	 * @param {string|Object} descriptor the series or series id which to modify
	 * @param {Object} [parameters] use this to override any option to addSeries
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 5.1.1
	 * <br>&bull; 5.2.0 no longer accepts a callback
	 */CIQ.ChartEngine.prototype.modifySeries=function(descriptor,parameters){if(this.runPrepend('modifySeries',arguments))return;if(!parameters)return;var series;var id;var chart;if(typeof descriptor==='string'){chart=parameters.chartName?this.charts[parameters.chartName]:this.chart;id=descriptor;series=chart.series[id];}else{series=descriptor;id=series.id;chart=this.charts[series.parameters.chartName];}if(!series)return;CIQ.extend(series.parameters,parameters);for(var key in chart.seriesRenderers){var renderer=chart.seriesRenderers[key];var seriesParams=renderer.seriesParams;for(var i=0;i<seriesParams.length;++i){if(seriesParams[i].id===series.id){renderer.attachSeries(id,series.parameters);break;}}}this.changeOccurred('layout');this.runAppend('modifySeries',arguments);};CIQ.ChartEngine.prototype.isEquationChart=function(symbol){if(!this.allowEquations||!CIQ.computeEquationChart)return false;if(symbol&&symbol[0]=="=")return true;return false;};/**
	 * Returns all the valid data fields in masterData. A valid data field is one
	 * that is in use by a series or one that is in use by the main chart
	 * @param {CIQ.ChartEngine.Chart} [chart] The chart to look in
	 * @return {array} An array of valid price fields
	 * @private
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.getDataFields=function(chart){if(!chart)chart=this.chart;var plotField=chart.defaultPlotField||"Close";var fields=["Open","High","Low"];fields.push(plotField);for(var field in chart.series){var parameters=chart.series[field].parameters;fields.push(parameters.symbol);}return fields;};/**
	 * Cleans up the masterData after a series has been removed. This method will remove
	 * the series field from the masterData, only if no other series are dependent on the field.
	 * Once the field is removed, any empty/null masterData points will be removed. Finally,
	 * doCleanGaps will be run again to set masterData back to its original state. createDataSet
	 * is not run from this method
	 * @param  {object} symbolObject A symbol object
	 * @param {CIQ.ChartEngine.Chart} chart The chart to clean
	 * @private
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.cleanMasterData=function(symbolObject,chart){var symbol=symbolObject.symbol;var masterData=chart.masterData;if(!masterData||!masterData.length)return;var fields=this.getDataFields(chart);// Returns true is the quote doesn't have any valid data fields
function empty(quote,fields){for(var i=0;i<fields.length;i++){var val=quote[fields[i]];if(typeof val!="undefined")return false;}return true;}// Clean out "zombie" masterData entries. These would be entries that no longer have
// any valid data. This can happen whenever series have non-overlapping dates.
var i=0;do{var quote=masterData[i];delete quote[symbol];if(empty.call(this,quote,fields)){masterData.splice(i,1);continue;}i++;}while(i<masterData.length);masterData=this.doCleanupGaps(masterData,chart,{noCleanupDates:true});// todo, remove once setMasterData cleans gaps
this.setMasterData(masterData,chart,{noCleanupDates:true});this.clearCurrentMarketData(chart,symbol);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Removes series data from masterData and unregisters the series from `chart.series` without removing it from any associated renderers.
	 * Also updates the [quoteFeed subscriptions]{@link quotefeed.unsubscribe}.
	 * **Not recommended to be called directly.**
	 * Instead use {@link CIQ.ChartEngine#removeSeries} to remove a series from all associated renderers,
	 * or {@link CIQ.Renderer#removeSeries} to remove a series from a specific renderer.
	 * @param  {string|object} field The name of the series to remove -OR- the series object itself.
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to remove from
	 * @param {object} [params] Parameters
	 * @param {string} [params.action="remove-series"] Action to be dispatched with symbolChange event
	 * @memberOf  CIQ.ChartEngine
	 * @since
	 * <br>&bull; 4.0.0 Now supports passing a series descriptor instead of a field
	 * <br>&bull; 4.0.0 Series data is now totally removed from masterData if no longer used by any other renderers.
	 * <br>&bull; 4.0.0 Empty renderers are now removed when series are removed
	 */CIQ.ChartEngine.prototype.deleteSeries=function(field,chart,params){if(this.runPrepend("deleteSeries",arguments))return;params=params?params:{};var action=params.action?params.action:"remove-series";var toRemove;if(_typeof(field)==='object'){toRemove=field.id;chart=chart||this.charts[field.parameters.chartName];}else{toRemove=field;chart=chart||this.chart;}var theSeries=chart.series[toRemove];if(!theSeries)return;// prevent js error if removing a series that doesn't exist
var loadedData=theSeries.parameters.loadData;var symbolObject=theSeries.parameters.symbolObject;delete chart.series[toRemove];// If no more dependencies, then remove the symbol from the actual masterData
var dependencies=this.getSeries({symbolObject:symbolObject,includeMaster:true});if(loadedData===false)dependencies.push(toRemove);if(!dependencies.length)this.cleanMasterData(symbolObject,chart);this.createDataSet();if(!dependencies.length)this.dispatch(this.currentlyImporting?"symbolImport":"symbolChange",{stx:this,symbol:symbolObject.symbol,symbolObject:symbolObject,action:action});if(this.quoteDriver)this.quoteDriver.updateSubscriptions();this.runAppend("deleteSeries",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Removes a series from all associated renderers in the chart, also removing the actual series data from masterData.
	 * If the series was belonged to a renderer that has no other series attached to it, the renderer is removed.
	 * See {@link CIQ.ChartEngine#deleteSeries} for more details.
	 * <span class="injection">INJECTABLE</span>
	 * @param  {string|object} field The name of the series to remove -OR- the series object itself.
	 * @param  {CIQ.ChartEngine.Chart} [chart] The chart object from which to remove the series
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 4.0.0 Now supports passing a series descriptor instead of a field
	 * <br>&bull; 4.0.0 Series data is now totally removed from masterData if no longer used by any other renderers.
	 * <br>&bull; 4.0.0 Empty renderers are now removed when series are removed
	 */CIQ.ChartEngine.prototype.removeSeries=function(field,chart){if(this.runPrepend("removeSeries",arguments))return;var toRemove;var deleted=false;if(_typeof(field)==='object'){toRemove=field.id;chart=chart||this.charts[field.parameters.chartName];}else{toRemove=field;chart=chart||this.chart;}for(var r in chart.seriesRenderers){var renderer=chart.seriesRenderers[r];for(var sp=renderer.seriesParams.length-1;sp>=0;sp--){var series=renderer.seriesParams[sp];if(series.id===toRemove){renderer.removeSeries(toRemove);if(renderer.seriesParams.length<1)this.removeSeriesRenderer(renderer);deleted=true;}}}if(!deleted)this.deleteSeries(toRemove,chart);// just in case the renderer didn't...
this.resetDynamicYAxis();this.draw();this.runAppend("removeSeries",arguments);};//@deprecated, use static version
CIQ.ChartEngine.prototype.isDailyInterval=function(interval){console.warn('CIQ.ChartEngine.prototype.isDailyInterval has been deprecated. Use use static version insted');return CIQ.ChartEngine.isDailyInterval(interval);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Sets the data granularity (periodicity) and displays the resulting chart.
	 *
	 * If a quoteFeed has been attached to the chart (see {@link CIQ.ChartEngine#attachQuoteFeed} ) , it will be called to get the new data, otherwise this.dataCallback will
	 * be called in an effort to fetch new data. See {@link CIQ.ChartEngine#dataCallback}. If neither one is set and new data is needed, the function will fail.
	 *
	 * This function can be called together with newChart() by setting the proper parameter values. See example in this section and {@link CIQ.ChartEngine#newChart} for more details and compatibility with your current version.
	 *
	 * The kernel is capable of deriving weekly and monthly charts by rolling-up daily data. Set {@link CIQ.ChartEngine#dontRoll} to true to bypass this
	 * functionality if you have raw week and month data in the masterData.
	 *
	 * It is important to note that by default the weekly roll-ups start on Sunday unless a market definition exists to indicate Sunday is not a market day,
	 * then they are shifted to the next market day. Instructions to set a market for the chart can be found here: {@link CIQ.Market}
	 *
	 * A full tutorial on periodicity and roll-up can be found [here]{@tutorial Periodicity}.
	 *
	 * **See {@link CIQ.ChartEngine#createDataSet} for additional details on the roll-up process including important notes on rolling-up data with gaps.**
	 *
	 * This function will not set how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan}.
	 *
	 * **Note on 'tick' timeUnit:**<BR>
	 * When using 'tick', please note that this is not a time based display, as such, there is no way to predict what the time for the next tick will be.
	 * It can come a second later, a minute later or even more depending on how active a particular instrument may be.
	 * If using the future tick functionality ( {@link CIQ.ChartEngine.XAxis#futureTicks} ) when in 'tick' mode, the library uses a pre-defined number (  {@link CIQ.ChartEngine.XAxis#futureTicksInterval} )for deciding what time interval to use for future ticks.
	 * See below example on how to override this default.
	 *
	 * @example
	 * // each bar on the screen will represent 15 minutes (combining 15 1-minute bars from your server)
	 * stxx.setPeriodicity({period:15, timeUnit:"minute"}, function(err){});
	 *
	 * @example
	 * // each bar on the screen will represent 15 minutes (a single 15 minute bar from your server)
	 * stxx.setPeriodicity({period:1, timeUnit:"minute", interval:15}, function(err){});
	 *
	 * @example
	 * // each bar on the screen will represent 30 minutes formed by combining two 15-minute bars; each masterData element represening 15 minutes.
	 * stxx.setPeriodicity({period:2, timeUnit:"minute", interval:15}, function(err){});
	 *
	 * @example
	 * // each bar on the screen will represent 1 tick and no particular grouping will be done.
	 * stxx.setPeriodicity({period:1, timeUnit:"tick"}, function(err){});
	 *
	 * @example
	 * // each bar on the screen will represent 1 day. MasterData elements will represent one day each.
	 * stxx.setPeriodicity({period:1, timeUnit:"day"}, function(err){});
	 *
	 * @example
	 * // this sets the periodicity to 5 minute bars when newChart is called
	 * stxx.newChart(
	 * 		newSymbol,
	 * 		null,
	 * 		null,
	 * 		finishedLoadingNewChart(
	 * 			stxx.chart.symbol,
	 * 			newSymbol
	 * 		),
	 * 		{
	 * 			span:{base:'day', multiplier:2},		// this parameter will cause newChart to call setSpan with these parameters
	 * 			periodicity:{period:1, timeUnit:"minute", interval:5}	// this parameter will cause newChart to call setPeriodicity with these parameters
	 * 		}
	 * );
	 *
	 * @example
	 * //How to override stxx.chart.xAxis.futureTicksInterval when in 'tick' mode:
	 * var stxx=new CIQ.ChartEngine({container:$$$(".chartContainer"), layout:{"candleWidth": 16, "crosshair":true}});
	 * stxx.chart.xAxis.futureTicksInterval=1; // to set to 1 minute, for example
	 *
	 * @param {object} params periodicity arguments
	 * @param {number} params.period The number of elements from masterData to roll-up together into one data point on the chart (candle,bar, etc). If set to 30 in a candle chart, for example, each candle will represent 30 raw elements of `interval/timeUnit` type.
	 * @param {string} [params.timeUnit] Type of data requested. Valid values are "millisecond","second","minute","day","week", "month" or 'tick'. If not set, will default to "minute". ** "hour" is NOT a valid timeUnit. Use `timeUnit:"minute", interval:60` instead**
	 * @param {string} [params.interval] Further qualifies pre-rolled details of intra-day `timeUnits` ("millisecond","second","minute") and will be converted to “1” if used with "day","week" or  "month" 'timeUnit'. Some feeds provide data that is already rolled up. For example, there may be a feed that provides 5 minute bars. To let the chart know you want that 5-minute bar from your feed instead of having the chart get individual 1 minute bars and roll them up, you would set the `interval` to '5' and `timeUnit` to 'minute'
	 * @param {function} [cb] Callback after periodicity is changed. First parameter of callback will be null unless there was an error.
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 3.0.0 replaces {@link CIQ.ChartEngine#setPeriodicityV2}.
	 * <br>&bull; 4.0.0 now uses {@link CIQ.ChartEngine#needDifferentData} to determine if new data should be fetched.
	 */CIQ.ChartEngine.prototype.setPeriodicity=function(params,cb){if(this.runPrepend("setPeriodicity",arguments))return;var period,interval,timeUnit=null;if(params&&_typeof(params)=="object"){period=params.period;interval=params.interval;timeUnit=params.timeUnit;}else{period=params;interval=cb;cb=arguments[arguments.length-1];if(arguments.length>3)timeUnit=arguments[2];}if(typeof cb!=="function")cb=null;var internalPeriodicity=CIQ.cleanPeriodicity(period,interval,timeUnit);period=internalPeriodicity.period;interval=internalPeriodicity.interval;timeUnit=internalPeriodicity.timeUnit;var layout=this.layout,cw=layout.candleWidth;var switchInterval=false;layout.setSpan={};// No longer in a span if we've set a specific periodicity
layout.range={};// No longer in a range if we've set a specific periodicity
this.chart.inflectionPoint=null;// reset where the consolidation occurs from
var getDifferentData=false;if(this.chart.symbol){getDifferentData=this.needDifferentData({period:period,interval:interval,timeUnit:timeUnit});}layout.periodicity=period;layout.interval=interval;layout.timeUnit=timeUnit;if(getDifferentData){this.changeOccurred("layout");this.clearCurrentMarketData();if(this.quoteDriver){for(var c in this.charts){var thisChart=this.charts[c];if(thisChart.symbol){if(this.displayInitialized){this.quoteDriver.newChart({symbol:thisChart.symbol,symbolObject:thisChart.symbolObject,chart:thisChart},cb);}else{this.newChart(thisChart.symbol,null,thisChart,cb);}}}}else if(this.dataCallback){this.dataCallback();if(cb)cb(null);}else{console.log("cannot change periodicity because neither dataCallback or quoteDriver are set");}this.home();return;}var chartName,chart;for(chartName in this.charts){chart=this.charts[chartName];var dataSegment=chart.dataSegment,dataSet=chart.dataSet,maxTicks=chart.maxTicks,scroll=chart.scroll;var dataSegmentLength=dataSegment?dataSegment.length:0,dataSetLength=dataSet?dataSet.length:0;var dt;var pos=Math.round(chart.maxTicks/2);this.setCandleWidth(cw,chart);var centerMe=true,rightAligned=false;if(scroll<=maxTicks)// don't attempt to center the chart if we're scrolled into the future
centerMe=false;else if(dataSegment&&!dataSegment[pos]){// don't attempt to center the chart if we're scrolled into the past
centerMe=false;rightAligned=scroll-dataSetLength;// We'll use this to keep the same amount of right alignment
}if(centerMe&&dataSegmentLength>0){if(maxTicks<(Math.round(this.chart.width/cw-0.499)-1)/2){pos=dataSegmentLength-1;}if(pos>=dataSegmentLength){dt=dataSegment[dataSegmentLength-1].DT;pos=dataSegmentLength-1;}else{dt=dataSegment[pos].DT;}}this.createDataSet();if(centerMe){// If we're scrolled somewhere into the middle of the chart then we will keep the chart centered as we increase or decrease periodicity
if(dataSegmentLength>0){for(var i=dataSetLength-1;i>=0;i--){var nd=dataSet[i].DT;if(nd.getTime()<dt.getTime()){chart.scroll=dataSetLength-1-i+pos;break;}}}}else if(!rightAligned){var wsInTicks=Math.round(this.preferences.whitespace/cw);chart.scroll=maxTicks-wsInTicks-1;// Maintain the same amount of left alignment
}else{chart.scroll=dataSet.length+rightAligned;// Maintain the same amount of right alignment
}}if(this.displayInitialized)this.draw();this.changeOccurred("layout");if(this.quoteDriver){for(chartName in this.charts){chart=this.charts[chartName];if(chart.symbol&&chart.moreAvailable){this.quoteDriver.checkLoadMore(chart);}}}this.home();if(cb)cb(null);this.runAppend("setPeriodicity",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * **Legacy** function to set the periodicity and interval for the chart.
	 *
	 * **Replaced by {@link CIQ.ChartEngine#setPeriodicity}, but maintained for backwards comparibility. Uses same function signature.**
	 *
	 * @param {number} period The number of elements from masterData to roll-up together into one data point on the chart (one candle, for example). If set to 30 in a candle chart, for example, each candle will represent 30 raw elements of `interval` type.
	 * @param {string} interval The type of data to base the `period` on. This can be a numeric value representing minutes, seconds or millisecond as inicated by `timeUnit`, "day","week", "month" or 'tick' for variable time x-axis. ** "hour" is NOT a valid interval.** (This is not how much data you want the chart to show on the screen; for that you can use {@link CIQ.ChartEngine#setRange} or {@link CIQ.ChartEngine#setSpan})
	 * @param {string} [timeUnit] Time unit to further qualify the specified numeric interval. Valid values are "millisecond","second","minute",null. If not set, will default to "minute". ** only applicable and used on numeric intervals**
	 * @param {function} [cb] Callback after periodicity is changed. First parameter of callback will be null unless there was an error.
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 2015-11-1 `second` and `millisecond` periodicities are now supported by setting the `timeUnit` parameter.
	 * <br>&bull; 3.0.0 Replaced by {@link CIQ.ChartEngine#setPeriodicity}, but maintained for backwards comparibility.
	 * @private
	 */CIQ.ChartEngine.prototype.setPeriodicityV2=function(period,interval,timeUnit,cb){if(typeof timeUnit==="function"){cb=timeUnit;// backward compatibility
timeUnit=null;}if(this.runPrepend("setPeriodicityV2",arguments))return;this.setPeriodicity(period,interval,timeUnit,cb);this.runAppend("setPeriodicityV2",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Draws the drawings (vectors). Each drawing is iterated and asked to draw itself. Drawings are automatically
	 * clipped by their containing panel.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias drawVectors
	 */CIQ.ChartEngine.prototype.drawVectors=function(){if(this.vectorsShowing)return;if(this.runPrepend("drawVectors",arguments))return;this.vectorsShowing=true;if(!this.chart.hideDrawings){var tmpPanels={};// First find all the existing panels in the given set of drawings (excluding those that aren't displayed)
var panelName,i;for(i=0;i<this.drawingObjects.length;i++){var drawing=this.drawingObjects[i];if(this.repositioningDrawing===drawing)continue;// don't display a drawing that is currently being repositioned because it will show on the tempCanvas
panelName=drawing.panelName;if(!this.panels[drawing.panelName]||this.panels[drawing.panelName].hidden)continue;// drawing from a panel that is not enabled
if(!tmpPanels[panelName]){tmpPanels[panelName]=[];}tmpPanels[panelName].push(drawing);}// Now render all the drawings in those panels, clipping each panel
for(panelName in tmpPanels){this.startClip(panelName);var arr=tmpPanels[panelName];for(i=0;i<arr.length;i++){arr[i].render(this.chart.context);}this.endClip();}}this.runAppend("drawVectors",arguments);};// Constant bitmask for bar evaluation
CIQ.ChartEngine.NONE=0;// no evaluation (black bars)
CIQ.ChartEngine.CLOSEUP=1;// today's close greater than yesterday's close
CIQ.ChartEngine.CLOSEDOWN=2;// today's close less than yesterday's close
CIQ.ChartEngine.CLOSEEVEN=4;// today's close the same as yesterday's close
CIQ.ChartEngine.CANDLEUP=8;// today's close greater than today's open
CIQ.ChartEngine.CANDLEDOWN=16;// today's close less than today's open
CIQ.ChartEngine.CANDLEEVEN=32;// today's close equal to today's open
/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Displays the chart by calling the appropriate rendering functions based on the <a href="CIQ.ChartEngine.html#layout%5B%60chartType%60%5D">CIQ.ChartEngine.layout.chartType</a>.
	 *
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to render
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias displayChart
	 * @since 4.0.0 if no Open price is available, a candle will draw as a dash at the Close price.
	 * @since 5.1.0 reduced to injections only for backwards compatibility, main chart is drawn with renderers now
	 */CIQ.ChartEngine.prototype.displayChart=function(chart){if(this.runPrepend("displayChart",arguments))return;this.rendererAction(chart,"main");this.runAppend("displayChart",arguments);};/**
	 * Calculates the ATR (Average True Range) for the dataSet
	 * @private
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to calculate
	 * @param  {number} period The number of periods
	 * @param  {array} data The data to process, if omitted, uses chart.dataSet
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateATR=function(chart,period,data){if(!data)data=chart.dataSet;var state=chart.state.calculations.atr;if(!state)state=chart.state.calculations.atr={};if(!period)period=20;var accum=[];if(state.accum)accum=state.accum;var q1;for(var i=0;i<data.length;i++){var q=data[i];q1=i?data[i-1]:state.q1;if(!q1)continue;var trueRange=Math.max(q.High-q.Low,Math.abs(q.High-q1.Close),Math.abs(q.Low-q1.Close));if(accum.length<period){if(accum.push(trueRange)==period){var total=0;for(var j=0;j<accum.length;j++){total+=accum[j];}q.atr=total/period;}}else{q.atr=(q1.atr*(period-1)+trueRange)/period;}q.trueRange=trueRange;}chart.state.calculations.atr={accum:accum,q1:q1};};/**
	 * Calculates the Median Price for the dataSet.
	 * @private
	 * @param {CIQ.ChartEngine.Chart} chart The chart to update.
	 * @param {array} data The data to process, if omitted, uses chart.dataSet
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateMedianPrice=function(chart,data){if(!data)data=chart.dataSet;var d;for(var i=0;i<data.length;++i){d=data[i];d["hl/2"]=(d.High+d.Low)/2;}};/**
	 * Calculates the Typical Price for the dataSet.
	 * @private
	 * @param {CIQ.ChartEngine.Chart} chart The chart to update.
	 * @param {array} data The data to process, if omitted, uses chart.dataSet
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateTypicalPrice=function(chart,data){if(!data)data=chart.dataSet;var d;for(var i=0;i<data.length;++i){d=data[i];d["hlc/3"]=(d.High+d.Low+d.Close)/3;}};/**
	 * Calculates the Weighted Close for the dataSet.
	 * @private
	 * @param {CIQ.ChartEngine.Chart} chart The chart to update.
	 * @param {array} data The data to process, if omitted, uses chart.dataSet
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateWeightedClose=function(chart,data){if(!data)data=chart.dataSet;var d;for(var i=0;i<data.length;++i){d=data[i];d["hlcc/4"]=(d.High+d.Low+2*d.Close)/4;}};/**
	 * Calculates the (Open + High + Low + Close) / 4 for the dataSet.
	 * @private
	 * @param {CIQ.ChartEngine.Chart} chart The chart to update.
	 * @param {array} data The data to process, if omitted, uses chart.dataSet
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateOHLC4=function(chart,data){if(!data)data=chart.dataSet;var d;for(var i=0;i<data.length;++i){d=data[i];d["ohlc/4"]=(d.Open+d.High+d.Low+d.Close)/4;}};/**
	 * Returns the current quote (the final element in the dataSet).
	 * @return {object} The most recent quote
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.currentQuote=function(){if(!this.chart.dataSet)return null;for(var i=this.chart.dataSet.length-1;i>=0;i--){if(this.chart.dataSet[i])return this.chart.dataSet[i];}return null;};/**
	 * Returns the last valid Close found in the dataSet.
	 * This would be any numeric value
	 * @param {string} field Optional object to check Close within, such as with a series
	 * @return {number} The most recent close
	 * @memberof CIQ.ChartEngine
	 * @since 6.1.0
	 */CIQ.ChartEngine.prototype.mostRecentClose=function(field){if(!this.chart.dataSet)return null;for(var i=this.chart.dataSet.length-1;i>=0;i--){var ret=this.chart.dataSet[i];if(!ret)continue;if(field){ret=ret[field];if(!ret&&ret!==0)continue;}var iqPrevClose=ret.iqPrevClose;if(_typeof(ret)=="object")ret=ret.Close;if(typeof ret=="number")return ret;if(typeof iqPrevClose=="number")return iqPrevClose;}return null;};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * This method ensures that the chart is not scrolled off of either of the vertical edges.
	 * See {@link CIQ.ChartEngine#minimumLeftBars}, {@link CIQ.ChartEngine.Chart#allowScrollPast}, and {@link CIQ.ChartEngine.Chart#allowScrollFuture} for adjustments to defaults.
	 * @param  {CIQ.ChartEngine.Chart} theChart The chart to check
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias correctIfOffEdge
	 */CIQ.ChartEngine.prototype.correctIfOffEdge=function(theChart){if(this.runPrepend("correctIfOffEdge",arguments))return;for(var chartName in this.charts){var chart=this.charts[chartName],dataSet=chart.dataSet,maxTicks=chart.maxTicks,layout=this.layout;var minimumLeftBars=this.minimumLeftBars;if((!this.mainSeriesRenderer||!this.mainSeriesRenderer.standaloneBars)&&!this.standaloneBars[layout.chartType]){//[Gus]
//since lines display at the middle of the bar insted of the edge, we deduct one to allow for the 1/2 bar to still be considered or it will try to flush incorrectly.
//this logic may need to change if we modify home() to use the same logic for micropixel as the manual drag.
//drag sets one more scroll with a negative micropixel to offset the right edge, but home() uses the actual scroll with a positive micropixel.
minimumLeftBars--;}var leftPad=Math.min(minimumLeftBars,maxTicks);// in case the minimumLeftBars is larger than what we can display
if(chart.allowScrollPast){// allow scrolling from left to right, creating white space on either side
var rightPad=maxTicks-leftPad;if(leftPad>dataSet.length){rightPad=maxTicks-dataSet.length;}if(chart.scroll-rightPad>=dataSet.length){chart.scroll=dataSet.length+rightPad-1;this.micropixels=0;}if(chart.scroll<=leftPad){chart.scroll=leftPad;this.micropixels=0;}}else{// earliest point in time is always anchored on left side of chart
if(chart.scroll<leftPad){chart.scroll=leftPad;}if(chart.scroll>dataSet.length){chart.scroll=dataSet.length;}}if(chart.allowScrollFuture===false){var whitespace=this.getLabelOffsetInPixels(chart,layout.chartType)+layout.candleWidth*chart.whiteSpaceFutureTicks;var barsOnScreen=maxTicks-Math.round(whitespace/layout.candleWidth)-1;var scroll=this.micropixels<0?chart.scroll-1:chart.scroll;if(scroll<barsOnScreen){chart.scroll=barsOnScreen;this.micropixels=0;}}if(this.manageTouchAndMouse){if(this.controls.chartControls)this.controls.chartControls.style.display="block";}}this.runAppend("correctIfOffEdge",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Creates the dataSegment. The dataSegment is a copy of the portion of the dataSet that is observable in the
	 * current chart. That is, the dataSegment is a "view" into the dataSet. chart.scroll and chart.maxTicks are the
	 * primary drivers for this method.
	 * @param  {CIQ.ChartEngine.Chart} [theChart] If passed then a data segment will be created just for that chart, otherwise all charts
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias createDataSegment
	 */CIQ.ChartEngine.prototype.createDataSegment=function(theChart){if(this.runPrepend("createDataSegment",arguments))return;var chart;for(var chartName in this.charts){chart=this.charts[chartName];if(theChart)chart=theChart;if(chart.isComparison)CIQ.Comparison.createComparisonSegmentInner(this,chart);var dataSet=chart.dataSet,baseline=chart.baseline,scroll=chart.scroll,maxTicks=chart.maxTicks;var layout=this.layout,cw=layout.candleWidth;baseline.actualLevel=baseline.userLevel?baseline.userLevel:baseline.defaultLevel;/*
			chart.baseline.includeInDataSegment forces a line chart (usually a baseline chart) to begin inside the chart
			whereas normally the first point in a line chart is off the left edge of the screen.
			 */var dataSegmentStartsOneBack=baseline.includeInDataSegment&&(!this.mainSeriesRenderer||!this.mainSeriesRenderer.standaloneBars)&&!this.standaloneBars[layout.chartType];var quote;var dataSegment=chart.dataSegment=[];var position=dataSet.length-1-scroll-1;// One more to deal with -1 case
var prevField=chart.defaultPlotField;for(var i=-1;i<scroll&&i<maxTicks;i++){position++;if(i==-1&&!dataSegmentStartsOneBack)continue;if(position<dataSet.length&&position>=0){quote=dataSet[position];quote.candleWidth=null;dataSegment.push(quote);if(baseline.actualLevel===null&&i>=0){if(prevField&&prevField!="Close"){var q1=dataSet[position-1];if(q1&&(q1[prevField]||q1[prevField]===0))baseline.actualLevel=q1[prevField];}else{if(quote.iqPrevClose||quote.iqPrevClose===0)baseline.actualLevel=quote.iqPrevClose;}}}else if(position<0){dataSegment.push(null);}}chart.segmentImage=null;var mainSeriesRenderer=this.mainSeriesRenderer||{};if(mainSeriesRenderer.params&&mainSeriesRenderer.params.volume){var totalVolume=0;var workingWidth=chart.width-(maxTicks-dataSegment.length-1)*layout.candleWidth;for(var v=0;v<dataSegment.length;v++){quote=dataSegment[v];if(quote)totalVolume+=quote.Volume;}var accumOffset=0;chart.segmentImage=[];for(var w=0;w<dataSegment.length;w++){quote=dataSegment[w];chart.segmentImage[w]={};var leftOffset=null;if(quote){if(quote.Volume){quote.candleWidth=workingWidth*quote.Volume/totalVolume;leftOffset=accumOffset+quote.candleWidth/2;accumOffset+=quote.candleWidth;}else{quote.candleWidth=cw;leftOffset=accumOffset+cw/2;accumOffset+=cw;}chart.segmentImage[w]={tick:quote.tick,candleWidth:quote.candleWidth,leftOffset:leftOffset};}else{accumOffset+=cw;}}}if(theChart)break;}if(chart&&chart.isComparison)this.clearPixelCache();this.positionCrosshairsAtPointer();this.runAppend("createDataSegment",arguments);};/**
	 * Returns the visible portion of the dataSegment.  A bar is considered visible if its midpoint is within the chart window.
	 * This is different than chart.dataSegment which includes any partially visible candles.
	 * @param  {CIQ.ChartEngine.Chart} [chart] Chart from which to return the dataSegment
	 * @returns {array} The visible bars of the dataSegment
	 * @memberof CIQ.ChartEngine
	 * @since 5.2.0
	 */CIQ.ChartEngine.prototype.getDataSegment=function(chart){if(!chart)chart=this.chart;var dataSegment=chart.dataSegment;if(!dataSegment||!dataSegment.length)return[];var left=0;right=dataSegment.length;if(this.pixelFromBar(left,chart)<chart.panel.left)left++;if(this.pixelFromBar(right-1,chart)>chart.panel.right)right--;return dataSegment.slice(left,right);};/**
	 * Returns the tick position of the leftmost position on the chart.
	 * @return {number} The tick for the leftmost position
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.leftTick=function(){return this.chart.dataSet.length-this.chart.scroll;};/**
	 * Returns the offset from the left side of the screen for the first element
	 * on the chart screen. Most times this will be zero except when a user has scrolled
	 * past the end of the chart in which case it will be a positive number. This can be used
	 * to recreate a saved chart.
	 * @return {number} The offset from the left of the chart.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.getStartDateOffset=function(){for(var ds=0;ds<this.chart.dataSegment.length;ds++){if(this.chart.dataSegment[ds]){return ds;}}return 0;};/**
	 * Scrolls the chart so that the leftmost tick is the requested date.
	 * The date must be an exact match and data for that bar must already be loaded in the chart.
	 * There is no effect if the date is not found an the engine will not attempt to fetch more data.
	 * @param {date} dt The requested date
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setStartDate=function(dt){for(var i=0;i<this.chart.dataSet.length;i++){var bar=this.chart.dataSet[i];if(bar.DT.getTime()==dt.getTime()){this.chart.scroll=this.chart.dataSet.length-i;this.draw();return;}}};//@private
CIQ.ChartEngine.prototype.updateListeners=function(event){for(var i in this.plugins){var plugin=this.plugins[i];if(plugin.display&&plugin.listener)plugin.listener(this,event);}};//@private
CIQ.ChartEngine.prototype.clearPixelCache=function(){for(var x in this.panels){var panel=this.panels[x];panel.cacheHigh=null;panel.cacheLow=null;panel.cacheLeft=1000000;panel.cacheRight=-1;}for(var chartName in this.charts){var chart=this.charts[chartName];if(!chart.dataSet)continue;for(var i=0;i<chart.dataSet.length;i++){chart.dataSet[i].cache={};}}};/**
	 * Creates a floating label on the y-axis unless {@link CIQ.ChartEngine.YAxis#drawPriceLabels} is false.
	 * This can be used for any panel and called multiple times to add multiple labels
	 *
	 * Style: stx_yaxis ( font only )
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel			The panel on which to print the label
	 * @param  {string} txt				The text for the label
	 * @param  {number} y				The Y position on the canvas for the label. This method will ensure that it remains on the requested panel.
	 * @param  {string} backgroundColor The background color for the label.
	 * @param  {string} color			The text color for the label. If none provided then white is used, unless the background is white in which case black is used.
	 * @param  {external:CanvasRenderingContext2D} [ctx]		 The canvas context to use, defaults to the chart
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] Specifies which yAxis, if there are multiple for the panel
	 * @memberof CIQ.ChartEngine
	 * @since 3.0.0 - Moved text rendering to {@link CIQ.createLabel}
	 */CIQ.ChartEngine.prototype.createYAxisLabel=function(panel,txt,y,backgroundColor,color,ctx,yAxis){if(panel.yAxis.drawPriceLabels===false||panel.yAxis.noDraw)return;var yax=yAxis?yAxis:panel.yAxis;if(yax.noDraw||!yax.width)return;var context=ctx?ctx:this.chart.context;var margin=3;var height=this.getCanvasFontSize("stx_yaxis")+margin*2;this.canvasFont("stx_yaxis",context);var drawBorders=yax.displayBorder;var tickWidth=this.drawBorders?3:0;// pixel width of tick off edge of border
var width;try{width=context.measureText(txt).width+tickWidth+margin*2;}catch(e){width=yax.width;}// Firefox doesn't like this in hidden iframe
var x=yax.left-margin+3;if(yax.width<0)x+=yax.width-width;var textx=x+margin+tickWidth;var radius=3;var position=yax.position===null?panel.chart.yAxis.position:yax.position;if(position==="left"){x=yax.left+yax.width+margin-3;width=width*-1;if(yax.width<0)x-=yax.width+width;textx=x-margin-tickWidth;radius=-3;context.textAlign="right";}if(y+height/2>yax.bottom)y=yax.bottom-height/2;if(y-height/2<yax.top)y=yax.top+height/2;if(typeof CIQ[this.yaxisLabelStyle]=='undefined'){this.yaxisLabelStyle="roundRectArrow";// in case of user error, set a default.
}var yaxisLabelStyle=this.yaxisLabelStyle;if(yax.yaxisLabelStyle)yaxisLabelStyle=yax.yaxisLabelStyle;var params={ctx:context,x:x,y:y,top:y-height/2,width:width,height:height,radius:radius,backgroundColor:backgroundColor,fill:true,stroke:false,margin:{left:textx-x,top:1},txt:txt,color:color};CIQ[yaxisLabelStyle](params);};/**
	 * Creates a label on the x-axis. Generally used for drawing labels.
	 *
	 * Note: **This is not used for the floating crosshair date label which is styled using `stx-float-date` ** See {@link CIQ.ChartEngine.AdvancedInjectable#updateChartAccessories} and {@link CIQ.ChartEngine.AdvancedInjectable#headsUpHR} for more details
	 *
	 * Label style: `stx-float-date` ( font only )
	 *
	 * @param  {CIQ.ChartEngine.Panel} panel			The panel on which to print the label
	 * @param  {string} txt				The text for the label
	 * @param  {number} x				The X position on the canvas for the label. This method will ensure that it remains on the requested panel.
	 * @param  {string} backgroundColor The background color for the label.
	 * @param  {string} color			The foreground color for the label. If none provided then white is used, unless the background is white in which case black is used.
	 * @param  {boolean} pointed		True to put an arrow above the label
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.createXAxisLabel=function(panel,txt,x,backgroundColor,color,pointed){var context=this.chart.context;var margin=2;var fontstyle="stx-float-date";//or stx_xaxis
var height=this.getCanvasFontSize(fontstyle)+margin*2;this.canvasFont(fontstyle,context);var width;try{width=context.measureText(txt).width+margin*2;}catch(e){width=0;}// Firefox doesn't like this in hidden iframe
var y=panel.top+panel.height-height;//-margin;
if(x+width/2<panel.left||x-width/2>panel.right)return;//hopelessly out of bounds
if(!pointed){if(x+width/2>panel.right)x=panel.right-width/2;if(x-width/2<panel.left)x=panel.left+width/2;}context.fillStyle=backgroundColor;CIQ.roundRect({ctx:context,x:x-width/2,top:y,width:width,height:height,radius:3,fill:true});var arrowHeight=panel.bottom-panel.yAxis.bottom-height;context.beginPath();if(pointed){context.moveTo(x-arrowHeight,y);context.lineTo(x,y-arrowHeight-1);context.lineTo(x+arrowHeight,y);context.closePath();context.fill();}else{context.moveTo(x,y);context.lineTo(x,y-arrowHeight);context.strokeStyle=backgroundColor;context.stroke();}context.textBaseline="top";context.fillStyle=color?color:CIQ.chooseForegroundColor(backgroundColor);if(context.fillStyle==backgroundColor){// Best effort to pick a foreground color that isn't the same as the background!
if(backgroundColor.toUpperCase()=="#FFFFFF")context.fillStyle="#000000";else context.fillStyle="#FFFFFF";}context.fillText(txt,x-width/2+margin,y+margin);};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Draws a label for the last price <b>in the main chart panel's y-axis</b> using {@link CIQ.ChartEngine#createYAxisLabel}
	 *
 	 * It will also draw a horizontal price line if <a href="CIQ.ChartEngine.html#preferences%5B%60currentPriceLine%60%5D">CIQ.ChartEngine.preferences.currentPriceLine</a> is true.
	 *
	 * It will not draw a line or a label if {@link CIQ.ChartEngine.YAxis#drawCurrentPriceLabel} is false for that particular axis.
	 *
	 * Label style: `stx_current_hr_down` and `stx_current_hr_up`
	 *
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias drawCurrentHR
	 */CIQ.ChartEngine.prototype.drawCurrentHR=function(){if(this.runPrepend("drawCurrentHR",arguments))return;var backgroundColor,color;var mainSeriesRenderer=this.mainSeriesRenderer||{};if(mainSeriesRenderer.noCurrentHR)return;var highLowBars=mainSeriesRenderer.highLowBars||this.highLowBars[this.layout.chartType];for(var chartName in this.charts){var chart=this.charts[chartName];var panel=chart.panel;var yAxis=panel.yAxis;if(panel.hidden)continue;if(yAxis.drawCurrentPriceLabel===false||yAxis.noDraw)continue;if(!mainSeriesRenderer.params)continue;var whichSet=yAxis.whichSet;if(!whichSet)whichSet="dataSet";if(this.isHistoricalModeSet&&whichSet!=="dataSegment")continue;var l=chart[whichSet].length,cw=this.layout.candleWidth;if(whichSet=="dataSegment"){//this crazy equation just to find the last bar displaying at least 50% on the screen
while(l>(chart.width-this.micropixels+cw/2+1)/cw){l--;}}if(l&&chart[whichSet][l-1]){var field=chart.defaultPlotField;if(!field||highLowBars)field="Close";var prevClose,currentClose;do{prevClose=chart[whichSet][--l][field];currentClose=prevClose;if(l===0)break;}while(currentClose===null);if(whichSet=="dataSet"&&chart.currentQuote){currentClose=chart.currentQuote[field];}else if(chart[whichSet].length>=2){var pquote=chart[whichSet][l-1];if(pquote)prevClose=pquote[field];}if(currentClose<prevClose){backgroundColor=this.canvasStyle("stx_current_hr_down").backgroundColor;color=this.canvasStyle("stx_current_hr_down").color;}else{backgroundColor=this.canvasStyle("stx_current_hr_up").backgroundColor;color=this.canvasStyle("stx_current_hr_up").color;}if(chart.transformFunc)currentClose=chart.transformFunc(this,chart,currentClose);var txt;// If a chart panel, then always display at least the number of decimal places as calculated by masterData (panel.chart.decimalPlaces)
// but if we are zoomed to high granularity then expand all the way out to the y-axis significant digits (panel.yAxis.printDecimalPlaces)
var labelDecimalPlaces=Math.max(panel.yAxis.printDecimalPlaces,panel.chart.decimalPlaces);//	... and never display more decimal places than the symbol is supposed to be quoting at
if(yAxis.maxDecimalPlaces||yAxis.maxDecimalPlaces===0)labelDecimalPlaces=Math.min(labelDecimalPlaces,yAxis.maxDecimalPlaces);if(yAxis.priceFormatter){txt=yAxis.priceFormatter(this,panel,currentClose,labelDecimalPlaces);}else{txt=this.formatYAxisPrice(currentClose,panel,labelDecimalPlaces);}var y=this.pixelFromTransformedValue(currentClose,panel);this.createYAxisLabel(panel,txt,y,backgroundColor,color);if(this.preferences.currentPriceLine===true&&this.isHome()){panel.chart.context.globalCompositeOperation="destination-over";this.plotLine(panel.left,panel.right,y,y,backgroundColor,"line",panel.chart.context,panel,{pattern:"dashed",lineWidth:1,opacity:0.8});panel.chart.context.globalCompositeOperation="source-over";}}}this.runAppend("drawCurrentHR",arguments);};/**
	 * <span class="animation">Animation Loop</span>
	 * Determines the default color for lines and studies drawn on the screen. This is black unless
	 * the background color of the chart has a "value" greater than 65%.
	 * The result is that this.defaultColor contains the default color.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.getDefaultColor=function(){this.defaultColor="#000000";var bgColor=null;var div=this.chart.container;while(!bgColor||CIQ.isTransparent(bgColor)){var cStyle=getComputedStyle(div);if(!cStyle)return;bgColor=cStyle.backgroundColor;if(CIQ.isTransparent(bgColor))bgColor="transparent";div=div.parentNode;if(!div||!div.tagName)break;}if(bgColor){if(bgColor=="transparent")bgColor="#FFFFFF";this.containerColor=bgColor;if(!CIQ.isTransparent(bgColor)){var hsv=CIQ.hsv(bgColor);var v=hsv[2];if(v>0.65)this.defaultColor="#000000";else this.defaultColor="#FFFFFF";}else{this.defaultColor="#000000";}}else{this.containerColor="#FFFFFF";}};/**
	 * Charts may require asynchronous data to render. This creates a dilemma for any external
	 * process that depends on a fully rendered chart (for instance a process to turn a chart into an image).
	 * To solve this problem, external processes can register for a callback which will tell them when the chart
	 * has been drawn. See {@link CIQ.ChartEngine.registerChartDrawnCallback}.
	 *
	 * To accommodate this requirement, studies, plugins or injections that render asynchronously should use startAsyncAction
	 * and {@link CIQ.ChartEngine#completeAsyncAction} to inform the chart of their asynchronous activity.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.startAsyncAction=function(){if(!this.pendingAsyncs)this.pendingAsyncs=[];this.pendingAsyncs.push(true);};/**
	 * Registers a callback for when the chart has been drawn
	 * @param  {function} fc The function to call
	 * @return {object} An object that can be passed in to {@link CIQ.ChartEngine#unregisterChartDrawnCallback}
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.registerChartDrawnCallback=function(fc){if(!this.asyncCallbacks)this.asyncCallbacks=[];this.asyncCallbacks.push(fc);return{fc:fc};};/**
	 * Removes a callback registration for when the chart has been drawn
	 * @param  {object} fc An object from {@link CIQ.ChartEngine#registerDrawnCallback}
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.unregisterChartDrawnCallback=function(obj){for(var i=0;i<this.asyncCallbacks.length;i++){if(this.asyncCallbacks[i]==obj.fc){this.asyncCallbacks.splice(i,1);return;}}};/**
	 * Makes the async callbacks only if no pending async activity
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.makeAsyncCallbacks=function(){if(!this.asyncCallbacks)return;// no callbacks to make
if(!this.pendingAsyncs||!this.pendingAsyncs.length){// If no pending asyncs, or the array is empty (all have been fulfilled)
for(var i=0;i<this.asyncCallbacks.length;i++){this.asyncCallbacks[i]();}}};/**
	 * Studies or plugins that use asynchronous data should call this when their async activities are complete.
	 * See {@link CIQ.ChartEngine#startAsyncAction}
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.completeAsyncAction=function(){this.pendingAsyncs.pop();this.makeAsyncCallbacks();};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * This is the main rendering function in the animation loop. It draws the chart including panels, axis, and drawings.
	 * This method is called continually as a user pans or zooms the chart.
	 * This would be a typical place to put an injection to add behavior to the chart after a drawing operation is complete.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.draw=function(){this.debug();if(!this.chart.canvas)return;if(!this.chart.dataSet)return;if(!this.chart.canvasHeight)return;//if(!this.useAnimation && new Date()-this.grossDragging<500) return;
this.offset=this.layout.candleWidth*this.candleWidthPercent/2;CIQ.clearCanvas(this.chart.canvas,this);if(!this.masterData)return;if(!this.masterData.length&&!this.chart.currentMarketData.touched)return;if(this.runPrepend("draw",arguments))return;this.getDefaultColor();//TODO, don't call this in draw() but instead manually when background color is changed?
this.vectorsShowing=false;this.drawPanels();this.yAxisLabels=[];var i,chart,chartName,plugin;for(chartName in this.charts){chart=this.charts[chartName];this.correctIfOffEdge();this.createDataSegment();var axisRepresentation=this.createXAxis(chart);this.initializeDisplay(chart);this.drawXAxis(chart,axisRepresentation);try{this.renderYAxis(chart);}catch(e){if(e&&e.message==='reboot draw'){return this.draw();}throw e;}/// Calculate tmpWidth which represents the amount of width that the candle takes, slightly less than candleWidth
chart.tmpWidth=Math.floor(this.layout.candleWidth*this.candleWidthPercent);// So we don't need to compute it a thousand times for every candle
if(chart.tmpWidth%2===0){// assure that candles are always odd number of pixels wide
chart.tmpWidth+=1;if(chart.tmpWidth>this.layout.candleWidth)// If there isn't space then reduce further
chart.tmpWidth-=2;}if(chart.tmpWidth<0.5)chart.tmpWidth=0.5;for(i in this.plugins){plugin=this.plugins[i];if(plugin.display){if(plugin.drawUnder)plugin.drawUnder(this,chart);}}if(this.chart.legend)this.chart.legend.colorMap=null;if(this.controls.baselineHandle)this.controls.baselineHandle.style.display="none";this.rendererAction(chart,"underlay");if(CIQ.Studies)CIQ.Studies.displayStudies(this,chart,true);this.displayChart(chart);if(CIQ.Studies)CIQ.Studies.displayStudies(this,chart,false);this.rendererAction(chart,"overlay");if(chart.legend&&chart.legend.colorMap&&chart.legendRenderer){chart.legendRenderer(this,{"chart":chart,"legendColorMap":chart.legend.colorMap,"coordinates":{x:chart.legend.x,y:chart.legend.y+chart.panel.yAxis.top}});}}for(chartName in this.charts){chart=this.charts[chartName];for(i in this.plugins){plugin=this.plugins[i];if(plugin.display){if(plugin.drawOver)plugin.drawOver(this,chart);}}}// Do this after all the drawing has taken place. That way the y-axis text sits on top of anything that
// has been drawn underneath. For instance, if panel.yaxisCalculatedPaddingRight>0 and the y-axis sits on top of the chart
for(var panel in this.panels){if(!this.panels[panel].hidden)this.plotYAxisText(this.panels[panel]);}for(var yLbl=0;yLbl<this.yAxisLabels.length;yLbl++){var labelParams=this.yAxisLabels[yLbl];if(labelParams.src=="series"&&labelParams.args[6]&&labelParams.args[6].drawSeriesPriceLabels===false)continue;this.createYAxisLabel.apply(this,labelParams.args);}this.createCrosshairs();//todo, move out of animation loop
this.drawVectors();this.drawCurrentHR();this.displayInitialized=true;if(this.controls.home){this.controls.home.style.display="none";if(this.manageTouchAndMouse&&!this.isHome())this.controls.home.style.display="block";}this.positionMarkers();for(chartName in this.charts){chart=this.charts[chartName];if(this.quoteDriver&&!this.animations.zoom.running){this.quoteDriver.checkLoadMore(chart);}}this.runAppend("draw",arguments);this.makeAsyncCallbacks();};/**
	 * This method adjusts the canvas for the current backing store. The backing store is used on "retina" style devices
	 * to indicate the ratio of actual screen pixels to web pixels. The canvas is adjusted according to this ratio so that
	 * pixels appear at the expected size and aren't fuzzy. Note that backing store is sometimes also employed by browsers
	 * to effect changes in the size of the view.
	 * @private
	 * @param  {Canvas} canvas	An HTML5 canvas
	 * @param  {external:CanvasRenderingContext2D} context An HTML5 canvas context
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.adjustBackingStore=function(canvas,context){this.devicePixelRatio=window.devicePixelRatio||1;//note, let's ignore DPR<1, it is not consistently implemented on all browsers between retina and nonretina displays
if(this.devicePixelRatio<1.0)this.devicePixelRatio=1.0;var backingStoreRatio=context.webkitBackingStorePixelRatio||context.mozBackingStorePixelRatio||context.msBackingStorePixelRatio||context.oBackingStorePixelRatio||context.backingStorePixelRatio||1;var ratio=this.devicePixelRatio/backingStoreRatio;if(!this.useBackingStore){this.devicePixelRatio=this.adjustedDisplayPixelRatio=1;return;}if(!CIQ.isAndroid||CIQ.is_chrome||CIQ.isFF){var oldWidth=canvas.width;var oldHeight=canvas.height;canvas.width=oldWidth*ratio;canvas.height=oldHeight*ratio;canvas.style.width=oldWidth+'px';canvas.style.height=oldHeight+'px';context.scale(ratio,ratio);this.adjustedDisplayPixelRatio=ratio;this.backing={ratio:ratio,width:canvas.width,height:canvas.height,styleWidth:oldWidth,styleHeight:oldHeight};}};CIQ.ChartEngine.prototype.reconstituteBackingStore=function(){if(!this.useBackingStore)return;var canvas=this.chart.canvas;if(canvas.width==this.backing.width)return;canvas.width=this.backing.width;canvas.height=this.backing.height;canvas.context.scale(this.backing.ratio,this.backing.ratio);this.adjustedDisplayPixelRatio=this.backing.ratio;this.draw();};CIQ.ChartEngine.prototype.disableBackingStore=function(){if(!this.useBackingStore)return;var canvas=this.chart.canvas;if(canvas.width==this.backing.styleWidth)return;canvas.width=this.backing.styleWidth;canvas.height=this.backing.styleHeight;canvas.context.scale(1,1);this.adjustedDisplayPixelRatio=1;this.draw();};/**
	 * This method resizes the canvas to the dimensions of the containing div. This is called primarily
	 * by {@link CIQ.ChartEngine#resizeChart} and also when the chart is initialized (via newChart).
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.resizeCanvas=function(){var canvas=this.chart.canvas;var context=this.chart.context;if(canvas&&context){this.floatCanvas.height=this.chart.tempCanvas.height=canvas.height=this.chart.container.clientHeight;this.floatCanvas.width=this.chart.tempCanvas.width=canvas.width=this.chart.container.clientWidth;this.adjustBackingStore(canvas,context);this.adjustBackingStore(this.chart.tempCanvas,this.chart.tempCanvas.context);this.adjustBackingStore(this.floatCanvas,this.floatCanvas.context);}var rect=this.container.getBoundingClientRect();this.top=rect.top;this.left=rect.left;this.canvasWidth=this.chart.canvasWidth=this.chart.container.clientWidth;this.right=this.left+this.canvasWidth;this.height=this.chart.container.clientHeight;this.width=this.right-this.left;if(this.width===0&&!this.container.dimensionlessCanvas){console.log("warning: zero width chart. Check CSS for chart container.");}this.bottom=this.top+this.height;this.calculateYAxisPositions();this.chart.canvasRight=this.right;this.chart.canvasHeight=this.height;var candleWidth=this.layout.candleWidth;if(typeof candleWidth=="undefined")candleWidth=8;for(var chartName in this.charts){var chart=this.charts[chartName];this.setCandleWidth(candleWidth,chart);if(chart.scroll<chart.width/candleWidth){chart.scroll=Math.floor(chart.width/candleWidth);var wsInTicks=Math.round(this.preferences.whitespace/this.layout.candleWidth);chart.scroll-=wsInTicks;}var idealNumberOfTicks=10;var appxLabelWidth;try{appxLabelWidth=context.measureText("10:00").width*2;}catch(e){appxLabelWidth=100;}while(idealNumberOfTicks>1){if(this.chart.width/appxLabelWidth>idealNumberOfTicks)break;idealNumberOfTicks/=1.5;}chart.xAxis.autoComputedTickSizePixels=Math.round(this.chart.width/idealNumberOfTicks);if(chart.xAxis.autoComputedTickSizePixels<1)chart.xAxis.autoComputedTickSizePixels=1;}};/**
	 * Sets the candleWidth for the chart. The candleWidth represents the number of horizontal pixels from the start
	 * of one bar or candle to the start of the next. This also applies to line charts. It is effectively, the horizontal zoom.
	 * The candleWidth can be read from layout.candleWidth.
	 *
	 * **Note**: if calling `setCandleWidth()` before `newChart()`, with a value less than `minimumCandleWidth`, `newChart()` will reset the candle size to the default candle size (8 pixels).
	 *
	 * @param {number} newCandleWidth The new candle width. If less than or equal to 0, it will be reset to 8
	 * @param {CIQ.ChartEngine.Chart} [chart]	Which chart to set the candleWidth. Defaults to the default chart.
	 * @memberof CIQ.ChartEngine
	 * @example
	 * stxx.setCandleWidth(10);
	 * stxx.home();	// home() is preferred over draw() in this case to ensure the chart is properly aligned to the right most edge.

	 */CIQ.ChartEngine.prototype.setCandleWidth=function(newCandleWidth,chart){if(!chart)chart=this.chart;if(newCandleWidth<this.minimumCandleWidth)newCandleWidth=this.minimumCandleWidth;this.layout.candleWidth=newCandleWidth;//chart.maxTicks=Math.ceil(this.chart.width/newCandleWidth+0.5); // we add half of a candle back in because lines and mountains only draw to the middle of the bar
chart.maxTicks=Math.round(chart.width/newCandleWidth)+1;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Resizes the chart and adjusts the panels. The chart is resized to the size of the container div by calling
	 * {@link CIQ.ChartEngine#resizeCanvas}. This method is called automatically if a screen resize event occurs. The charting
	 * engine also attempts to detect size changes whenever the mouse is moved. Ideally, if you know the chart is being
	 * resized, perhaps because of a dynamic change to the layout of your screen, you should call this method manually.
	 * @param {boolean} [maintainScroll=true] By default the scroll position will remain pegged on the right side of the chart. Set this to false to override.
	 * @memberof CIQ.ChartEngine
	 * @since  2015-11-1 resizeChart now automatically retains scroll position
	 * @since  09-2016-19 resizeChart now also manages the resizing of the crosshairs.
	 */CIQ.ChartEngine.prototype.resizeChart=function(maintainScroll){if(this.runPrepend("resizeChart",arguments))return;if(maintainScroll!==false)maintainScroll=true;if(maintainScroll)this.preAdjustScroll();var previousHeight=this.chart.canvasHeight;this.resizeCanvas();if(maintainScroll)this.postAdjustScroll();if(this.displayInitialized){this.adjustPanelPositions();this.draw();// This second case occurs if a chart was initialized hidden but now
// has suddenly been revealed. displayInitialized hadn't been set yet
// because draw() has never been completed
}else if(this.chart.canvasHeight!==0&&previousHeight===0){this.adjustPanelPositions();this.draw();}//redraw the crosshairs to adjust to the new size of the screen.
this.doDisplayCrosshairs();this.updateChartAccessories();this.runAppend("resizeChart",arguments);};/**
	 * Renders a chart for a particular instrument from the data passed in or fetches new data from the attached {@link CIQ.QuoteFeed}.
	 * This is the method that should be called every time a new chart needs to be drawn for a different instrument and
	 * there is no need to destroy the chart to change the data on it. Simply call this method again.
	 *
	 * Charts default to `1 day` periodicity **unless a different periodicity is set** in this call or by using CIQ.ChartEngine.setPeriodicity prior to this call. You data must always match the chart periodicity!!
	 *
	 * Note that before using this method you must first instantiate the chart and assign it to a DOM container using [`stxx=new CIQ.ChartEngine({container: $$$(".chartContainer")});`]{@link CIQ.ChartEngine}
	 *
	 * @param  {string|object}			symbol			The symbol or equation for the new chart - a symbol string, equation or an object representing the symbol can be used.
	 * 													<br>After the new chart is initialized, it will contain both a symbol string (stxx.chart.symbol) and a symbol object (stxx.chart.symbolObject).
	 * 													<br>You can send anything you want in the symbol object, but you must always include at least a 'symbol' element. Both these variables will be available for use wherever the {@link CIQ.ChartEngine.Chart} object is present. For example, if using the [fetch()]{@link CIQ.QuoteFeed#fetch} method for gathering data, params.stx.chart.symbolObject will contain your symbol object.
	 * 													<br>To allow equations to be used on a chart, the {@link CIQ.ChartEngine#allowEquations} parameter must be set to `true` and the equation needs to be preceded by an equals sign (=) in order for it to be parsed as an equation.
	 * 													<br>See {@link CIQ.formatEquation} and {@link CIQ.computeEquationChart} for more details on allowed equations syntax.
	 * @param  {array}					[masterData]	An array of [properly formated OHLC objects](index.html#data-format) to create a chart. Each element should at a minimum contain a "Close" field (capitalized).
	 *													If the charting engine has been configured to use a [QuoteFeed]{@link CIQ.ChartEngine#attachQuoteFeed}
	 *													then masterData does not need to be passed in. The quote feed will be queried instead.
	 * @param  {CIQ.ChartEngine.Chart}	chart]			Which chart to create. Defaults to the default chart.
	 * @param {function}				[cb]			Callback when newChart is loaded. See {@tutorial Adding additional content on chart} for a tutorial on how to use this callback function.
	 * @param {object} 					[params] 		Parameters to dictate initial rendering behavior
	 * @param {Object} 					[params.range]	Default range to be used upon initial rendering. If both `range` and `span` parameters are passed in, range takes precedence. If periodicity is not set, the range will be displayed at the most optimal periodicity. See {@link CIQ.ChartEngine#setRange} for complete list of parameters this object will accept.
	 * @param {object} 					[params.span]	Default span to display upon initial rendering. If both `range` and `span` parameters are passed in, range takes precedence. If periodicity is not set, the span will be displayed at the most optimal periodicity. See {@link CIQ.ChartEngine#setSpan} for complete list of parameters this object will accept.
	 * @param {object} 					[params.periodicity]	Default periodicity to be used upon initial rendering. See {@link CIQ.ChartEngine#setPeriodicity} for complete list of parameters this object will accept.
	 * @param {boolean} 				[params.stretchToFillScreen] Increase the candleWidth to fill the left-side gap created by a small dataSet. Respects <a href="CIQ.ChartEngine.html#preferences%5B%60whitespace%60%5D">CIQ.ChartEngine.preferences.whitespace</a>. Ignored when params `span` or `range` are used.
	 * @memberof CIQ.ChartEngine
	 * @example
	 	// using a symbol object and embedded span and periodicity requirements
	 	stxx.newChart(
		 	{symbol:newSymbol,other:'stuff'},
		 	null,
		 	null,
		 	callbackFunction(stxx.chart.symbol, newSymbol),
		 	{
		 		span:{base:'day',multiplier:2},
		 		periodicity:{period:1,interval:5,timeUnit:'minute'},
		 		stretchToFillScreen:true
		 	}
	 	);
	 * @example
	 	// using a symbol string
	 	stxx.newChart(
		 	"IBM",
		 	null,
		 	null,
		 	callbackFunction(stxx.chart.symbol, newSymbol)
	 	);
	 *
	 * @example
	 	// using an equation string
	 	stxx.newChart(
		 	"=2*IBM-GM",
		 	null,
		 	null,
		 	callbackFunction(stxx.chart.symbol, newSymbol)
	 	);
	 *
	 * @since
	 * <br> 2015-11-1 newChart is capable of setting periodicity and span via `params` settings
	 * <br> 04-2016-08 `params.stretchToFillScreen` is available
	 * <br> 5.1.0 newChart is capable of setting range via `params` settings
	 * <br> 6.0.0 statically provided data will be gap-filled if that functionality is enabled
	 */CIQ.ChartEngine.prototype.newChart=function(symbol,masterData,chart,cb,params){//if (!symbol) return; // can't build a chart without a symbol
if(!chart)chart=this.chart;if(!params)params={};var layout=this.layout,periodicity=params.periodicity;if(periodicity){var internalPeriodicity=CIQ.cleanPeriodicity(periodicity.period?periodicity.period:periodicity.periodicity,periodicity.interval,periodicity.timeUnit);layout.interval=internalPeriodicity.interval;layout.periodicity=internalPeriodicity.period;layout.timeUnit=internalPeriodicity.timeUnit;}var prevSymbol=chart.symbol;var prevSymbolObject=CIQ.clone(chart.symbolObject);var prevMarket=chart.market;var prevDataSet=chart.dataSet;var prevMoreAvailable=chart.moreAvailable;chart.dataSet=[];chart.moreAvailable=null;if(!symbol){chart.symbol=null;chart.symbolObject={symbol:null};}else if(_typeof(symbol)=='object'){// an object was sent in, so initialize the string from the object
chart.symbol=symbol.symbol;chart.symbolObject=symbol;}else{// a string was sent in so initialize the object from the string
chart.symbol=symbol;chart.symbolObject.symbol=symbol;}chart.inflectionPoint=null;// reset where the consolidation occurs from
if(this.marketFactory){var marketDef=this.marketFactory(chart.symbolObject);this.setMarket(marketDef,chart);}this.setMainSeriesRenderer(true);var setSpan=params.span;var range=params.range;// no range or span passed into params, check layout
if(!range&&!setSpan&&layout){setSpan=!layout.range?layout.setSpan:{};range=layout.range||{};}// both passed into params, range takes precedence
else if(range&&setSpan){setSpan={};}this.clearCurrentMarketData(chart);var self=this;if(!masterData&&this.quoteDriver){var callback=function callback(err){if(err&&err!="orphaned"){// orphaned means that another newChart request came in, overriding this one
chart.symbol=prevSymbol;// revert the symbol back to what it was if there is an error
chart.symbolObject=prevSymbolObject;// revert the symbol object back to what it was if there is an error
chart.market=prevMarket;chart.dataSet=prevDataSet;chart.moreAvailable=prevMoreAvailable;}self.dispatch(self.currentlyImporting?"symbolImport":"symbolChange",{stx:self,symbol:self.chart.symbol,symbolObject:self.chart.symbolObject,action:"master"});if(cb)cb.call(self,err);};if(range&&Object.keys(range).length){// check for empty object
delete params.span;// range and span are mutually exclusive
delete layout.setSpan;this.chart.masterData=null;this.displayInitialized=false;if(periodicity){range.periodicity=periodicity;}range.forceLoad=true;this.setRange(range,callback);}else if(setSpan&&setSpan.base){setSpan.multiplier=setSpan.multiplier||1;// force a new chart to be initialized and new data fetched before calling setSpan to conform with the expectations and purpose of newChart,
// and not use existing data and symbol names.
this.chart.masterData=null;this.displayInitialized=false;// periodicity will be kept if sent as a parameter.
if(periodicity)setSpan.maintainPeriodicity=true;setSpan.forceLoad=true;this.setSpan(setSpan,callback);}else{this.quoteDriver.newChart({symbol:chart.symbol,symbolObject:chart.symbolObject,chart:chart,initializeChart:true},function(err){if(!err){self.adjustPanelPositions();// to ensure holders are adjusted for current yaxis height
self.quoteDriver.updateSubscriptions();if(params.stretchToFillScreen){self.fillScreen();}}callback.apply(self,arguments);});}}else{if(!masterData){console.log("Warning: No masterData specified and no QuoteFeed configured");}if(!chart.symbol)chart.symbol="";// if we are ready to draw but the symbol is missing, it will crash
this.initializeChart();masterData=this.doCleanupGaps(masterData,chart);this.setMasterData(masterData,chart,{noCleanupDates:true});chart.endPoints={};if(masterData&&masterData.length){chart.endPoints={begin:masterData[0].DT,end:masterData[masterData.length-1].DT};}this.createDataSet();if(range&&Object.keys(range).length){this.setRange(range);}else if(setSpan&&setSpan.multiplier&&setSpan.base){this.setSpan({maintainPeriodicity:true,multiplier:setSpan.multiplier,base:setSpan.base});}else if(params.stretchToFillScreen){this.fillScreen();}else if(masterData&&masterData.length){this.home();}else{this.clear();}this.adjustPanelPositions();// to ensure holders are adjusted for current yaxis height
self.dispatch(self.currentlyImporting?"symbolImport":"symbolChange",{stx:self,symbol:self.chart.symbol,symbolObject:self.chart.symbolObject,action:"master"});if(cb)cb.call(self);}};/**
	 * Removes any studies from the chart, and hides the chart controls.
	 * The chart becomes uninitialized, disabling any interaction with it.
	 * The canvas is not cleared; {@link CIQ.clearCanvas} can do that.
	 *
	 * Useful when a chart is loaded with no data due to a quoteFeed error. Automatically called by {@link CIQ.ChartEngine#newChart}
	 *
	 * @memberof CIQ.ChartEngine
	 * @since 2016-12-01
	 */CIQ.ChartEngine.prototype.clear=function(){this.displayInitialized=false;for(var id in this.layout.studies){var sd=this.layout.studies[id];CIQ.Studies.removeStudy(this,sd);}if(this.controls.chartControls)this.controls.chartControls.style.display="none";this.chart.panel.title.innerHTML="";this.chart.panel.title.appendChild(document.createTextNode(this.chart.panel.display));};/**
	 * Adjusts the candleWidth to eliminate left-side gaps on the chart if not enough bars are loaded.
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 this function in now public
	 */CIQ.ChartEngine.prototype.fillScreen=function(){var chart=this.chart;var candleWidth=this.layout.candleWidth;var chartWidth=chart.width-this.preferences.whitespace;var count=chart.dataSet.length;if(count*candleWidth>=chartWidth){this.draw();return;}// line-type charts go center-to-center in the data point space, so we end up which 1/2 a candle empty on the left and the right..
//so if we remove a candle from the calculations, we go edge to edge.
if((!this.mainSeriesRenderer||!this.mainSeriesRenderer.standaloneBars)&&!this.standaloneBars[this.layout.chartType])count--;var newCandleWidth=chartWidth/count;this.setCandleWidth(newCandleWidth,chart);this.home({maintainWhitespace:true});};/**
	 * Sets the master data for the chart. A dataSet is derived from the master data by {@link CIQ.ChartEngine#createDataSet}.
	 *
	 * If a [marketFactory]{@link CIQ.ChartEngine#setMarketFactory} has been linked to the chart, this method will also update the market on the chart to match the newly loaded instrument.
	 * When no factory is present, the chart assumes that the market will never change and will continue to use market initially set using {@link CIQ.ChartEngine#setMarket}.
	 * If none set, then the chart will operate in 24x7 mode.
	 *
	 * This method also calculates the number of decimal places for the security by checking the maximum number
	 * in the data. This is stored in chart.decimalPlaces.
	 *
	 * @param	{array}				masterData		An array of quotes. Each quote should at a minimum contain a "Close" field (capitalized) and a Date field which is a string form of the date.
	 *												This method will set DT to be a JavaScript Date object derived from the string form.
	 * @param	{CIQ.ChartEngine.Chart}	[chart]			The chart to put the masterData. Defaults to the default chart.
	 * @param {object} params Parameters object
	 * @param {boolean} [params.noCleanupDates]		If true then dates have been cleaned up already by calling {@link CIQ.ChartEngine#doCleanupDates}, so do not do so in here.
	 * @memberof CIQ.ChartEngine
	 * @since 5.2.0 added params and params.noCleanupDates.
	 */CIQ.ChartEngine.prototype.setMasterData=function(masterData,chart,params){if(!chart)chart=this.chart;if(this.marketFactory){var marketDef=this.marketFactory(chart.symbolObject);this.setMarket(marketDef,chart);}if(!params)params={};if(!params.noCleanupDates)this.doCleanupDates(masterData,this.layout.interval);chart.masterData=masterData;if(chart.name=="chart")this.masterData=masterData;//chart.decimalPlaces=2;
var i;for(i=0;masterData&&i<masterData.length;i++){var quotes=masterData[i];if(quotes.DT){if(Object.prototype.toString.call(quotes.DT)!='[object Date]')quotes.DT=new Date(quotes.DT);// if already a date object; nothing to do
if(!quotes.Date||quotes.Date.length!=17)quotes.Date=CIQ.yyyymmddhhmmssmmm(quotes.DT);}else if(quotes.Date)quotes.DT=CIQ.strToDateTime(quotes.Date);else console.log('setMasterData : Missing DT and Date on masterData object');if(quotes.Volume&&typeof quotes.Volume!=="number")quotes.Volume=parseInt(quotes.Volume,10);//if(typeof quotes.Close != 'number' && !quotes.Close && quotes.Close!==null){
//	console.log ('setMasterData : Close is missing or not a number. Use parseFloat() if your data server provides strings. MasterData Index= ' + i +' Value = ' + quotes.Close);
//}
if(masterData.length-i<50){// only check last 50 records
this.updateCurrentMarketData(quotes,chart,null,{fromTrade:true});}}chart.decimalPlaces=this.callbacks.calculateTradingDecimalPlaces({stx:this,chart:chart,symbol:chart.symbolObject.symbol,symbolObject:chart.symbolObject});this.setDisplayDates(masterData);chart.roundit=Math.pow(10,chart.decimalPlaces);for(i in this.plugins){var plugin=this.plugins[i];if(plugin.display){if(plugin.setMasterData)plugin.setMasterData(this,chart);}}};/**
	 * Sets the master data for the chart, creates the data set, and renders the chart.
	 *
	 * @param	{string}			symbol			Ticker symbol for the chart.
	 * @param	{array}				masterData		An array of quotes. Each quote should at a minimum contain a "Close" field (capitalized) and a Date field which is a string form of the date.
	 *												This method will set DT to be a JavaScript Date object derived from the string form.
	 * @param	{CIQ.ChartEngine.Chart}	[chart]			The chart to put the masterData. Defaults to the default chart.
	 * @memberof CIQ.ChartEngine
	 * @since 3.0.0
	 */CIQ.ChartEngine.prototype.setMasterDataRender=function(symbol,masterData,chart){if(!chart)chart=this.chart;if(!chart.symbol)chart.symbol="";this.setMasterData(masterData,chart);if(masterData){chart.endPoints={};if(masterData.length){chart.endPoints={begin:masterData[0].DT,end:masterData[masterData.length-1].DT};chart.symbol=symbol;}}this.createDataSet();this.initializeChart();this.draw();if(!masterData||!masterData.length){chart.symbol=null;this.clear();}this.adjustPanelPositions();};/**
	 * Returns an array of all symbols currently required to be loaded by the quoteFeed.
	 * The returned array contains an object for each symbol containing:
	 * symbol, symbolObject, interval, periodicity
	 * @param {object} params Control parameters
	 * @param {boolean} [params.include-parameters] Set to true to put the series parameters in the return object
	 * @param {boolean} [params.exclude-studies] Set to true to not include study symbols
	 * @param {boolean} [params.breakout-equations] Set to true to return component symbols of equations
	 *
	 * @return {array} The array of symbol objects required
	 * @memberof CIQ.ChartEngine
	 * @since  2016-03-11
	 * @since 6.2.0 params.breakout-equations added
	 */CIQ.ChartEngine.prototype.getSymbols=function(params){if(!params)params={};var a=[],obj,layout=this.layout,symbol,symbolObject;function makeObj(symbol,symbolObject,layout){return{symbol:symbol,symbolObject:symbolObject,periodicity:layout.periodicity,interval:layout.interval,timeUnit:layout.timeUnit,setSpan:layout.setSpan};}for(var chartName in this.charts){var chart=this.charts[chartName];if(chart.symbolObject&&chart.symbolObject.symbol)a.push(makeObj(chart.symbol,chart.symbolObject,layout));for(var field in chart.series){var series=chart.series[field],parameters=series.parameters;if(parameters.data&&!parameters.data.useDefaultQuoteFeed)continue;// legacy
symbolObject=parameters.symbolObject;symbol=parameters.symbol;obj=makeObj(symbol,symbolObject,layout);obj.id=field;if(params["include-parameters"])obj.parameters=parameters;if(params["exclude-studies"]&&parameters.bucket=="study")continue;a.push(obj);}}if(params["breakout-equations"]){// replace the equations with their component symbols
var components={};// use to eliminate duplicates
for(var s=0;s<a.length;s++){symbol=a[s].symbol;if(this.isEquationChart(symbol)){var res=CIQ.formatEquation(symbol);if(res){var symbols=res.symbols;for(var sym=0;sym<symbols.length;sym++){components[symbols[sym]]=makeObj(symbols[sym],a[s].symbolObject,a[s]);}}}else{components[symbol]=makeObj(symbol,a[s].symbolObject,a[s]);}}a=[];for(var component in components){a.push(components[component]);}}return a;};/**
	 * Sets the displayDate for the data element in masterData. The displayDate is the timezone adjusted date.
	 * @param {object} quote The quote element to check
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setDisplayDate=function(quote){if(CIQ.ChartEngine.isDailyInterval(this.layout.interval))return;var dt=quote.DT;var milli=dt.getSeconds()*1000+dt.getMilliseconds();var newDT;if(this.displayZone){newDT=new timezoneJS.Date(dt.getTime(),this.displayZone);dt=new Date(newDT.getFullYear(),newDT.getMonth(),newDT.getDate(),newDT.getHours(),newDT.getMinutes());dt=new Date(dt.getTime()+milli);}quote.displayDate=dt;};/**
	 * Calls {@link CIQ.ChartEngine#setDisplayDate} for each element in masterData
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.setDisplayDates=function(masterData){if(!masterData)return;if(CIQ.ChartEngine.isDailyInterval(this.layout.interval))return;for(var i=0;i<masterData.length;i++){var quote=masterData[i];if(quote.DT)this.setDisplayDate(quote);}};/**
	 * Streams "last sale" prices into the chart.
	 *
	 *
	 * >**This function has been deprecated in favor of {@link CIQ.ChartEngine#updateChartData}.
	 * This also means that {@link CIQ.ChartEngine#streamParameters.fillGaps} is deprecated.
	 * Developers should instead call {@link CIQ.ChartEngine#updateChartData} with `params.fillGaps=true` or rely on cleanupGaps as default behavior.**
	 *
	 * >`streamTrade` to `updateChartData` migration examples:
	 *
	 * >Note that updateChartData follows the 'OHLC' format.
	 * So `V`olume (upper case) is used rather than `v`olume (lower case).
	 * Similarly `L`ast (upper case) is used rather than `l`ast (lower case).
	 *
	 * >Example 1: streaming a secondary series:
	 *
	 * >`streamTrade({"last":102.05}, null, "IBM");`
	 * <br>Translates to : <br>
	 * `updateChartData({"Last":102.05}, null, {fillGaps: true, secondarySeries: "IBM"});`
	 *
	 * >Example 2: streaming a primary series:
	 *
	 * >`streamTrade({"last":102.05, "volume":100});`
	 * <br>Translates to : <br>
	 * `updateChartData({"Last": 102.05,"Volume":100}, null, {fillGaps: true});`
	 *
	 * This method is designed to append ticks to the master data while maintaining the existing periodicity, appending to the last tick or creating new ticks as needed.
	 * It will also fill in gaps if there are missing bars in a particular interval.
	 * If a trade has a date older than the beginning of the next bar, the last bar will be updated even if the trade belongs to a prior bar; this could happen if a trade is sent in after hours at a time when the market is closed, or if it is received out of order.
	 * When in 'tick' interval, each trade will be added to a new bar and no aggregation to previous bars will be done.
	 * If the optional timestamp [now] is sent in, and it is older than the next period to be rendered, the last tick on the dataset will be updated instead of creating a new tick.
	 *
	 * ** It is crucial that you ensure the date/time of the trade is in line with your `masterData` and `dataZone` ** See `now` parameter for more details.
	 *
	 * This method leverages {@link CIQ.ChartEngine#updateChartData} for the actual data insertion into masterData. Please see  {@link CIQ.ChartEngine#updateChartData} for additional details and performance throttle settings.
	 *
	 * See the [Streaming]{@tutorial DataIntegrationStreaming} tutorial for more the details.
	 *
	 * **Note: ** versions prior to 15-07-01 must use the legacy arguments : streamTrade(price, volume, now, symbol)
	 *
	 * @param  {object}		data			Price & Volume Data, may include any or all of the following:
	 * @param  {number}		data.last 		Last sale price
	 * @param  {number}		[data.volume] 	Trade volume
	 * @param  {number}		[data.bid] 		Bid price
	 * @param  {number}		[data.ask] 		Offer/Ask price
	 * @param  {date}		[now]			Date of trade. It must be a java script date [new Date().getTime()]. **If omitted, defaults to "right now" in the set `dataZone`** (see {@link CIQ.ChartEngine#setTimeZone}); or if no `dataZone` is set, it will default to the browser's timezone (not recommended for international client-base since different users will see different times). It is important to note that this value must be in the same timezone as the rest of the masterData already sent into the charting engine to prevent tick gaps or overlaps.
	 * @param  {string}		[symbol]		trade symbol for series streaming ONLY. Leave out or set to `null` when streaming the primary chart symbol.
	 * @param {object} 		[params] 		Params to be passed to {@link CIQ.ChartEngine#updateChartData}
	 * @memberof CIQ.ChartEngine
	 * @example
	 * // streaming last sale for the primary chart symbol
	 * stxx.streamTrade({"last":102.05, "volume":100});
	 * @example
	 * // streaming last sale for an additional series on the chart
	 * stxx.streamTrade({"last":102.05, "volume":100}, null, "IBM");
	 * @deprecated Please use {@link CIQ.ChartEngine#updateChartData} for streaming last ticket.
	 * @since  4.0.0 Deprecated this function. This also means that streamParameters.fillGaps is deprecated. Developers should
	 * call {@link CIQ.ChartEngine#updateChartData} with params.fillGaps=true or rely on cleanupGaps as default behavior.
	 */CIQ.ChartEngine.prototype.streamTrade=function(priceData,now,symbol,params){var chart=this.chart;if(!params)params={};if(params.chart)chart=params.chart;params.fillGaps=this.streamParameters.fillGaps;var newArgs=_typeof(priceData)=="object";var price=newArgs?priceData.last:arguments[0],volume=newArgs?priceData.volume:arguments[1],bid=newArgs?priceData.bid:null,ask=newArgs?priceData.ask:null;if(!newArgs){now=arguments[2];symbol=arguments[3];}if(symbol){//series element
params.secondarySeries=symbol;}var data={DT:now,Last:price,Volume:volume,Bid:bid,Ask:ask};this.updateChartData(data,chart,params);};/**
	 * As of version 5.1, his method has been **deprecated** in favor of {@link CIQ.ChartEngine#updateChartData} which provides improved functionality.
	 *
	 * The following parameters are only applicable for legacy versions (pre 5.1):
	 * @deprecated Please use {@link CIQ.ChartEngine#updateChartData}
	 * @param  {array/object} appendQuotes		An array of properly formatted OHLC quote object(s). [See Data Format]{@tutorial InputDataFormat} and {@link CIQ.ChartEngine#setMasterData}.<br>
	 * 											Or a last sale object with the following elements:
	 * @param  {number}	appendQuotes.Last 		Last sale price
	 * @param  {number}	[appendQuotes.Volume]	Trade volume
	 * @param  {number}	[appendQuotes.Bid] 		Bid price
	 * @param  {number}	[appendQuotes.Ask] 		Offer/Ask price
	 * @param  {number}	[appendQuotes.DT] 		Date of trade.
	 * It must be a java script date [new Date().getTime()].
	 * **If omitted, defaults to "right now" in the set `dataZone`** (see {@link CIQ.ChartEngine#setTimeZone});
	 * or if no `dataZone` is set, it will default to the browser's timezone (not recommended for international client-base since different users
	 * will see different times). It is important to note that this value must be in the same timezone as the rest of the masterData already
	 * sent into the charting engine to prevent tick gaps or overlaps.
	 * @param  {CIQ.ChartEngine.Chart}			[chart]				The chart to append the quotes. Defaults to the default chart.
	 * @param {object} [params] Parameters to dictate behavior
	 * @param {boolean} [params.noCreateDataSet] If true then do not create the data set automatically, just add the data to the masterData
	 * @param {boolean} [params.allowReplaceOHL] Set to true to bypass internal logic that maintains OHL
	 * @param {boolean} [params.bypassGovernor] If true then masterdata will be immediately updated regardless of {@link CIQ.ChartEngine#streamParameters}
	 * @param {boolean} [params.fillGaps] If true then {@link CIQ.ChartEngine#doCleanupGaps} is called using the {@link CIQ.ChartEngine#cleanupGaps} setting. This will ensure gaps will be filled in the master data from the last tick in the chart to the date of the trade.<BR> Reminder: `tick` does not fill any gaps as it is not a predictable interval.
	 * @param {boolean} [params.secondarySeries] Set to the name of the element ( valid comparison symbol, for example) to load data as a secondary series.
	 * @param {boolean} [params.useAsLastSale] If not using a 'last sale' formatted object in `appendQuotes`,
	 * you can simply set this parameter to `true` to force the data as a last sale price; or further define it by creating an object including other settings as needed.
	 * This option is available in cases when a feed may always return OHLC formatted objects or a 'Close' field instead of a 'Last' field,
	 * even for last sale streaming updates.
	 * By definition a 'last' sale can only be a single record indicating the very 'last' sale price. As such, even if multiple records are sent in the `appendQuotes` array when this flag is enabled,
	 * only the last record's data will be used. Specifically the 'Close' and 'Volume' fields will be streamed.
	 * @param {boolean} [params.useAsLastSale.aggregatedVolume] If your last sale updates send current volume for the bar instead of just the trade volume, set this parameter to 'true' in the `params.useAsLastSale` object. The sent in volume will be used as is instead of being added to the existing bar's volume.
	 *
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 2015-11-1 params.bypassGovernor added, allowReplaceOHL added
	 * <br>&bull; 2015-11-1 params.force deprecated. Every call will update the tick to maintain the proper volume and createDataSet is now controlled by sp.maxTicks, sp.timeout or params.bypassGovernor
	 * <br>&bull; 3.0.0 `appendQuotes` now also takes last sale data to allow streaming capabilities. This can now be used instead of streamTrade.
	 * <br>&bull; 3.0.0 new params.fillGaps, params.secondarySeries, params.useAsLastSale
	 * <br>&bull; 4.0.0 last sale streaming will now update a bar in the past to comply with the date sent in; instead of just updating the current tick.
	 * <br>&bull; 4.0.3 params.useAsLastSale.aggregatedVolume is now available.
	 * <br>&bull; 5.0.1 now calls doCleanupDates in case is is being called directly when not using a quoteFeed, to update an entire candle.
	 */CIQ.ChartEngine.prototype.appendMasterData=function(appendQuotes,chart,params){this.updateChartData(appendQuotes,chart,params);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Use this method to add new `OHLC` bars to the end of the chart, insert new bars into the middle of the chart, replace existing bars, delete bars, or stream individual `LAST SALE` data tick by tick as they are received from a streaming feed.
	 *
	 * **The following rules apply when adding or updating full [`OHLC`]{@tutorial InputDataFormat} bars:**
	 *
	 * - Follow proper OHLC format as outlined on the [OHLC format tutorial]{@tutorial InputDataFormat}.
	 * - If a bar is not present it will be added, if it is present it will be updated so the OHLC and volume integrity is preserved. If `allowReplaceOHL` is not set, the 'Open' is preserved from the existing candle; new 'High' and 'Low' values are calculated, and the 'Close' and 'Volume' values are replaced with the new ones.
	 * - Although gaps can be present, dates in the appendQuotes array **must maintain the correct periodicity and order** (older to newer) to prevent out of sequence bars.
	 * - If set, gaps will be filled past the currently existing bar. No gaps will be filled when inserting bars in between existing data.
	 *
	 * **The following rules apply when streaming individual `LAST SALE` data, tick by tick, as they are received from a streaming feed: **
	 *
	 * - Follow proper LAST SALE format as outlined on the parameters section under the `appendQuotes` field.
	 * - This method is designed to update the chart while maintaining the existing periodicity, finding and augmenting an existing bar for an instrument or creating new bars as needed.
	 * - It is important to note that a market iterator will be used to find the proper bar to update, and if no bar is found on that date, one will be created even in the past; so always be sure your historical data follows the rules of the market definitions when setting the dates for each bar. Remember that by default, weeks start on Sunday unless a market definition exists to indicate Sunday is not a market day, in which case the next market day will be used as the beginning of the week. Instructions to set a market for the chart can be found here: {@link CIQ.Market}
	 * - When in 'tick' interval, each trade will be added to a new bar and no aggregation to previous bars will be done.
	 *
	 * ** Performance: **
	 *
	 * - To maintain system performance you can throttle inbound ticks. See {@link CIQ.ChartEngine#streamParameters } and [Streaming tutorial](@tutorial DataIntegrationStreaming) for more details.
	 * - It is important to note that although the data will always be added to masterData, `createDataSet()` and `draw()` will **not** be called if data is received quicker than the throttle (governor) wait periods. As such, you will not see any changes until the throttle wait periods are met.
	 * - **Please adjust default settings if your implementation requires immediate updates.**
	 *
	 * ** Additional Notes: **
	 *
	 * - ** It is crucial that you ensure the date/time of the records being loaded are in line with your `masterData` and `dataZone`; and in the case of a last trade streaming, that your market definition will produce dates that will be in sync witht her rest of your already loaded records.** See `DT` parameter for more details.
	 * - This method is **not** intended to be used as a way to load initial chart data, or data changes triggered by periodicity changes.
	 *
	 * See the [Data Integration]{@tutorial DataIntegrationOverview} tutorial for more detail on how to load initial data.
	 *
	 * See the [Streaming]{@tutorial DataIntegrationStreaming} tutorial for more the details.
	 *
	 * @param  {array|object} appendQuotes		**OHLC format requirements**<br>
	 * 											An array of properly formatted OHLC quote object(s). [See OHLC Data Format]{@tutorial InputDataFormat}. Items in this array *must* be ordered from earliest to latest date.<br>
	 * 											<br>----<br><br>**LAST SALE  format requirements**<br>
	 * 											A last sale object with the following elements:
	 * @param  {number}	[appendQuotes.Last] 	Last sale price
	 * @param  {number}	[appendQuotes.Volume]	Trade volume (used on primary series only)
	 * @param  {number}	[appendQuotes.Bid] 		Bid price (used on primary series only)
	 * @param  {number}	[appendQuotes.Ask] 		Offer/Ask price (used on primary series only)
	 * @param  {array}	[appendQuotes.BidL2]	Level 2 Bid, expressed as an array of [price,size] pairs.  For example, BidL2: [[10.05,15],[10.06,10],...]
	 * @param  {array}	[appendQuotes.AskL2]	Level 2 Offer/Ask expressed as an array of [price,size] pairs.  For example, AskL2: [[11.05,12],[11.06,8],...]
	 * @param  {number}	[appendQuotes.DT] 		Date of trade. It must be a java script date [new Date()]. If omitted, defaults to "right now".
	 * If you are using the 'Date' string field with a `dataZone` for your historical data and wish to also use it for streaming updates,
	 * you must instead submit a properly formatted OHLC array. For example:
	 * ```
	 * stxx.updateChartData(
	 *  [
	 *   {"Date":"2015-04-16 16:00","Close":152.11,"Volume":4505569}
	 *  ],
	 *  null,
	 *  {useAsLastSale:true}
	 * );
	 * ```
	 * @param  {CIQ.ChartEngine.Chart}			[chart]				The chart to append the quotes. Defaults to the default chart.
	 * @param {object} [params] Parameters to dictate behavior
	 * @param {boolean} [params.noCreateDataSet] If true then do not create the data set automatically, just add the data to the masterData
	 * @param {boolean} [params.noCleanupDates] If true then do not clean up the dates using {@link CIQ.ChartEngine.doCleanupDates}.  Usually set if dates were already cleaned up.
	 * @param {boolean} [params.allowReplaceOHL] Set to true to bypass internal logic that maintains OHL so they are instead replaced with the new data instead of updated.
	 * @param {boolean} [params.bypassGovernor] If true then masterdata will be immediately updated regardless of {@link CIQ.ChartEngine#streamParameters}. Not applicable if `noCreateDataSet` is true.
	 * @param {boolean} [params.fillGaps] If true and {@link CIQ.ChartEngine#cleanupGaps} is also set, {@link CIQ.ChartEngine#doCleanupGaps} will be called to fill gaps for any newly added bars past the currently existing bar. It will not fill gaps for bars added to the middle of the masterData, or created by deleting a bar. <BR> Reminder: `tick` does not fill any gaps as it is not a predictable interval.
	 * @param {boolean} [params.secondarySeries] Set to the name of the element (valid comparison symbol, for example) to load data as a secondary series. When left out, the data will be automatically added to the primary series. <Br>**Note:** You should never set `secondarySeries` to the primary symbol. If you are unsure of what the current primary series is, you can always query the chart engine by checking `stxx.chart.symbol`.
	 * @param {boolean} [params.deleteItems] Set to true to completely delete the masterData records matching the dates in appendQuotes.
	 * @param {boolean} [params.useAsLastSale] Set to true if not using a 'last sale' formatted object in `appendQuotes`.
	 * This option is available in cases when a feed may always return OHLC formatted objects or a 'Close' field instead of a 'Last' field,
	 * even for last sale streaming updates.
	 * By definition a 'last sale' can only be a single record indicating the very 'last' sale price.
	 * As such, even if multiple records are sent in the `appendQuotes` array when this flag is enabled,
	 * only the last record's data will be used. Specifically the 'Close' and 'Volume' fields will be streamed.
	 * @param {boolean} [params.useAsLastSale.aggregatedVolume] If your last sale updates send current volume for the bar instead of just the trade volume, set this parameter to 'true' in the `params.useAsLastSale` object. The sent in volume will be used as is instead of being added to the existing bar's volume. Not applicable when loading data for a secondary series.
	 * @memberof CIQ.ChartEngine
	 * @example
	 * // this example will stream the last price on to the appropriate bar and add 90 to the bar's volume.
	  stxx.updateChartData(
		  {
			  Last: 50.94,
			  Volume: 90
		  }
	  );
	 * @example
	 * // this example will stream the last price on to the appropriate bar and set the volume for that bar to 90.
	  stxx.updateChartData(
		  {
			  Last: 50.94,
			  Volume: 90
		  },
		  null,
		  {useAsLastSale: {aggregatedVolume:true}}
	  );
	 * @example
	 * // this example will stream the last price to the appropriate bar  **for a secondary series**.
	  stxx.updateChartData(
		  {
			  Last: 50.94
		  },
		  null,
		  {secondarySeries:secondarySymbol}
	  );
	 * @example
	 * // this example will add or replce a complete OHLC bar.
	  stxx.updateChartData(
		  [
		  	{"Date":"2015-04-16 16:00","Open":152.13,"High":152.19,"Low":152.08,"Close":152.11,"Volume":4505569},
		  	{"Date":"2015-04-17 09:30","Open":151.76,"High":151.83,"Low":151.65,"Close":151.79,"Volume":2799990},
		  	{"Date":"2015-04-17 09:35","Open":151.79,"High":151.8,"Low":151.6,"Close":151.75,"Volume":1817706}
		  ]
	  );
	 * @since
	 * <br>&bull; 5.1.0 New function replacing and enhancing legacy method `appendMasterData`.
	 * <br>&bull; 5.1.0 Added ability to delete or insert items anywhere in the masterData. `deleteItems` parameter added.
	 * <br>&bull; 5.2.0 `overwrite` param added
	 * <br>&bull; 5.2.0 For main series data, if Close=null is set, and not streaming, then Open, High, Low and Volume also set to null.
	 * <br>&bull; 5.2.0 For main series data, if Volume=0/null is set, and not streaming, then Volume is reset to 0.
	 * <br>&bull; 5.2.0 Added params.noCleanupDates, params.fillGaps applicable now for secondary series as well
	 * <br>&bull; 6.0.0 `overwrite` param removed
	 * <br>&bull; 6.1.0 Added BidL2 and AskL2 to appendQuotes object
	 */CIQ.ChartEngine.prototype.updateChartData=function(appendQuotes,chart,params){if(!params)params={};if(!chart)chart=this.chart;var lastSale=false,aggregatedVolume=false,masterData=chart.masterData,layout=this.layout,dataZone=this.dataZone;var self=this,secondary=params.secondarySeries,field,symbol;// If we are not a tick interval, we want to adjust the DT property of the appendQuotes so it matches the periodicity/interval of the existing chart data.
function adjustDatesToInterval(){// On intraday intervals we use a 24 hour market because we don't want our bars to artificially stop
// at the end of a market session. If we get extended hours, or bad ticks we still
// want to print them on the chart. Trust the data.
var marketDef={"market_tz":chart.market.market_def.market_tz||null};var mktInterval=layout.interval;if(mktInterval=="month"||mktInterval=="week"){// if we are rolling day bars into week or month we have to iterate day by day to find the right bar.
if(!self.dontRoll)mktInterval="day";// on week and month we need to know when the week/month starts to find the right day for the candles.
marketDef=self.chart.market.market_def;}var theMarket=new CIQ.Market(marketDef);var iter_parms={'begin':masterData&&masterData.length?masterData[masterData.length-1].DT:appendQuotes.DT,'interval':mktInterval,'periodicity':1,'timeUnit':layout.timeUnit};var iter=theMarket.newIterator(iter_parms);var next=iter.next();var max,actualTime;if(!masterData){// there are some use cases where you might prefer to stream data onto masterData without using a quotefeed or loading data first.
appendQuotes.DT=new Date(+iter.previous());}else if(appendQuotes.DT<next){// update current tick or some tick in the past.
max=0;// safety catch so we don't go on forever.
var previous=iter.previous();actualTime=appendQuotes.DT;params.appending=true;while(actualTime<previous&&max<1000){params.appending=false;previous=iter.previous();max++;}appendQuotes.DT=previous;params.updating=!params.appending;}else if(appendQuotes.DT>=next){// create new tick. If the date matches, that's it, otherwise fast forward to find the right bar to add.
max=0;// safety catch so we don't go on forever.
actualTime=appendQuotes.DT;while(actualTime>next&&max<1000){appendQuotes.DT=next;next=iter.next();max++;}params.appending=true;}}// Takes the Last Sale data from the appendQuote and converts it to OHLC data
function formatFromLastSaleData(){// self is last sale streaming so format accordingly
lastSale=true;if(params.useAsLastSale&&params.useAsLastSale.aggregatedVolume)aggregatedVolume=true;if(appendQuotes.constructor===Array){// is streaming an array of OHLC, do some clean up to extract last and volume
var lastBar=appendQuotes[appendQuotes.length-1];appendQuotes={};// doCleanupDates will make sure this has a valid 'DT' field in the right timeZone,
// no need to check or convert from 'Date'
appendQuotes.DT=lastBar.DT;appendQuotes.Close=lastBar.Close;appendQuotes.Volume=lastBar.Volume;}else if(appendQuotes.Last){appendQuotes.Close=appendQuotes.Last;delete appendQuotes.Last;}if(appendQuotes.DT&&Object.prototype.toString.call(appendQuotes.DT)!='[object Date]')appendQuotes.DT=new Date(appendQuotes.DT);// epoch or ISO string
if(!appendQuotes.DT||appendQuotes.DT=='Invalid Date'){// if no date is sent in, use the current time and adjust to the dataZone
appendQuotes.DT=new Date();}// find the right candle
if(layout.interval!="tick"){adjustDatesToInterval();}appendQuotes.Open=appendQuotes.Close;appendQuotes.High=appendQuotes.Close;appendQuotes.Low=appendQuotes.Close;}// Fills the gaps from the most recent master data record to the new data
function fillGapsFromMasterDataHead(){var lastRecordForThis=self.getFirstLastDataRecord(masterData,secondary||chart.defaultPlotField,true);var fg=0;// this is used to store the index of the first record in appendQuotes we should be using to fill gaps.
// we'll adjust this below by looking for the starting point from masterData
if(lastRecordForThis){if(appendQuotes[appendQuotes.length-1].DT<=lastRecordForThis.DT)return;// no gap to fill
for(;fg<appendQuotes.length;fg++){if(+appendQuotes[fg].DT==+lastRecordForThis.DT){// if the appendQuote is the same as the lastRecordForThis, check to see which is the "correct" record
if(self.getFirstLastDataRecord([appendQuotes[fg]],secondary||chart.defaultPlotField))lastRecordForThis=null;// use appendQuote record
break;}else if(appendQuotes[fg].DT>lastRecordForThis.DT)break;}}// now fg represents the index of the first element in appendQuotes which appears after the last current element for that security.
var gapQuotes=appendQuotes.slice(fg);if(lastRecordForThis)gapQuotes.unshift(secondary?lastRecordForThis[secondary]:lastRecordForThis);// add previous bar so we can close gaps
gapQuotes=self.doCleanupGaps(gapQuotes,chart);if(lastRecordForThis)gapQuotes.shift();// remove previous bar
appendQuotes=appendQuotes.slice(0,fg).concat(gapQuotes);}// Deletes an item from masterData at index i and date dt
function deleteThisItem(i,dt){var replace;if(secondary){delete masterData[i][secondary];if(self.cleanupGaps){replace={DT:dt,Close:null};if(self.cleanupGaps!="gap"&&masterData[i-1]&&masterData[i-1][secondary]){replace.Close=masterData[i-1][secondary].Close;replace.High=replace.Low=replace.Open=replace.Close;replace.Volume=0;}masterData[i][secondary]=replace;}}else{var spliced=masterData.splice(i,1)[0];//deleting from masterData here, but will reinsert if find any series data
replace={DT:spliced.DT,Close:null,needed:false};for(field in chart.series){symbol=chart.series[field].parameters.symbolObject.symbol;if(typeof spliced[symbol]!="undefined"){replace[symbol]=spliced[symbol];delete replace.needed;}}if(self.cleanupGaps&&self.cleanupGaps!="gap"){delete replace.needed;if(self.cleanupGaps!="gap"&&masterData[i-1]){replace.Close=masterData[i-1].Close;replace.High=replace.Low=replace.Open=replace.Close;replace.Volume=0;}}if(replace.needed!==false){masterData.splice(i,0,replace);}}}// Takes a quote q and merges it into masterData at index i
function mergeNewDataIntoMasterData(i,q){// If we're replacing the last bar then we want to save any series and study data, otherwise comparisons will [briefly] disappear during refreshes
//Preserve any relevant data from prior fetched quote for this bar.
//Here we are assuming that the data being appended to masterData is a data update, perhaps from only one exchange, while
//the existing masterData is a consolidated quote. We trust the quote we had in masterData to have the more accurate
//volume and open, and use the high/low from there in combination with the updated data's to determine the daily high/low.
var master=masterData[i];if(secondary)master=master[secondary]||{};if(q.Close===null){if(master.Open!==undefined)q.Open=null;if(master.High!==undefined)q.High=null;if(master.Low!==undefined)q.Low=null;if(master.Volume!==undefined)q.Volume=null;// This code will set the OHLC data for carry gap filling if applicable,
// but it's disabled because if a Close:null is sent in, then just use it.
// I suppose if a gap is really to be filled in, the record should be deleted.
/*if(this.cleanupGaps && this.cleanupGaps!="gap" && masterData[i-1]){
					if(!secondary || masterData[i-1][secondary]){
						q.Close=secondary?masterData[i-1][secondary].Close:masterData[i-1].Close;
						q.High=q.Low=q.Open=q.Close;
						q.Volume=0;
					}
				}*/}else{if(lastSale){if(q.Volume){q.Volume=parseInt(q.Volume,10);}if(!aggregatedVolume)q.Volume+=master.Volume;}else{if(!CIQ.isValidNumber(q.Volume)&&master.Volume){q.Volume=master.Volume;}}if(!params.allowReplaceOHL){if(CIQ.isValidNumber(master.Open)){q.Open=master.Open;}if(CIQ.isValidNumber(master.High)&&CIQ.isValidNumber(q.High)){if(master.High>q.High)q.High=master.High;}if(CIQ.isValidNumber(master.Low)&&CIQ.isValidNumber(q.Low)){if(master.Low<q.Low)q.Low=master.Low;}}// if new data is invalid, revert to old data
if(!CIQ.isValidNumber(q.Close))q.Close=master.Close;if(!CIQ.isValidNumber(q.Open))q.Open=master.Open;if(!CIQ.isValidNumber(q.High))q.High=master.High;if(!CIQ.isValidNumber(q.Low))q.Low=master.Low;if(!CIQ.isValidNumber(q.Bid))q.Bid=master.Bid;if(!CIQ.isValidNumber(q.Ask))q.Ask=master.Ask;for(field in chart.series){symbol=chart.series[field].parameters.symbolObject.symbol;if(typeof q[symbol]=="undefined"&&typeof master[symbol]!="undefined")q[symbol]=master[symbol];}}}if(!params.noCleanupDates)this.doCleanupDates(appendQuotes,layout.interval);if(params.useAsLastSale||appendQuotes.constructor==Object&&(appendQuotes.Last||appendQuotes.Last===0)){formatFromLastSaleData();}if(appendQuotes&&appendQuotes.constructor==Object)appendQuotes=[appendQuotes];// When developer mistakenly sends an object instead of an array of objects
if(!appendQuotes||!appendQuotes.length)return;if(this.runPrepend("appendMasterData",[appendQuotes,chart,params]))return;if(this.runPrepend("updateChartData",[appendQuotes,chart,params]))return;if(!masterData)masterData=[];var i=masterData.length-1,placedFirstQuote=false;// fill gaps only if there is master data already
// we only fill from the end of the current data, not before
if(params.fillGaps&&masterData.length)fillGapsFromMasterDataHead();if(!appendQuotes.length)return;// can happen within fillGapsFromMasterDataHead
for(var j=0;j<appendQuotes.length;j++){var quote=appendQuotes[j];var dt=quote.DT,date=quote.Date;if(dt&&Object.prototype.toString.call(dt)!='[object Date]')quote.DT=dt=new Date(dt);// if already a date object; nothing to do
if(dt){if(!date||date.length!=17)quote.Date=CIQ.yyyymmddhhmmssmmm(quote.DT);}if(!dt)dt=quote.DT=CIQ.strToDateTime(date);while(i>=0&&i<masterData.length){var dt2=masterData[i].DT;if(!dt2)dt2=CIQ.strToDateTime(masterData[i].Date);if(dt2.getTime()<=dt.getTime()){placedFirstQuote=true;var plusOne=0;// If time is the same then replace last bar
if(dt2.getTime()<dt.getTime()){if(i<masterData.length-1){var dtf=masterData[i+1].DT||CIQ.strToDateTime(masterData[i+1].Date);if(dtf.getTime()<=dt.getTime()){i++;continue;}}plusOne=1;// Otherwise append bar
}if(params.deleteItems){if(!plusOne)deleteThisItem(i,dt);break;}else{if(!plusOne)mergeNewDataIntoMasterData(i,quote);// Here we rectify any missing/malformatted data and set any new high/low
// If we don't set this here, the study calculations will fail
if(CIQ.isValidNumber(quote.Close)){if(!CIQ.isValidNumber(quote.Open))quote.Open=quote.Close;var high=Math.max(quote.Open,quote.Close),low=Math.min(quote.Open,quote.Close);if(!CIQ.isValidNumber(quote.High)||quote.High<high)quote.High=high;if(!CIQ.isValidNumber(quote.Low)||quote.Low>low)quote.Low=low;}if(quote.Volume&&!CIQ.isValidNumber(quote.Volume))quote.Volume=parseInt(quote.Volume,10);this.setDisplayDate(quote);i+=plusOne;// Insert into masterData here
if(secondary){if(appendQuotes.length-j<50){// only check last 50 records
this.updateCurrentMarketData(quote,chart,secondary,{fromTrade:true});}if(layout.interval!="tick"||quote.Close!==undefined){if(plusOne)masterData.splice(i,0,{DT:quote.DT});masterData[i][secondary]=quote;}}else{if(appendQuotes.length-j<50){// only check last 50 records
this.updateCurrentMarketData(quote,chart,null,{fromTrade:true});}if(layout.interval!="tick"||quote.Close!==undefined)masterData.splice(i,plusOne?0:1,quote);//inserting into masterData happens here
}}break;}i+=placedFirstQuote?1:-1;}if(i<0){// we have at least one point which needs to be prepended to masterData
// this code will prepend the first of these points, then everything else will fall in line
if(secondary){this.updateCurrentMarketData(quote,chart,secondary,{fromTrade:true});if(layout.interval!="tick"||quote.Close!==undefined){masterData.splice(0,0,{DT:quote.DT});masterData[0][secondary]=quote;}}else{this.updateCurrentMarketData(quote,chart,null,{fromTrade:true});if(layout.interval!="tick"||quote.Close!==undefined)masterData.splice(0,0,quote);}placedFirstQuote=true;i=0;}}if(masterData.length)this.masterData=chart.masterData=masterData;if(this.maxMasterDataSize)masterData=chart.masterData=this.masterData=masterData.slice(-this.maxMasterDataSize);var series=secondary?this.getSeries({symbol:secondary,chart:chart}):[chart];for(var s=0;s<series.length;s++){var handle=series[s];if(!handle.endPoints.begin||handle.endPoints.begin>appendQuotes[0].DT)handle.endPoints.begin=appendQuotes[0].DT;if(!handle.endPoints.end||handle.endPoints.end<appendQuotes[appendQuotes.length-1].DT)handle.endPoints.end=appendQuotes[appendQuotes.length-1].DT;}for(var pl in this.plugins){var plugin=this.plugins[pl];if(plugin.display){if(plugin.appendMasterData)plugin.appendMasterData(this,appendQuotes,chart);}}if(!this.masterData||!this.masterData.length)this.masterData=masterData;if(!params.noCreateDataSet){var sp=this.streamParameters;if(++sp.count>sp.maxTicks||params.bypassGovernor){clearTimeout(sp.timeout);this.createDataSet(null,null,params);this.draw();this.updateChartAccessories();sp.count=0;sp.timeout=-1;}else{if(sp.timeout==-1){sp.timeout=setTimeout(function(){self.createDataSet(null,null,params);self.draw();self.updateChartAccessories();self.streamParameters.count=0;self.streamParameters.timeout=-1;},sp.maxWait);}}}this.runAppend("appendMasterData",arguments);this.runAppend("updateChartData",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Loads or updates detailed current market information, such as L2 data, into the [chart.currentMarketData]{@link CIQ.ChartEngine.Chart#currentMarketData} object
	 * or an equally laid out object for a secondary series (symbol), if one provided.
	 *
	 * **[draw()]{@link CIQ.ChartEngine#draw} must be called immediately after this method to see the updates.**
	 *
	 * A single ‘snapshot’ object per symbol is loaded and only the most current updates maintained.
	 * This method is not intended to track historical or time-series information.
	 *
	 * This market ‘snapshot’ information can then be used to render specialty charts such as {@link CIQ.MarketDepth}, which is not a time series chart.
	 *
	 * When using as part of a chart engine that also display a time-series chart, this method is automatically called with that same time-series data every time new data is load into the chart, thereby maintaing all charts in sync.
	 * And only needs to be explicitly called when needing to update the L2 'snapshot' at a faster refresh rate than the rest of the time-series data, or if the time-series data does not provide this information.
	 * <br>If using the {@link CIQ.MarketDepth} standalone, without a standard time series chart, you must call this method explicitly to load and refresh the data.
	 *
	 * Data Format:
	 *
	 * | Field | Required | Type | Description | Used for cryptoIQ | Used for TFC |
	 * | ----------- | -------- | ---------------------------------------- |
	 * | DT | Yes | A JavaScript Date() object | Timestamp for the data update provided | Yes | Yes |
	 * | Bid | Maybe | number | The current bid price.<br>Required unless already loaded as part of time-series update  | No | Yes |
	 * | Ask | Maybe | number | The current ask price.<br>Required unless already loaded as part of time-series update | No | Yes |
	 * | Last | Maybe | number | The last (current) price.<br>Required unless already loaded as part of time-series update | Yes | Yes |
	 * | BidSize | No | number | The bid size  | No | No |
	 * | AskSize | No | number | The ask size | No | No |
	 * | LastSize | No | number | The last (current) price size. | No | No |
	 * | BidL2 | No | array | Level 2 Bid, expressed as an array of [price,size] pairs.<br>For example, BidL2: [[10.05,15],[10.06,10],...] | Yes | No |
	 * | AskL2 | No | array | Level 2 Ask, expressed as an array of [price,size] pairs.<br>For example, AskL2: [[10.05,15],[10.06,10],...] | Yes | No |
	 *
	 * Since not all of the data will need to be updated at the same time, this method allows you to send only the data that needs to be changed. Any values not provided will simply be skipped and not updated on the object.
	 *
	 * Example data format for a marketDepth chart:
	 * ```
	 * {
	 * 	DT:new Date("2018-07-30T04:00:00.000Z"),
	 * 	Last:24.2589,
	 * 	BidL2:
	 * 	[
	 * 		[93.54,5],[93.65,2],[93.95,7],[95.36,2],
	 * 		[95.97,9],[96.58,1], [96.68, 8], [96.98, 4],
	 * 		[97.08, 5], [97.18, 5], [97.28, 3], [97.38, 5],
	 * 		[97.48, 6], [97.69, 26], [98.29, 5], [98.39, 33],
	 * 		[98.49, 13], [98.6, 42], [98.8, 13], [98.9, 1]
	 * 	],
	 *
	 * 	AskL2:
	 * 	[
	 * 		[101.22,226],[101.32,31],[101.42,13],[101.53,188],
	 * 		[101.63,8],[101.73,5],[101.83,16],[101.93,130],
	 * 		[102.03,9],[102.13,122],[102.23,5],[102.33,5],
	 * 		[102.43,7],[102.54,9],[102.84,3],[102.94,92],
	 * 		[103.04,7],[103.24,4],[103.34,7],[103.44,6]
	 * 	]
	 * }
	 * ```
	 *
	 * @param {object} data Data to load as per required format.
	 * @param  {CIQ.ChartEngine.Chart} chart The chart whose market data to update. Defaults to the instance chart.
	 * @param {string} symbol Symbol if passing secondary series information
	 * @param {object} params  Additional parameters
	 * @param {boolean} [params.fromTrade] This function can be called directly or as a result of a trade update, such as from {@link CIQ.ChartEngine.Chart#updateChartData}.
	 * 										Set this param to `true` to indicate the incoming data is a master data record.
	 * 										Otherwise the function will attempt to adjust the record date to align with the last bar.
	 * @param {boolean} [params.finalClose] If the data.Close is being manipulated (such as with animation), this param should contain the real, final Close value
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 6.1.0
	 * <br>&bull; 6.1.1 Added params.fromTrade
	 * <br>&bull; 6.2.3 Added param `finalClose`
	*/CIQ.ChartEngine.prototype.updateCurrentMarketData=function(data,chart,symbol,params){if(!data||!data.DT)return;if(!chart)chart=this.chart;var calledFromTrade=params&&params.fromTrade;// find the right bar for the data, if not found already
var timestamp=data.DT;if(!calledFromTrade&&this.layout.interval!="tick"){if(chart.market.market_def){if(!chart.market.isMarketDate(data.DT))return;// non-market date, disregard
if(!CIQ.ChartEngine.isDailyInterval(this.layout.interval)&&chart.market.getSession(data.DT)===null)return;// outside of market hours, disregard
}var smi=this.standardMarketIterator(data.DT);if(this.extendedHours&&this.extendedHours.filter)smi.market.enableAllAvailableSessions();smi.next();data.DT=smi.previous();}if(this.runPrepend("updateCurrentMarketData",arguments))return;var currentMarketData=chart.currentMarketData;if(symbol){if(!currentMarketData[symbol])currentMarketData[symbol]={};currentMarketData=currentMarketData[symbol];}["Last","Bid","Ask"].forEach(function(i){if(data[i]&&typeof data[i]=="number"){if(!currentMarketData[i]||!currentMarketData[i].DT||currentMarketData[i].DT<=data.DT){currentMarketData[i]={DT:data.DT,Price:data[i],Size:data[i+"Size"],Timestamp:timestamp};}}});["BidL2","AskL2"].forEach(function(i){if(data[i]&&data[i]instanceof Array){if(!currentMarketData[i]||!currentMarketData[i].DT||currentMarketData[i].DT<=data.DT){currentMarketData[i]={DT:data.DT,Price_Size:data[i],Timestamp:timestamp};}}});if(data.Close&&(!currentMarketData.Last||currentMarketData.Last.DT<=data.DT)){var close=data.Close,finalClose=params&&params.finalClose;if(finalClose||finalClose===0)close=finalClose;currentMarketData.Last={DT:data.DT,Price:close,Size:data.LastSize===undefined&&this.layout.interval=="tick"?data.Volume:data.LastSize,Timestamp:data.LastTime||timestamp};}currentMarketData.touched=new Date();// so we can observe it
if(!calledFromTrade)delete data.Last;//  can cause problems in injections if left
this.runAppend("updateCurrentMarketData",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Clears the [chart.currentMarketData]{@link CIQ.ChartEngine.Chart#currentMarketData} object or the one linked to a secondary series, if one provided.
	 * @param  {CIQ.ChartEngine.Chart} chart The chart to clear. If omitted, will clear all charts.
	 * @param {string} symbol Symbol to clear this symbol's secondary series information
	 * @memberof CIQ.ChartEngine
	 * @since 6.1.0
	*/CIQ.ChartEngine.prototype.clearCurrentMarketData=function(chart,symbol){if(this.runPrepend("clearCurrentMarketData",arguments))return;var ch,charts=[];if(!chart){for(ch in this.charts){charts.push(this.charts[ch]);}}else{charts.push(chart);}for(ch=0;ch<charts.length;ch++){var md=charts[ch].currentMarketData;if(symbol){delete md[symbol];}else{// preserve original object as it's being observed
for(var d in md){delete md[d];}}}this.runAppend("clearCurrentMarketData",arguments);};/**
	 * Sets the maximimum number of ticks to the requested number. This is effected by changing the candleWidth.
	 * See also {@link CIQ.ChartEngine#setCandleWidth}.
	 *
	 * **Note**: if calling `setMaxTicks()` before `newChart()`, and the chart will result in a candle width less than `minimumCandleWidth`, `newChart()` will reset the candle size to the default candle size (8 pixels).
	 *
	 * @param {number} ticks The number of ticks wide to set the chart.
	 * @param {object} [params] Parameters to use with this function.
	 * @param {number} params.padding Whitespace in pixels to add to the right of the chart.
	 * 									Setting this field will home the chart to the most recent tick.
	 * 									To home the chart without padding the right side with whitespace, set padding to 0.
	 * 									Omitting the padding field will keep the chart scrolled to the same position.
	 * @since 2015-11-1 - params added
	 * @memberof CIQ.ChartEngine
	 * @example
	 * stxx.setMaxTicks(300);
	 * stxx.home();	// home() is preferred over draw() in this case to ensure the chart is properly aligned to the right most edge.
	 */CIQ.ChartEngine.prototype.setMaxTicks=function(ticks,params){if(!params)params={};ticks=Math.round(ticks);if(ticks<2)ticks=2;var pad=params.padding?params.padding:0;this.layout.candleWidth=(this.chart.width-pad)/ticks;if(!this.layout.candleWidth)this.layout.candleWidth=8;// Zero candlewidth can only occur if the chart has no width. This might happen if the chart is in a hidden iframe
this.chart.maxTicks=Math.round(this.chart.width/this.layout.candleWidth-0.499);if(params.padding||params.padding===0)this.chart.scroll=ticks+1;// If padding, then by definition we're homing
};/**
	 * Private construction of the chart object. This is called from the actual constructor
	 * for CIQ.ChartEngine.
	 * @private
	 * @memberof CIQ.ChartEngine
	 * @since 07/01/2015
	 */CIQ.ChartEngine.prototype.construct=function(){this.stackPanel("chart","chart",1);this.adjustPanelPositions();this.chart.panel=this.panels[this.chart.name];this.cx=0;this.cy=0;this.micropixels=0;this.callbackListeners={/**
			 * Called on {@link CIQ.ChartEngine.AdvancedInjectable#touchDoubleClick} when the chart is quickly tapped twice.
			 * @callback doubleTapEventListener
			 * @param {object} data Data relevant to the "tap" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {number} data.finger Which finger double tapped
			 * @param {number} data.x The crosshair x position
			 * @param {number} data.y The crosshair y position
			 * @since 4.0.0
			 */doubleTap:[],/**
			 * Called when a drawing is added, removed or modified.
			 * Such as calling {@link CIQ.ChartEngine#clearDrawings}, {@link CIQ.ChartEngine#removeDrawing}, {@link CIQ.ChartEngine#undoLast}, {@link CIQ.ChartEngine#drawingClick}
			 * @callback drawingEventListener
			 * @param {object} data Data relevant to the "drawing" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The current chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {object} data.layout The chart's layout object (CIQ.ChartEngine.layout)
			 * @param {array} data.drawings The chart's current drawings (CIQ.Drawing)
			 */drawing:[],/**
			 * A right-click on a highlighted drawing.
			 *
			 * @callback drawingEditEventListener
			 * @param {object} data Data relevant to the "drawingEdit" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {CIQ.Drawing} data.drawing The highlighted drawing instance
			 */drawingEdit:[],/**
			 * Called when a change occurs in the chart layout.
			 * Such as calling {@link CIQ.ChartEngine#setChartType}, {@link CIQ.ChartEngine#setAggregationType}, {@link CIQ.ChartEngine#setChartScale}, {@link CIQ.ChartEngine#setAdjusted},
			 * {@link WebComponents.cq-toggle}, using the {@link WebComponents.cq-toolbar} to disable the current active drawing tool or toggling the crosshair,
			 * using the {@link WebComponents.cq-views} to activate a serialized layout, [modifying a series]{@link CIQ.ChartEngine#modifySeries},
			 * setting a new [periodicity]{@link CIQ.ChartEngine#setPeriodicity}, adding or removing a [study overlay]{@link CIQ.ChartEngine.AdvancedInjectable#removeOverlay},
			 * adding or removing any new panels (and they corresponding studies), [zooming in]{@link CIQ.ChartEngine#zoomIn} or [zooming out]{@link CIQ.ChartEngine#zoomOut},
			 * setting ranges with {@link CIQ.ChartEngine#setSpan} or {@link CIQ.ChartEngine#setRange}, nullifying a programmatically set Span or Range by user panning,
			 * enabling or disabling [Extended Hours]{@linkCIQ.ExtendedHours} or toggling the [range slider]{@link CIQ.RangeSlider}.
			 *
			 * **Note that scrolling and panning changes are not considered a layout change but rather a shift of the view window in the same layout.
			 * To detect those you can register to listen for [`scroll` events]{@link scrollEventListener} **
			 *
			 * @callback layoutEventListener
			 * @param {object} data Data relevant to the "layout" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The current chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {object} data.layout The chart's layout object (CIQ.ChartEngine.layout)
			 * @param {array} data.drawings The chart's current drawings (CIQ.Drawing)
			 */layout:[],/**
			 * Called when the mouse is clicked on the chart and held down.
			 * @callback longholdEventListener
			 * @param {object} data Data relevant to the "longhold" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.panel The panel being tapped
			 * @param {number} data.x The crosshair x position
			 * @param {number} data.y The crosshair y position
			 */longhold:[],/**
			 * Called when the mouse is moved inside the chart; without scrolling.
			 * @callback moveEventListener
			 * @param {object} data Data relevant to the "move" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.panel The panel where the mouse is active
			 * @param {number} data.x The crosshair x position
			 * @param {number} data.y The crosshair y position
			 * @param {boolean} data.grabbingScreen True if the screen is being touched or clicked
			 */move:[],/**
			 * Called when the quoteFeed fetches a new primary series (symbol change).
			 * @callback newChartEventListener
			 * @param {object} data Data relevant to the "newChart" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The current chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {boolean} data.moreAvailable True if {@link quotefeed~dataCallback} reports that more data is available
			 * @param {object} data.quoteDriver The quoteFeed driver
			 */newChart:[],/**
			 * Called when preferences are changed. Such as {@link CIQ.ChartEngine#setTimeZone}, {@link CIQ.ChartEngine#importPreferences},
			 * {@link CIQ.Drawing.saveConfig}, {@link CIQ.Drawing.restoreDefaultConfig} or language changes using the {@link WebComponents.cq-language-dialog}.
			 * @callback preferencesEventListener
			 * @param {object} data Data relevant to the "preferences" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The current chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {object} data.layout The chart's layout object (CIQ.ChartEngine.layout)
			 * @param {array} data.drawingObjects The chart's current drawings (CIQ.ChartEngine.drawingObjects)
			 */preferences:[],/**
			 * Called on "mouseup" after the chart is right-clicked.
			 * @callback rightClickEventListener
			 * @param {object} data Data relevant to the "rightClick" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} panel The panel that was clicked on
			 * @param {number} data.x The crosshair x position
			 * @param {number} data.y The crosshair y position
			 */rightClick:[],/**
			 * Called when an overlay-type study is right clicked.
			 * @callback studyOverlayEditEventListener
			 * @param {object} data Data relevant to the "studyOverlayEdit" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {object} data.sd The study object studyDescriptor
			 * @param {object} data.inputs The inputs from the studyDescriptor
			 * @param {object} data.outputs The outputs from the studyDescriptor
			 * @param {object} data.parameters The parameters from the studyDescriptor
			 * @example
			 * stxx.addEventListener("studyOverlayEdit", function(studyData){
			 *	  CIQ.alert(studyData.sd.name);
			 *	  var helper=new CIQ.Studies.DialogHelper({name:studyData.sd.type,stx:studyData.stx});
			 *	  console.log('Inputs:',JSON.stringify(helper.inputs));
			 *	  console.log('Outputs:',JSON.stringify(helper.outputs));
			 *	  console.log('Parameters:',JSON.stringify(helper.parameters));
			 *	  // call your menu here with the  data returned in helper
			 *	  // modify parameters as needed and call addStudy or replaceStudy
			 * });
			 */studyOverlayEdit:[],/**
			 * Called when a panel-type study is edited
			 * @callback studyPanelEditEventListener
			 * @param {object} data Data relevant to the "studyPanelEdit" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {object} data.sd The study object studyDescriptor
			 * @param {object} data.inputs The inputs from the studyDescriptor
			 * @param {object} data.outputs The outputs from the studyDescriptor
			 * @param {object} data.parameters The parameters from the studyDescriptor
			 */studyPanelEdit:[],/**
			 * Called when the chart's symbols change. Including secondary series and underlying symbols for studies ( ie. price relative study)
			 * @callback symbolChangeEventListener
			 * @param {object} data Data relevant to the "symbolChange" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The new chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {string} data.action An action type being performed on the symbol. Possible options:
			 *	- `add-series` - A series was added
			 *	- `master` - The master symbol was changed
			 *	- `remove-series` - A series was removed
			 */symbolChange:[],/**
			 * Called when a symbol is imported into the layout. Including secondary series and underlying symbols for studies ( ie. price relative study)
			 * It is not called by other types of symbol changes.
			 * See {@link CIQ.Drawing#importLayout}
			 * @callback symbolImportEventListener
			 * @param {object} data Data relevant to the "symbolImport" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The new chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {string} data.action An action type being performed on the symbol. Possible options:
			 *   - `add-series` - A series was added
			 *   - `master` - The master symbol was changed
			 *   - `remove-series` - A series was removed
			 */symbolImport:[],/**
			 * Called on ["mouseup"]{@link CIQ.ChartEngine#touchSingleClick} when the chart is tapped.
			 * @callback tapEventListener
			 * @param {object} data Data relevant to the "tap" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.panel The panel being tapped
			 * @param {number} data.x The crosshair x position
			 * @param {number} data.y The crosshair y position
			 */tap:[],/**
			 * Called when a new theme is activated on the chart. Such as theme changes using the {@link WebComponents.cq-theme-dialog} or {@link WebComponents.cq-themes} initialization.
			 * @callback themeEventListener
			 * @param {object} data Data relevant to the "theme" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {string} data.symbol The current chart symbol
			 * @param {object} data.symbolObject The symbol's value and display label (CIQ.ChartEngine.chart.symbolObject)
			 * @param {object} data.layout The chart's layout object (CIQ.ChartEngine.layout)
			 * @param {array} data.drawingObjects The chart's current drawings (CIQ.ChartEngine.drawingObjects)
			 */theme:[],/**
			 * Called when an undo stamp is created for drawing events. See {@link CIQ.ChartEngine#undoStamp}
			 * @callback undoStampEventListener
			 * @param {object} data Data relevant to the "undoStamp" event
			 * @param {CIQ.ChartEngine} data.stx The chart engine instance
			 * @param {array} data.before The chart's array of drawingObjects before the change
			 * @param {array} data.after The chart's array of drawingsObjects after the change
			 */undoStamp:[]};this.longHoldTime=1000;};/**
	 * Add a DOM element's event listener and index it so that it will be removed when invoking CIQ.ChartEngine.destroy().
	 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
	 * @param {element} element DOM element to listen for changes on
	 * @param {string} event The event type to listen for. Possible values: https://developer.mozilla.org/en-US/docs/Web/Events
	 * @param {function} listener The callback to invoke when the event happens.
	 * @param {*} Either a boolean or object. See addEventListener options.
	 * @see {@link CIQ.ChartEngine#destroy}
	 * @private
	 * @since 3.0.0
	 */CIQ.ChartEngine.prototype.addDomEventListener=function(element,event,listener,options){element.addEventListener(event,listener,options);this.eventListeners.push({element:element,event:event,'function':listener,options:options});};/**
	 * Register a listener to a chart event in the chart engine instance.
	 * Events are tracked in the `CIQ.ChartEngine.callbackListeners` object; which is READ ONLY, and should never be manually altered.
	 * Valid listeners:
	 *   - `*`: Passing in this value will register the listener to every event type below.
     *   - `doubleTap`: {@link doubleTapEventListener}
	 *   - `drawing`: {@link drawingEventListener}
	 *   - `layout`: {@link layoutEventListener}
	 *   - `longhold`: {@link longholdEventListener}
	 *   - `move`: {@link moveEventListener}
	 *   - `newChart`: {@link newChartEventListener}
	 *   - `rightClick`: {@link rightClickEventListener}
	 *   - `studyOverlayEdit`: {@link studyOverlayEditEventListener}
	 *   - `studyPanelEdit`: {@link studyPanelEditEventListener}
	 *   - `symbolChange`: {@link symbolChangeEventListener}
	 *   - `symbolImport`: {@link symbolImportEventListener}
	 *   - `tap`: {@link tapEventListener}
	 *   - `theme`: {@link themeEventListener}
	 *   - `undoStamp`: {@link undoStampEventListener}
	 * @param {string|array} type The event to listen for.
	 *		(See the description above for valid options.)
	 * @param {function} callback The listener to call when the event is triggered.
	 * @return {object} An object containing the `type` and `cb`. It can be passed to {@link CIQ.ChartEngine#removeEventListener} later to remove the event.
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 04-2016-08
	 * <br>&bull; 4.0.0 'doubleTap' is now available
	 * <br>&bull; 4.0.0 type can be an array of event options
	 * @example
	 * stxx.longHoldTime=... // Optionally override default value of 1000ms
	 * stxx.addEventListener("longhold", function(lhObject){
	 * 	CIQ.alert('longhold event at x: ' + lhObject.x + ' y: '+ lhObject.y);
	 * });
	 */CIQ.ChartEngine.prototype.addEventListener=function(type,callback){if(type==="*"){for(var key in this.callbackListeners){this.callbackListeners[key].push(callback);}}else if(type instanceof Array){for(var i=0;i<type.length;i++){this.callbackListeners[type[i]].push(callback);}}else{var arr=this.callbackListeners[type];if(!arr){throw new Error("Attempted to add an invalid listener.");}arr.push(callback);}return{type:type,cb:callback};};/**
	 * Remove a listener for an emitted chart event.
	 * Events are tracked in the {@link CIQ.ChartEngine.callbackListeners} object.
	 * @param {object} obj Object from {@link CIQ.ChartEngine#addEventListener}
	 * @memberof CIQ.ChartEngine
	 * @since 04-2016-08
	 */CIQ.ChartEngine.prototype.removeEventListener=function(obj,cb){if(!obj||_typeof(obj)!="object"){// User likely passed in one argument into this function with the callback as the first parameter
// This is accounted for because it is consistent with the argument schema of "addEventListener"
obj={type:obj,cb:cb};}var spliceEvent=function spliceEvent(arr,cb){for(var i=0;i<arr.length;i++){if(arr[i]===cb){arr.splice(i,1);return;}}};var callbackListeners=this.callbackListeners;if(obj.type==="*"){for(var key in callbackListeners){spliceEvent(callbackListeners[key],obj.cb);}return;}if(!callbackListeners[obj.type]){throw new Error("Attempted to remove an invalid listener.");}spliceEvent(callbackListeners[obj.type],obj.cb);};/**
	 * Dispatches an event
	 *
	 * Returns false by default unless a developer explicitly returns a boolean value which can be used to bypass core functionality in the same manner as the Injection API
	 * ***Above, return logic currently only implemented with doubleTapEventListener but can be updated in the future to work with more.***
	 *
	 * @memberof CIQ.ChartEngine
	 * @param {string} type The callbackListener to call
	 * @param {object} data A collection of parameters to provide to the callback
	 * @return {boolean} Will always be false unless a developer purposely returns a true value from their callback
	 * @private
	 */CIQ.ChartEngine.prototype.dispatch=function(type,data){if(this.callbacks[type])this.callbacks[type].call(this,data);var arr=this.callbackListeners[type];var rv;if(arr){for(var i=0;i<arr.length;i++){rv=arr[i].call(this,data);}if(rv)return rv;}arr=this.callbackListeners["*"];if(arr){for(var j=0;j<arr.length;j++){rv=arr[j].call(this,data);}if(rv)return rv;}return false;};/**
	 * Retrieves a Y-Axis based on its name property
	 * @param  {CIQ.ChartEngine.Panel} panel The panel
	 * @param  {string} name The name of the axis
	 * @return {CIQ.ChartEngine.YAxis} matching YAxis or undefined if none exists
	 * @memberof CIQ.ChartEngine
	 * @since 5.2.0
	 */CIQ.ChartEngine.prototype.getYAxisByName=function(panel,name){if(!panel)return undefined;if(typeof panel=="string")panel=this.panels[panel];if(name===panel.yAxis.name)return panel.yAxis;var i;for(i=0;panel.yaxisLHS&&i<panel.yaxisLHS.length;i++){if(panel.yaxisLHS[i].name===name)return panel.yaxisLHS[i];}for(i=0;panel.yaxisRHS&&i<panel.yaxisRHS.length;i++){if(panel.yaxisRHS[i].name===name)return panel.yaxisRHS[i];}return undefined;};/**
	 * Removes the yAxis from the panel if it is not being used by any current renderers. This could be the case
	 * if a renderer has been removed. It could also be the case if a renderer is not attached to any series.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel
	 * @param  {CIQ.ChartEngine.YAxis} yAxis The axis to be removed
	 * @memberof CIQ.ChartEngine
	 * @since 07/01/2015
	 */CIQ.ChartEngine.prototype.deleteYAxisIfUnused=function(panel,yAxis){if(!yAxis||yAxis.name===panel.yAxis.name)return;for(var r in this.chart.seriesRenderers){var renderer=this.chart.seriesRenderers[r];if(renderer.params.yAxis&&renderer.params.yAxis.name===yAxis.name){if(renderer.seriesParams.length!==0)return;}}var i;for(i=0;i<panel.yaxisLHS.length;i++){if(panel.yaxisLHS[i]===yAxis)panel.yaxisLHS.splice(i,1);}for(i=0;i<panel.yaxisRHS.length;i++){if(panel.yaxisRHS[i]===yAxis)panel.yaxisRHS.splice(i,1);}this.preAdjustScroll();this.resizeCanvas();this.adjustPanelPositions();this.postAdjustScroll();};/**
	 * Adds a yAxis to the specified panel. If the yAxis already exists then it is assigned its match from the panel.
	 * @param {CIQ.ChartEngine.Panel} panel The panel to add (i.e. stxx.chart.panel)
	 * @param {CIQ.ChartEngine.YAxis} yAxis The YAxis to add (create with new CIQ.ChartEngine.YAxis)
	 * @return {CIQ.ChartEngine.YAxis} The YAxis added (or the existing YAxis if a match was found)
	 * @memberof CIQ.ChartEngine
	 * @since 5.1.0 added return value
	 */CIQ.ChartEngine.prototype.addYAxis=function(panel,yAxis){if(!yAxis)return;if(!panel.yaxisLHS){// initialize the arrays of y-axis. This will only happen once.
panel.yaxisLHS=[];panel.yaxisRHS=[];// Our default y-axis goes into the array
if(panel.yAxis.position=="left")panel.yaxisLHS.push(panel.yAxis);else panel.yaxisRHS.push(panel.yAxis);}var i,arr=panel.yaxisLHS;for(i=arr.length-1;i>=0;i--){if(arr[i].name===yAxis.name){if(yAxis.position=="left")return arr[i];arr.splice(i,1);}}arr=panel.yaxisRHS;for(i=arr.length-1;i>=0;i--){if(arr[i].name===yAxis.name){if(yAxis.position!="left")return arr[i];arr.splice(i,1);}}if(yAxis.position==="left"){panel.yaxisLHS.unshift(yAxis);}else{if(!yAxis.position)yAxis.position="right";panel.yaxisRHS.push(yAxis);}yAxis.height=panel.yAxis.height;this.preAdjustScroll();this.resizeCanvas();this.adjustPanelPositions();this.calculateYAxisMargins(yAxis);this.postAdjustScroll();return yAxis;};/**
	 * This method calculates the left and width members of each y-axis.
	 *
	 * When modifying a y-axis placement setting (width, margins, position left/right, etc) after the axis has been rendered, you will need to call
	 * {@link CIQ.ChartEngine#calculateYAxisMargins} or this function, followed by {@link CIQ.ChartEngine#draw} to activate the change.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.calculateYAxisPositions=function(){// We push all the charts to the fore because panel widths will depend on what is calculated for their chart
var panelsInOrder=[];for(var chartName in this.charts){if(this.charts[chartName].hidden||this.charts[chartName].panel.hidden)continue;panelsInOrder.push(chartName);}for(var panelName in this.panels){var p=this.panels[panelName];if(p.name===p.chart.name||p.hidden)continue;panelsInOrder.push(panelName);}var tickWidth=this.drawBorders?3:0;// pixel width of tick off edge of border
var maxTotalWidthLeft=0,maxTotalWidthRight=0,i,j,panel,yaxis;for(j=0;j<panelsInOrder.length;j++){panel=this.panels[panelsInOrder[j]];if(!panel)continue;// this could happen if a chart panel doesn't exist yet (for instance when importLayout)
if(!panel.yaxisLHS){// initialize the arrays of y-axis. This will only happen once.
panel.yaxisLHS=[];panel.yaxisRHS=[];}// Our default y-axis goes into the array
var position=panel.yAxis.position;// get default position of the yaxis for the chart
if(!position)position=panel.chart.panel.yAxis.position;// Unless specified, the y-axis position for panels will follow the chart default
for(i=0;i<panel.yaxisLHS.length;i++){if(panel.yaxisLHS[i].name==panel.yAxis.name){panel.yaxisLHS.splice(i,1);break;}}for(i=0;i<panel.yaxisRHS.length;i++){if(panel.yaxisRHS[i].name==panel.yAxis.name){panel.yaxisRHS.splice(i,1);break;}}if(position=="left"){panel.yaxisLHS.push(panel.yAxis);}else{panel.yaxisRHS.unshift(panel.yAxis);}if(!panel.yAxis.width&&panel.yAxis.width!==0)panel.yAxis.width=this.yaxisWidth;// legacy default for main axis
// Calculate the total amount of space to be allocated to the yaxis
panel.yaxisTotalWidthRight=0;panel.yaxisTotalWidthLeft=0;var arr=panel.yaxisLHS.concat(panel.yaxisRHS);for(i=0;i<arr.length;i++){yaxis=arr[i];if(yaxis.noDraw||!yaxis.width)continue;if(yaxis.position=="left"||position=="left"&&!yaxis.position){panel.yaxisTotalWidthLeft+=yaxis.width;}else{panel.yaxisTotalWidthRight+=yaxis.width;}}if(panel.yaxisTotalWidthLeft>maxTotalWidthLeft)maxTotalWidthLeft=panel.yaxisTotalWidthLeft;if(panel.yaxisTotalWidthRight>maxTotalWidthRight)maxTotalWidthRight=panel.yaxisTotalWidthRight;}for(j=0;j<panelsInOrder.length;j++){panel=this.panels[panelsInOrder[j]];if(!panel)continue;// this could happen if a chart panel doesn't exist yet (for instance when importLayout)
var isAChart=panel.name===panel.chart.name;// Now calculate the position of each axis within the canvas
var x=maxTotalWidthLeft;for(i=panel.yaxisLHS.length-1;i>=0;i--){yaxis=panel.yaxisLHS[i];if(yaxis.noDraw)continue;x-=yaxis.width;yaxis.left=x;}x=this.width-maxTotalWidthRight;for(i=0;i<panel.yaxisRHS.length;i++){yaxis=panel.yaxisRHS[i];if(yaxis.noDraw)continue;yaxis.left=x;x+=yaxis.width;}if(typeof this.yaxisLeft!="undefined")panel.chart.yaxisPaddingRight=this.yaxisLeft;// support legacy use of yaxisLeft
// Calculate the padding. This is enough space for the y-axis' unless overridden by the developer.
panel.yaxisCalculatedPaddingRight=maxTotalWidthRight;if(panel.chart.yaxisPaddingRight||panel.chart.yaxisPaddingRight===0)panel.yaxisCalculatedPaddingRight=panel.chart.yaxisPaddingRight;panel.yaxisCalculatedPaddingLeft=maxTotalWidthLeft;if(panel.chart.yaxisPaddingLeft||panel.chart.yaxisPaddingLeft===0)panel.yaxisCalculatedPaddingLeft=panel.chart.yaxisPaddingLeft;if(isAChart||panel.chart.panel.hidden){panel.left=panel.yaxisCalculatedPaddingLeft;panel.right=this.width-panel.yaxisCalculatedPaddingRight;}else{panel.left=panel.chart.panel.left;panel.right=panel.chart.panel.right;}panel.width=panel.right-panel.left;if(panel.handle){panel.handle.style.left=panel.left+"px";panel.handle.style.width=panel.width+"px";}if(isAChart||panel.chart.panel.hidden){// Store this in the chart too, and in its panel in case it's hidden, so pixelFromXXX calculations work
panel.chart.panel.left=panel.chart.left=panel.left;panel.chart.panel.right=panel.chart.right=panel.right;panel.chart.panel.width=panel.chart.width=Math.max(panel.right-panel.left,0);// negative chart.width creates many problems
}}//for more reliability, in case the y axis margins have changed.
this.setCandleWidth(this.layout.candleWidth);this.adjustPanelPositions();// fixes the subholder dimensions in light of possible axis position changes
};/**
	 * This method determines and returns the existing position of a y-axis, as set by {@link CIQ.ChartEngine.YAxis#position} or {@link CIQ.ChartEngine#setYAxisPosition}.
	 *
	 * @param {CIQ.ChartEngine.YAxis} yAxis The YAxis whose position is to be found
	 * @param  {CIQ.ChartEngine.Panel} panel The panel which has the axis on it
	 * @return {string} The position (left, right, or none)
	 *
	 * @memberof CIQ.ChartEngine
	 * @since 6.2.0
	 */CIQ.ChartEngine.prototype.getYAxisCurrentPosition=function(yAxis,panel){if(!yAxis.width)return"none";var arr=panel.yaxisLHS;for(var i=0;i<arr.length;i++){if(arr[i].name==yAxis.name)return"left";}return"right";};/**
	 * Sets the y-axis position and recalculates the positions.
	 *
	 * Always use this method on existent y-axis rather than changing {@link CIQ.ChartEngine.YAxis#position}
	 * @param {CIQ.ChartEngine.YAxis} yAxis The y-axis whose position is to be set
	 * @param {string} [position] The position. Valid options:"left", "right", "none", or null.
	 * @memberof CIQ.ChartEngine
	 * @since 6.2.0
	 */CIQ.ChartEngine.prototype.setYAxisPosition=function(yAxis,position){yAxis.position=position;yAxis.width=position=="none"?0:CIQ.ChartEngine.YAxis.prototype.width;this.calculateYAxisPositions();this.draw();};/**
	 * <span class="injection">INJECTABLE</span>
	 * This method initializes the chart container events, such as window `resize` events,
	 * and the [resizeTimer]{@link CIQ.ChartEngine#setResizeTimer} to ensure the chart adjusts as its container size changes.
	 * It also initializes various internal variables, the canvas and creates the chart panel.
	 *
	 * This is called by {@link CIQ.ChartEngine#newChart} and should rarely be called directly.
	 *
	 * Note that the candle width will be reset to 8px if larger than 50px. Even if the value comes from a layout import.
	 * This is done to ensure a reasonable candle size is available across devices that may have different screen size.
	 *
	 * @memberof CIQ.ChartEngine
	 *
	 */CIQ.ChartEngine.prototype.initializeChart=function(container){if(this.runPrepend("initializeChart",arguments))return;if(!this.chart.symbolObject.symbol)this.chart.symbolObject.symbol=this.chart.symbol;// for backwards compatibility so the symbol object is always initialized in case we don't use newChart()
if(this.locale)this.setLocale(this.locale);if(!this.displayZone&&CIQ.ChartEngine.defaultDisplayTimeZone){this.setTimeZone(null,CIQ.ChartEngine.defaultDisplayTimeZone);}this.resetDynamicYAxis({noRecalculate:true});this.calculateYAxisPositions();this.micropixels=0;if(container)this.chart.container=container;else container=this.chart.container;container.stx=this;if(!container.CIQRegistered){container.CIQRegistered=true;CIQ.ChartEngine.registeredContainers.push(container);}this.registerHTMLElements();// Sets all of the internal HTML elements to those in the container
var canvas=this.chart.canvas,tempCanvas=this.chart.tempCanvas,floatCanvas=this.floatCanvas;if(canvas&&document.createElement("canvas").getContext){if(!canvas.id){//Don't play with canvases which have id's since you don't own them
container.removeChild(canvas);this.chart.canvas=null;}if(tempCanvas&&!tempCanvas.id){container.removeChild(tempCanvas);this.chart.tempCanvas=null;}if(floatCanvas&&!floatCanvas.id){container.removeChild(floatCanvas);this.floatCanvas=null;}}else{// Just make sure the candleWidth is sane
if(this.layout.candleWidth<this.minimumCandleWidth)this.layout.candleWidth=this.minimumCandleWidth;if(this.layout.candleWidth>200)this.layout.candleWidth=8;}if(!this.chart.canvas)canvas=this.chart.canvas=document.createElement("canvas");if(!this.chart.canvas.getContext){canvas=this.chart.canvas=$$$(".ie8canvas",container);if(!canvas.getContext){//IE8, didn't initialize canvas yet, we will do manually
if(window.G_vmlCanvasManager)G_vmlCanvasManager.initElement(canvas);}canvas.style.display="block";}else{container.appendChild(canvas);}canvas.style.position="absolute";canvas.style.left="0px";var ctx=canvas.context=this.chart.context=canvas.getContext("2d");ctx.lineWidth=1;if(!this.chart.tempCanvas)tempCanvas=this.chart.tempCanvas=document.createElement("canvas");if(!this.chart.tempCanvas.getContext){tempCanvas=this.chart.tempCanvas=$$$(".ie8canvasTemp",container);if(!tempCanvas.getContext){//IE8, didn't initialize canvas yet, we will do manually
if(window.G_vmlCanvasManager)G_vmlCanvasManager.initElement(tempCanvas);}}else{container.appendChild(tempCanvas);}tempCanvas.style.position="absolute";tempCanvas.style.left="0px";tempCanvas.context=this.chart.tempCanvas.getContext("2d");tempCanvas.context.lineWidth=1;tempCanvas.style.display="none";if(!this.floatCanvas)floatCanvas=this.floatCanvas=document.createElement("canvas");if(!this.floatCanvas.getContext){floatCanvas=this.floatCanvas=$$$(".ie8canvasFloat",container);if(!floatCanvas.getContext){//IE8, didn't initialize canvas yet, we will do manually
if(window.G_vmlCanvasManager)G_vmlCanvasManager.initElement(floatCanvas);}}else{container.appendChild(floatCanvas);}floatCanvas.style.position="absolute";floatCanvas.style.left="0px";floatCanvas.context=floatCanvas.getContext("2d");floatCanvas.context.lineWidth=1;floatCanvas.style.display="none";this.resizeCanvas();if(CIQ.isAndroid){this.chart.tempCanvas.ontouchstart=function(e){if(e.preventDefault)e.preventDefault();};this.floatCanvas.ontouchstart=function(e){if(e.preventDefault)e.preventDefault();};}var chart=this.chart,panels=this.panels;chart.panel.display=chart.symbol;if(chart.symbolDisplay)chart.panel.display=chart.symbolDisplay;this.adjustPanelPositions();this.chart.panel=panels[chart.name];for(var p in panels){var yAxes=panels[p].yaxisLHS.concat(panels[p].yaxisRHS);for(var a=0;a<yAxes.length;a++){yAxes[a].height=panels[p].yAxis.height;// set the [overlay] yAxis height to the panel's main yAxis height...
this.calculateYAxisMargins(yAxes[a]);// ...so this will work
}}this.initialWhitespace=this.preferences.whitespace;if(chart.dataSet&&chart.dataSet.length>0){chart.scroll=Math.floor(chart.width/this.layout.candleWidth);//this.chart.maxTicks;
var wsInTicks=Math.round(this.preferences.whitespace/this.layout.candleWidth);chart.scroll-=wsInTicks;}if(CIQ.touchDevice){var overlayEdit=$$$(".overlayEdit",container);var overlayTrashCan=$$$(".overlayTrashCan",container);var vectorTrashCan=$$$(".vectorTrashCan",container);if(overlayEdit){CIQ.safeClickTouch(overlayEdit,function(self){return function(e){self.deleteHighlighted(true,true);};}(this));if(overlayTrashCan){CIQ.safeClickTouch(overlayTrashCan,function(self){return function(e){self.deleteHighlighted(false);};}(this));}}else if(overlayTrashCan){CIQ.safeClickTouch(overlayTrashCan,function(self){return function(e){self.deleteHighlighted(true);};}(this));}if(vectorTrashCan){CIQ.safeClickTouch(vectorTrashCan,function(self){return function(e){self.deleteHighlighted(true);};}(this));}}if(this.manageTouchAndMouse){this.registerTouchAndMouseEvents();if(this.controls.chartControls){this.controls.chartControls.style.display="block";}}container.onmouseout=function(self){return function(e){self.handleMouseOut(e);};}(this);this.abortDrawings();this.undoStamps=[];for(var panelName in panels){var panel=panels[panelName];if(panel.markerHolder){container.removeChild(panel.markerHolder);panel.markerHolder=null;}}for(var i in this.plugins){var plugin=this.plugins[i];if(plugin.display){if(plugin.initializeChart)plugin.initializeChart(this);}}// This sets a resize listener for when the screen itself is resized.
if(!this.resizeListenerInitialized){var self=this;this.resizeListenerInitialized=true;var resizeListener=function resizeListener(){return function(e){self.resizeChart();};};this.addDomEventListener(window,"resize",resizeListener(),true);}if(chart.baseline.userLevel)chart.baseline.userLevel=null;// This sets the interval timer which checks fore resize condition every X milliseconds (if non zero)
this.setResizeTimer(this.resizeDetectMS);this.runAppend("initializeChart",arguments);};/**
	 * Clears out a chart engine instantiated with [new CIQ.ChartEngine();]{@link CIQ.ChartEngine},
	 * eliminating all references including the resizeTimer, quoteDriver, styles and eventListeners.
	 *
	 * It's still up to the developer to set the declared pointer for the instance to null so that the garbage collector can remove it.
	 *
	 * This method should only be used when you no longer need the chart engine and **never** be used in between {@link CIQ.ChartEngine#newChart} calls to load or change symbols.
	 * @memberof CIQ.ChartEngine
	 * @example
	 * // create
	 * var stxx=new CIQ.ChartEngine({container: $$$(".chartContainer")});
	 *
	 * //destroy
	 * stxx.destroy();
	 *
	 * //remove
	 * stxx = null;
	 */CIQ.ChartEngine.prototype.destroy=function(){this.setResizeTimer(0);if(this.quoteDriver)this.quoteDriver.die();this.styles={};// Get rid of any external style references that could cause us to hang around
for(var i=0;i<this.eventListeners.length;i++){var listener=this.eventListeners[i];listener.element.removeEventListener(listener.event,listener["function"],listener.options);}if(this.streamParameters.timeout)clearTimeout(this.streamParameters.timeout);// remove chart container from registeredContainers
var registeredContainers=CIQ.ChartEngine.registeredContainers;var chartIndex=registeredContainers.indexOf(this.chart.container);if(chartIndex>-1){registeredContainers.splice(chartIndex,1);}// remove matching range slider
if(this.slider){var sliderIndex=registeredContainers.indexOf(this.slider.slider.chart.container);if(sliderIndex>-1){registeredContainers.splice(sliderIndex,1);}}};/**
	 * <span class="injection">INJECTABLE</span>
	 * This is called whenever the mouse leaves the chart area. Crosshairs are disabled, stickies are hidden, dragDrawings are completed.
	 * @param  {Event} e The mouseout event
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias handleMouseOut
	 */CIQ.ChartEngine.prototype.handleMouseOut=function(e){e=e||window.event;if(!CIQ.withinElement(this.chart.container,e.pageX,e.pageY)){if(this.runPrepend("handleMouseOut",arguments))return;this.undisplayCrosshairs();// Added 9/19/2013 to unleash grabbing when the mouse moves out of the container
this.grabbingScreen=false;this.touches=[];this.touching=false;if(this.activeDrawing&&this.userPointerDown){//end the drawing
this.userPointerDown=false;this.drawingLine=false;var cy=this.backOutY(e.pageY);var cx=this.backOutX(e.pageX);this.drawingClick(this.currentPanel,cx,cy);}CIQ.ChartEngine.insideChart=false;// Added to remove sticky when the mouse moves out of the container
this.displaySticky();this.findHighlights(false,true);this.runAppend("handleMouseOut",arguments);}};/**
	 * Registers touch and mouse events for the chart (for dragging, clicking, zooming). The events are registered on the container div (not the canvas).
	 * Set {@link CIQ.ChartEngine#manageTouchAndMouse} to false to disable the built in event handling (events will not be registered with the container).
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.registerTouchAndMouseEvents=function(){if(this.touchAndMouseEventsRegistered)return;this.touchAndMouseEventsRegistered=true;var zoomInEl=$$$(".stx-zoom-in",this.controls.chartControls);var zoomOutEl=$$$(".stx-zoom-out",this.controls.chartControls);var containerElement=this.chart.container;var self=this;var addListener=function addListener(event,listener){self.addDomEventListener(containerElement,event,listener);};if(!CIQ.touchDevice){addListener("mousemove",function(e){self.mousemove(e);});addListener("mouseenter",function(e){self.mousemove(e);});addListener("mousedown",function(e){self.mousedown(e);});addListener("mouseup",function(e){self.mouseup(e);});}else{if(CIQ.isSurface){addListener("mousemove",function(e){self.msMouseMoveProxy(e);});addListener("mouseenter",function(e){self.msMouseMoveProxy(e);});addListener("mousedown",function(e){self.msMouseDownProxy(e);});addListener("mouseup",function(e){self.msMouseUpProxy(e);});addListener("pointerdown",function(e){return self.startProxy(e);});addListener("pointermove",function(e){self.moveProxy(e);});addListener("pointerenter",function(e){return self.moveProxy(e);});addListener("pointerup",function(e){return self.endProxy(e);});}else{// We need mouse events for all-in-one computers that accept both mouse and touch commands
// Actually, only for Firefox and Chrome browsers. IE10 sends pointers which are managed by the isSurface section
if(!CIQ.isAndroid&&!CIQ.ipad&&!CIQ.iphone){addListener("mousemove",function(e){self.iosMouseMoveProxy(e);});addListener("mouseenter",function(e){self.iosMouseMoveProxy(e);});addListener("mousedown",function(e){self.iosMouseDownProxy(e);});addListener("mouseup",function(e){self.iosMouseUpProxy(e);});}addListener("touchstart",function(e){self.touchstart(e);});addListener("touchmove",function(e){self.touchmove(e);});addListener("touchend",function(e){self.touchend(e);});// capture a "pen" device, so we can treat it as a mouse
addListener("pointerdown",function(e){self.touchPointerType=e.pointerType;});if(zoomInEl){zoomInEl.removeAttribute("onMouseOver");zoomInEl.removeAttribute("onMouseOut");}if(zoomOutEl){zoomOutEl.removeAttribute("onMouseOver");zoomOutEl.removeAttribute("onMouseOut");}}}var wheelEvent=CIQ.wheelEvent;if(this.captureMouseWheelEvents){this.addDomEventListener(containerElement,wheelEvent,function(e){self.mouseWheel(e);});}};/**
	 * <span class="injection">INJECTABLE</span>
	 * This function is called when the user right clicks on a highlighted overlay, series or drawing.<br>
	 * Calls deleteHighlighted() which calls rightClickOverlay() for studies.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias rightClickHighlighted
	 * @example
	 * stxx.prepend("rightClickHighlighted", function(){
	 * 	console.log('do nothing on right click');
	 * 	return true;
	 * });
	 */CIQ.ChartEngine.prototype.rightClickHighlighted=function(){if(this.runPrepend("rightClickHighlighted",arguments))return;this.deleteHighlighted(true);this.runAppend("rightClickHighlighted",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Removes any and all highlighted overlays, series or drawings.
	 * @param {boolean} callRightClick when true, call the right click method for the given highlight
	 * <br>&bull; drawing highlight calls {CIQ.ChartEngine#rightClickDrawing}
	 * <br>&bull; overlay study highlight calls {CIQ.ChartEngine#rightClickOverlay}
	 * @param {boolean} forceEdit skip the context menu and begin editing immediately, usually for touch devices
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias deleteHighlighted
	 * @since
	 * <br>&bull; 4.1.0 Removes a renderer from the chart if it has no series attached to it.
	 * <br>&bull; 6.2.0 Calls {CIQ.ChartEngine#rightClickDrawing} when a drawing is highlighted and the `callRightClick` argument is true.
	 */CIQ.ChartEngine.prototype.deleteHighlighted=function(callRightClick,forceEdit){if(this.runPrepend("deleteHighlighted",arguments))return;this.cancelTouchSingleClick=true;CIQ.clearCanvas(this.chart.tempCanvas,this);var canDeleteAll=this.bypassRightClick===false;if(canDeleteAll||!this.bypassRightClick.drawing){for(var i=this.drawingObjects.length-1;i>=0;i--){var drawing=this.drawingObjects[i];if(!drawing.highlighted)continue;if(callRightClick){this.rightClickDrawing(drawing,forceEdit);}else if(!drawing.permanent){var dontDeleteMe=drawing.abort();if(!dontDeleteMe){var before=CIQ.shallowClone(this.drawingObjects);this.drawingObjects.splice(i,1);this.undoStamp(before,CIQ.shallowClone(this.drawingObjects));}this.changeOccurred("vector");}}}if(canDeleteAll||!this.bypassRightClick.study){for(var name in this.overlays){var o=this.overlays[name];if(o.highlight&&!o.permanent){if(callRightClick||forceEdit)this.rightClickOverlay(name,forceEdit);else this.removeOverlay(name);}}}var chart=this.currentPanel.chart;if(canDeleteAll||!this.bypassRightClick.series){for(var r in chart.seriesRenderers){var renderer=chart.seriesRenderers[r];for(var sp=renderer.seriesParams.length-1;sp>=0;sp--){var series=renderer.seriesParams[sp];if(series.highlight&&!series.permanent){renderer.removeSeries(series.id);if(renderer.seriesParams.length<1)this.removeSeriesRenderer(renderer);}}}}this.draw();this.clearMeasure();var mSticky=this.controls.mSticky;if(mSticky){mSticky.style.display="none";mSticky.children[0].innerHTML="";}this.runAppend("deleteHighlighted",arguments);};/**
	 * Returns true if the panel exists
	 * @param  {string} name Name of panel to search for
	 * @return {boolean}	  True if the panel exists
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.panelExists=function(name){for(var p in this.panels){var panel=this.panels[p];if(panel.name==name)return true;}return false;};/**
	 * Use this method to temporarily hide an enabled crosshair.
	 * Usually as part of a custom drawing or overlay to prevent the crosshair to display together with the custom rendering.
	 *
	 * See <a href="CIQ.ChartEngine.html#layout%5B%60crosshair%60%5D">CIQ.ChartEngine.layout.crosshair</a> to enable/disable the crosshair.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.hideCrosshairs=function(){this.displayCrosshairs=false;};/**
	 * Re-displays a crosshair temporarily hidden by {@link CIQ.ChartEngine#hideCrosshairs}
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.showCrosshairs=function(){this.displayCrosshairs=true;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Event handler that is called when the handle of a panel is grabbed, for resizing
	 * @param  {Event} e	 The mousedown or touchdown event
	 * @param  {CIQ.ChartEngine.Panel} panel The panel that is being grabbed
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias grabHandle
	 */CIQ.ChartEngine.prototype.grabHandle=function(panel){if(this.runPrepend("grabHandle",arguments))return;//if(e.preventDefault) e.preventDefault();
if(!panel)return;CIQ.ChartEngine.crosshairY=panel.top+this.top;CIQ.ChartEngine.resizingPanel=panel;CIQ.appendClassName(panel.handle,"stx-grab");this.runAppend("grabHandle",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * Event handler that is called when a panel handle is released.
	 * @param  {Event} e The mouseup or touchup event
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias releaseHandle
	 */CIQ.ChartEngine.prototype.releaseHandle=function(){if(this.runPrepend("releaseHandle",arguments))return true;//if(e.preventDefault) e.preventDefault();
CIQ.clearCanvas(this.chart.tempCanvas,this);this.resizePanels();if(CIQ.ChartEngine.resizingPanel)CIQ.unappendClassName(CIQ.ChartEngine.resizingPanel.handle,"stx-grab");CIQ.ChartEngine.resizingPanel=null;this.runAppend("releaseHandle",arguments);};/**
	 * Takes the existing panels and stores them in the layout.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.storePanels=function(){if(!this.layout)this.layout={};var view=this.layout;view.panels={};for(var p in this.panels){var panel=this.panels[p];view.panels[panel.name]={"percent":panel.percent,"display":panel.display,"yAxis":panel.yAxis};}};/**
	 * Saves the panel state in the layout. Called whenever there is a change to panel layout (resizing, opening, closing).
	 * @param  {boolean} saveLayout If false then a change event will not be called. See (@link CIQ.ChartEngine#changeOccurred)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.savePanels=function(saveLayout){this.storePanels();if(saveLayout!==false)this.changeOccurred("layout");};/**
	 * Returns the absolute screen position given a Y pixel on the canvas
	 * @param  {number} y Y pixel on the canvas
	 * @return {number}	  Absolute Y screen position
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.resolveY=function(y){return this.top+y;};/**
	 * Returns the absolute screen position given a X pixel on the canvas
	 * @param  {number} x X pixel on the canvas
	 * @return {number}	  Absolute X screen position
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.resolveX=function(x){return this.left+x;};/**
	 * Returns the relative canvas position given an absolute Y position on the screen
	 * @param  {number} y Y pixel on the screen
	 * @return {number}	  Relative Y position on canvas
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.backOutY=function(y){return y-this.top;};/**
	 * Returns the relative canvas position given an absolute X position on the screen
	 * @param  {number} x X pixel on the screen
	 * @return {number}	  Relative X position on canvas
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.backOutX=function(x){return x-this.left;};/**
	 * Cleans up a removed study. called by {@link CIQ.ChartEngine#privateDeletePanel} or {@link CIQ.ChartEngine#removeOverlay}
	 * Calls removeFN, and plugins associated with study.
	 * Finally, removes study from layout.
	 * @param  {CIQ.ChartEngine} stx A chart object
	 * @param  {object} sd  A study descriptor
	 * @memberof CIQ.ChartEngine
	 * @private
	 * @since 2015-11-1
	 */CIQ.ChartEngine.prototype.cleanupRemovedStudy=function(sd){if(sd.study.removeFN)sd.study.removeFN(this,sd);// delete any plugins associated with this study
for(var p in this.plugins){if(p.indexOf("{"+sd.id+"}")>-1)delete this.plugins[p];}if(this.layout.studies)delete this.layout.studies[sd.name];delete this.overlays[sd.name];CIQ.Studies.removeStudySymbols(sd,this);if(this.quoteDriver)this.quoteDriver.updateSubscriptions();};/**
	 * Internal function for deleting a panel and its associated DOM objects
	 * Do not call directly. Always call panelClose
	 * @private
	 */CIQ.ChartEngine.prototype.privateDeletePanel=function(panel){if(this.layout.studies){var mySD=this.layout.studies[panel.name];if(mySD)this.cleanupRemovedStudy(mySD);}// If we ever want to delete any drawing objects in a panel
/*var drawingDeleted=false;
		for(var i=0;i<this.drawingObjects.length;i++){
			var drawing=this.drawingObjects[i];
			if(this.panels[drawing.panelName]==panel){
				drawing.abort();
				this.drawingObjects.splice(i,1);
				drawingDeleted=true;
			}
		}*/delete this.panels[panel.name];if(CIQ.Studies){for(var spm in CIQ.Studies.studyPanelMap){if(CIQ.Studies.studyPanelMap[spm].panel==panel.name)delete CIQ.Studies.studyPanelMap[spm];}}for(var series in this.overlays){if(this.overlays[series].panel==panel.name){this.cleanupRemovedStudy(this.layout.studies[series]);delete this.overlays[series];}}if(panel.holder){this.chart.container.removeChild(panel.holder);if(this.getMarkerArray){var arr=this.getMarkerArray("panelName",panel.name);for(var i=0;i<arr.length;i++){this.removeFromHolder(arr[i]);}}}if(panel.handle)panel.handle.parentNode.removeChild(panel.handle);//if(drawingDeleted) this.changeOccurred("vector");
this.currentPanel=null;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Closes the panel opened with {@link CIQ.ChartEngine.AdvancedInjectable#createPanel}.
	 * This is called when a chart panel is closed manually or programmatically.
	 * For example, after removing a study panel with the {@link CIQ.Studies.removeStudy} function, or when a user clicks on the "X" for a panel.
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to close
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias panelClose
	 *
	 */CIQ.ChartEngine.prototype.panelClose=function(panel){if(!panel)return;if(this.runPrepend("panelClose",arguments))return;this.cancelTouchSingleClick=true;CIQ.ChartEngine.drawingLine=false;if(panel.soloing)this.panelSolo(panel);// If we're deleting a panel with a chart in it
if(this.charts[panel.name]){// Then delete all the panels that reference that chart
for(var panelName in this.panels){var subPanel=this.panels[panelName];if(subPanel.chart.name==panel.name){this.privateDeletePanel(subPanel);}}// and delete the chart itself
delete this.charts[panel.name];}else{// otherwise just delete the panel
this.privateDeletePanel(panel);}if(!this.currentlyImporting){// silent mode while importing
this.showCrosshairs();this.createDataSet();this.resetDynamicYAxis({noRecalculate:true});this.calculateYAxisPositions();this.draw();this.savePanels();}// IE11 on Win7 hack. We do this in case the mouseup is lost when we removed the panel.close from the DOM
this.userPointerDown=this.grabbingScreen=false;if(this.openDialog)this.openDialog="";this.runAppend("panelClose",arguments);};/**
	 * Deletes all of the panels (except for the default chart panel)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.deleteAllPanels=function(){for(var p in this.panels){var panel=this.panels[p];this.privateDeletePanel(panel);}this.layout.panels={};this.panels={};};/**
	 * This moves a panel up one position (when the user clicks the up arrow).
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to move up.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.panelUp=function(panel){this.cancelTouchSingleClick=true;CIQ.ChartEngine.drawingLine=false;this.showCrosshairs();var newPanels={};var pos=0;var p;for(p in this.panels){if(p==panel.name)break;pos++;}if(!pos)return;//already at top
var i=0;for(p in this.panels){if(i==pos-1)newPanels[panel.name]=panel;if(p==panel.name)continue;newPanels[p]=this.panels[p];i++;}this.panels=newPanels;this.adjustPanelPositions();this.draw();this.savePanels();};/**
	 * This moves a panel down one position (when the user clicks the down arrow).
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to move down.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.panelDown=function(panel){this.cancelTouchSingleClick=true;CIQ.ChartEngine.drawingLine=false;this.showCrosshairs();var newPanels={};var pos=0;var p;for(p in this.panels){if(p==panel.name)break;pos++;}var length=0;for(p in this.panels){length++;}if(pos==length-1)return;//already at bottom
var i=0;for(p in this.panels){if(p==panel.name){i++;continue;}newPanels[p]=this.panels[p];if(i==pos+1)newPanels[panel.name]=panel;i++;}this.panels=newPanels;this.adjustPanelPositions();this.draw();this.savePanels();};/**
	 * This "solos" the panel (when the user clicks the solo button). All panels other than this panel and the chart
	 * are temporarily hidden. If the solo panel is the chart then all other panels will be hidden.
	 * Note if {@link CIQ.ChartEngine#soloPanelToFullScreen} is set than even the chart panel may be hidden
	 * @param  {CIQ.ChartEngine.Panel} panel The panel to be soloed.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.panelSolo=function(panel){this.cancelTouchSingleClick=true;CIQ.ChartEngine.drawingLine=false;this.showCrosshairs();var hideOrNot=true;if(panel.soloing){hideOrNot=false;panel.soloing=false;CIQ.unappendClassName(panel.solo,"stx_solo_lit");panel.percent=panel.oldPercent;if(panel.name!="chart"&&!this.soloPanelToFullScreen){this.chart.panel.percent=this.chart.panel.oldPercent;}if(this.soloPanelToFullScreen){this.xAxisAsFooter=this.chart.panel.oldXAxisAsFooter;}}else{panel.soloing=true;CIQ.appendClassName(panel.solo,"stx_solo_lit");panel.oldPercent=panel.percent;this.chart.panel.oldXAxisAsFooter=this.xAxisAsFooter;if(panel.name!="chart"){if(this.soloPanelToFullScreen){this.xAxisAsFooter=true;}else{this.chart.panel.oldPercent=this.chart.panel.percent;panel.percent=1-this.chart.panel.percent;}}}for(var p in this.panels){this.panels[p].hidden=hideOrNot;}if(!this.soloPanelToFullScreen)this.chart.panel.hidden=false;panel.hidden=false;this.resetDynamicYAxis({noRecalculate:true});this.calculateYAxisPositions();this.draw();this.savePanels();};//@private
CIQ.ChartEngine.prototype.calculatePanelPercent=function(panel){var h=panel.bottom-panel.top;panel.percent=h/this.chart.canvasHeight;};/**
	 * Called when the user moves a panel handle, to resize all of the panels relative to the movement.
	 * @private
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.resizePanels=function(){if(!CIQ.ChartEngine.resizingPanel)return;var priorPanel,minimumHeight,yAxes,i;var down=CIQ.ChartEngine.crosshairY>this.resolveY(CIQ.ChartEngine.resizingPanel.top);for(var p in this.panels){if(this.panels[p]==CIQ.ChartEngine.resizingPanel)break;if(this.panels[p].hidden)continue;priorPanel=this.panels[p];}var newY=this.backOutY(CIQ.ChartEngine.crosshairY);if(down){yAxes=CIQ.ChartEngine.resizingPanel.yaxisLHS.concat(CIQ.ChartEngine.resizingPanel.yaxisRHS);for(i=0;i<yAxes.length;i++){minimumHeight=yAxes[i].initialMarginTop+yAxes[i].initialMarginBottom+10;if(newY>yAxes[i].bottom-minimumHeight){newY=yAxes[i].bottom-minimumHeight;}}}else{yAxes=priorPanel.yaxisLHS.concat(priorPanel.yaxisRHS);for(i=0;i<yAxes.length;i++){minimumHeight=yAxes[i].initialMarginTop+yAxes[i].initialMarginBottom+10;if(newY<yAxes[i].top+minimumHeight){newY=yAxes[i].top+minimumHeight;}}}CIQ.ChartEngine.crosshairY=this.resolveY(newY);priorPanel.bottom=newY;CIQ.ChartEngine.resizingPanel.top=newY;this.calculatePanelPercent(priorPanel);this.calculatePanelPercent(CIQ.ChartEngine.resizingPanel);this.adjustPanelPositions();this.draw();this.savePanels();};// First, adjust the panel percentages so that they all add up to 1
// Secondly, set the pixel top and bottom of each panel based on the percentages
/**
	 * <span class="injection">INJECTABLE</span>
	 * Adjusts the positions of all of the panels. Ensures that panel percentages add up to 100%. Sets the panel top and bottom
	 * based on the percentages. Also sets the icon template icons appropriately for each panel's position. And adjusts
	 * any drawings. Finally it makes some calculations that are used by the y-axis.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias adjustPanelPositions
	 */CIQ.ChartEngine.prototype.adjustPanelPositions=function(){if(this.chart.tempCanvas)CIQ.clearCanvas(this.chart.tempCanvas,this);// clear any drawing in progress
if(!this.chart.symbol)return;if(this.runPrepend("adjustPanelPositions",arguments))return;var lastBottom=0;var h=this.chart.canvasHeight;var first=false;var acc=0;var n=0;var activeSolo=false;var x,panel;for(x in this.panels){panel=this.panels[x];if(isNaN(panel.percent)||panel.percent<=0)panel.percent=0.05;if(panel.hidden)continue;acc+=panel.percent;n++;if(panel.soloing)activeSolo=true;}for(x in this.panels){var zoomRatio=0;panel=this.panels[x];if(panel.hidden){if(panel.markerHolder){panel.markerHolder.style.display="none";}continue;}if(this.manageTouchAndMouse){if(panel.up){if(!first){first=true;CIQ.unappendClassName(panel.up,"stx-show");}else{if(this.displayIconsUpDown)CIQ.appendClassName(panel.up,"stx-show");}}if(panel.solo){if(activeSolo){if(panel.soloing&&this.displayIconsSolo)CIQ.appendClassName(panel.solo,"stx-show");else CIQ.unappendClassName(panel.solo,"stx-show");}else if(n==1){CIQ.unappendClassName(panel.solo,"stx-show");}else if(n==2&&!this.soloPanelToFullScreen){CIQ.unappendClassName(panel.solo,"stx-show");}else{if(this.displayIconsSolo)CIQ.appendClassName(panel.solo,"stx-show");}}if(panel.down){if(n==1){CIQ.unappendClassName(panel.down,"stx-show");}else{if(this.displayIconsUpDown)CIQ.appendClassName(panel.down,"stx-show");}}if(panel.edit){if(panel.editFunction)CIQ.appendClassName(panel.edit,"stx-show");else CIQ.unappendClassName(panel.edit,"stx-show");}if(panel.close){if(this.displayIconsClose)CIQ.appendClassName(panel.close,"stx-show");else CIQ.unappendClassName(panel.close,"stx-show");}}panel.percent=panel.percent/acc;panel.top=lastBottom;panel.bottom=panel.top+h*panel.percent;panel.height=panel.bottom-panel.top;if(panel.chart.name==panel.name){panel.chart.top=panel.top;panel.chart.bottom=panel.bottom;panel.chart.height=panel.height;}lastBottom=panel.bottom;var arr=panel.yaxisLHS.concat(panel.yaxisRHS);for(var yax=0;yax<arr.length;yax++){var yAxis=arr[yax];if(yAxis.zoom&&yAxis.height>0){zoomRatio=yAxis.zoom/yAxis.height;}this.adjustYAxisHeightOffset(panel,yAxis);yAxis.height=yAxis.bottom-yAxis.top;if(zoomRatio){yAxis.scroll*=zoomRatio*yAxis.height/yAxis.zoom;yAxis.zoom=zoomRatio*yAxis.height;if(yAxis.zoom>yAxis.height){//console.log('adjustPanelPositions adjusted zoom and scroll to 0',yAxis.zoom,yAxis.height);
yAxis.zoom=0;// If the zoom is greater than the height then we'll have an upside down y-axis
yAxis.scroll=0;}}if(!yAxis.high&&yAxis.high!==0){// panels without values will use percentages to position drawings
yAxis.high=100;yAxis.low=0;yAxis.shadow=100;}yAxis.multiplier=yAxis.height/yAxis.shadow;}if(panel.holder){panel.holder.style.right="0px";panel.holder.style.top=panel.top+"px";panel.holder.style.left="0px";panel.holder.style.height=panel.height+"px";panel.subholder.style.left=panel.left+"px";panel.subholder.style.width=panel.width+"px";panel.subholder.style.top="0px";if(panel.yAxis.height>=0)panel.subholder.style.height=panel.yAxis.height+"px";}}if(x&&this.panels[x].down)CIQ.unappendClassName(this.panels[x].down,"stx-show");if(this.manageTouchAndMouse&&n==2&&!activeSolo&&this.chart.panel.solo){CIQ.appendClassName(this.chart.panel.solo,"stx-show");}if(this.chart.panel){var bottom;if(activeSolo&&this.soloPanelToFullScreen){bottom=this.chart.canvasHeight-panel.yAxis.bottom+12;}else{bottom=this.chart.canvasHeight-this.chart.panel.yAxis.bottom+12;}if(this.controls.chartControls)this.controls.chartControls.style.bottom=bottom+"px";if(this.controls.home){this.controls.home.style.bottom=bottom+"px";this.controls.home.style.marginRight=this.width-this.chart.panel.right+"px";}}this.clearPixelCache();this.adjustDrawings();this.runAppend("adjustPanelPositions",arguments);};//Unused
CIQ.ChartEngine.prototype.addChart=function(name,chart){chart.name=name;this.charts[name]=chart;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Create a new panel and make room for it by squeezing all the existing panels.
	 * To remove a panel manually call {@link CIQ.ChartEngine.AdvancedInjectable#panelClose}.
	 * @param  {string} display	  The display name for the panel
	 * @param  {string} name	  The name of the panel (usually the study ID)
	 * @param  {number} [height]	Requested height of panel in pixels. Defaults to 1/5 of the screen size.
	 * @param  {string} [chartName] The chart to associate with this panel. Defaults to "chart".
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] {@link CIQ.ChartEngine.YAxis} object. If not present, the existing panel's axis will be used.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias createPanel
	 * @since 5.2.0 added argument yAxis
	 */CIQ.ChartEngine.prototype.createPanel=function(display,name,height,chartName,yAxis){if(this.runPrepend("createPanel",arguments))return;if(!chartName)chartName="chart";var h=this.chart.canvasHeight;if(!height){height=h*0.20;}var percent=height/h;var reduce=1-percent;for(var p in this.panels){var panel=this.panels[p];panel.percent*=reduce;}this.stackPanel(display,name,percent,chartName,yAxis);this.adjustPanelPositions();this.savePanels(false);this.runAppend("createPanel",arguments);};/**
	 * Configures the panel controls
	 * @param  {CIQ.ChartEngine.Panel} panel The panel
	 * @private
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.configurePanelControls=function(panel){if(!panel.icons)return;var isChart=panel.name==panel.chart.name;CIQ.appendClassName(panel.icons,"stx-show");panel.title=$$$(".stx-panel-title",panel.icons);panel.up=$$$(".stx-ico-up",panel.icons);if(panel.up)panel.up=panel.up.parentNode;panel.solo=$$$(".stx-ico-focus",panel.icons);if(panel.solo)panel.solo=panel.solo.parentNode;panel.down=$$$(".stx-ico-down",panel.icons);if(panel.down)panel.down=panel.down.parentNode;panel.edit=$$$(".stx-ico-edit",panel.icons);if(panel.edit)panel.edit=panel.edit.parentNode;panel.close=$$$(".stx-ico-close",panel.icons);if(panel.close)panel.close=panel.close.parentNode;if(panel.title){panel.title.innerHTML="";if(panel.display)panel.title.appendChild(document.createTextNode(panel.display));if(isChart){CIQ.appendClassName(panel.title,"chart-title");CIQ.appendClassName(panel.icons,"stx-chart-panel");}}if(!CIQ.touchDevice||CIQ.isSurface)this.makeModal(panel.icons);if(panel.handle){if(!CIQ.touchDevice||CIQ.isSurface)panel.handle.onmouseover=function(self){return function(){self.hideCrosshairs();};}(this);if(!CIQ.touchDevice||CIQ.isSurface)panel.handle.onmouseout=function(self){return function(){self.showCrosshairs();};}(this);var panelGrab=function panelGrab(stx,panel){return function(e){if(CIQ.ChartEngine.resizingPanel)return;stx.grabHandle(panel);};};// stxx.releaseHandle is called by the chart's touchend and mouseup handlers
if(CIQ.isSurface){panel.handle.onpointerdown=panelGrab(this,panel);}else{panel.handle.onmousedown=panelGrab(this,panel);}if(CIQ.touchDevice)panel.handle.ontouchstart=panelGrab(this,panel);}if(panel.up)CIQ.safeClickTouch(panel.up,function(stx,panel){return function(){stx.panelUp(panel);};}(this,panel));if(panel.down)CIQ.safeClickTouch(panel.down,function(stx,panel){return function(){stx.panelDown(panel);};}(this,panel));if(panel.solo)CIQ.safeClickTouch(panel.solo,function(stx,panel){return function(){stx.panelSolo(panel);};}(this,panel));if(panel.close){if(panel.name=="chart"){panel.close.style.display="none";// no close icon on primary chart
}else{CIQ.safeClickTouch(panel.close,function(stx,panel){return function(){stx.panelClose(panel);};}(this,panel));}}};/**
	 * <span class="injection">INJECTABLE</span>
	 * Adds a panel with a prespecified percentage. This should be called iteratively when rebuilding a set
	 * of panels from a previous layout. Use {@link CIQ.ChartEngine#createPanel} when creating a new panel for an existing chart layout.
	 * @param  {string} display	  The display name for the panel
	 * @param  {string} name	  The name of the panel (usually the study ID)
	 * @param  {number} percent	  The percentage of chart to use
	 * @param  {string} [chartName] The chart to associate with this panel. Defaults to "chart".
	 * @param {CIQ.ChartEngine.YAxis} [yAxis] {@link CIQ.ChartEngine.YAxis} object. If not present, the existing panel's axis will be used.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias stackPanel
	 * @since 5.2.0 added argument yAxis
	 */CIQ.ChartEngine.prototype.stackPanel=function(display,name,percent,chartName,yAxis){if(this.runPrepend("stackPanel",arguments))return;if(!chartName)chartName="chart";var chart=this.charts[chartName];var isChart=name==chartName;if(isChart){display=chart.symbol;if(chart.symbolDisplay)display=chart.symbolDisplay;if(!yAxis)yAxis=chart.yAxis;}var panel=this.panels[name]=new CIQ.ChartEngine.Panel(name,yAxis);if(!isChart&&chart.yAxis&&panel.yAxis.position==chart.yAxis.position){panel.yAxis.width=chart.yAxis.width;// make it match the width of the main panel so the y axis align
}if(isChart&&!chart.panel)chart.panel=panel;panel.percent=percent;panel.chart=chart;panel.display=display;panel.holder=CIQ.newChild(this.container,"div","stx-holder");// the main holder extends to the edges of the panel
panel.subholder=CIQ.newChild(panel.holder,"div","stx-subholder");// the sub holder does not include the axis area
panel.subholder.style.zIndex=1;panel.holder.setAttribute("cq-panel-name",name);panel.subholder.setAttribute("cq-panel-name",name);var appendClass=isChart?"stx-panel-chart":"stx-panel-study";CIQ.appendClassName(panel.holder,appendClass);if(this.controls.handleTemplate&&this.manageTouchAndMouse){panel.handle=this.controls.handleTemplate.cloneNode(true);this.container.appendChild(panel.handle);//panel.handle.style.display=""; // let the drawPanels manage this otherwise if we set to "" here but the developer wants a picture (png) handle using CSS, the hande will flicker on on initial load on the top of the screen
panel.handle.panel=panel;}if(this.controls.iconsTemplate){panel.icons=this.controls.iconsTemplate.cloneNode(true);panel.subholder.appendChild(panel.icons);this.configurePanelControls(panel);}if(!this.currentlyImporting)this.resizeCanvas();this.runAppend("stackPanel",arguments);};CIQ.ChartEngine.prototype.setPanelEdit=function(panel,editFunction){panel.editFunction=editFunction;if(panel.edit)CIQ.safeClickTouch(panel.edit,editFunction);this.adjustPanelPositions();};/**
	 * <span class="injection">INJECTABLE</span>
	 * <span class="animation">Animation Loop</span>
	 * Draws the panels for the chart and chart studies. CSS style stx_panel_border can be modified to change the color
	 * or width of the panel dividers.
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias drawPanels
	 */CIQ.ChartEngine.prototype.drawPanels=function(){if(this.runPrepend("drawPanels",arguments))return;var first=false;for(var p in this.panels){var panel=this.panels[p];panel.state={};// reset the drawing state
var textToDisplay=this.translateIf(panel.display);if(panel.title&&panel.title.textContent!=textToDisplay){panel.title.innerHTML="";panel.title.appendChild(document.createTextNode(textToDisplay));}CIQ.appendClassName(panel.icons,"stx-show");if(panel.hidden){CIQ.unappendClassName(panel.icons,"stx-show");if(panel.handle)panel.handle.style.display="none";panel.holder.style.display="none";continue;}else{if(panel.name!="chart"){var manageTouchAndMouse=this.manageTouchAndMouse;if(panel.up)panel.up.style.display=this.displayIconsUpDown&&manageTouchAndMouse?"":"none";if(panel.down)panel.down.style.display=this.displayIconsUpDown&&manageTouchAndMouse?"":"none";if(panel.solo)panel.solo.style.display=this.displayIconsSolo&&manageTouchAndMouse?"":"none";if(panel.close)panel.close.style.display=this.displayIconsClose&&manageTouchAndMouse?"":"none";if(panel.edit)panel.edit.style.display=panel.editFunction&&manageTouchAndMouse?"":"none";}panel.holder.style.display="block";}if(!first){if(panel.handle)panel.handle.style.display="none";first=true;continue;}var y=panel.top;y=Math.round(y)+0.5;this.plotLine(panel.left,panel.right,y,y,this.canvasStyle("stx_panel_border"),"segment",this.chart.context,false,{});if(panel.handle){if(!this.displayPanelResize){panel.handle.style.display="none";}else{panel.handle.style.display="";}panel.handle.style.top=y-panel.handle.offsetHeight/2+"px";//panel.handle.style.left=panel.left+ "px";
}}this.runAppend("drawPanels",arguments);};/**
	 * <span class="injection">INJECTABLE</span>
	 * This method captures a tap event (single click) on a touch device. It supports both touch and pointer events.
	 * @param  {number} finger Which finger is pressed
	 * @param  {number} x	   X location on screen of the press
	 * @param  {number} y	   Y location on screen of the press
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias touchSingleClick
	 */CIQ.ChartEngine.prototype.touchSingleClick=function(finger,x,y){var self=this;var args=arguments;return function(){(function(){if(!this.cancelTouchSingleClick){if(this.runPrepend("touchSingleClick",args))return;if(this.editingAnnotation)return;this.clicks={s1MS:-1,e1MS:-1,s2MS:-1,e2MS:-1};if(!this.displayCrosshairs)return;if(!this.displayInitialized)return;// No chart displayed yet
if(this.openDialog!=="")return;if(x<this.left||x>this.right||y<this.top||y>this.bottom)return;var cy=this.backOutY(CIQ.ChartEngine.crosshairY);var cx=this.backOutX(CIQ.ChartEngine.crosshairX);this.currentPanel=this.whichPanel(cy);var drawingTool=this.currentVectorParameters.vectorType;if(!CIQ.Drawing||!drawingTool||!CIQ.Drawing[drawingTool]||!new CIQ.Drawing[drawingTool]().dragToDraw){if(!this.drawingClick(this.currentPanel,cx,cy)){if(!this.layout.crosshair){//clear existing highlights?
CIQ.ChartEngine.crosshairY=0;CIQ.ChartEngine.crosshairX=0;this.cx=this.backOutX(CIQ.ChartEngine.crosshairX);this.cy=this.backOutY(CIQ.ChartEngine.crosshairY);this.findHighlights(null,true);// find highlights for things we tapped on, exactly (not crosshair hover)
CIQ.ChartEngine.crosshairY=y;CIQ.ChartEngine.crosshairX=x;var rect=this.container.getBoundingClientRect();this.top=rect.top;this.left=rect.left;this.right=this.left+this.width;this.bottom=this.top+this.height;this.cx=this.backOutX(CIQ.ChartEngine.crosshairX);this.cy=this.backOutY(CIQ.ChartEngine.crosshairY);if(this.currentPanel&&this.currentPanel.chart.dataSet){this.crosshairTick=this.tickFromPixel(this.cx,this.currentPanel.chart);this.crosshairValue=this.adjustIfNecessary(this.currentPanel,this.crosshairTick,this.valueFromPixel(this.cy,this.currentPanel));}this.headsUpHR();this.findHighlights(true);}}if(!this.currentVectorParameters.vectorType){this.dispatch("tap",{stx:this,panel:this.currentPanel,x:cx,y:cy});}}}self.cancelTouchSingleClick=false;this.runAppend("touchSingleClick",args);}).apply(self,args);};};/**
	 * <span class="injection">INJECTABLE</span>
	 * This method detects a double tap on a touch device. It circumvents {@link CIQ.ChartEngine#touchSingleClick}. Double taps
	 * are used to delete overlays, series or drawings on touch devices.
	 * It also resets the vertical zoom level (y axis) if tapping on an empty area of the pannel ( see {@link CIQ.ChartEngine#calculateYAxisMargins}).
	 * @param  {number} finger Which finger double tapped.
	 * @param  {number} x	   X location of screen of tap
	 * @param  {number} y	   Y location on screen of tap
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias touchDoubleClick
	 */CIQ.ChartEngine.prototype.touchDoubleClick=function(finger,x,y){if(this.runPrepend("touchDoubleClick",arguments))return;if(this.dispatch("doubleTap",{stx:this,finger:finger,x:x,y:y}))return;if(x<this.left||x>this.right||y<this.chart.panel.top||y>this.chart.panel.bottom)return;if(this.editingAnnotation)return;if(CIQ.ChartEngine.drawingLine){this.undo();}else{if(this.anyHighlighted){this.deleteHighlighted();}else{// Reset vertical
var yAxis=this.currentPanel.yAxis;if(yAxis.scroll==(yAxis.initialMarginTop-yAxis.initialMarginBottom)/2&&yAxis.zoom==yAxis.initialMarginTop+yAxis.initialMarginBottom){this.home();}else{this.calculateYAxisMargins(this.currentPanel.yAxis);//this.currentPanel.chart.verticalScroll=0;
//this.currentPanel.chart.zoom=0;
}this.draw();}}this.clicks={s1MS:-1,e1MS:-1,s2MS:-1,e2MS:-1};this.runAppend("touchDoubleClick",arguments);};// Proxy for handling MS pointer events, specifically to deal with all-in-one computers that
// support both mouse and touch
CIQ.ChartEngine.prototype.startProxy=function(e){this.touchPointerType=e.pointerType;if(this.touchPointerType!="touch"){this.mouseMode=true;return;}this.mouseMode=false;this.touches[this.touches.length]={pointerId:e.pointerId,pageX:e.clientX,pageY:e.clientY,clientX:e.clientX,clientY:e.clientY};this.changedTouches=[{pointerId:e.pointerId,pageX:e.clientX,pageY:e.clientY,clientX:e.clientX,clientY:e.clientY}];if(this.touches.length==1){this.gesturePointerId=e.pointerId;}this.touchstart(e);};// Proxy for dealing with MS pointer move events
CIQ.ChartEngine.prototype.moveProxy=function(e){if(e.pointerType&&e.pointerType!="touch"){this.mouseMode=true;return;}this.mouseMode=false;this.touchmove(e);};// Proxy for dealing with MS pointer end events
CIQ.ChartEngine.prototype.endProxy=function(e){if(this.touchPointerType!="touch"){this.mouseMode=true;return;}this.mouseMode=false;var hm=this.touches.length;for(var i=0;i<this.touches.length;i++){if(this.touches[i].pointerId==e.pointerId){this.touches.splice(i,1);break;}}if(i==hm){this.touches=[];this.grabbingScreen=false;this.touching=false;return;}this.changedTouches=[{pointerId:e.pointerId,pageX:e.clientX,pageY:e.clientY,clientX:e.clientX,clientY:e.clientY}];this.touchend(e);};// Proxy for dealing with mousemove on MS devices
CIQ.ChartEngine.prototype.msMouseMoveProxy=function(e){if(this.touches.length||!this.mouseMode)return;//if(this.touches.length) return;
//this.mouseMode=true;
this.mousemove(e);};// Proxy for dealing with mousedown on MS devices
CIQ.ChartEngine.prototype.msMouseDownProxy=function(e){if(!this.mouseMode)return;this.mousedown(e);};// Proxy for dealing with mouseup on MS devices
CIQ.ChartEngine.prototype.msMouseUpProxy=function(e){if(!this.mouseMode)return;this.mouseup(e);};// Proxy for dealing with mousemove for ios style events on all-in-one computers (FF and Chrome)
CIQ.ChartEngine.prototype.iosMouseMoveProxy=function(e){if(this.touching)return;this.mousemove(e);};// Proxy for dealing with mousedown for ios style events on all-in-one computers (FF and Chrome)
CIQ.ChartEngine.prototype.iosMouseDownProxy=function(e){if(this.touching){this.mouseMode=false;return;}this.mouseMode=true;this.mousedown(e);};// Proxy for dealing with mouseup for ios style events on all-in-one computers (FF and Chrome)
CIQ.ChartEngine.prototype.iosMouseUpProxy=function(e){if(this.touching)return;this.mouseup(e);};/**
	 * Creates watermarked text on the canvas. See {@link CIQ.ChartEngine#watermark} to create a watermark relative to a particular panel.
	 * CSS style stx_watermark defines the watermark (opacity of .5 is automatically applied)
	 *
	 * **Note** that the watermark will not persist unless called from within the animation loop (study display function, for example).
	 * As such, it may be necessary to use a `prepend` to the `draw` function to create persistence. See example section.
	 * @param  {external:CanvasRenderingContext2D} context [description]
	 * @param  {number} x		X position on canvas
	 * @param  {number} y		Y position on canvas
	 * @param  {string} text	The text to watermark
	 * @memberof CIQ.ChartEngine
	 * @example
		CIQ.ChartEngine.prototype.prepend("draw",function(){
	       // create persistence by forcing it  be called in every animation frame.
	       rawWatermark(stxx.chart.context,20,30,stxx.chart.symbol);
		});
	 */CIQ.ChartEngine.prototype.rawWatermark=function(context,x,y,text){this.canvasFont("stx_watermark",context);context.fillStyle=this.defaultColor;context.globalAlpha=0.5;this.chart.context.textBaseline="alphabetic";context.fillText(text,x,y);context.globalAlpha=1;};/**
	 * Creates watermarked text relative to a panel on the canvas.
	 * Use CSS style stx_watermark to control the text size and color.
	 *
	 * **Note** that the watermark will not persist unless called from within the animation loop (study display function, for example).
	 * As such, it may be necessary to use a `prepend` to the `draw` function to create persistence. See example section.
	 * @param  {string} panel The name of the panel
	 * @param  {object} [config] Parameters for the request
	 * @param  {string} [config.h]			"left", "right", "center" to place the watermark
	 * @param  {string} [config.v]			"top", "bottom", "middle" to place the watermark
	 * @param  {string} [config.text]		The text to watermark
	 * @param  {string} [config.hOffset]	offset in pixels of upper left corner from left or right margin
	 * @param  {string} [config.vOffset]	offset in pixels of upper left corner from top or bottom margin
	 * @memberof CIQ.ChartEngine
	 * @example
		CIQ.ChartEngine.prototype.prepend("draw",function(){
	       // create persistence by forcing it  be called in every animation frame.
	       stxx.watermark("chart",{h:"center",v:"middle",text:stxx.chart.symbol});
		});	 */CIQ.ChartEngine.prototype.watermark=function(panel,config){if(config&&_typeof(config)!="object"){// Handle legacy argument list implementation
config={h:arguments[1],v:arguments[2],text:arguments[3]};}config={// set defaults
h:config.h||"left",v:config.v||"bottom",text:config.text||"",hOffset:config.hOffset||10,vOffset:config.vOffset||20};if(!this.chart.context)return;var c=this.panels[panel];if(!c||c.hidden)return;var y=c.yAxis.bottom-config.vOffset;if(config.v=="top")y=c.top+config.vOffset;else if(config.v=="middle")y=(c.top+c.yAxis.bottom)/2;this.chart.context.save();this.canvasFont("stx_watermark");this.canvasColor("stx_watermark");this.chart.context.textBaseline="alphabetic";var x=c.left+config.hOffset;if(config.h=="right")x=c.right-config.hOffset;else if(config.h=="center"){x=(c.right+c.left-this.chart.context.measureText(config.text).width)/2;}this.chart.context.globalAlpha=0.5;this.chart.context.fillText(config.text,x,y);this.chart.context.globalAlpha=1;this.chart.context.restore();};/**
	 * Call this before a resizing operation in order to maintain the scroll position. See {@link CIQ.ChartEngine#postAdjustScroll}.
	 * @param  {CIQ.ChartEngine.Chart} [chart] The chart to adjust. Otherwise adjusts the main symbol chart.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.preAdjustScroll=function(chart){if(!chart)chart=this.chart;this.previousAdjust={chart:chart,scroll:chart.scroll,maxTicks:chart.maxTicks};};/**
	 * Call this after a resizing operation in order to maintain the scroll position. See {@link CIQ.ChartEngine#preAdjustScroll}.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.postAdjustScroll=function(){if(!this.previousAdjust)return;var chart=this.previousAdjust.chart;chart.scroll=this.previousAdjust.scroll+(chart.maxTicks-this.previousAdjust.maxTicks);if(this.displayInitialized)this.draw();};/**
	 * Loops through the existing drawings and asks them to adjust themselves to the chart dimensions.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.adjustDrawings=function(){for(var i=0;i<this.drawingObjects.length;i++){var drawing=this.drawingObjects[i];if(this.panels[drawing.panelName])drawing.adjust();}};/**
	 * Convenience function returns the next or previous interval from the provided date-time at the current chart's periodicity.
	 * See {@link CIQ.Market} and {@link CIQ.Market.Iterator} for more details.
	 *
	 * For 'tick' intervals, since there is no predictable periodicity, the next interval will be determined by {@link CIQ.ChartEngine.XAxis#futureTicksInterval}
	 * @param  {date}		DT			A JavaScript Date representing the base time for the request in {@link CIQ.ChartEngine#dataZone} timezone.
	 * @param {number}		[period]		The number of periods to jump. Defaults to 1. Can be negative to go back in time.
	 * @param {boolean}		[useDataZone=true] By default the next interval will be returned in {@link CIQ.ChartEngine#dataZone}. Set to false to receive a date in {@link CIQ.ChartEngine#displayZone} instead.
	 * @return {date}	 The next interval date
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.getNextInterval=function(DT,period,useDataZone){if(!period)period=1;if(useDataZone!==false)useDataZone=true;var iter=this.standardMarketIterator(DT,useDataZone?this.dataZone:this.displayZone);if(period<1){return iter.previous(period*-1);}return iter.next(period);};/**
	 * Convenience function returns a new market iterator at the current chart's periodicity.
	 * For 'tick' intervals, since there is no predictable periodicity, the iterator interval will be determined by {@link CIQ.ChartEngine.XAxis#futureTicksInterval}
	 * See {@link CIQ.Market} and {@link CIQ.Market.Iterator} for more details.
	 * @param {date}		begin A JavaScript Date representing the iterator begin date in {@link CIQ.ChartEngine#dataZone} timezone. See {@link CIQ.Market#newIterator} for details.
	 * @param {string} 		[outZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for the returned date. Defaults {@link CIQ.ChartEngine#dataZone}. See {@link CIQ.Market#newIterator} for details.
	 * @param {CIQ.ChartEngine.Chart} 	[chart] The chart object.
	 * @return {object} A new iterator.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.standardMarketIterator=function(begin,outZone,chart){var cht=chart?chart:this.chart;var iter_parms={'begin':begin,'interval':this.layout.interval,'periodicity':this.layout.interval=='tick'?this.chart.xAxis.futureTicksInterval:this.layout.periodicity,'timeUnit':this.layout.timeUnit,'outZone':outZone};return cht.market.newIterator(iter_parms);};/**
	 * Effects a zoom from either zoomIn() or zoomOut(). Called from an EaseMachine
	 * @param  {number} candleWidth  The new candleWidth
	 * @param  {CIQ.ChartEngine.Chart} chart        The chart to center
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 will maintain tick position near the cursor if <a href="CIQ.ChartEngine.html#preferences%5B%60zoomAtCurrentMousePosition%60%5D">CIQ.ChartEngine.preferences.zoomAtCurrentMousePosition</a> is `true`
	 * @since 4.1.0 will keep left edge stable and zoom to the right when white space is present on the left.
	 */CIQ.ChartEngine.prototype.zoomSet=function(candleWidth,chart){var mainSeriesRenderer=this.mainSeriesRenderer||{};if(!mainSeriesRenderer.params||!mainSeriesRenderer.params.volume){var maintainTick;if(this.preferences.zoomAtCurrentMousePosition&&this.zoomInitiatedByMouseWheel&&this.crosshairTick<chart.dataSet.length){// keep the bar near the cursor stable
// at chart load it is possible for this.crosshairTick to be null (refresh while cursor is in the xAxis margin)
maintainTick=this.crosshairTick||this.tickFromPixel(this.cx,chart);}else if(this.isHome()){// keep right edge stable and zoom to the left
maintainTick=chart.dataSet.length-1;}else if(this.chart.scroll>this.chart.dataSet.length){// keep left edge stable and zoom to the right
maintainTick=0;}else if(this.grabMode=="zoom-x"){// keep right edge stable and zoom to the left
maintainTick=this.tickFromPixel(this.chart.width,chart);}else{// keep the center bar in the center and zoom equally left and right
maintainTick=this.tickFromPixel(this.chart.width/2,chart);}if(this.animations.zoom.hasCompleted){this.zoomInitiatedByMouseWheel=false;}// this is the code that keeps the chart's position stable.
// Bypassing this code will cause the chart's left position to remain stable
// which is really the only way to get a smooth zoom for variable width candles (because the act of scrolling inherently changes the number of candles that fit on the screen)
var distanceFromFront=chart.dataSet.length-1-maintainTick;var oldScroll=chart.scroll;chart.scroll=Math.floor((this.pixelFromTick(maintainTick,chart)-chart.left)/candleWidth)+1+distanceFromFront;this.micropixels+=(oldScroll-distanceFromFront)*this.layout.candleWidth-(chart.scroll-distanceFromFront)*candleWidth;}this.setCandleWidth(candleWidth);chart.spanLock=false;this.draw();this.doDisplayCrosshairs();this.updateChartAccessories();};/**
	 * <span class="injection">INJECTABLE</span>
	 * Zooms the chart out. The chart is zoomed incrementally by they percentage indicated (pct) each time this is called.
	 * @param  {Event} e The mouse click event, if it exists (from clicking on the chart control)
	 * @param  {number} pct The percentage to zoom out the chart (default = 30%)
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0 If both {@link CIQ.ChartEngine.Chart#allowScrollPast} and {@link CIQ.ChartEngine.Chart#allowScrollFuture} are set to false, the zoom operation will stop mid animation to prevent white space from being created.
	 */CIQ.ChartEngine.prototype.zoomOut=function(e,pct){if(this.runPrepend("zoomOut",arguments))return;if(this.preferences.zoomOutSpeed)pct=this.preferences.zoomOutSpeed;else if(!pct)pct=1.3;if(e&&e.preventDefault)e.preventDefault();this.cancelTouchSingleClick=true;var self=this;function closure(chart){return function(candleWidth){self.zoomSet(candleWidth,chart);if(self.animations.zoom.hasCompleted){if(self.runAppend("zoomOut",arguments))return;self.changeOccurred("layout");}};}for(var chartName in this.charts){var chart=this.charts[chartName];if(CIQ.ipad&&chart.maxTicks>CIQ.ChartEngine.ipadMaxTicks){return;}var newTicks=Math.floor(chart.maxTicks*pct);// 10% more ticks with each click
if(chart.allowScrollFuture===false&&chart.allowScrollPast===false&&newTicks>chart.dataSet.length){// make sure we keep candles big enough to show all data so no white space is created on either side.
newTicks=chart.dataSet.length;}var newCandleWidth=this.chart.width/newTicks;if(newCandleWidth<this.minimumCandleWidth)newCandleWidth=this.minimumCandleWidth;this.layout.setSpan=null;this.layout.range=null;this.animations.zoom.run(closure(chart),this.layout.candleWidth,newCandleWidth);}};/**
	 * <span class="injection">INJECTABLE</span>
	 * Zooms (vertical swipe / mousewheel) or pans (horizontal swipe) the chart based on a mousewheel event. A built in timeout prevents the mousewheel from zooming too quickly.
	 * @param  {Event} e		  The event
	 * @return {boolean}			Returns false if action is taken
	 * @memberof CIQ.ChartEngine.AdvancedInjectable#
	 * @alias mouseWheel
	 */CIQ.ChartEngine.prototype.mouseWheel=function(e){if(this.runPrepend("mouseWheel",arguments))return;if(!e)e=event;//IE8
if(e.preventDefault)e.preventDefault();var deltaX=e.deltaX,deltaY=e.deltaY;/*
		// OSX trackpad is very sensitive since it accommodates diagonal
		// motion which is not relevant to us. So we ignore any changes
		// in direction below the threshold time value
		var threshold=50; //ms
		if(Date.now()-this.lastMouseWheelEvent<threshold){
			if(this.lastMove=="horizontal") deltaY=0;
			else deltaX=0;
		}*/if(Math.abs(deltaY)>Math.abs(deltaX))deltaX=0;else deltaY=0;this.lastMouseWheelEvent=Date.now();if(Math.abs(deltaX)===0&&Math.abs(deltaY)===0)return;if(this.allowSideswipe&&deltaX!==0){this.lastMove="horizontal";var delta=deltaX;if(delta>50)delta=50;if(delta<-50)delta=-50;this.grabbingScreen=true;if(!this.currentPanel)this.currentPanel=this.chart.panel;this.grabStartX=CIQ.ChartEngine.crosshairX;this.grabStartY=CIQ.ChartEngine.crosshairY;this.grabStartScrollX=this.chart.scroll;this.grabStartScrollY=this.currentPanel.yAxis.scroll;this.grabStartMicropixels=this.micropixels;this.grabStartPanel=this.currentPanel;this.mousemoveinner(CIQ.ChartEngine.crosshairX-delta,CIQ.ChartEngine.crosshairY);this.updateChartAccessories();this.grabbingScreen=false;return;}this.lastMove="vertical";if(!this.allowZoom)return;if(!this.displayInitialized)return;/* originally added to address a magic mouse issue - removing this code because it is affecting new Macs which seem to come back for more zooming immediately causing uneven zooming.
		if(this.wheelInMotion) return;
		this.wheelInMotion=true;
		setTimeout(function(self){return function(){self.wheelInMotion=false;};}(this), 40);
		*/if(!deltaY){if(CIQ.wheelEvent=="onmousewheel"){deltaY=-1/40*e.wheelDelta;if(e.wheelDeltaX)deltaX=-1/40*e.wheelDeltaX;}else{deltaY=e.detail;}}if(typeof e.deltaMode=="undefined")e.deltaMode=e.type=="MozMousePixelScroll"?0:1;//var distance=e.deltaX;
//if(!distance) distance=e.deltaY;
var distance=-deltaY;if(e.deltaMode==1){// 1 is line mode so we approximate the distance in pixels, arrived at through trial and error
distance*=33;}var pctIn=null;var pctOut=null;// Calculate the percentage change to the chart. Arrived at heuristically, cube root of the mousewheel distance.
// The multipliers are adjusted to take into consideration reversed compounding rates between a zoomin and a zoomout
if(this.mouseWheelAcceleration){var multiplier=Math.max(Math.pow(Math.abs(distance),0.3),1);pctIn=1-0.1*multiplier;pctOut=1+0.2*multiplier;}this.zoomInitiatedByMouseWheel=true;if(distance>0){if(this.reverseMouseWheel)this.zoomOut(null,pctOut);else this.zoomIn(null,pctIn);}else if(distance<0){if(this.reverseMouseWheel)this.zoomIn(null,pctIn);else this.zoomOut(null,pctOut);}if(this.runAppend("mouseWheel",arguments))return;return false;};/**
	 * <span class="injection">INJECTABLE</span>
	 * Zooms the chart in. The chart is zoomed incrementally by they percentage indicated (pct) each time this is called.
	 * @param  {Event} e The mouse click event, if it exists (from clicking on the chart control)
	 * @param  {number} pct The percentage to zoom out the chart (default = 30%)
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.zoomIn=function(e,pct){if(this.runPrepend("zoomIn",arguments))return;if(this.preferences.zoomInSpeed)pct=this.preferences.zoomInSpeed;else if(!pct)pct=0.7;if(e&&e.preventDefault)e.preventDefault();this.cancelTouchSingleClick=true;var self=this;function closure(chart){return function(candleWidth){self.zoomSet(candleWidth,chart);if(self.animations.zoom.hasCompleted){if(self.runAppend("zoomIn",arguments))return;self.changeOccurred("layout");}};}for(var chartName in this.charts){var chart=this.charts[chartName];var newTicks=Math.floor(chart.maxTicks*pct);// 10% fewer ticks displayed when zooming in
// At some point the zoom percentage compared to the bar size may be too small, we get stuck at the same candle width.
// (because we ceil() and 0.5 candle when we set the maxTicks in setCandleWidth()).
// So we want to force a candle when this happens.
if(chart.maxTicks-newTicks<1)newTicks=chart.maxTicks-1;if(newTicks<this.minimumZoomTicks)newTicks=this.minimumZoomTicks;var newCandleWidth=this.chart.width/newTicks;this.layout.setSpan=null;this.layout.range=null;this.animations.zoom.run(closure(chart),this.layout.candleWidth,newCandleWidth);}};/**
	 * Translates the requested word to the active language if this.translationCallback callback function is set.
	 *
	 * Use {@link CIQ.translatableTextNode} if you are adding the element to the DOM and wish the translations services to automatically change to other languages as they are set.
	 * @param  {string} english The word to translate
	 * @return {string}			The translated word, or the word itself if no callback is set.
	 * @memberof CIQ.ChartEngine
	 */CIQ.ChartEngine.prototype.translateIf=function(english){if(this.translationCallback)return this.translationCallback(english);return english;};/**
	 * Sets the data timezone (`dataZone`) and display timezone (`displayZone`) on an intraday chart.
	 *
	 * >**Important:**
	 * >- The `dataZone` property on this method must be set **before** any data is loaded so the engine knows how to convert the incoming records.
	 * >- The `displayZone`` property on this method can be set at any time and will only affect what is displayed on the x axis.
	 * >- This method should only be used for dates that are not timeZone aware. If using the 'DT' fields in your data input records,
	 * >**DO NOT** use this function to set the `dataZone` as it will result in a double conversion.
	 *
	 * - Once set, 'Date' fields containing a time portion, will be converted to the {@link CIQ.ChartEngine#dataZone}
	 * (or the browser timezone if no dataZone is specified) before added into the `masterData`. Its corresponding 'DT' fields will be set to match.
	 * The {@link CIQ.ChartEngine#displayZone} is then created and used to translate dates based on either the local browser's timezone,
	 * or the timezone selected by the end user.
	 *
	 * - If the date ('DT' or 'Date') does not include a time offset, such as 'yyyy-mm-dd',
	 * no time zone conversion will be performed. Use this option if you prefer to display the same date on all timezones.
	 * This applies to daily, weekly and monthly periodicities only.
	 * For a list of all supported date formats see the [Input format Tutorial]{@tutorial InputDataFormat}
	 *
	 * ** Time zone and the {@link quotefeed}:**<br>
	 * On a fetch call, if your quote server sends and receives string dates loaded in the 'Date' field,
	 * you can convert the provided start and end dates back to strings using {@link CIQ.yyyymmddhhmmssmmm}
	 * Example:
	 * ```
	 * var strStart =  CIQ.yyyymmddhhmmssmmm(suggestedStartDate) ;
	 * var strEnd = CIQ.yyyymmddhhmmssmmm(endDate);
	 * ```
	 * These dates will be in the same time zone you sent them in. So they will match your quote feed.
	 *
	 * For more details on how time zones work in the chart see the {@tutorial Dates and Timezones} tutorial.
	 *
	 * **See {@link CIQ.timeZoneMap} to review a list of all chatIQ supported timezones and instructions on how to add more!**
	 *
	 * @param {string} dataZone	   A chatIQ supported timezone. This should represent the time zone that the master data comes from, or set to 'null' if your dates are already time zone aware.
	 * @param {string} displayZone A chatIQ supported timezone. This should represent the time zone that the user wishes displayed, or set to null to use the browser time zone.
	 * @memberof CIQ.ChartEngine
	 * @since 5.2 also used to convert daily, weekly and monthly periodicities.
	 */CIQ.ChartEngine.prototype.setTimeZone=function(dataZone,displayZone){if(typeof timezoneJS=="undefined"){this.timeZoneOffset=0;return;}var now=new Date();var myTimeZoneOffset=now.getTimezoneOffset();var dataTimeZoneOffset=myTimeZoneOffset;var displayTimeZoneOffset=myTimeZoneOffset;if(dataZone)this.dataZone=dataZone;if(this.dataZone)dataTimeZoneOffset=new timezoneJS.Date(now,this.dataZone).getTimezoneOffset();if(displayZone)this.displayZone=displayZone;if(this.displayZone)displayTimeZoneOffset=new timezoneJS.Date(now,this.displayZone).getTimezoneOffset();this.timeZoneOffset=dataTimeZoneOffset-myTimeZoneOffset-(displayTimeZoneOffset-myTimeZoneOffset);for(var chartName in this.charts){var chart=this.charts[chartName];this.setDisplayDates(chart.masterData);}this.preferences.timeZone=displayZone;this.changeOccurred("preferences");this.createDataSet();};/**
	 * Sets the locale for the charts.
	 *
	 * Do not call this method directly. Instead use {@link CIQ.I18N.setLocale} or {@link CIQ.I18N.localize}
	 *
	 * If set, display prices and dates will be displayed in localized format.
	 * The locale should be a valid IANA locale. For instance de-AT represents German as used in Austria. Localization
	 * is supported through the Intl object which is a W3 standard, however not all browsers support Intl natively. The
	 * Intl.js polyfill is included through the inclusion of stxThirdParty.js. To enable localization, the locale-data/jsonp
	 * directory should be included and the JSONP loaded. This is done automatically by calling {@link CIQ.I18N.setLocale}
	 * rather than calling this method directly.
	 *
	 * Once a locale is set, `stxx.internationalizer` will be an object that will contain several Intl formatters.
	 *
	 * These are the default date and time formates:
	 * - stxx.internationalizer.hourMinute=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", hour12:false});
	 * - stxx.internationalizer.hourMinuteSecond=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", second:"numeric", hour12:false});
	 * - stxx.internationalizer.mdhm=new Intl.DateTimeFormat(this.locale, {year:"2-digit", month:"2-digit", day:"2-digit", hour:"2-digit", minute:"2-digit"});
	 * - stxx.internationalizer.monthDay=new Intl.DateTimeFormat(this.locale, {month:"numeric", day:"numeric"});
	 * - stxx.internationalizer.yearMonthDay=new Intl.DateTimeFormat(this.locale, {year:"numeric", month:"numeric", day:"numeric"});
	 * - stxx.internationalizer.yearMonth=new Intl.DateTimeFormat(this.locale, {year:"numeric", month:"numeric"});
	 * - stxx.internationalizer.month=new Intl.DateTimeFormat(this.locale, {month:"short"});
	 *
	 * These can be overridden manually if the specified format is not acceptable. See example.
	 * Also see [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat) for formatting alternatives
	 *
	 * @param {string} locale A valid IANA locale
	 * @param {number} [maxDecimals] maximum number of decimal places to allow on number conversions. Defaults to 5. Please note that this will supersede any defaults set in {@link CIQ.ChartEngine.YAxis#maxDecimalPlaces} or {@link CIQ.ChartEngine.YAxis#decimalPlaces}
	 * @memberof CIQ.ChartEngine
	 * @since 3.0.0 maxDecimals was added to the signature
	 * @example
	 * // override time formatting to enable 12 hour clock (hour12:true)
	 * CIQ.I18N.setLocale(stxx, "en");
	 * stxx.internationalizer.hourMinute=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", hour12:true});
	 * stxx.internationalizer.hourMinuteSecond=new Intl.DateTimeFormat(this.locale, {hour:"numeric", minute:"numeric", second:"numeric", hour12:true});
	 * @example
	 * // override formatting to dislay 'Sep 15' insted of '9/15' on x axis labels.
	 * CIQ.I18N.setLocale(stxx, "en");
	 * stxx.internationalizer.monthDay=new Intl.DateTimeFormat(this.locale, {month:"short", day:"numeric"});
	 */CIQ.ChartEngine.prototype.setLocale=function(locale,maxDecimals){if(typeof Intl=="undefined")return;if(this.locale!=locale){this.locale=locale;}else{return;}var i,internationalizer=this.internationalizer={};internationalizer.hourMinute=new Intl.DateTimeFormat(this.locale,{hour:"numeric",minute:"numeric",hour12:false});internationalizer.hourMinuteSecond=new Intl.DateTimeFormat(this.locale,{hour:"numeric",minute:"numeric",second:"numeric",hour12:false});internationalizer.mdhm=new Intl.DateTimeFormat(this.locale,{year:"2-digit",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"});internationalizer.monthDay=new Intl.DateTimeFormat(this.locale,{month:"numeric",day:"numeric"});internationalizer.yearMonthDay=new Intl.DateTimeFormat(this.locale,{year:"numeric",month:"numeric",day:"numeric"});internationalizer.yearMonth=new Intl.DateTimeFormat(this.locale,{year:"numeric",month:"numeric"});internationalizer.month=new Intl.DateTimeFormat(this.locale,{month:"short"});internationalizer.numbers=new Intl.NumberFormat(this.locale);internationalizer.priceFormatters=[];if(!maxDecimals)maxDecimals=8;for(i=0;i<maxDecimals+1;i++){internationalizer.priceFormatters.push(new Intl.NumberFormat(this.locale,{maximumFractionDigits:i,minimumFractionDigits:i}));}// minification efficient generation of...
// internationalizer.percent=new Intl.NumberFormat(this.locale, {style:"percent", minimumFractionDigits:2, maximumFractionDigits:2})
// internationalizer.percent1=new Intl.NumberFormat(this.locale, {style:"percent", minimumFractionDigits:1, maximumFractionDigits:1})
// ...
for(i=0;i<5;i++){var c=i,j=i;if(!i){c="";j=2;}internationalizer["percent"+c]=new Intl.NumberFormat(this.locale,{style:"percent",minimumFractionDigits:j,maximumFractionDigits:j});}if(CIQ.I18N.createMonthArrays)CIQ.I18N.createMonthArrays(this,internationalizer.month,this.locale);};/**
	 * <span class="quotefeed">QuoteFeed required</span> if `params.noDataLoad` is set to `false`
	 *
	 * Imports a layout (panels, studies, candleWidth, etc) from a previous serialization. See {@link CIQ.ChartEngine#exportLayout}.
	 *
	 * There are 3 ways to use the this method:
	 * 1. Preset the layout object in the chart instance, but do not load any data.
	 *  - This is usually used to restore an initial 'symbol independent' general layout (chart type and studies mainly) that will then take effect when `newChart` is subsequently called.
	 *  - In this case, exportedLayout should be called using 'withSymbols=false' and the importLayout should have 'noDataLoad=true'.
	 * 2. Load an entire new chart and its data, including primary symbol, additional series, studies, chart type, periodicity and range:
	 *  - In this case, you should not need call newChart, setPeriodicity setSpan or setRange, addStudy, etc. since it is all restored from the previously exported layout and loaded using the attached quoteFeed.
	 *  - If you still wish to change periodicity, span or range, you must use the CB function to do so.
	 *  - In this case, exportedLayout should be called  using 'withSymbols=true' and the importLayout should have 'noDataLoad=false' and 'managePeriodicity=true'.
	 * 3. Reset layout on an already existing chart without changing the primary symbol or adding additional symbols:
	 *  - This is used when restoring a 'view' on an already existing chart from a previous `newChart` call. The primary symbol remains the same, no additional series are added, but periodicity, range, studies and chart type are restored from the previously serialized view.
	 *  - In this case, exportedLayout should be called  using 'withSymbols=false', and importLayout should have 'noDataLoad=false', managePeriodicity=true', and 'preserveTicksAndCandleWidth=true'.
	 *
	 * **Important Notes: **
	 * - Please note that `stxx.callbacks.studyOverlayEdit` and `stxx.callbacks.studyPanelEdit` must be set *before* you call {@link CIQ.ChartEngine#importLayout}.
	 * Otherwise your imported studies will not have an edit capability
	 *
	 * - When symbols are loaded, this function will set the primary symbol (first on the serialized symbol list) with {@link CIQ.ChartEngine#newChart}
	 * and any overlayed symbol with {@link CIQ.ChartEngine#addSeries}. You must be using a QuoteFeed to use this workflow.
	 *
	 * - When allowing this method to load data, do not call [addSeries]{@link CIQ.ChartEngine#addSeries}, [importDrawings]{@link CIQ.ChartEngine#importDrawings} or [newChart]{@link CIQ.ChartEngine#newChart} in a way that will cause them to run simultaneously with this method,
	 * or the results of the layout load will be unpredictable.
	 * Instead use this method's callback to ensure data is loaded in the right order.
	 *
	 * - Since spans and ranges require changes in data and periodicity,
	 * they are only imported if params.managePeriodicity is set to true and params.noDataLoad is set to false.
	 * If both range and span are present, range takes precedence.
	 *
	 * @param  {object} config						A serialized layout generated by {@link CIQ.ChartEngine#exportLayout}
	 * @param  {object} params						Parameters to dictate layout behavior
	 * @param  {boolean} [params.noDataLoad=false] If true, then any automatic data loading from the quotefeed will be skipped, including setting periodicity, spans or ranges.<br>
	 * Data can only be loaded if a quote feed is attached to the chart. <br>
	 * @param  {boolean} [params.managePeriodicity]	If true then the periodicity will be set from the layout, otherwise periodicity will remain as currently set.<br>
	 * If the span/range was saved in the layout, it will be restored using the most optimal periodicity as determined by {@link CIQ.ChartEngine#setSpan}.<br>
	 * Periodicity can only be managed if a quote feed is attached to the chart. <br>
	 * Only applicable when noDataLoad=false.<br>
	 * See {@link CIQ.ChartEngine#setPeriodicity} for additional details
	 * @param  {boolean} [params.preserveTicksAndCandleWidth] If true then the current candleWidth (horizontal zoom) and scroll (assuming same periodicity) will be maintained and any spans or ranges present in the config will be ignored. Otherwise candle width and span/ranges will be taken from the config and restored.
	 * @param  {function} [params.cb] An optional callback function to be executed once the layout has been fully restored.
	 * @param  {function} [params.seriesCB] An optional callback function to be executed after each series is restored (to be aded to each {@link CIQ.ChartEngine#addSeries} call).
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 05-2016-10 Symbols are also loaded if included on the serialization.
	 * <br>&bull; 2016-06-21 preserveTicksAndCandleWidth now defaults to true
	 * <br>&bull; 3.0.0 added noDataLoad parameter
	 * <br>&bull; 5.1.0 Will now also import extended hours settings.
	 * <br>&bull; 5.1.0 Imports the range from layout if it is there to preserve between sessions.
	 * <br>&bull; 5.2.0 spans and ranges are only executed if managePeriodicity is true and preserveTicksAndCandleWidth is false.
	 */CIQ.ChartEngine.prototype.importLayout=function(config,params){if(!config){// if no config to restore, nothing to do.
if(params.cb)params.cb();return;}if(_typeof(params)!=="object"){// backwards compatibility hack, this function used to accept three named arguments
params={managePeriodicity:arguments[1],preserveTicksAndCandleWidth:arguments[2]};}var layout=this.layout,originalLayout=CIQ.shallowClone(layout);var managePeriodicity=params.managePeriodicity,cb=params.cb,seriesCB=params.seriesCB,noDataLoad=params.noDataLoad,minimumCandleWidth=this.minimumCandleWidth;var preserveTicksAndCandleWidth=params.preserveTicksAndCandleWidth;var exportedDrawings=this.exportDrawings();this.abortDrawings();this.currentlyImporting=true;// must remove studies before cleaning the overlays, or the remove function will be lost.
if(CIQ.Studies){for(var s in layout.studies){var sd=layout.studies[s];CIQ.Studies.removeStudy(this,sd);}}this.overlays={};// Keep a copy of the prior panels. We'll need these in order to transfer the holders
var priorPanels=CIQ.shallowClone(this.panels);this.panels={};// clone into view to prevent corrupting the original config object.
var view=CIQ.clone(config);// copy all settings to the chart layout, but maintain the original periodcity,
// wich is handled later on depending on managePeriodicity and noDataLoad settings.
CIQ.dataBindSafeAssignment(layout,CIQ.clone(view));layout.periodicity=originalLayout.periodicity;layout.interval=originalLayout.interval;layout.timeUnit=originalLayout.timeUnit;layout.setSpan=originalLayout.setSpan;layout.range=originalLayout.range;// must restore candleWidth before you draw any charts or series, including study charts. The config does not always provide the candleWidth
if(preserveTicksAndCandleWidth){layout.candleWidth=originalLayout.candleWidth;}else{if(!layout.candleWidth)layout.candleWidth=8;}// Just make sure the candleWidth is sane so we end up with a reasonable number of maxticks to fetch.
if(layout.candleWidth<minimumCandleWidth)layout.candleWidth=minimumCandleWidth;this.setCandleWidth(layout.candleWidth);var panels=view.panels;// make a copy of the panels
var insertAt;var orderedPanels=[];var p;var panel;for(p in panels){if(!('top'in panels[p]))break;// unable to sort
panel=panels[p];panel.name=p;// iterate one before insertion point; do so in reverse so that no iteration is done for sorted input
for(insertAt=orderedPanels.length-1;insertAt>=0&&orderedPanels[insertAt].top>panel.top;--insertAt){;}orderedPanels.splice(insertAt+1,0,panel);}layout.panels={};// erase the panels
if(orderedPanels.length>0){// rebuild the panels
for(var i=0;i<orderedPanels.length;++i){// explicit order
panel=orderedPanels[i];this.stackPanel(panel.display,panel.name,panel.percent,panel.chartName);}}else{for(p in panels){// object implied order
panel=panels[p];yAxis=panel.yAxis?new CIQ.ChartEngine.YAxis(panel.yAxis):null;this.stackPanel(panel.display,p,panel.percent,panel.chartName,yAxis);}}if(CIQ.isEmpty(panels)){this.stackPanel("chart","chart",1,"chart");}this.resizeCanvas();// Transfer the holders and DOM element references to panels that were retained when the config switched
// Delete panels that weren't
for(var panelName in priorPanels){var oldPanel=priorPanels[panelName];var newPanel=this.panels[panelName];if(newPanel){this.container.removeChild(newPanel.holder);if(oldPanel.handle)this.container.removeChild(oldPanel.handle);var copyFields={"holder":true,"subholder":true,"display":true,"icons":true};for(var f in copyFields){newPanel[f]=oldPanel[f];}this.configurePanelControls(newPanel);if(oldPanel.chart.panel==oldPanel)oldPanel.chart.panel=newPanel;// retain reference to the actual chart panel
}else{this.privateDeletePanel(oldPanel);}}this.adjustPanelPositions();this.storePanels();if(CIQ.Studies){var studies=CIQ.clone(layout.studies);delete layout.studies;for(var ss in studies){var study=studies[ss];CIQ.Studies.addStudy(this,study.type,study.inputs,study.outputs,study.parameters,study.panel);}}if(this.extendedHours)this.extendedHours.prepare(layout.extended,layout.marketSessions);if(typeof layout.chartType=="undefined")layout.chartType="line";this.setMainSeriesRenderer();this.adjustPanelPositions();var self=this;function postLayoutChange(){self.importDrawings(exportedDrawings);self.currentlyImporting=false;self.draw();self.updateListeners("layout");// tells listening objects that layout has changed
}if(!noDataLoad){// Now we execute the data loading functions.
if(view.symbols&&view.symbols.length){// load symbols; primary and additional series. Also adjust ranges and periodicity at the same time
var params2={};if(!preserveTicksAndCandleWidth&&managePeriodicity&&view.range&&Object.keys(view.range).length){// spans and ranges are only executed if managePeriodicity is true and preserveTicksAndCandleWidth is false.
params2.range=view.range;}else if(!preserveTicksAndCandleWidth&&managePeriodicity&&view.setSpan&&Object.keys(view.setSpan).length){// see above
params2.span=view.setSpan;}else if(managePeriodicity&&view.interval){// otherwise, import periodicity if available
params2.periodicity={interval:view.interval,period:view.periodicity,timeUnit:view.timeUnit};}else{// otherwise, maintian prior periodicity
params2.periodicity={interval:originalLayout.interval,period:originalLayout.periodicity,timeUnit:originalLayout.timeUnit};}var symbolObject=view.symbols[0].symbolObject||view.symbols[0].symbol;this.newChart(symbolObject,null,this.chart,function(err){if(!err){for(var smbl,i=1;i<view.symbols.length;++i){smbl=view.symbols[i];if(!smbl.parameters)smbl.parameters={};var parameters=CIQ.clone(smbl.parameters);parameters.action=null;// prevent symbolChange event
self.addSeries(smbl.id,parameters,seriesCB);}if(view.chartScale)self.setChartScale(view.chartScale);}postLayoutChange();if(cb)cb.apply(null,arguments);},params2);return;}// Otherwise, if only data ranges or periodicity are required, load them now
if(managePeriodicity){if(!preserveTicksAndCandleWidth){// spans and ranges are only executed if managePeriodicity is true and preserveTicksAndCandleWidth is false.
var range=view.range;if(range&&Object.keys(range).length&&this.chart.symbol){this.setRange(range,function(){postLayoutChange();if(cb)cb();});return;}else if(view.setSpan&&Object.keys(view.setSpan).length&&this.chart.symbol){this.setSpan(view.setSpan,function(){postLayoutChange();if(cb)cb();});return;}}var interval=view.interval;var periodicity=view.periodicity;var timeUnit=view.timeUnit;if(isNaN(periodicity))periodicity=1;if(!interval)interval="day";// this will get new data or roll up existing, createDataSet() and draw()
this.setPeriodicity({period:periodicity,interval:interval,timeUnit:timeUnit},function(){postLayoutChange();if(cb)cb();});return;}}// if we got here, no data loading was requested.
if(managePeriodicity){layout.periodicity=view.periodicity;layout.interval=view.interval;layout.timeUnit=view.timeUnit;layout.setSpan=view.setSpan;}this.createDataSet();if(!preserveTicksAndCandleWidth)this.home();postLayoutChange();if(cb)cb();};/**
	 * Exports the current layout into a serialized form. The returned object can be passed into
	 * {@link CIQ.ChartEngine#importLayout} to restore the layout at a future time.
	 *
	 * This methods will also save any programatically activated [range]{@link CIQ.ChartEngine#setRange} or [span]]{@link CIQ.ChartEngine#setSpan} setting that is still active. It is importantnot note, that a set range or span that is manually modfied by a usser when zoomngor panning will be nullified.
	 * So if you wish to allways record the current range or a chanrt for future restiration, you must use a 'move' event listener to capture that interactin and then call setRange withthe current vue window.
	 *
	 * @param {boolean} withSymbols  If set to `true`, include the chart's current primary symbol and any secondary symbols from any {@link CIQ.ChartEngine#addSeries} operation; if using a quoteFeed. Studies will be excluded from this object. The resulting list will be in the `symbols` element of the serialized object.
	 * @return {object} The serialized form of the layout.
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 05-2016-10 `withSymbols` parameter is available
	 * <br>&bull; 5.0.0 obj.symbols will be explicitly removed from the serialization if `withSymbols` is not true.
	 */CIQ.ChartEngine.prototype.exportLayout=function(withSymbols){var obj={};// First clone all the fields, these describe the layout
for(var field in this.layout){if(field!="studies"&&field!="panels"){obj[field]=CIQ.clone(this.layout[field]);}else if(field=="studies"){obj.studies={};}else if(field=="panels"){obj.panels={};}}// Serialize the panels
for(var panelName in this.panels){var panel=obj.panels[panelName]={};var p=this.panels[panelName];panel.percent=p.percent;panel.display=p.display;panel.chartName=p.chart.name;panel.top=p.top;if(p.yAxis.position)panel.yAxis={position:p.yAxis.position};}// Serialize the studies
for(var studyName in this.layout.studies){var study=obj.studies[studyName]={};var s=this.layout.studies[studyName];study.type=s.type;study.inputs=CIQ.clone(s.inputs);study.outputs=CIQ.clone(s.outputs);study.panel=s.panel;study.parameters=CIQ.clone(s.parameters);}if(withSymbols){obj.symbols=this.getSymbols({"include-parameters":true,"exclude-studies":true});}else{delete obj.symbols;}return obj;};/**
	 * This method is used to prepare date fields for internal use. It will:
	 * - convert dates to a JS Date in the timeZone set by [setTimeZone(dataZone)]{@link CIQ.ChartEngine#setTimeZone}.
	 * - subsequently strip off the time portion on daily, weekly and monthly intervals.
	 *
	 * - If the date ('DT' or 'Date') does not include a time offset, such as 'yyyy-mm-dd',
	 * no time zone conversion will be performed. Use this option if you prefer to display the same date on all timezones.
	 * This applies to daily, weekly and monthly periodicities only.
	 *
	 * @param  {array} quotes The quote array to be converted
	 * @param  {string} interval Interval of the quotes ("day", "week", etc).
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 4.0.0
	 * <br>&bull; 5.2.0 used on intraday and daily quotes to also convert dates to the indicated `dataZone` as set by [setTimeZone(dataZone)]{@link CIQ.ChartEngine#setTimeZone}.
	 */CIQ.ChartEngine.prototype.doCleanupDates=function(quotes,interval){if(!quotes||!quotes.length)return;for(var i=0;i<quotes.length;i++){var quote=quotes[i],date=quote.DT;if(!date&&!quote.Date)continue;if(quote.DT&&Object.prototype.toString.call(date)=='[object String]'&&date.length<=10){// only date portion provided on DT field, no conversion
date=new Date(date);date.setMinutes(date.getMinutes()+date.getTimezoneOffset());}else{var useDataZone=true;if(!quote.DT){date=CIQ.strToDateTime(quote.Date);if(quote.Date.length<=10)useDataZone=false;}if(Object.prototype.toString.call(date)!='[object Date]')date=new Date(date);// if already a date object; nothing to do
if(this.dataZone&&useDataZone){// convert dates before setting a quotes canonical DT object
var newDT=new timezoneJS.Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),this.dataZone);var milli=date.getSeconds()*1000+date.getMilliseconds();date=new Date(newDT.getTime()+milli);}if(CIQ.ChartEngine.isDailyInterval(interval))date.setHours(0,0,0,0);}if(!quote.DT)quote.Date=CIQ.yyyymmddhhmmssmmm(date);// Set the Date to the adjusted date but only if there was no DT provided
quote.DT=date;}};/**
	 * If {@link CIQ.ChartEngine#cleanupGaps} is set, this method will insert bars in an array of quotes for those periods missing a record according to the market hours and the current periodicity.
	 * See "{@link CIQ.Market}" for details on how to properly configure the library to your market hours requirements.
	 *
	 * This method will not be called for `tick` since by nature it is no a predictable interval.
	 *
	 * This method is automatically called if you are using a quoteFeed and have {@link CIQ.ChartEngine#cleanupGaps} set, but can be manually called if pushing or streaming data into the chart.
	 *
	 * This method will affect intraday and **underlying daily**  periods **only**. If the feed is already returning weekly and monthly data rolled up, the clean up will not be done ( see {@link CIQ.ChartEngine#dontRoll} ).
	 *
	 * See {@link CIQ.ChartEngine#cleanupGaps}, for more details.
	 *
	 * @param  {array} quotes The quote array to be gap-filled
	 * @param  {CIQ.ChartEngine.Chart} [chart] Chart object to target.
	 * @param {object} [params] Parameters
	 * @param {string} [params.cleanupGaps] Pass this in to override the {@link CIQ.ChartEngine#cleanupGaps} value.
	 * @param {boolean} [params.noCleanupDates]		If true then dates have been cleaned up already by calling {@link CIQ.ChartEngine#doCleanupDates}, so do not do so in here.
	 * @param {string} [params.field]		Set to a field to fill gaps, or leave out to use chart.defaultPlotField.
	 * @return {array} The quote array with gaps filled in.
	 * @memberof CIQ.ChartEngine
	 * @since
	 * <br>&bull; 07/01/2015 it now supports cleanups for daily intervals and foreign exchanges instead of just intraday equities.
	 * <br>&bull; 3.0.7 added params.cleanupGaps to allow developers to use this function standalone
	 * <br>&bull; 5.2.0 added parameter noCleanupDates
	 * <br>&bull; 6.0.0 added parameter field
	 * <br>&bull; 6.0.0 if params.cleanupGaps is true, use the value of stxx.cleanupGaps.  If that's not set, then cleanupGaps is like carry.
	 */CIQ.ChartEngine.prototype.doCleanupGaps=function(quotes,chart,params){if(!quotes||!quotes.length)return quotes;var interval=this.layout.interval;params=params?params:{};if(!chart)chart=this.chart;if(!params.noCleanupDates)this.doCleanupDates(quotes,interval);var cleanupGaps=params.cleanupGaps;if(cleanupGaps===false)return quotes;if(!cleanupGaps||cleanupGaps===true)cleanupGaps=this.cleanupGaps||cleanupGaps;var makeGaps=cleanupGaps=="gap";// "carry" or any other non-false will cause the closing price to carry, otherwise a null will be injected
if(!cleanupGaps)return quotes;if(interval=="tick")return quotes;// doCleanupGaps works on the raw masterData, so if we're rolling up month or week then be sure to actually
// cleanup gaps on the masterData which will be "day"
if(interval=="month"||interval=="week"){if(this.dontRoll)return quotes;// We won't try to fill gaps on raw month or week data
interval="day";}var _make_date=function _make_date(_quote){if(_quote.DT){if(Object.prototype.toString.call(_quote.DT)!='[object Date]')return new Date(_quote.DT);// epoch or ISO string
return new Date(+_quote.DT);}return CIQ.strToDateTime(_quote.Date);};var new_quotes=[];var currentQuote=quotes[0];new_quotes.push(currentQuote);var iter_parms={'begin':_make_date(currentQuote),'interval':interval,'periodicity':1,'timeUnit':this.layout.timeUnit};var market=new CIQ.Market(chart.market.market_def);var iter=market.newIterator(iter_parms);if(this.extendedHours&&this.extendedHours.filter)iter.market.enableAllAvailableSessions();var field=chart.defaultPlotField;var mdt;function fillGapsBetween(dt1,dt2){var paramField=params.field;var cQuote=paramField?currentQuote[paramField]:currentQuote;if(cQuote===undefined)cQuote={};var close=makeGaps?null:cQuote[field];var adjClose=makeGaps?null:cQuote.Adj_Close;// Loop through the iterator adding a dummy quote for every missing market date between currentQuote and nextQuote
while(+dt1<+dt2){var newQuote={DT:dt1};if(paramField){}else{new_quotes.push(newQuote);CIQ.extend(newQuote,{Open:close,High:close,Low:close,Close:close,Volume:0,Adj_Close:adjClose});}dt1=iter.next();}}function copyForward(currentQuote,nextQuote){var paramField=params.field;if(paramField){if(typeof currentQuote[paramField]!="undefined"&&typeof nextQuote[paramField]=="undefined"){nextQuote[paramField]=makeGaps?null:currentQuote[paramField];}return;}if(makeGaps)return;var close=currentQuote[field];var nextClose=nextQuote[field];if(typeof close!="undefined"&&typeof nextClose=="undefined"){CIQ.ensureDefaults(nextQuote,{Close:close,Open:close,High:close,Low:close,Volume:0,Adj_Close:currentQuote.Adj_Close});}}for(var i=1;i<quotes.length;i++){var nextQuote=quotes[i];mdt=iter.next();// market date
var qdt=_make_date(nextQuote);// quote date
fillGapsBetween(mdt,qdt);while(qdt<mdt){if(++i==quotes.length)return new_quotes;copyForward(currentQuote,nextQuote);new_quotes.push(nextQuote);currentQuote=nextQuote;nextQuote=quotes[i];qdt=_make_date(nextQuote);}if(mdt<qdt){i--;mdt=iter.previous();}else{copyForward(currentQuote,nextQuote);new_quotes.push(nextQuote);currentQuote=nextQuote;}}return new_quotes;};/**
	 * ** The UI portion if this namespace is maintained for legacy implementations only (not using web components). New implementations should use functionality included in the web components (stxUI.js) **<br>
	 * Comparison namespace
	 * @namespace
	 * @name  CIQ.Comparison
	 */CIQ.Comparison=function(){};// Create namespace
/**
	 * For relative comparisons, this is the starting point.  It can be a number to specify an absolute amount,
	 * or a string to specify to use the baseline value (the first value in dataSegment) for a specific series (for instance "IBM").
	 * An empty string will compare against the baseline value of the main series.
	 *
	 * See {@link CIQ.ChartEngine#setChartScale} for more details.
	 * @type number|string
	 * @memberof CIQ.Comparison
	 * @since 5.1.0
	 */CIQ.Comparison.initialPrice=100;/**
	 * Used to compute the initial price when it is supplied as a string
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @return {number}			The initial price as a number
	 * @memberof CIQ.Comparison
	 * @since 5.1.0
	 * @private
	 */CIQ.Comparison.getInitialPrice=function(chart){if(chart.initialComparisonPrice)return chart.initialComparisonPrice;chart.initialComparisonPrice=100;var symbol=CIQ.Comparison.initialPrice;if(typeof symbol=="number")chart.initialComparisonPrice=symbol;// absolute amount
if(typeof symbol=="string"){if(chart.series[symbol]||symbol===""){var priceField="Close";if(chart.defaultPlotField){if(!chart.highLowBars)priceField=chart.defaultPlotField;}for(var i=chart.dataSet.length-chart.scroll;i<chart.dataSet.length;i++){var bar=chart.dataSet[i];if(bar){if(bar[symbol]&&bar[symbol][priceField]){chart.initialComparisonPrice=bar[symbol][priceField];break;}else if(symbol===""&&bar[priceField]){chart.initialComparisonPrice=bar[priceField];break;}}}}}return chart.initialComparisonPrice;};/**
	 * Transform function for percent comparison charting
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {number} price The price to transform
	 * @return {number}			The transformed price (into percentage)
	 * @memberof CIQ.Comparison
	 */CIQ.Comparison.priceToPercent=function(stx,chart,price){var baseline=CIQ.Comparison.baseline||price;return Math.round((price-baseline)/baseline*100*10000)/10000;};/**
	 * Untransform function for percent comparison charting
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {number} percent The price to untransform
	 * @return {number}			The untransformed price
	 * @memberof CIQ.Comparison
	 */CIQ.Comparison.percentToPrice=function(stx,chart,percent){var baseline=CIQ.Comparison.baseline||1;return baseline*(1+percent/100);};/**
	 * Transform function for relative comparison charting
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {number} price The price to transform
	 * @return {number}			The transformed price (relative to {@link CIQ.Comparison.initialPrice})
	 * @memberof CIQ.Comparison
	 * @since 5.1.0
	 */CIQ.Comparison.priceToRelative=function(stx,chart,price){var baseline=CIQ.Comparison.baseline||price;var initialPrice=CIQ.Comparison.getInitialPrice(chart);return initialPrice*price/baseline;};/**
	 * Untransform function for relative comparison charting
	 * @param  {CIQ.ChartEngine} stx	  The charting object
	 * @param  {CIQ.ChartEngine.Chart} chart	The specific chart
	 * @param  {number} relative The price to untransform
	 * @return {number}			The untransformed price
	 * @memberof CIQ.Comparison
	 * @since 5.1.0
	 */CIQ.Comparison.relativeToPrice=function(stx,chart,relative){var baseline=CIQ.Comparison.baseline||1;var initialPrice=CIQ.Comparison.getInitialPrice(chart);return baseline*relative/initialPrice;};CIQ.Comparison.createComparisonSegmentInner=function(stx,chart){// create an array of the fields that we're going to compare
var fields=[];var field,panel,yAxis;for(field in chart.series){var parameters=chart.series[field].parameters;if(parameters.isComparison){fields.push(parameters.symbol);}}var priceFields=["Close","Open","High","Low","iqPrevClose"];var highLowBars=stx.chart.highLowBars||stx.highLowBars[stx.layout.chartType];if(chart.defaultPlotField&&!highLowBars)priceFields.unshift(chart.defaultPlotField);var baselineField=priceFields[0];var s=stx.layout.studies;if(s){for(var n in s){var sd=s[n];panel=stx.panels[sd.panel];yAxis=stx.getYAxisByName(panel,sd.name)||panel.yAxis;if(!panel||panel.yAxis!=yAxis)continue;for(field in sd.outputMap){priceFields.push(field);}for(var h=0;h<=2;h++){priceFields.push(sd.name+"_hist"+(h?h:""));}if(sd.referenceOutput)priceFields.push(sd.referenceOutput+" "+sd.name);}}for(var p in stx.plugins){var plugin=stx.plugins[p];if(!plugin.transformOutputs)continue;for(field in plugin.transformOutputs){priceFields.push(field);}}chart.initialComparisonPrice=null;chart.dataSegment=[];var firstQuote=null;var firstTick=chart.dataSet.length-chart.scroll;if(stx.micropixels+stx.layout.candleWidth/2<0)firstTick++;// don't baseline comparison with a bar off the left edge
var transformsToProcess=chart.maxTicks+3;//make sure we have transformed enough data points that we plot the y-axis intercept correctly
for(var i=0;i<=transformsToProcess;i++){if(i==transformsToProcess)i=-1;//go back and revisit the tick before the first
var position=firstTick+i;if(position<chart.dataSet.length&&position>=0){var quote=chart.dataSet[position];var closingPrice=quote[baselineField];if(!firstQuote){if(closingPrice===0||closingPrice===null){if(i<0)break;//if we still can't get a single tick to do this and we try to revisit, we are out, or we go into infinite loop
else continue;// can't calculate the percentage gain/loss if the close is 0 or null.
}firstQuote=CIQ.clone(quote);}// iterate through the fields calculating the percentage gain/loss
// We store the results in the "transform" subobject of the data set
// Note we inline the math calculation to save overhead of JS function call
if(!quote.transform)quote.transform={"cache":{},"DT":quote.DT,"Date":quote.Date};if(!CIQ.Comparison.baseline&&closingPrice)firstQuote=CIQ.clone(quote);CIQ.Comparison.baseline=firstQuote[baselineField];var j;for(j=0;j<priceFields.length;j++){field=priceFields[j];if(quote[field]||quote[field]===0)//quote.transform[field]=Math.round(((quote[field]-CIQ.Comparison.baseline)/CIQ.Comparison.baseline*100)*10000)/10000;	// first compute the close pct, our baseline
quote.transform[field]=chart.transformFunc(stx,chart,quote[field]);}// Transform the series
for(j=0;j<fields.length;j++){field=fields[j];var compSymbol=chart.series[field];if(i==-1&&compSymbol&&compSymbol.parameters.isComparison){delete quote.transform[field];continue;}var seriesData=quote[field];for(var k=0;seriesData&&k<priceFields.length;k++){var seriesPrice=seriesData[priceFields[k]];if(seriesPrice||seriesPrice===0){// Skip blanks
var baseline=firstQuote[field]&&firstQuote[field][priceFields[0]];if(!baseline&&baseline!==0){// This takes care of a series that starts part way through the chart
// The baseline is then computed looking back to what it would have been with a 0% change
if(!firstQuote[field])firstQuote[field]={};firstQuote[field][priceFields[k]]=baseline=seriesPrice*CIQ.Comparison.baseline/quote[baselineField];}if(baseline!==0){var masterBaseline=CIQ.Comparison.baseline||1;var rationalizedPrice=seriesPrice*(masterBaseline/baseline);if(!quote.transform[field])quote.transform[field]={};quote.transform[field][priceFields[k]]=chart.transformFunc(stx,chart,rationalizedPrice);}}}}chart.dataSegment.push(quote);}else if(position<0){chart.dataSegment.push(null);}if(i<0)break;//we revisited tick before first so we are done
}};/**
	 * Formats the percentage values on the comparison chart
	 * @param  {CIQ.ChartEngine} stx	The chart object
	 * @param  {CIQ.ChartEngine.Panel} panel The panel
	 * @param  {number} price The raw percentage as a decimal
	 * @return {string}		  The percentage formatted as a percent (possibly using localization if set in stx)
	 * @memberof CIQ.Comparison
	 */CIQ.Comparison.priceFormat=function(stx,panel,price){if(price===null||typeof price=="undefined"||isNaN(price))return"";var priceTick=panel.yAxis.priceTick;var internationalizer=stx.internationalizer;if(internationalizer){if(priceTick>=5)price=internationalizer.percent.format(price/100);else if(priceTick>=0.5)price=internationalizer.percent1.format(price/100);else if(priceTick>=0.05)price=internationalizer.percent2.format(price/100);else if(priceTick>=0.005)price=internationalizer.percent3.format(price/100);else price=internationalizer.percent4.format(price/100);}else{if(priceTick>=5)price=price.toFixed(0)+"%";else if(priceTick>=0.5)price=price.toFixed(1)+"%";else if(priceTick>=0.05)price=price.toFixed(2)+"%";else if(priceTick>=0.005)price=price.toFixed(3)+"%";else price=price.toFixed(4)+"%";}if(parseFloat(price)===0&&price.charAt(0)=="-"){// remove minus sign from -0%, -0.0%, etc
price=price.substring(1);}return price;};/**
	 * Turns comparison charting on or off and sets the transform.
	 *
	 * Should not be called directly. Either use the {@link CIQ.ChartEngine#addSeries} `isComparison` parameter or use {@link CIQ.ChartEngine#setChartScale}

	 * @param {string|boolean} mode Type of comparison ("percent" or "relative").
	 *  - Setting to true will enable "percent".
	 *  - Setting to "relative" will allow the comparisons to be rendered in relation to any provided 'basis' value. For example, the previous market day close price.
	 * @param {CIQ.ChartEngine.Chart} [chart] The specific chart for comparisons
	 * @param {*} [basis] For a "relative" mode, the basis to relate to.  Can be a number or a string.  If a string, will use the first price in the datasegment for the series keyed by the string.  Sets {@link CIQ.Comparison.initialPrice}.
	 * @memberof CIQ.ChartEngine
	 * @since  04-2015 Signature has been revised
	 * @since 5.1.0 Signature revised again, added basis
	 * @since 5.1.0 `mode` now also supports "relative" to allow comparisons to be rendered in relation to any provided value.
	 */CIQ.ChartEngine.prototype.setComparison=function(mode,chart,basis){if(!chart)chart=this.chart;if(typeof chart=="string")chart=this.charts[chart];if(basis||basis==="")CIQ.Comparison.initialPrice=basis;if(mode===true){// backward compatibility, older versions uses a true/false switch because they did not support the developer setting arbitrary baseline values
if(chart.isComparison)return;// Do nothing if it's already turned on
mode="percent";}this.resetDynamicYAxis();var yAxis=chart.panel.yAxis;var wasComparison=yAxis.priceFormatter==CIQ.Comparison.priceFormat;// tests if the current formatter is a comparison formatter
// this is like testing if the previous mode was "percent"
switch(mode){case"relative":this.setTransform(chart,CIQ.Comparison.priceToRelative,CIQ.Comparison.relativeToPrice);if(wasComparison){yAxis.priceFormatter=yAxis.originalPriceFormatter?yAxis.originalPriceFormatter.func:null;yAxis.originalPriceFormatter=null;}yAxis.whichSet="dataSegment";chart.isComparison=true;break;case"percent":this.setTransform(chart,CIQ.Comparison.priceToPercent,CIQ.Comparison.percentToPrice);if(!wasComparison){yAxis.originalPriceFormatter={func:yAxis.priceFormatter};yAxis.priceFormatter=CIQ.Comparison.priceFormat;}yAxis.whichSet="dataSegment";chart.isComparison=true;break;default:this.unsetTransform(chart);if(wasComparison){yAxis.priceFormatter=yAxis.originalPriceFormatter?yAxis.originalPriceFormatter.func:null;yAxis.originalPriceFormatter=null;}yAxis.whichSet="dataSet";chart.isComparison=false;break;}};/**
	 * Imports a users preferences from a saved location and uses them in the ChartEngine
	 * To save preferences see {@link CIQ.ChartEngine#exportPreferences}
	 * @param {object} preferences An object of {@link CIQ.ChartEngine#preferences}
	 * @memberof CIQ.ChartEngine
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.importPreferences=function(preferences){CIQ.extend(this.preferences,preferences);if(preferences.timeZone)this.setTimeZone(this.dataZone,preferences.timeZone);if(preferences.language&&CIQ.I18N){CIQ.I18N.localize(this,preferences.language);}this.changeOccurred("preferences");};/**
	 * Exports the {@link CIQ.ChartEngine#preferences} for external storage.
	 * Can then be imported again after being parsed with {@link CIQ.ChartEngine#importPreferences}
	 * @memberof CIQ.ChartEngine
	 * @returns {CIQ.ChartEngine#preferences}
	 * @since 4.0.0
	 */CIQ.ChartEngine.prototype.exportPreferences=function(){return this.preferences;};if(typeof document!="undefined")document.addEventListener("contextmenu",CIQ.ChartEngine.handleContextMenu);return _exports;};var __js_core_market_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2018 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_core_market_(_exports){if(!_exports)_exports={};/**
	 * The market class is what the chart uses to to manage market hours for the different exchanges.
	 * It uses `Market Definitions` to decide when the market is open or closed.
	 * Although you can construct many market classes with different definitions to be used in your functions, only one market definition can be attached to the chart at any given time.
	 * Once a market is defined, an [iterator]{@link CIQ.Market#newIterator} can be created to traverse through time, taking into account the market hours.
	 * Additionally, a variety of convenience functions can be used to check the market status, such as {@link CIQ.Market#isOpen} or {@link CIQ.Market#isMarketDay}.
	 *
	 * A chart will operate 24x7, unless a market definition is assigned to it.
	 * See {@link CIQ.ChartEngine#setMarket} and {@link CIQ.ChartEngine#setMarketFactory} for instructions on how to assign a market definition to a chart.
	 * The chart also provides convenience functions that allows you to traverse through time at the current chart periodicity without having to explicitly create a new iterator.
	 * See {@link CIQ.ChartEngine#getNextInterval} and {@link CIQ.ChartEngine#standardMarketIterator} for details.
	 *
	 * It is also important to note that if the {@link CIQ.ExtendedHours} visualization and filtering add-on is enabled, **only data within the defined market hours will be displayed on the chart** even if more data is loaded.
	 *
	 * `Market Definitions` are JavaScript objects which must contain the following elements:
	 * - `name` : A string. Name of the market for which the rules are for.
	 * - `rules` : An array. The rules indicating the times the market is open or closed.
	 * - `market_tz` : A string. Time zone in which the market operates. A valid timezone from the timeZoneData.js library.
	 * - `hour_aligned`: A boolean. If set to true, market opening and closing times will be set to the exact start of the hour of time, ignoring any minutes, seconds or millisecond offsets.
	 * - `convertOnDaily` : A boolean. By default, daily charts are not converted for timezone. Set this to true to convert for daily charts.
	 *
	 * Example:
	 * ```
	 * 	{
	 * 		name: "SAMPLE-MARKET",
	 * 		market_tz: "America/Chicago",
	 * 		hour_aligned: true,
	 * 		rules: [
	 * 				{"dayofweek": 1, "open": "09:00", "close": "17:00"}
	 * 		]
	 *	};
	 * ```
	 *
	 * Instructions for creating `Market Definitions`:
	 *
	 * - By default a market assumes that it is always open unless otherwise defined.
	 * - Market rule times are specified in the market's local timezone.
	 * - Seconds are not considered for open or close times, but are okay for intra day data.
	 * - Rules are processed top to bottom.
	 * - Default market rules do not have a `name` parameter and are enabled by default.
	 * - Default market rules are mandatory, and used to define the primary market session.
	 * - Non-default market rules require a `name` parameter included.
	 * - All non-default market rules are disabled by default.
	 * 
	 * 		This is a rule for a 'pre' market session:
	 * 			`{"dayofweek": 1, "open": "08:00", "close": "09:30", name: "pre"}`
	 * 
	 * - To enable or disable non-default market rules by session name, use {@link CIQ.Market#enableSession} and {@link CIQ.Market#disableSession}.
	 *  - **Important:** Enabling/Disabling market sessions will not automatically filter-out data from the chart, but simply adjust the market iterators so the x-axis can be displayed accordingly in the absence of data for the excluded sessions.
	 *  - Data filtering can be done: 
	 *    - Manually by requesting pertinent data from your feed and calling {@link CIQ.ChartEngine#newChart}
	 *    - Automatically by using the {@link CIQ.ExtendedHours} visualization and filtering add-on.
	 * - First, the `dayofweek` wild card rules are processed. As soon as a rule is matched, processing breaks.
	 *
	 * 		This rule says the market is open every Monday from 9:30 to 16:00:
	 * 			`{"dayofweek": 1, "open": "09:30", "close": "16:00"}`
	 *
	 * - After the `dayofweek` rules are processed all of the extra rules are processed.
	 * - Multiple `open` and `close` times can be set for the same day of week. To indicate the market is closed during lunch, for example.
	 *
	 * 			```
	 * 			{"dayofweek": 1, "open": "09:00", "close": "12:00"}, // mon
	 *			{"dayofweek": 1, "open": "13:00", "close": "17:00"}  // mon
	 *			```
	 *
	 * - Wildcard rules should be placed first and more specific rules should be placed later.
	 *
	 * 		This rule is a wildcard rule for Christmas. If Christmas is on Monday, the
	 * 		first set of rules will evaluate to true because the dayofweek rule for day
	 * 		one will match. Then this rule will match if the date is the 25th of
	 * 		December in any year.  Because open is 00:00 and close is 00:00, it will evaluate to false:
	 * 			`{"date": "*-12-25", "open": "00:00", "close": "00:00"}`
	 *
	 * - After wildcard exceptions, any specific day and time can be matched.
	 *
	 * 		This rule says closed on this day only. Note that open and closed attributes
	 * 		can be omitted to save typing if the market is closed the entire day:
	 * 			`{"date": "2016-01-18"} //Martin Luther King day.`
	 *
	 * 		This rules says closed on 12-26:
	 * 			`{"date": "2016-12-26"}, //Observed Christmas in 2016`
	 *
	 * 		This rule says partial session
	 * 			`{"date": "2015-12-24", "open": "9:30", "close": "13:00"} //Christmas eve`
	 *
	 * See example section for a compete NYSE definition.
	 *
	 * Once defined, it can be used to create a new market instance.
	 *
	 * Example:
	 *
	 * ```
	 *	var thisMarket = new CIQ.Market(marketDefinition);
	 * ```
	 *
	 * If no definition is provided, the market will operate 24x7.
	 *
	 * Example:
	 * ```
	 * new CIQ.Market();
	 * ```
	 *
	 * @param {object} [market_definition] A json object that contains the rules for some market. If not defined default market is always open.
	 *
	 * @constructor
	 * @name  CIQ.Market
	 * @since
	 * <br>04-2016-08
	 * <br>06-2016-02 - You can now specify times for different market sessions ('pre',post', etc) to be used with the sessions visualization tools. See {@link CIQ.ExtendedHours}.
	 *
	 * @example
	 * CIQ.Market.NYSE = {
			"name": "NYSE",
			"market_tz": "America/New_York",
			"hour_aligned": false,
			"rules": [
				//First open up the regular trading times
				//Note that sat and sun (in this example) are always closed because
				//everything is closed by default and we didn't explicitly open
				//them.
				{"dayofweek": 1, "open": "09:30", "close": "16:00"}, //mon
				{"dayofweek": 2, "open": "09:30", "close": "16:00"},
				{"dayofweek": 3, "open": "09:30", "close": "16:00"},
				{"dayofweek": 4, "open": "09:30", "close": "16:00"},
				{"dayofweek": 5, "open": "09:30", "close": "16:00"}, //fri

				//After Hours premarket
				{"dayofweek": 1, "open": "08:00", "close": "09:30", name: "pre"}, //mon
				{"dayofweek": 2, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 3, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 4, "open": "08:00", "close": "09:30", name: "pre"},
				{"dayofweek": 5, "open": "08:00", "close": "09:30", name: "pre"}, //fri

				//After Hours post
				{"dayofweek": 1, "open": "16:00", "close": "20:00", name: "post"}, //mon
				{"dayofweek": 2, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 3, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 4, "open": "16:00", "close": "20:00", name: "post"},
				{"dayofweek": 5, "open": "16:00", "close": "20:00", name: "post"}, //fri

				//Now Monday thru Friday is open. Close any exceptions

				//always closed on Christmas
				{"date": "*-12-25", "open": "00:00", "close": "00:00"},

				//always closed on 4th of July
				{"date": "*-07-04", "open": "00:00", "close": "00:00"},

				//always close on new years day
				{"date": "*-01-01", "open": "00:00", "close": "00:00"},

				//Some holidays are observed on different days each year or if
				//the day falls on a weekend. Each of those rules must be specified.
				{"date": "2012-01-02", "open": "00:00", "close": "00:00"},

				//As a special case if no open and close attributes are set they
				//will be assumed "00:00" and "00:00" respectively
				{"date": "2017-01-02"},

				{"date": "2016-01-18"},
				{"date": "2016-02-15"},
				{"date": "2016-03-25"},
				{"date": "2016-05-30"},
				{"date": "2016-09-05"},
				{"date": "2016-11-24"},
				{"date": "2016-11-25", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2016-11-25", "open": "9:30", "close": "13:00"},
				{"date": "2016-12-26"},

				{"date": "2015-01-19"},
				{"date": "2015-02-16"},
				{"date": "2015-04-03"},
				{"date": "2015-05-25"},
				{"date": "2015-07-03"},
				{"date": "2015-09-07"},
				{"date": "2015-11-26"},
				{"date": "2015-11-27", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2015-11-27", "open": "9:30", "close": "13:00"},
				{"date": "2015-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2015-12-24", "open": "9:30", "close": "13:00"},

				{"date": "2014-01-20"},
				{"date": "2014-02-17"},
				{"date": "2014-04-18"},
				{"date": "2014-05-26"},
				{"date": "2014-09-01"},
				{"date": "2014-11-27"},
				{"date": "2014-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2014-11-28", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-11-28", "open": "9:30", "close": "13:00"},
				{"date": "2014-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2014-12-24", "open": "9:30", "close": "13:00"},

				{"date": "2013-01-21"},
				{"date": "2013-02-18"},
				{"date": "2013-03-29"},
				{"date": "2013-05-27"},
				{"date": "2013-09-02"},
				{"date": "2013-11-28"},
				{"date": "2013-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2013-11-29", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-11-29", "open": "9:30", "close": "13:00"},
				{"date": "2013-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2013-12-24", "open": "9:30", "close": "13:00"},

				{"date": "2012-01-16"},
				{"date": "2012-02-20"},
				{"date": "2012-04-06"},
				{"date": "2012-05-28"},
				{"date": "2012-09-03"},
				{"date": "2012-10-29"},
				{"date": "2012-10-30"},
				{"date": "2012-11-22"},
				{"date": "2012-07-03", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-07-03", "open": "9:30", "close": "13:00"},
				{"date": "2012-11-23", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-11-23", "open": "9:30", "close": "13:00"},
				{"date": "2012-12-24", "open": "8:00", "close": "9:30", name: "pre"},
				{"date": "2012-12-24", "open": "9:30", "close": "13:00"}
			]
		};
	 */var CIQ=_exports.CIQ,timezoneJS=_exports.timezoneJS;if(!CIQ){CIQ=function CIQ(){};_exports.CIQ=CIQ;}var HOUR_MILLIS=60000*60;var DAY_MILLIS=HOUR_MILLIS*24;CIQ.Market=function(market_definition){this.market_def=false;this.rules=false;this.normalHours=[];this.extraHours=[];this.class_name='Market';if(typeof timezoneJS==='undefined'){this.tz_lib=Date;//needed to run unit tests
}else{this.tz_lib=timezoneJS.Date;}this.market_tz='';this.hour_aligned=false;this.convertOnDaily=false;this.enabled_by_default=false;//needed to run unit tests otherwise should do nothing
if(typeof market_definition!='undefined'&&market_definition&&market_definition!={}){if(market_definition.market_definition){market_definition=market_definition.market_definition;}if(market_definition.rules){this.rules=market_definition.rules;}if(market_definition.market_tz){this.market_tz=market_definition.market_tz;}if(market_definition.convertOnDaily){this.convertOnDaily=market_definition.convertOnDaily;}if(_typeof(market_definition.hour_aligned)){this.hour_aligned=market_definition.hour_aligned;}if(typeof market_definition.enabled_by_default!=='undefined'){if(market_definition.enabled_by_default instanceof Array){this.enabled_by_default=market_definition.enabled_by_default;}}this.market_def=market_definition;if(this.market_def.name===undefined){this.market_def.name="no market name specified";}}else{return;}CIQ.Market._createTimeSegments(this);this.getSessionNames();};/**
	 * An array of objects containing information about the current market's extended sessions.
	 * Each element has a name prop (for the name of the session) and an enabled prop.
	 * See {@link CIQ.ExtendedHours} for more information on extended sessions.
	 * @type array
	 * @default
	 * @alias sessions
	 * @memberof CIQ.Market
	 * @example
	 * marketSessions=stxx.chart.market.sessions
	 */CIQ.Market.prototype.sessions=null;CIQ.Market.GLOBEX={name:"GLOBEX",market_tz:"America/Chicago",hour_aligned:true,rules:[{"dayofweek":0,"open":"15:00","close":"24:00"},//sun
{"dayofweek":1,"open":"00:00","close":"24:00"},{"dayofweek":2,"open":"00:00","close":"24:00"},{"dayofweek":3,"open":"00:00","close":"24:00"},{"dayofweek":4,"open":"00:00","close":"24:00"},{"dayofweek":5,"open":"00:00","close":"18:00"}]};CIQ.Market.FOREX={name:"FOREX",market_tz:"America/New_York",hour_aligned:true,rules:[{"dayofweek":0,"open":"15:00","close":"17:00"},//  9AM Mon NZ time in the winter and 7AM Mon NZ time in the summer.
{"dayofweek":0,"open":"17:00","close":"24:00"},{"dayofweek":1,"open":"00:00","close":"17:00"},{"dayofweek":1,"open":"17:00","close":"24:00"},{"dayofweek":2,"open":"00:00","close":"17:00"},{"dayofweek":2,"open":"17:00","close":"24:00"},{"dayofweek":3,"open":"00:00","close":"17:00"},{"dayofweek":3,"open":"17:00","close":"24:00"},{"dayofweek":4,"open":"00:00","close":"17:00"},{"dayofweek":4,"open":"17:00","close":"24:00"},{"dayofweek":5,"open":"00:00","close":"17:00"}]};CIQ.Market.METALS={name:"METALS",market_tz:"America/New_York",hour_aligned:true,rules:[{"dayofweek":0,"open":"18:00","close":"24:00"},{"dayofweek":1,"open":"00:00","close":"17:15"},{"dayofweek":1,"open":"18:00","close":"24:00"},{"dayofweek":2,"open":"00:00","close":"17:15"},{"dayofweek":2,"open":"18:00","close":"24:00"},{"dayofweek":3,"open":"00:00","close":"17:15"},{"dayofweek":3,"open":"18:00","close":"24:00"},{"dayofweek":4,"open":"00:00","close":"17:15"},{"dayofweek":4,"open":"18:00","close":"24:00"},{"dayofweek":5,"open":"00:00","close":"17:15"}]};CIQ.Market.NYSE={"name":"NYSE","market_tz":"America/New_York","hour_aligned":false,"rules":[//First open up the regular trading times
//Note that sat and sun (in this example) are always closed because
//everything is closed by default and we didn't explicitly open
//them.
{"dayofweek":1,"open":"09:30","close":"16:00"},//mon
{"dayofweek":2,"open":"09:30","close":"16:00"},{"dayofweek":3,"open":"09:30","close":"16:00"},{"dayofweek":4,"open":"09:30","close":"16:00"},{"dayofweek":5,"open":"09:30","close":"16:00"},//fri
//After Hours premarket
{"dayofweek":1,"open":"04:00","close":"09:30",name:"pre"},//mon
{"dayofweek":2,"open":"04:00","close":"09:30",name:"pre"},{"dayofweek":3,"open":"04:00","close":"09:30",name:"pre"},{"dayofweek":4,"open":"04:00","close":"09:30",name:"pre"},{"dayofweek":5,"open":"04:00","close":"09:30",name:"pre"},//fri
//After Hours post
{"dayofweek":1,"open":"16:00","close":"20:00",name:"post"},//mon
{"dayofweek":2,"open":"16:00","close":"20:00",name:"post"},{"dayofweek":3,"open":"16:00","close":"20:00",name:"post"},{"dayofweek":4,"open":"16:00","close":"20:00",name:"post"},{"dayofweek":5,"open":"16:00","close":"20:00",name:"post"},//fri
//Now mon thru friday is open. Close any exceptions
//always closed on Christmas
{"date":"*-12-25","open":"00:00","close":"00:00"},//always closed on 4th of July
{"date":"*-07-04","open":"00:00","close":"00:00"},//always close on new years day
{"date":"*-01-01","open":"00:00","close":"00:00"},//Some holidays are observed on different days each year or if
//the day falls on a weekend. Each of those rules must be specified.
{"date":"2012-01-02","open":"00:00","close":"00:00"},//As a special case if no open and close attributes are set they
//will be assumed "00:00" and "00:00" respectively
{"date":"2019-01-21"},{"date":"2019-02-18"},{"date":"2019-04-19"},{"date":"2019-05-27"},{"date":"2019-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2019-07-03","open":"9:30","close":"13:00"},{"date":"2019-09-02"},{"date":"2019-11-28"},{"date":"2019-11-29","open":"4:00","close":"9:30",name:"pre"},{"date":"2019-11-29","open":"9:30","close":"13:00"},{"date":"2019-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2019-12-24","open":"9:30","close":"13:00"},{"date":"2018-01-15"},{"date":"2018-02-19"},{"date":"2018-03-30"},{"date":"2018-05-28"},{"date":"2018-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2018-07-03","open":"9:30","close":"13:00"},{"date":"2018-09-03"},{"date":"2018-11-22"},{"date":"2018-11-23","open":"4:00","close":"9:30",name:"pre"},{"date":"2018-11-23","open":"9:30","close":"13:00"},{"date":"2018-12-05"},{"date":"2018-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2018-12-24","open":"9:30","close":"13:00"},{"date":"2017-01-02"},{"date":"2017-01-16"},{"date":"2017-02-20"},{"date":"2017-04-14"},{"date":"2017-05-29"},{"date":"2017-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2017-07-03","open":"9:30","close":"13:00"},{"date":"2017-09-04"},{"date":"2017-11-23"},{"date":"2017-11-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2017-11-24","open":"9:30","close":"13:00"},{"date":"2016-01-18"},{"date":"2016-02-15"},{"date":"2016-03-25"},{"date":"2016-05-30"},{"date":"2016-09-05"},{"date":"2016-11-24"},{"date":"2016-11-25","open":"4:00","close":"9:30",name:"pre"},{"date":"2016-11-25","open":"9:30","close":"13:00"},{"date":"2016-12-26"},{"date":"2015-01-19"},{"date":"2015-02-16"},{"date":"2015-04-03"},{"date":"2015-05-25"},{"date":"2015-07-03"},{"date":"2015-09-07"},{"date":"2015-11-26"},{"date":"2015-11-27","open":"4:00","close":"9:30",name:"pre"},{"date":"2015-11-27","open":"9:30","close":"13:00"},{"date":"2015-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2015-12-24","open":"9:30","close":"13:00"},{"date":"2014-01-20"},{"date":"2014-02-17"},{"date":"2014-04-18"},{"date":"2014-05-26"},{"date":"2014-09-01"},{"date":"2014-11-27"},{"date":"2014-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2014-07-03","open":"9:30","close":"13:00"},{"date":"2014-11-28","open":"4:00","close":"9:30",name:"pre"},{"date":"2014-11-28","open":"9:30","close":"13:00"},{"date":"2014-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2014-12-24","open":"9:30","close":"13:00"},{"date":"2013-01-21"},{"date":"2013-02-18"},{"date":"2013-03-29"},{"date":"2013-05-27"},{"date":"2013-09-02"},{"date":"2013-11-28"},{"date":"2013-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2013-07-03","open":"9:30","close":"13:00"},{"date":"2013-11-29","open":"4:00","close":"9:30",name:"pre"},{"date":"2013-11-29","open":"9:30","close":"13:00"},{"date":"2013-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2013-12-24","open":"9:30","close":"13:00"},{"date":"2012-01-16"},{"date":"2012-02-20"},{"date":"2012-04-06"},{"date":"2012-05-28"},{"date":"2012-09-03"},{"date":"2012-10-29"},{"date":"2012-10-30"},{"date":"2012-11-22"},{"date":"2012-07-03","open":"4:00","close":"9:30",name:"pre"},{"date":"2012-07-03","open":"9:30","close":"13:00"},{"date":"2012-11-23","open":"4:00","close":"9:30",name:"pre"},{"date":"2012-11-23","open":"9:30","close":"13:00"},{"date":"2012-12-24","open":"4:00","close":"9:30",name:"pre"},{"date":"2012-12-24","open":"9:30","close":"13:00"}]};CIQ.Market.LSE={"name":"London","market_tz":"Europe/London","hour_aligned":false,"rules":[//First open up the regular trading times
//Note that sat and sun (in this example) are always closed because
//everything is closed by default and we didn't explicitly open
//them.
{"dayofweek":1,"open":"08:00","close":"17:00"},//mon
{"dayofweek":2,"open":"08:00","close":"17:00"},{"dayofweek":3,"open":"08:00","close":"17:00"},{"dayofweek":4,"open":"08:00","close":"17:00"},{"dayofweek":5,"open":"08:00","close":"17:00"},//fri
//Now mon thru friday is open. Close any exceptions
//always closed on Christmas and boxing day
{"date":"*-12-25","open":"00:00","close":"00:00"},{"date":"*-12-26","open":"00:00","close":"00:00"},//always close on new years day
{"date":"*-01-01","open":"00:00","close":"00:00"},//Some holidays are observed on different days each year or if
//the day falls on a weekend. Each of those rules must be specified.
{"date":"2012-01-02","open":"00:00","close":"00:00"},//As a special case if no open and close attributes are set they
//will be assumed "00:00" and "00:00" respectively
{"date":"2019-04-19"},{"date":"2019-04-22"},{"date":"2019-05-06"},{"date":"2019-05-27"},{"date":"2019-08-26"},{"date":"2019-12-24","open":"8:00","close":"12:30"},{"date":"2018-03-30"},{"date":"2018-04-02"},{"date":"2018-05-07"},{"date":"2018-05-28"},{"date":"2018-08-27"},{"date":"2018-12-24","open":"8:00","close":"12:30"},{"date":"2018-12-31","open":"8:00","close":"12:30"},{"date":"2017-01-02"},{"date":"2017-04-14"},{"date":"2017-04-17"},{"date":"2017-05-01"},{"date":"2017-05-29"},{"date":"2017-08-28"},{"date":"2017-12-22","open":"8:00","close":"12:30"},{"date":"2017-12-29","open":"8:00","close":"12:30"},{"date":"2016-03-25"},{"date":"2016-03-28"},{"date":"2016-05-02"},{"date":"2016-05-30"},{"date":"2016-08-29"},{"date":"2016-12-23","open":"8:00","close":"12:30"},{"date":"2016-12-27"},{"date":"2016-12-30","open":"8:00","close":"12:30"},{"date":"2015-04-03"},{"date":"2015-04-06"},{"date":"2015-05-04"},{"date":"2015-05-25"},{"date":"2015-08-31"},{"date":"2015-12-24","open":"8:00","close":"12:30"},{"date":"2015-12-28"},{"date":"2015-12-31","open":"8:00","close":"12:30"},{"date":"2014-04-18"},{"date":"2014-04-21"},{"date":"2014-05-05"},{"date":"2014-05-26"},{"date":"2014-08-25"},{"date":"2014-12-24","open":"8:00","close":"12:30"},{"date":"2014-12-31","open":"8:00","close":"12:30"},{"date":"2013-03-29"},{"date":"2013-04-01"},{"date":"2013-05-06"},{"date":"2013-05-27"},{"date":"2013-08-26"},{"date":"2013-12-24","open":"8:00","close":"12:30"},{"date":"2013-12-31","open":"8:00","close":"12:30"},{"date":"2012-01-02"},{"date":"2012-04-06"},{"date":"2012-04-09"},{"date":"2012-05-07"},{"date":"2012-06-04"},{"date":"2012-06-05"},{"date":"2012-08-27"},{"date":"2012-12-24","open":"8:00","close":"12:30"},{"date":"2012-12-31","open":"8:00","close":"12:30"}]};/**
	 * Set of rules for identifying instrument's exchange and deriving a market definition from a symbol.
	 * This is only required if your chart will need to know the operating hours for the different exchanges.
	 * If using a 24x7 chart, this class is not needed.
	 *
	 * **Before using, please review and override every {@link CIQ.Market.Symbology} function to match the symbol format of your quote Feed or results will be unpredictable. **
	 *
	 * @namespace
	 * @name  CIQ.Market.Symbology
	 * @since 04-2016-08
	 */CIQ.Market.Symbology=function(){};/**
	 * Returns true if the instrument is foreign.
	 * 
	 * **This is dependent on the market data feed and should be overridden accordingly.**
	 * 
	 * Currently if the instrument contains a period (.) it will be considered foreign (non US). (e.g. .XXXX)
	 * @param  {string}  symbol The symbol
	 * @return {boolean}        True if it's a foreign symbol
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * CIQ.Market.Symbology.isForeignSymbol=function(symbol){
	 *	if(!symbol) return false;
	 *	return symbol.indexOf(".")!=-1;
	 * };
	 */CIQ.Market.Symbology.isForeignSymbol=function(symbol){if(!symbol)return false;return symbol.indexOf(".")!=-1;};/**
	 * Returns true if the instrument is a futures.
	 * 
	 * **This is dependent on the market data feed and should be overridden accordingly.**
	 * 
	 * Currently if the symbol begins with `/` it will be considered a future. (e.g. /C)
	 * @param  {string}  symbol The symbol
	 * @return {boolean}        True if it's a futures symbol
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * CIQ.Market.Symbology.isFuturesSymbol=function(symbol){
	 *	if(!symbol) return false;
	 *	if(symbol.indexOf("/")!==0 || symbol=="/") return false;
	 *	return true;
	 * };
	 */CIQ.Market.Symbology.isFuturesSymbol=function(symbol){if(!symbol)return false;if(symbol.indexOf("/")!==0||symbol=="/")return false;return true;};/**
	 * Returns true if the instrument is a forex symbol.
	 * 
	 * **This is dependent on the market data feed and should be overridden accordingly.**
	 * 
	 * Currently if the symbol begins with `^` and is followed by 6 alpha characters, or just 6 alpha characters long without a '^', it will be considered forex.(e.g. ^EURUSD)
	 * @param  {string}  symbol The symbol
	 * @return {boolean}        True if it's a forex symbol
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * CIQ.Market.Symbology.isForexSymbol=function(symbol){
	 *	if(!symbol) return false;
	 *  if(CIQ.Market.Symbology.isForeignSymbol(symbol)) return false;
	 *  if(CIQ.Market.Symbology.isFuturesSymbol(symbol)) return false;
	 *	if(symbol.length<6 || symbol.length>7) return false;
	 *	if(symbol.length==6 && symbol[5]=="X") return false;
	 *	if(/\^?[A-Za-z]{6}/.test(symbol)) return true;
	 *	return false;
	 * };
	 */CIQ.Market.Symbology.isForexSymbol=function(symbol){if(!symbol)return false;if(CIQ.Market.Symbology.isForeignSymbol(symbol))return false;if(CIQ.Market.Symbology.isFuturesSymbol(symbol))return false;if(symbol.length<6||symbol.length>7)return false;if(symbol.length==6&&symbol[5]=="X")return false;if(/\^?[A-Za-z]{6}/.test(symbol))return true;return false;};/**
	 * Returns true if the symbol is a metal/currency or currency/metal pair
	 * 
	 * **This is dependent on the market data feed and should be overridden accordingly.**
	 * 
	 * Currently it must be a [forex]{@link CIQ.Market.Symbology.isForexSymbol} for a precious metal. (e.g. ^XAUUSD - looks for XAU,XPD,XPT,XAG only)
	 * @param  {string}   symbol The symbol
	 * @param  {boolean}  inverse Set to true to test specifically for a currency/metal pair.
	 * @return {boolean}  True if it's a metal symbol
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * CIQ.Market.Symbology.isForexMetal=function(symbol,inverse){
	 *	if(!symbol) return false;
	 *	if(!CIQ.Market.Symbology.isForexSymbol(symbol)) return false;
	 *	if(symbol.charAt(0)!="^") symbol="^"+symbol;
	 *	if(",XAU,XPD,XPT,XAG,".indexOf(","+symbol.substr(4,3)+",")!=-1) return true;
	 *	else if(!inverse && ",XAU,XPD,XPT,XAG,".indexOf(","+symbol.substr(1,3)+",")!=-1) return true;
	 *	return false;
	 * };
	 */CIQ.Market.Symbology.isForexMetal=function(symbol,inverse){if(!symbol)return false;if(!CIQ.Market.Symbology.isForexSymbol(symbol))return false;if(symbol.charAt(0)!="^")symbol="^"+symbol;if(",XAU,XPD,XPT,XAG,".indexOf(","+symbol.substr(4,3)+",")!=-1)return true;else if(!inverse&&",XAU,XPD,XPT,XAG,".indexOf(","+symbol.substr(1,3)+",")!=-1)return true;return false;};/**
	 * Returns true if the symbol is a forex or a future
	 * 
	 * **This is dependent on the market data feed and should be overridden accordingly.**
	 * 
	 * @param  {string} symbol The symbol
	 * @return {boolean} True if the symbol is a forex or a future
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * CIQ.Market.Symbology.isForexFuturesSymbol=function(symbol){
	 *	if(CIQ.Market.Symbology.isForexSymbol(symbol)) return true;
	 *	if(CIQ.Market.Symbology.isFuturesSymbol(symbol)) return true;
	 *	return false;
	 * };
	 */CIQ.Market.Symbology.isForexFuturesSymbol=function(symbol){if(CIQ.Market.Symbology.isForexSymbol(symbol))return true;if(CIQ.Market.Symbology.isFuturesSymbol(symbol))return true;return false;};/**
	 * This is a function that takes a symbolObject of form accepted by {@link CIQ.ChartEngine#newChart}, and returns a market definition.
	 * When loading it with {@link CIQ.ChartEngine#setMarketFactory}, it will be used by the chart to dynamically change market definitions when a new instrument is activated.
	 * 
	 * ** Very important:**<br>
	 * This default implementation leverages the use of the {@link CIQ.Market.Symbology} checks (isForeignSymbol, isForexFuturesSymbol, isForexMetal, isForexSymbol, isFuturesSymbol), 
	 * which are used to determine the market for the symbol being loaded. 
	 * As such it is crucial you review and override every {@link CIQ.Market.Symbology} function to match the symbol format of your quote Feed or results will be unpredictable. 
	 * 
	 * See {@link CIQ.Market} for instruction on how to create a market definition.
	 * @param  {object} symbolObject Symbol object of form accepted by {@link CIQ.ChartEngine#newChart}
	 * @return {object} A market definition. See {@link CIQ.Market} for instructions.
	 * @memberof CIQ.Market.Symbology
	 * @since 04-2016-08
	 * @example
	 * // default implementation
	 * var factory=function(symbolObject){
	 * 	var symbol=symbolObject.symbol;
	 *	if(CIQ.Market.Symbology.isForeignSymbol(symbol)) return null; // 24 hour market definition
	 *	if(CIQ.Market.Symbology.isFuturesSymbol(symbol)) return CIQ.Market.GLOBEX;
	 *	if(CIQ.Market.Symbology.isForexMetal(symbol)) return CIQ.Market.METALS;
	 *	if(CIQ.Market.Symbology.isForexSymbol(symbol)) return CIQ.Market.FOREX;
	 *	return CIQ.Market.NYSE;
	 * };
	 */CIQ.Market.Symbology.factory=function(symbolObject){var symbol=symbolObject.symbol;if(CIQ.Market.Symbology.isForeignSymbol(symbol))return null;// 24 hour market definition
if(CIQ.Market.Symbology.isFuturesSymbol(symbol))return CIQ.Market.GLOBEX;if(CIQ.Market.Symbology.isForexMetal(symbol))return CIQ.Market.METALS;if(CIQ.Market.Symbology.isForexSymbol(symbol))return CIQ.Market.FOREX;return CIQ.Market.NYSE;};/**
	 * Returns an array of objects containing a list of sessions and wether or not they are enabled
	 * 
	 * @return {object} String array of market session names, and corresponding status (e.g. [{ name: 'pre', enabled: false } { name: 'post', enabled: true }])
	 * @since 6.0.0
	 */CIQ.Market.prototype.getSessionNames=function(){if(!this.rules){//Its a safe assumption this is a 24 hour chart, and that it has no sessions
this.sessions=[];}else if(!this.sessions){var names=[];var marketSessions=[];this.rules.map(function(rule){if(rule.name&&names.indexOf(rule.name)===-1){names.push(rule.name);marketSessions.push({name:rule.name,enabled:rule.enabled?rule.enabled:false});}});this.sessions=marketSessions;}return this.sessions.slice();};/**
	 * Primitive to find the next matching time segment taking into account rules for adjacent sessions.
	 * If the date lands exactly on the open or close time for a session, then it will still seek to the next market session.
	 * @param {date} date A start date time in the market_tz timezone.
	 * @param {boolean} open True if looking for an open time
	 * @return {date} A date in the market_tz timezone that falls somewhere in a matching time segment. Probably 1 before close. Or null if no rules are defined
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 * @private
	 */CIQ.Market.prototype._find_next_segment=function(date,open){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=new Date(+date);var iter=this.newIterator({'begin':d,'interval':1,'inZone':this.market_tz,'outZone':this.market_tz});if(this._wasOpenIntraDay(d)){var hours=this.zseg_match.close_parts.hours;var minutes=this.zseg_match.close_parts.minutes;d.setHours(hours);d.setMinutes(minutes);iter=this.newIterator({'begin':d,'interval':1,'inZone':this.market_tz,'outZone':this.market_tz});}return iter.next();};/**
	 * Primitive to find the previous matching time segment taking into account rules for adjacent sessions.
	 * If the date lands exactly on the open or close time for a session, then it will still seek to the previous market session.
	 * @param {date} date A start date time in the market_tz timezone.
	 * @param {boolean} open True if looking for an open time
	 * @return {date} A date in the market_tz timezone that falls somewhere in a matching time segment. Probably 1 before close. Or null of no rules are defined.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 * @private
	 */CIQ.Market.prototype._find_prev_segment=function(date,open){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=new Date(+date);var iter=this.newIterator({'begin':d,'interval':1,'inZone':this.market_tz,'outZone':this.market_tz});var wasOpenIntraDay=this._wasOpenIntraDay(d);// adjust edge cases to force a previous instance
// if we are at the exact open or close time, go back one tick to force a previous session
if(wasOpenIntraDay===null){// move back one minute... not in the market clock.
d=new Date(d-60000);// then see if there was a session a minute ago... if so, then we were at the exact open or close time
wasOpenIntraDay=this._wasOpenIntraDay(d);}else{if(open&&d.getHours()===this.zseg_match.open_parts.hours&&d.getMinutes()===this.zseg_match.open_parts.minutes||!open&&d.getHours()===this.zseg_match.close_parts.hours&&d.getMinutes()===this.zseg_match.close_parts.minutes){d=iter.previous();}}if(wasOpenIntraDay){var hours=this.zseg_match.open_parts.hours;var minutes=this.zseg_match.open_parts.minutes;d.setHours(hours);d.setMinutes(minutes);iter=this.newIterator({'begin':d,'interval':1,'inZone':this.market_tz,'outZone':this.market_tz});d=iter.previous();if(this.zseg_match.close_parts.hours===hours){if(this.zseg_match.close_parts.minutes===minutes){// segments are adjacent use the previous
if(open){return iter.next();}return d;}}if(this.zseg_match.adjacent_child){// segments are adjacent use the previous
return d;}if(open){// segments are not adjacent go back
return iter.next();}return d;}return iter.previous();};/**
	 * Toggle on/off a market session by name.
	 * 
	 * - **Important:** Enabling/Disabling market sessions will not automatically filter-out data from the chart, but simply adjust the market iterators so the x-axis can be displayed accordingly in the absence of data for the excluded sessions.
	 * - Data filtering can be done: 
	 *   - Manually by requesting pertinent data from your feed and calling {@link CIQ.ChartEngine#newChart}
	 *   - Automatically by using the {@link CIQ.ExtendedHours} visualization and filtering add-on.
	 * 
	 * @param {string} session_name A session name matching a valid name present in the market definition.
	 * @param {object} [inverted] Any true value (`true`, non-zero value or string) passed here will enable the session, otherwise the session will be disabled.
	 * @memberof CIQ.Market
	 * @since  06-2016-02
	 */CIQ.Market.prototype.disableSession=function(session_name,inverted){var inverted_=false;if(typeof inverted!=='undefined'&&inverted){inverted_=true;}if(session_name){for(var i=0;i<this.normalHours.length;i++){if(this.normalHours[i].name===session_name){this.normalHours[i].enabled=inverted_;}}for(i=0;i<this.extraHours.length;i++){if(this.extraHours[i].name===session_name){this.extraHours[i].enabled=inverted_;}}}};/**
	 * Enable a market session by name. See {@link CIQ.Market#disableSession} for full usage details.
	 * @param {string} session_name A session name
	 * @memberof CIQ.Market
	 * @since  06-2016-02
	 */CIQ.Market.prototype.enableSession=function(session_name){this.disableSession(session_name,'enable_instead');};/**
	 * Parses the market definition for a list of market names, and enables each one-by-one, see {@link CIQ.Market#enableSession} and {@link CIQ.Market#disableSession}.
	 *  - **Important:** Enabling/Disabling market sessions will not automatically filter-out data from the chart, but simply adjust the market iterators so the x-axis can be displayed accordingly in the absence of data for the excluded sessions.
	 * @memberof CIQ.Market
	 * @since 6.0.0
	 */CIQ.Market.prototype.enableAllAvailableSessions=function(){var marketSessions=this.getSessionNames();for(var i=0;i<marketSessions.length;i++){this.enableSession(marketSessions[i].name);}};/**
	 * Get the close date/time for the trading day or specific session.
	 * @param {date} [date=now] date The date on which to check.
	 * @param {string} [session_name] Specific market session. If `session_name` is not passed in, the first close time of the day will be returned,
	 * depending on the sessions that are enabled.  If a session name is passed in, then not only does the market session
	 * need to be open on the day of `date`, but also within the time of the specified session.  Otherwise, null will be returned.
	 * Pass in "" to specify only the default session when other session are also active.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} Close date/time for the trading session or null if the market is
	 * closed for the given date.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getClose=function(date,session_name,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);if(typeof session_name!=='undefined'){if(this._wasOpenIntraDay(d)){if(this.zseg_match.name===session_name){d.setHours(this.zseg_match.close_parts.hours,this.zseg_match.close_parts.minutes,0,0);d=this._convertFromMarketTZ(d,outZone);return d;}}}else{if(this._wasOpenDaily(d)){var zseg_match=this.zseg_match;//find the last session of the day
while(zseg_match.child_){zseg_match=zseg_match.child_;}//find the last enabled session ... maybe back where we started
while(!zseg_match.enabled){zseg_match=zseg_match.parent_;}d.setHours(zseg_match.close_parts.hours,zseg_match.close_parts.minutes,0,0);d=this._convertFromMarketTZ(d,outZone);return d;}}return null;};/**
	 * Get the close time for the current market session, or if the market is closed, the close time for the next market session.
	 * @param {date} [date=now] date The date on which to check.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} A date set to the close time of the next open market session.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getNextClose=function(date,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);if(!this._wasOpenIntraDay(d)){var iter=this.newIterator({'begin':d,'interval':1,'inZone':this.market_tz,'outZone':this.market_tz});d=iter.next();}var date_=d.getDate();var zseg_match=this.zseg_match;while(zseg_match.adjacent_child){zseg_match=zseg_match.adjacent_child;date_+=1;}d.setDate(date_);d.setHours(zseg_match.close_parts.hours,zseg_match.close_parts.minutes,0,0);d=this._convertFromMarketTZ(d,outZone);return d;};/**
	 * Get the next market session open time. If the requested date is the opening time for the session, then
	 * it will iterate to opening time for the next market session.
	 * @param {date} [date=now] date An The date on which to check.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} A date aligned to the open time of the next open session. If no rules are defined, it will return null.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getNextOpen=function(date,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);d=this._find_next_segment(d);if(this.zseg_match.adjacent_parent){d=this.getNextOpen(d,this.market_tz,this.market_tz);d=this._convertFromMarketTZ(d,outZone);return d;}d.setHours(this.zseg_match.open_parts.hours);d.setMinutes(this.zseg_match.open_parts.minutes);d=this._convertFromMarketTZ(d,outZone);return d;};/**
	 * Get the open date/time for a market day or specific session.
	 * @param {date} [date=now] date The date on which to check.
	 * @param {string} [session_name] Specific market session. If `session_name` is not passed in, the first open time of the day will be returned,
	 * depending on the sessions that are enabled.  If a session name is passed in, then not only does the market session
	 * need to be open on the day of `date`, but also within the time of the specified session.  Otherwise, null will be returned.  Pass in "" to
	 * specify only the default session when other session are also active.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} A date time for the open of a session or null if the market is
	 * closed for the given date or there are no market rules to check.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getOpen=function(date,session_name,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);if(typeof session_name!=='undefined'){if(this._wasOpenIntraDay(d)){if(this.zseg_match.name==session_name){d.setHours(this.zseg_match.open_parts.hours,this.zseg_match.open_parts.minutes,0,0);d=this._convertFromMarketTZ(d,outZone);return d;}}}else{if(this._wasOpenDaily(d)){var zseg_match=this.zseg_match;//find all of the parents if any
while(zseg_match.parent_){zseg_match=zseg_match.parent_;}//find the first enabled child ... might end up back where we started
while(!zseg_match.enabled){zseg_match=zseg_match.child_;}d.setHours(zseg_match.open_parts.hours,zseg_match.open_parts.minutes,0,0);d=this._convertFromMarketTZ(d,outZone);return d;}}return null;};/**
	 * Get the previous session close time.
	 * If the date lands exactly on the close time for a session then it will still seek to the previous market session's close.
	 * @param {date} [date=now] date The date on which to check.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} A date aligned to the previous close date/time of a session. If no rules are defined, it will return null.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getPreviousClose=function(date,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);d=this._find_prev_segment(d,false);if(this.zseg_match.adjacent_child){return this.getPreviousClose(d,this.market_tz,this.market_tz);}d.setHours(this.zseg_match.close_parts.hours);d.setMinutes(this.zseg_match.close_parts.minutes);d=this._convertFromMarketTZ(d,outZone);return d;};/**
	 * Get the previous session open time. If the date lands exactly on the open time for a session then
	 * it will still seek to the previous market session's open.
	 * @param {date} [date=now] date An The date on which to check.
	 * @param {string} [inZone] Optional datazone to translate from - If no market zone is present it will assume browser time.
	 * @param {string} [outZone] Optional datazone to translate to - If no market zone is present it will assume browser time.
	 * @return {date} A date aligned to previous open date/time of a session. If no rules are defined, it will return null.
	 * @memberof CIQ.Market
	 * @since  05-2016-10
	 */CIQ.Market.prototype.getPreviousOpen=function(date,inZone,outZone){if(!this.market_def)return null;// special case
if(!this.rules)return null;//special case
var d=date;if(!date){d=new Date();inZone=null;// if they don't send the date we set one up in browser time, so need to remove the inZone
}d=this._convertToMarketTZ(d,inZone);d=this._find_prev_segment(d,true);if(this.zseg_match.adjacent_parent){return this.getPreviousOpen(d,this.market_tz,this.market_tz);}d.setHours(this.zseg_match.open_parts.hours);d.setMinutes(this.zseg_match.open_parts.minutes);d=this._convertFromMarketTZ(d,outZone);return d;};/**
	 * Return the session name for a date. If the name is defined and if the date
	 * lands in a session that is open. Otherwise return null.
	 * @param {date} date A date object
	 * @param {string} [inZone] Timezone of incoming date - If no market zone is present it will assume browser time.
	 * @return {object} String or null
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype.getSession=function(date,inZone){date=this._convertToMarketTZ(date,inZone);if(this._wasOpenIntraDay(date)&&this.zseg_match){return this.zseg_match.name;}return null;};/**
	 * @return {date} Current time in the market zone
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 */CIQ.Market.prototype.marketZoneNow=function(){return this._convertToMarketTZ(new Date());};/**
	 * @return {boolean} `true` if this market is hour aligned.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 */CIQ.Market.prototype.isHourAligned=function(){return this.hour_aligned;};/**
	 * Checks if the market is currently open.
	 * @return {object} An object with the open market session's details, if the market is open right now. Or `null` if no sessions are currently open.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 */CIQ.Market.prototype.isOpen=function(){var now=new Date();if(this.market_tz){now=new this.tz_lib(now.getTime(),this.market_tz);}return this._wasOpenIntraDay(now);};/**
	 * Checks if today it is a market day.
	 * @return {object} An object with the open market session's details, if it is a market day. Or `null` if it is not a market day.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 */CIQ.Market.prototype.isMarketDay=function(){var now=new Date();if(this.market_tz){now=new this.tz_lib(now.getTime(),this.market_tz);}return this._wasOpenDaily(now);};/**
	 * Checks if a supplied date is a market day.  Only the date is examined; hours, minutes, seconds are ignored
	 * @param {date} date A date
	 * @return {object} An object with the open market session's details, if it is a market day. Or `null` if it is not a market day.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 */CIQ.Market.prototype.isMarketDate=function(date){return this._wasOpenDaily(date);};/**
	 * Creates iterators for the associated Market to traverse through time taking into account market hours.
	 * An iterator instance can go forward or backward in time any arbitrary amount.
	 * However, the internal state cannot be changed once it is constructed. A new iterator should be
	 * constructed whenever one of the parameters changes. For example, if the
	 * `interval` changes a new iterator will need to be built. If the `displayZone`
	 * or `dataZone` changes on the market, new iterators will also need to be
	 * constructed.
	 *
	 * See {@link CIQ.Market.Iterator} for all available methods.
	 *
	 * See the following convenience functions: {@link CIQ.ChartEngine#getNextInterval} and  {@link CIQ.ChartEngine#standardMarketIterator}
	 *
	 * @param {object} parms Parameters used to initialize the Market object.
	 * @param {string} [parms.interval] A valid interval as required by {@link CIQ.ChartEngine#setPeriodicity}. Default is 1 (minute).
	 * @param {number} [parms.periodicity] A valid periodicity as required by {@link CIQ.ChartEngine#setPeriodicity}. Default is 1.
	 * @param {string} [parms.timeUnit] A valid timeUnit as required by {@link CIQ.ChartEngine#setPeriodicity}. Default is "minute"
	 * @param {date} [parms.begin] The date to set as the start date for this iterator instance. Default is `now`. Will be assumed to be `inZone` if one set.
	 * @param {string} [parms.inZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for any input dates such as `parms.begin` in this function or `parms.end` in {@link CIQ.Market.Iterator#futureTick}. Defaults to browser timezone if none set.  - If no market zone is present it will assume browser time.
	 * @param {string} [parms.outZone] A valid timezone from the timeZoneData.js library. This should represent the time zone for the returned dates. Defaults to browser timezone if none set.  - If no market zone is present it will assume browser time.
	 * @return {object} A new iterator.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 * @example
	    var iter = stxx.market.newIterator(
				{
					'begin': now,
	                'interval': stxx.layout.interval,
	                'periodicity': stxx.layout.periodicity,
	                'timeUnit': stxx.layout.timeUnit,
	                'inZone': stxx.dataZone,
	                'outZone': stxx.displayZone
				}
		);
	 */CIQ.Market.prototype.newIterator=function(parms){var _multiple=false;if(parms.periodicity){_multiple=parms.periodicity;}else if(parms.multiple){_multiple=parms.multiple;}var _interval=parms.interval;if(!_interval){_interval="minute";}if(_interval=="hour")_interval=60;if(!_multiple){_multiple=1;}if(!parms.begin){parms.begin=new Date();parms.inZone=null;}if(_interval==parseInt(_interval,10)){_interval=parseInt(_interval,10);// in case it was a string, which is allowed in setPeriodicity.
// if the periodicity<1 then the x-axis might be in seconds (<1/60, msec)
if(parms.periodicity<1/60){_multiple=_multiple*_interval*60000;_interval='millisecond';}else if(parms.periodicity<1){_multiple=_multiple*_interval*60;_interval='second';}else{_multiple=_multiple*_interval;_interval='minute';}}if(parms.timeUnit){if(parms.timeUnit==="millisecond"){_interval=parms.timeUnit;}else if(parms.timeUnit==="second"){_interval=parms.timeUnit;}else if(parms.timeUnit==="tick"){_interval="second";}}if(_interval=="tick")_interval="second";parms.interval=_interval;parms.multiple=_multiple;parms.market=this;return new CIQ.Market.Iterator(parms);};/**
	 * Calculate whether this market was open on some date. This will depend on
	 * the data used when creating this market. This function does not take into
	 * account intraday data. It simply checks the date to see if the market was
	 * open at all on that day. Hours, minutes, seconds are ignored.
	 * @param {date} historical_date Javascript date object with timezone in the market time zone.
	 * @return {boolean} true if the market was open.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 * @private
	 */CIQ.Market.prototype._wasOpenDaily=function(historical_date){return this._was_open(historical_date,false);};/**
	 * Calculate whether this market was open on some date. This will depend on
	 * The data used when creating this market. This function will take into
	 * account intraday date that is minutes and seconds. Not only does a market
	 * need to be open on the day in question but also within the time specified.
	 * @param {date} historical_date Javascript date object with timezone in the market time zone.
	 * @return {boolean} true if the market was open.
	 * @memberof CIQ.Market
	 * @since 04-2016-08
	 * @private
	 */CIQ.Market.prototype._wasOpenIntraDay=function(historical_date){return this._was_open(historical_date,true);};/**
	 * Given some javascript date object calculate whether this market was open.
	 * Use _wasOpenDaily or _wasOpenIntraDay instead. As a special case if
	 * no market json has been defined this function will always return true.
	 * @param {date} historical a valid Javascript date object with timezone in the market time zone.
	 * @param {boolean} intra_day true if intraday (will check between open and close times)
	 * @return {object} matching segment if any, or null if not
	 * @private
	 */CIQ.Market.prototype._was_open=function(historical,intra_day){this.zopen_hour=0;this.zopen_minute=0;this.zclose_hour=0;this.zclose_minute=0;this.zmatch_open=false;this.zseg_match=null;if(!this.market_def||!this.rules){// special case, 24h security
this.zclose_hour=24;return true;}var normally_open=false;var extra_open=false;var year=historical.getFullYear();var month=historical.getMonth()+1;var day=historical.getDay();var date=historical.getDate();var hour=historical.getHours();var minutes=historical.getMinutes();var seconds=historical.getSeconds();var segment;var midnight_secs=hour*60*60+minutes*60+seconds;if(typeof intra_day==='undefined'){intra_day=true;}var i;for(i=0;i<this.normalHours.length;i++){segment=this.normalHours[i];if(!segment.enabled){continue;}normally_open=segment.dayofweek===day;if(normally_open&&intra_day){normally_open=midnight_secs>=segment.open&&midnight_secs<segment.close;}if(normally_open){if(!intra_day&&this.zseg_match){if(segment.open_parts.hours>this.zopen_hour||segment.open_parts.hours==this.zopen_hour&&segment.open_parts.minutes>this.zopen_minute){continue;}}this.zopen_hour=segment.open_parts.hours;this.zopen_minute=segment.open_parts.minutes;this.zclose_hour=segment.close_parts.hours;this.zclose_minute=segment.close_parts.minutes;this.zmatch_open=midnight_secs===segment.open;this.zseg_match=segment;if(intra_day)break;}}for(i=0;i<this.extraHours.length;i++){segment=this.extraHours[i];if(!segment.enabled){continue;}if('*'===segment.year||year===segment.year){if(month===segment.month&&date===segment.day){extra_open=!intra_day&&segment.open||midnight_secs>=segment.open&&midnight_secs<segment.close;if(!extra_open&&this.zseg_match){normally_open=false;this.zopen_hour=0;this.zopen_minute=0;this.zclose_hour=0;this.zclose_minute=0;this.zmatch_open=false;this.zseg_match=null;}if(extra_open){if(!intra_day&&this.zseg_match){if(segment.open_parts.hours>this.zopen_hour||segment.open_parts.hours==this.zopen_hour&&segment.open_parts.minutes>this.zopen_minute){continue;}}this.zopen_hour=segment.open_parts.hours;this.zopen_minute=segment.open_parts.minutes;this.zclose_hour=segment.close_parts.hours;this.zclose_minute=segment.close_parts.minutes;this.zmatch_open=midnight_secs===segment.open;this.zseg_match=segment;if(intra_day)break;}}}}return this.zseg_match;};/**
	 * Convenience function for unit testing.
	 * @param {date} testDate A date
	 * @return {boolean} True if the market was closed on the given date
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype._wasClosed=function(testDate){return!this._was_open(testDate,true);};/**
	 * Convenience function for unit testing.
	 * @param {date} testDate A date
	 * @return {boolean} True if the market was open on the given date
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype._wasOpen=function(testDate){return this._was_open(testDate,true);};/**
	 * Get the difference in milliseconds between two time zones. May be positive or
	 * negative depending on the time zones. The purpose is to shift the source
	 * time zone some number of milliseconds to the target timezone. For example shifting
	 * a data feed from UTC to Eastern time. Or shifting Eastern time to Mountain
	 * time for display purposes. Note that it is important to pass the source
	 * and the target in the correct order. The algorithm does source - target. This
	 * will calculate the correct offset positive or negative.
	 * @param {date} date A date object. Could be any date object the javascript one
	 * or for example the timezone.js one. Must implement getTime() and
	 * getTimezoneOffset()
	 * @param {string} src_tz_str The source time zone. For example the data feed
	 * @param {string} target_tz_str The target time zone for example the market.
	 * @return {number} The number of milliseconds difference between the time
	 * zones.
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype._tzDifferenceMillis=function(date,src_tz_str,target_tz_str){var millis=0;var src_date=date;var target_date=date;var minutes=src_date.getTimezoneOffset()-target_date.getTimezoneOffset();millis=minutes*60*1000;return millis;};/**
	 * Static function that reads the json rules in the market definition and
	 * creates in memory time segments that are used later to match market dates.
	 * @param {object} market An instance of a market.
	 * @memberOf  CIQ.Market
	 */CIQ.Market._createTimeSegments=function(market){var link_adjacent=function link_adjacent(r0_,r1_){if(r0_.close_parts.hours===24&&r1_.open_parts.hours===0){if(r1_.open_parts.minutes===0){if(p_rule.dayofweek===rd.dayofweek-1){return true;}if(p_rule.dayofweek===6&&rd.dayofweek===0){return true;}}}return false;};var p_rule;for(var i=0;i<market.rules.length;i++){var rule=JSON.parse(JSON.stringify(market.rules[i]));if(typeof rule.open==='undefined'&&typeof rule.close==='undefined'){rule.open='00:00';rule.close='00:00';}if(!rule.hasOwnProperty('name')){rule.name="";}try{var rd;if(typeof rule.dayofweek!=='undefined'){rule.year="*";rd=_TimeSegmentS._createDayOfWeekSegment(market,rule);if(p_rule){if(p_rule.dayofweek===rd.dayofweek){//These links are used for finding open and close times
//On the same day in multiple sessions
p_rule.child_=rd;rd.parent_=p_rule;}else{if(link_adjacent(p_rule,rd)){//These links are used for finding open and close
//times for sessions that span days
p_rule.adjacent_child=rd;rd.adjacent_parent=p_rule;}}}p_rule=rd;}else if(typeof rule.date!=='undefined'){rule.isDayOfWeek=false;rule.dayofweek=-1;rd=_TimeSegmentS._createDateTimeSegment(market,rule);}else{console.log('Error, unknown rule type '+rule);}if(market.enabled_by_default){for(var x=0;x<market.enabled_by_default.length;x++){var n=market.enabled_by_default[x];if(rd.name===n){rd.enabled=true;break;}}}else{//always enabled if no defaults are defined
//rd.enabled = true;
}}catch(err){console.log('Error, creating market rules '+err);}}};/**
	 * Internal static utility methods used to create market time segments.
	 * @private
	 */CIQ.Market._timeSegment={};var _TimeSegmentS=CIQ.Market._timeSegment;_TimeSegmentS.re_wild_card_iso=/^(\*)-(\d\d)-(\d\d)$/;_TimeSegmentS.re_regular_iso=/^(\d\d\d\d)-(\d\d)-(\d\d)$/;_TimeSegmentS.re_split_hours_minutes=/^(\d\d):(\d\d)$/;_TimeSegmentS.re_split_hour_minutes=/^(\d):(\d\d)$/;/**
	 * Create a hash code for a string. We may move this to 3rd party later if
	 * we find a wider need for it. This came from StackOverflow and claims to be
	 * the same implementation used by Java.
	 * @param {string} str A string.
	 * @return {number} A number suitable for
	 * @private
	 */_TimeSegmentS._hashCode=function(str){var hash=0,i,chr,len;if(str.length===0)return hash;for(i=0,len=str.length;i<len;i++){chr=str.charCodeAt(i);hash=(hash<<5)-hash+chr;hash|=0;// Convert to 32bit integer
}return hash;};/**
	 * Split the hours and minutes from a json time segment rule.
	 * @param {string} str \d\d:\d\d or \d:\d\d
	 * @return {object} {minutes:int, hours:int}
	 * @private
	 */_TimeSegmentS._splitHoursMinutes=function(str){var parts=_TimeSegmentS.re_split_hour_minutes.exec(str);var ret_val={'hours':NaN,'minutes':NaN};if(parts===null){parts=_TimeSegmentS.re_split_hours_minutes.exec(str);if(parts===null){return ret_val;}}ret_val.hours=parseInt(parts[1],10);ret_val.minutes=parseInt(parts[2],10);return ret_val;};/**
	 * Create a time segment for some day of the week. This creates a wildcard
	 * segment that matches the same weekday in any month and any year.
	 * @param {object} market The instance of this market
	 * @param {object} rule Represents the data from one rule in the JSON
	 * @return {object}
	 * configuration.
	 * @private
	 */_TimeSegmentS._createDayOfWeekSegment=function(market,rule){var data={'name':rule.name,'isDayOfWeek':true,'dayofweek':rule.dayofweek,'date_str':'*','open_parts':_TimeSegmentS._splitHoursMinutes(rule.open),'close_parts':_TimeSegmentS._splitHoursMinutes(rule.close),'open':_TimeSegmentS._secSinceMidnight(market,rule.open,true),'close':_TimeSegmentS._secSinceMidnight(market,rule.close,false),'child_':false,'parent_':false,'adjacent_child':false,'adjacent_parent':false,'enabled':false};if(data.name===""){data.enabled=true;}data.hash_code=this._hashCode((data.open+data.close).toString());market.normalHours.push(data);return data;};/**
	 * Create a time segment for a specific date and time. This can also create
	 * a wild card segment that matches any year with a specific day and specific
	 * month. For example *-12-25 to match all Christmas days. It can also build
	 * any specific year month day open close time that will only match that
	 * specific range.
	 * @param {object} market an instance of a market
	 * @param {object} rule a single rule from a market definition
	 * @return {object|undefined} Undefined if this function works on the market object.
	 * @private
	 */_TimeSegmentS._createDateTimeSegment=function(market,rule){var pieces=this.re_regular_iso.exec(rule.date);var year;if(pieces===null){pieces=this.re_wild_card_iso.exec(rule.date);if(pieces===null){console.log('Warning: invalid date format on rule -> '+rule.date);return;}year='*';//all years
}else{year=parseInt(pieces[1],10);}var data={'name':rule.name,'isDayOfWeek':false,'dayofweek':-1,'year':year,'month':parseInt(pieces[2],10),'day':parseInt(pieces[3],10),'date_str':rule.date,'open_parts':_TimeSegmentS._splitHoursMinutes(rule.open),'close_parts':_TimeSegmentS._splitHoursMinutes(rule.close),'open':_TimeSegmentS._secSinceMidnight(market,rule.open,true),'close':_TimeSegmentS._secSinceMidnight(market,rule.close,false),'enabled':false};if(data.name===""){data.enabled=true;}data.hash_key=this._hashCode(data.date_str+data.open+data.close);market.extraHours.push(data);return data;};/**
	 * Calculate the seconds since midnight for some time string. These time strings
	 * come from the market definition. These are intended to be open and close
	 * times.
	 * @param {object} market An instance of a market
	 * @param {string} time_str A time string like this "\d\d:\d\d"
	 * @param {boolean} open_time If true the time is used for opening a market
	 * @return {number} Seconds since midnight
	 * otherwise the time is used for closing a market. This is so that we can
	 * handle 00:00 and 24:00.
	 * @private
	 */_TimeSegmentS._secSinceMidnight=function(market,time_str,open_time){var parts=time_str.split(':');var hours=parseInt(parts[0],10);var minutes=parseInt(parts[1],10);var seconds=hours*60*60+minutes*60;if(!open_time){if(hours===24){seconds=hours*60*60+1;}}return seconds;};/**
	 * Converts from the given timezone into the market's native time zone
	 * If no market zone is present, the date will be returned unchanged.
	 * @param  {date} dt JavaScript Date
	 * @param  {string} [tz] timezoneJS timezone, or null to indicate browser localtime/UTC (dataZone)
	 * @return {date}    A JavaScript Date offset by the timezone change
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype._convertToMarketTZ=function(dt,tz){//if(!this.market_tz) return dt;
var tzdt;if(tz){tzdt=new this.tz_lib(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds(),tz);}else{tzdt=new this.tz_lib(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds());}if(tzdt.setTimezone)tzdt.setTimezone(this.market_tz);return new Date(tzdt.getFullYear(),tzdt.getMonth(),tzdt.getDate(),tzdt.getHours(),tzdt.getMinutes(),tzdt.getSeconds(),tzdt.getMilliseconds());};/**
	 * Converts to the given timezone from the market's native time zone.
	 * If no market zone is present, the date will be returned un changed.
	 * @param  {date} dt JavaScript Date
	 * @param  {string} [tz] timezoneJS timezone, or null to indicate browser localtime/UTC (displayZone)
	 * @return {date}    A JavaScript Date offset by the timezone change
	 * @memberOf  CIQ.Market
	 */CIQ.Market.prototype._convertFromMarketTZ=function(dt,tz){//if(!this.market_tz) return dt;
var tzdt=new this.tz_lib(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds(),this.market_tz);if(tz){if(tzdt.setTimezone)tzdt.setTimezone(tz);}else{return new Date(tzdt.getTime());}return new Date(tzdt.getFullYear(),tzdt.getMonth(),tzdt.getDate(),tzdt.getHours(),tzdt.getMinutes(),tzdt.getSeconds(),tzdt.getMilliseconds());};/**
	 * Builds an iterator instance and returns it to the requesting market when {@link CIQ.Market#newIterator} is called. Do not call this constructor directly.
	 *
	 * @name CIQ.Market.Iterator
	 * @param {object} parms
	 * @param {object} parms.begin A dataset element from {@link CIQ.Chart.dataSet}
	 * @param {CIQ.Market} parms.market An instane of {@link CIQ.Market}
	 * @param {object} parms.periodicity A valid periodicity as require by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param {string} parms.interval Time interval: millisecond, second, minute, hour, day, week, or month.
	 * @param {object} parms.multiple How many jumps to make on each interval loop.
	 * @param {string} parms.inZone Datazone to translate from
	 * @param {string} parms.outZone Datazone to translate to
	 * @constructor
	 * @since 04-2016-08
	 * @example
	    var market24=new CIQ.Market();
	    var iter_parms = {
	        'begin': stxx.chart.dataSet[stxx.chart.dataSet.length-1].DT,	// last item on the dataset
	        'interval': stxx.layout.interval,
	        'periodicity': stxx.layout.periodicity,
	        'timeUnit': stxx.layout.timeUnit,
	        'inZone': stxx.dataZone,
	        'outZone': stxx.dataZone
	    };
	    var iter = market24.newIterator(iter_parms);
	    var next = iter.next();
	 *
	 */CIQ.Market.Iterator=function(parms){this.market=parms.market;this.begin=parms.begin;this.interval=parms.interval;this.multiple=parms.multiple;this.inZone=parms.inZone;this.outZone=parms.outZone;this.clock=new CIQ.Market.Iterator._Clock(parms.market,parms.interval,parms.multiple);this.intraDay=this.clock.intra_day;if(this.intraDay)this.begin=this.market._convertToMarketTZ(this.begin,parms.inZone);this.clock._setStart(this.begin);this.clock.minutes_aligned=false;};/**
	 * Returns the current date of the iterator without moving forwards or backwards.
	 * Takes into account display zone settings.
	 * @return {date} The current date of the iterator.
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 * @example
	 * iteratorDate = iter.date();
	 */CIQ.Market.Iterator.prototype.date=function(){return this.clock._date();};/**
	 * Calculate the number of ticks from begin date to end date taking into account
	 * market open, close, and holidays.
	 * If the end date is older than the begin date,it will work backward into the past.
	 * If the end date is newer than the begin date,it will work forward into the future.
	 * Note that the begin date is set when this
	 * instance of the iterator is created and one should NOT call `previous` or `next`
	 * before calling this function, or the 'begin' pointer will change.
	 * @param {object} parms An object containing the following properties:
	 * @param {date} parms.end An end date. Will be assumed to be `inZone` if one set.
	 * @param {number} [parms.sample_size] Default is 25. Maximum amount of time
	 * (in milliseconds) taken to count ticks. If sample size is
	 * reached before the number of ticks is found the number of ticks will be
	 * estimated mathematically. The bigger the sample size couple with the
	 * distance between begin date and end date affect how precise the return value
	 * is.
	 * @param {number} [parms.sample_rate] Default is 1000. Maximum number of ticks to evaluate before checking `parms.sample_size`.
	 * @return {number} The number of ticks between begin and end.
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 * @example
	 * // find out how many ticks in the past a date is from the beginning of the dataSet
	 * // (assumes the target date is older than the first dataSet item)
	 *	var iter = this.standardMarketIterator(chart.dataSet[0].DT);
	 *	var ticks=iter.futureTick({someRandomDate});
	 */CIQ.Market.Iterator.prototype.futureTick=function(parms){this.clock.skip=1;var ticks=0;var end;if(this.intraDay)end=this.market._convertToMarketTZ(parms.end,this.inZone).getTime();else end=parms.end.getTime();var begin=this.clock.ctime;if(end===begin){return ticks;}var sample_size=2;//milliseconds // May not be necessary at all. Looks accurate whenever past 1,000 ticks into future
var sample_rate=1000;//iterations
var sample_ctr=0;if(parms.sample_size){sample_size=parms.sample_size;}var start=new Date().getTime();var now;var ave;if(end>begin){this.clock.forward=true;while(this.clock.ctime<end){ticks+=1;sample_ctr+=1;this.clock._findNext();if(sample_ctr===sample_rate){sample_ctr=0;now=new Date().getTime();if(now-start>=sample_size){ave=(this.clock.ctime-begin)/ticks;ticks=Math.floor((end-begin)/ave);break;}}}if(this.clock.ctime>end){// if not an exact match, we are one tick too far in the future by now. 
// Go back one to return the tick that contains this time in its range. Rather than the next tick.
ticks--;}}else{this.clock.forward=false;while(this.clock.ctime>end){ticks+=1;sample_ctr+=1;this.clock._findPrevious();if(sample_ctr===sample_rate){sample_ctr=0;now=new Date().getTime();if(now-start>=sample_size){ave=(begin-this.clock.ctime)/ticks;ticks=Math.floor((begin-end)/ave);break;}}}}return ticks;};/**
	 * Checks if market is aligned and if iterator is intraday (daily intervals always align)
	 * @return {boolean} true if this market is hour aligned.
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 */CIQ.Market.Iterator.prototype.isHourAligned=function(){return!this.intraDay||this.market.isHourAligned();};/**
	 * Check and see if this Market is open now.
	 * @return {object} An object with the open market session's details, if the market is open right now. Or `null` if no sessions are currently open.
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 */CIQ.Market.Iterator.prototype.isOpen=function(){return this.market.isOpen();};/**
	 * Move the iterator one interval forward
	 * @param {number} [skip] Default 1. Jump forward skip * periodicity at once.
	 * @return {date} Next date in iterator `outZone`.
	 * @alias next
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 * @example
	 * now = iter.next();
	 */CIQ.Market.Iterator.prototype.next=function(skip){this.clock.skip=1;if(skip){this.clock.skip=skip;}this.clock.forward=true;for(var i=0;i<this.clock.skip;i++){this.begin=this.clock._findNext();}if(this.intraDay||this.market.convertOnDaily){return this.market._convertFromMarketTZ(this.clock.display_date,this.outZone);}return this.clock.display_date;};/**
	 * Does not move the iterator. Takes into account display zone settings.
	 * Note. This is a convenience function for debugging or whatever else, but
	 * should not be called in the draw loop in production.
	 * @return {string} The current date of the iterator as a string.
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 * @private
	 */CIQ.Market.Iterator.prototype.peek=function(){return this.clock._peek();};/**
	 * Move the iterator one interval backward
	 * @param {number} skip Default is one. Move this many multiples of interval.
	 * @return {date} Previous date in iterator `outZone`.
	 * @alias previous
	 * @memberof CIQ.Market.Iterator
	 * @since 04-2016-08
	 * @example
	 * now = iter.previous();
	 */CIQ.Market.Iterator.prototype.previous=function(skip){this.clock.skip=1;if(skip){this.clock.skip=skip;}this.clock.forward=false;for(var i=0;i<this.clock.skip;i++){this.begin=this.clock._findPrevious();}if(this.intraDay||this.market.convertOnDaily){return this.market._convertFromMarketTZ(this.clock.display_date,this.outZone);}return this.clock.display_date;};/**
	 * Internal object that simulates a clock that ticks forward and backwards
	 * at different intervals. Used internally by the iterator and not intended
	 * to be used outside of the context of a Market.
	 * @param {object} market An instance of market.
	 * @param {string} interval millisecond, second, minute, hour, day, week or month
	 * @param {number} multiple Move in multiple of intervals.
	 * @private
	 */CIQ.Market.Iterator._Clock=function(market,interval,multiple){// rationalize rolled up intervals for better performance
if(multiple%60===0&&interval==="second"){interval="minute";multiple=multiple/60;}this.market=market;this.interval=interval;this.multiple=multiple;this.intra_day=false;this.intervals=[];this.max_iters=10080;//max minutes to check for rules. (one week);
var tick_time=DAY_MILLIS,findNext=this._dayImpl;if(interval==="millisecond"){findNext=this._millisImpl;tick_time=1;}else if(interval==="second"){findNext=this._secondImpl;tick_time=1000;}else if(interval==="minute"){findNext=this._minuteImpl;tick_time=60000;}else if(interval==="hour"){findNext=this._hourImpl;tick_time=HOUR_MILLIS;}else if(interval==="day"){findNext=this._dayImpl;tick_time=DAY_MILLIS;}else if(interval==="week"){findNext=this._weekImpl;tick_time=DAY_MILLIS*7;}else if(interval==="month"){findNext=this._monthImpl;tick_time=DAY_MILLIS*30;}else{console.log('Periodicity ERROR: "'+interval+'" is not a valid interval. Please see setPeriodicity() for details.');}this.tick_time=tick_time*multiple;this.intra_day=this.tick_time<DAY_MILLIS;this._findPrevious=this._findNext=findNext;};//Save me some carpal tunnel please.
var _ClockP=CIQ.Market.Iterator._Clock.prototype;/**
	 * Calculate the amount of minutes in a given time span.
	 * This assumes hours are 24 hour format.
	 *
	 * NOTE! Does not know how to jump a 24 hour period, assumes that
	 * oHour is always less than cHour on the same day.
	 *
	 * This could be done with two dates instead and remove the limitations. Not
	 * sure if that is necessary at this point. We don't actually have two date
	 * objects at the point that we need this number. It would take some doing to
	 * figure out the date objects that would be needed.
	 * @param {number} oHour The opening hour
	 * @param {number} oMin The opening minute
	 * @param {number} cHour The closing hour
	 * @param {number} cMin The closing minute
	 * @return {number} Amount of minutes in a given time span.
	 * @private
	 */_ClockP._total_minutes=function(oHour,oMin,cHour,cMin){//the parens are important in this case
return(cHour-oHour)*60-oMin+cMin;};/**
	 * Create an array of minutes from the open minute to the close minute at
	 * some periodicity. This array will run the entire time of the last segment
	 * time segment matched.
	 * @return {array} Periods
	 * @private
	 */_ClockP._alignMinutes=function(){if(!this.market.market_def||this.market.zopen_minute===undefined){return[];}var o_min=this.market.zopen_minute;var match=this.market.zseg_match;if(match&&match.adjacent_parent){o_min=match.adjacent_parent.open/60-1440;}else{if(this.market.isHourAligned()&&this.multiple%60===0)o_min=0;}var total_minutes=this._total_minutes(this.market.zopen_hour,o_min,this.market.zclose_hour,this.market.zclose_minute);var periods=[];var next_minute=0;while(next_minute<total_minutes){periods.push(o_min+next_minute);next_minute+=this.multiple;}return periods;};/**
	 * Create an array of second boundaries. This only needs to be done once
	 * per clock instance.
	 * @param {number} max The high end of the range before wrapping back to zero.
	 * @return {array} Periods
	 * Example for seconds this would be 60.
	 * @private
	 */_ClockP._alignBaseZero=function(max){var base=0;var periods=[base];while(true){base+=this.multiple;if(base>=max){break;}periods.push(base);}return periods;};/**
	 * Turn this instance of the clock into a date object at the current
	 * date time.
	 * @return {date} A new Date object.
	 * @private
	 */_ClockP._date=function(){var t=Math.round(this.ctime);var current_date=new Date(t);if(this.intra_day){this.display_date=new Date(t+this.shift_millis);}else{this.display_date=current_date;}return current_date;};/**
	 * Find the boundary for minutes, seconds or milliseconds.
	 * @param {array} periods A pre-calculated list of boundaries.
	 * @param {number} search_for Any number to align.
	 * @return {number} one of the boundaries in the array.
	 * @private
	 */_ClockP._alignToBoundary=function(periods,search_for){var low=0;var high=0;var result=search_for;for(var ctr=0;ctr<periods.length-1;ctr++){low=periods[ctr];high=periods[ctr+1];if(search_for===low||search_for===high){break;//already aligned;
}if(search_for>low&&search_for<high){result=low;break;}else if(ctr+1===periods.length-1){//wrap around gap
result=high;}}return result;};/**
	 * Convenience for debugging.
	 * @return {string} Current market date as a string
	 * @private
	 */_ClockP._peek=function(){return this._date().toString();};/**
	 * When searching for open days look in hour increments.
	 * Inverted.
	 * @private
	 */_ClockP._seekHr=function(){if(this.forward){this.ctime-=HOUR_MILLIS;}else{this.ctime+=HOUR_MILLIS;}};/**
	 * Set this instance of the iterator clock to some date. Calls to next or
	 * previous will move the clock some interval from this point in time.
	 * @param {date} date Any javascript date.
	 * @private
	 */_ClockP._setStart=function(date){var millis=this.market._tzDifferenceMillis(date);var shift_date=new Date(date.getTime()+millis);this.shift_millis=millis;this.ctime=shift_date.getTime();// Terry override timezone shift
this.shift_millis=0;this.ctime=date.getTime();};/**
	 * Regular clock move
	 * @private
	 */_ClockP._tickTock=function(){if(this.forward){//this.ctime += (this.tick_time * this.skip);
this.ctime+=this.tick_time;}else{//this.ctime -= (this.tick_time * this.skip);
this.ctime-=this.tick_time;}};/**
	 * Inverted clock move
	 * @private
	 */_ClockP._tockTick=function(){if(this.forward){//this.ctime -= (this.tick_time * this.skip);
this.ctime-=this.tick_time;}else{//this.ctime += (this.tick_time * this.skip);
this.ctime+=this.tick_time;}};/**
	 * Move a day at a time. Useful for finding the first open day
	 * of a week or month. Always moves forward.
	 * @private
	 */_ClockP._tickTock24=function(){this.ctime+=DAY_MILLIS;};/**
	 * Move a day at a time inverted. Useful for finding Sunday when
	 * moving by weeks. Always moves backwards.
	 * @private
	 */_ClockP._tockTick24=function(){this.ctime-=DAY_MILLIS;};/**
	 * Wind the clock to the next open market time. If the market is already open
	 * then don't move. Break out of the loop after max_iters regardless.
	 * @param {function} was_open Intraday or daily function to see if the market
	 * was open.
	 * @param {function} wind _tockTick (inverted) or _tickTock (regular)
	 * @return {boolean} True if the clock was moved
	 * @private
	 */_ClockP._windMaybe=function(was_open,wind){var max=0;var working_date=new Date(this.ctime);var moved=false;while(!was_open.call(this.market,working_date)){wind.call(this);moved=true;working_date=new Date(this.ctime);max+=1;if(max>this.max_iters){var m='Warning! max iterations ('+this.max_iters;m+=') reached with no rule match.';console.log(m);break;}}return moved;};/**
	 * Move the clock some number of milliseconds
	 * @return {date} Current market date
	 * @private
	 */_ClockP._millisImpl=function(){var justAligned=false;if(!this.mperiods_aligned){var periods=this._alignBaseZero(1000);var current_date=new Date(this.ctime);var current_millis=current_date.getMilliseconds();current_millis=this._alignToBoundary(periods,current_millis);current_date.setMilliseconds(0);this.ctime=current_date.getTime()+current_millis;// this allows for fractional millis
this.mperiods_aligned=true;justAligned=true;}// handle market closes
var oldMinute=this._date().getMinutes();this._tickTock();var newMinute=this._date().getMinutes();if((justAligned||oldMinute!=newMinute)&&!this.market._wasOpenIntraDay(this._date())){var tickTime=this.tick_time;this.tick_time=60000;var multiple=this.multiple;this.multiple=1;this._minuteImpl();this.tick_time=tickTime;this.multiple=multiple;}return this._date();};/**
	 * Move the clock some number of seconds
	 * @return {date} Current market date
	 * @private
	 */_ClockP._secondImpl=function(){var justAligned=false;if(!this.speriod_aligned){var periods=this._alignBaseZero(60);var current_date=new Date(this.ctime);var current_second=current_date.getSeconds();current_second=this._alignToBoundary(periods,current_second);current_date.setSeconds(current_second);current_date.setMilliseconds(0);this.ctime=current_date.getTime();this.speriod_aligned=true;justAligned=true;}// handle market closes
var oldMinute=this._date().getMinutes();this._tickTock();var newMinute=this._date().getMinutes();if((justAligned||oldMinute!=newMinute)&&!this.market._wasOpenIntraDay(this._date())){var tickTime=this.tick_time;this.tick_time=60000;var multiple=this.multiple;this.multiple=1;this._minuteImpl();this.tick_time=tickTime;this.multiple=multiple;}return this._date();};/**
	 * Move the clock some number of minutes. Takes into account market start time
	 * and could change alignment each time it is called.
	 * @return {date}
	 * @private
	 */_ClockP._minuteImpl=function(){var closed=this._windMaybe(this.market._wasOpenIntraDay,this._tockTick);var current_date=new Date(this.ctime);var tzOffset=current_date.getTimezoneOffset();var current_minute=current_date.getMinutes();var current_hour=current_date.getHours();var periods=this._alignMinutes();//takes into account market start time
var boundary_min=this._total_minutes(this.market.zopen_hour,this.market.zopen_minute,current_hour,current_minute)+this.market.zopen_minute;if(closed){if(this.forward){boundary_min=periods[periods.length-1];}else{boundary_min=periods[0];}}else{boundary_min=this._alignToBoundary(periods,boundary_min);}current_hour=Math.floor(boundary_min/60)+this.market.zopen_hour;current_date.setHours(current_hour,boundary_min%60,0,0);var offsetDiff=current_date.getTimezoneOffset()-tzOffset;if(this.forward&&offsetDiff<0||!this.forward&&offsetDiff>0){//crossed a fallback timezone boundary
current_date.setTime(current_date.getTime()-offsetDiff*60000);}this.ctime=current_date.getTime();//boundary aligned
this._tickTock();//move once
var current_segment=this.market.zseg_match;var alignToHour=this.market.hour_aligned&&this.multiple%60===0;if(this._windMaybe(this.market._wasOpenIntraDay,this._tickTock)||!alignToHour&&current_segment!=this.market.zseg_match){current_date=new Date(this.ctime);if(this.forward){current_date.setMinutes(this.market.zopen_minute);current_date.setHours(this.market.zopen_hour);}else{periods=this._alignMinutes();var last_boundary=periods[periods.length-1];current_date.setMinutes(last_boundary%60);current_date.setHours(Math.floor(last_boundary/60)+this.market.zopen_hour);}this.ctime=current_date.getTime();}return this._date();};/**
	 * Move the clock some number of hours.
	 * @return {date}
	 * @private
	 */_ClockP._hourImpl=function(){this._windMaybe(this.market._wasOpenIntraDay,this._tockTick);var current_time=new Date(this.ctime);if(this.market.isHourAligned()){current_time.setMinutes(0);}else{current_time.setMinutes(this.market.zopen_minute);}current_time.setSeconds(0);current_time.setMilliseconds(0);this.ctime=current_time.getTime();//boundary aligned
this._tickTock();//move once
var current_segment=this.market.zseg_match;if(this._windMaybe(this.market._wasOpenIntraDay,this._tickTock)||!this.market.hour_aligned&&current_segment!=this.market.zseg_match){current_date=new Date(this.ctime);if(this.forward){current_date.setMinutes(this.market.zopen_minute);current_date.setHours(this.market.zopen_hour);}else{periods=this._alignMinutes();var last_boundary=periods[periods.length-1];current_date.setMinutes(last_boundary%60);current_date.setHours(Math.floor(last_boundary/60)+this.market.zopen_hour);}this.ctime=current_date.getTime();}return this._date();};/**
	 * Move the clock some number of days.
	 * @return {date}
	 * @private
	 */_ClockP._dayImpl=function(){this._windMaybe(this.market._wasOpenDaily,this._seekHr);var current_date=new Date(this.ctime);//closest open day
current_date.setHours(12,0,0,0);this.ctime=current_date.getTime();//boundary aligned
var ctr=0;while(ctr<this.multiple){if(this.forward){this._tickTock24();}else{this._tockTick24();}if(!this.market._wasOpenDaily(this._date())){continue;}ctr+=1;}current_date=new Date(this.ctime);current_date.setHours(0);this.ctime=current_date.getTime();//boundary aligned
return this._date();};/**
	 * Move the clock some number of weeks.
	 * @return {date}
	 * @private
	 */_ClockP._weekImpl=function(){var current_date=new Date(this.ctime);current_date.setHours(12);// Stay away from DST danger zone, so we know we only go back one date each tocktick
this.ctime=current_date.getTime();this._tickTock();// move once
//Move to Sunday
current_date=new Date(this.ctime);while(current_date.getDay()!==0){this._tockTick24();current_date=new Date(this.ctime);}//now align to first open day of week.
this._windMaybe(this.market._wasOpenDaily,this._tickTock24);current_date=new Date(this.ctime);current_date.setHours(0,0,0,0);this.ctime=current_date.getTime();//boundary aligned;
return this._date();};/**
	 * Move the clock some number of months
	 * @return {date}
	 * @private
	 */_ClockP._monthImpl=function(){//Allow some room to account for different lengths of months.
var current_date=new Date(this.ctime);current_date.setDate(15);// Stay away from month boundaries so DST doesn't foil us
this.ctime=current_date.getTime();this._tickTock();// move once
current_date=new Date(this.ctime);//Now re align back to the first day of the month
current_date.setDate(1);current_date.setHours(12);// Stay away from DST danger zone
this.ctime=current_date.getTime();//Now find the first open day of month
this._windMaybe(this.market._wasOpenDaily,this._tickTock24);current_date=new Date(this.ctime);current_date.setHours(0,0,0,0);this.ctime=current_date.getTime();//boundary aligned;
return this._date();};/**
	 * Search forward for the next market open
	 * @param {date} date Some begin date.
	 * @param {number} skip The number of intervals to move. Defaults
	 * to one.
	 * @return {date} A new date that has been set to the previous open of the
	 * market.
	 * @private
	 */_ClockP._findNext=null;/**
	 * Search backward for the next market open
	 * @param {date} date Some begin date.
	 * @param {number} skip The number of intervals to move. Defaults
	 * to one.
	 * @return {date} A new date that has been set to the previous open of the
	 * market.
	 * @private
	 */_ClockP._findPrevious=null;return _exports;};var __js_core_polyfills_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_core_polyfills_(){};var __js_core_timezone_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
function __js_core_timezone_(_exports){var CIQ=_exports.CIQ;/**
	 * The comprehensive list of timezones can be overwhelming. This is a reduced list that provides
	 * what is necessary for the [sample UI]{@link WebComponents.cq-theme-dialog}.
	 *
	 * To see the current list and format, open your browser console and type `CIQ.timeZoneMap`.
	 *
	 * If you need to support more timezones, a complete list can be downloaded from [here](http://download.chartiq.com/timeZones/timezoneDataObject.txt).
	 *
	 * This file is large, so add timezones with discretion.
	 * The following code snippet demonstrates how to do this. (You can also just add synonyms this way as well).
	 * In order to save space, you may want to cherry pick the zones that you will need, and then add them in your initialization code.
	 * ```
	 *	var myAdditionalZones = {
	 *	 "zones" : {
	 *	  "America/Toronto": [
	 *	   [ 300, "Canada", "E%sT", null ]
	 *	  ]
	 *	 },
	 *	 "rules" : {
	 *	  "Canada" : [
	 *	   [ 2007, "max", "-", "Mar", "Sun>=8", [ 2, 0, 0, null ], 60, "D" ],
	 *	   [ 2007, "max", "-", "Nov", "Sun>=1", [ 2, 0, 0, null ], 0, "S" ] ]
	 *	 }
	 *	}
	 *
	 * // to add all timezones "zones" and "rules" you can simply load the entire timeZoneDataObject.txt file.
	 *	if(timezoneJS) timezoneJS.timezone.loadZoneDataFromObject(myAdditionalZones);
	 *  ```
	 * Lastly, be sure to also add the title for them to the `CIQ.timeZoneMap` object to keep the list and the settings in sync:
	 *  ```
	 *  CIQ.timeZoneMap["(UTC-05:00) Toronto"]="America/Toronto";
	 *  ```
	 *
	 * See {@link CIQ.ChartEngine#setTimeZone} for further instructions on how to set the different timezones on the chart.
	 *
	 * @type {object}
	 * @memberof CIQ
	 */CIQ.timeZoneMap={"(UTC-11:00) American Samoa, Midway Island":"Pacific/Pago_Pago","(UTC-10:00) Hawaii":"Pacific/Honolulu","(UTC-09:00) Alaska":"America/Juneau","(UTC-08:00) Pacific Time (US and Canada)":"America/Los_Angeles","(UTC-08:00) Tijuana":"America/Tijuana","(UTC-07:00) Arizona":"America/Phoenix","(UTC-07:00) Chihuahua, Mazatlan":"America/Chihuahua","(UTC-07:00) Mountain Time (US and Canada)":"America/Denver","(UTC-06:00) Central America":"America/Costa_Rica","(UTC-06:00) Central Time (US and Canada)":"America/Chicago","(UTC-06:00) Guadalajara, Mexico City, Monterrey":"America/Mexico_City","(UTC-06:00) Saskatchewan":"America/Regina","(UTC-05:00) Bogota, Lima, Quito, Rio Branco":"America/Bogota","(UTC-05:00) Eastern Time (US and Canada)":"America/New_York","(UTC-05:00) Indiana (East)":"America/Indiana/Indianapolis","(UTC-04:00) Asuncion":"America/Asuncion","(UTC-04:00) Santiago":"America/Santiago","(UTC-04:00) Caracas":"America/Caracas","(UTC-04:00) Atlantic Time (Canada)":"America/Halifax","(UTC-04:00) Georgetown, La Paz, Manaus, San Juan":"America/Puerto_Rico","(UTC-03:30) Newfoundland and Labrador":"America/St_Johns","(UTC-03:00) Buenos Aires":"America/Argentina/Buenos_Aires","(UTC-03:00) Punta Arenas":"America/Punta_Arenas","(UTC-03:00) Montevideo":"America/Montevideo","(UTC-03:00) Sao Paulo":"America/Sao_Paulo","(UTC-02:00) Mid-Atlantic":"Atlantic/South_Georgia","(UTC-01:00) Azores":"Atlantic/Azores","(UTC-01:00) Cape Verde Islands":"Atlantic/Cape_Verde","(UTC) Greenwich Mean Time, Reykjavik":"UTC","(UTC) Casablanca":"Africa/Casablanca","(UTC) Dublin":"Europe/Dublin","(UTC) Lisbon, London":"Europe/London","(UTC+01:00) Algiers, Tunis":"Africa/Tunis","(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":"Europe/Amsterdam","(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":"Europe/Belgrade","(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":"Europe/Brussels","(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":"Europe/Sarajevo","(UTC+02:00) Kaliningrad":"Europe/Kaliningrad","(UTC+02:00) Athens, Bucharest":"Europe/Bucharest","(UTC+02:00) Cairo":"Africa/Cairo","(UTC+02:00) Harare, Johannesburg":"Africa/Johannesburg","(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":"Europe/Helsinki","(UTC+02:00) Cyprus":"Asia/Nicosia","(UTC+02:00) Jerusalem":"Asia/Jerusalem","(UTC+03:00) Istanbul":"Europe/Istanbul","(UTC+03:00) Baghdad, Kuwait, Qatar, Riyadh":"Asia/Riyadh","(UTC+03:00) Minsk, Moscow, Kirov, Volgograd":"Europe/Moscow","(UTC+03:00) Simferopol":"Europe/Simferopol","(UTC+03:00) Nairobi":"Africa/Nairobi","(UTC+03:30) Tehran":"Asia/Tehran","(UTC+04:00) Baku":"Asia/Baku","(UTC+04:00) Dubai, Muscat":"Asia/Dubai","(UTC+04:00) Astrakhan, Samara, Saratov, Ulyanovsk":"Europe/Samara","(UTC+04:30) Kabul":"Asia/Kabul","(UTC+05:00) Karachi, Tashkent":"Asia/Karachi","(UTC+05:00) Yekaterinburg":"Asia/Yekaterinburg","(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":"Asia/Kolkata","(UTC+05:45) Kathmandu":"Asia/Kathmandu","(UTC+06:00) Almaty":"Asia/Almaty","(UTC+06:00) Omsk":"Asia/Omsk","(UTC+06:00) Astana, Dhaka":"Asia/Dhaka","(UTC+06:30) Yangon":"Asia/Yangon","(UTC+07:00) Bangkok, Jakarta, Vietnam":"Asia/Bangkok","(UTC+07:00) Hovd":"Asia/Hovd","(UTC+07:00) Krasnoyarsk":"Asia/Krasnoyarsk","(UTC+07:00) Novokuznetsk":"Asia/Novokuznetsk","(UTC+07:00) Barnaul, Novosibirsk, Tomsk":"Asia/Novosibirsk","(UTC+08:00) Beijing, Chongqing, Hong Kong SAR":"Asia/Hong_Kong","(UTC+08:00) Brunei, Kuala Lumpur, Singapore":"Asia/Kuala_Lumpur","(UTC+08:00) Irkutsk":"Asia/Irkutsk","(UTC+08:00) Choibalsan, Ulaanbaatar":"Asia/Ulaanbaatar","(UTC+08:00) Manila, Taipei":"Asia/Taipei","(UTC+08:00) Perth":"Australia/Perth","(UTC+08:45) Eucla":"Australia/Eucla","(UTC+09:00) Osaka, Sapporo, Tokyo":"Asia/Tokyo","(UTC+09:00) Pyongyang":"Asia/Pyongyang","(UTC+09:00) Seoul":"Asia/Seoul","(UTC+09:00) Chita, Khandyga, Yakutsk":"Asia/Yakutsk","(UTC+09:30) Adelaide":"Australia/Adelaide","(UTC+09:30) Darwin":"Australia/Darwin","(UTC+10:00) Brisbane":"Australia/Brisbane","(UTC+10:00) Canberra, Melbourne, Sydney":"Australia/Sydney","(UTC+10:00) Guam, Port Moresby":"Pacific/Guam","(UTC+10:00) Ust-Nera, Vladivostok":"Asia/Vladivostok","(UTC+11:00) Noumea, Solomon Islands":"Pacific/Noumea","(UTC+11:00) Magadan":"Asia/Magadan","(UTC+11:00) Sakhalin, Srednekolymsk":"Asia/Srednekolymsk","(UTC+12:00) Anadyr, Kamchatka":"Asia/Kamchatka","(UTC+12:00) Auckland, Wellington":"Pacific/Auckland","(UTC+12:45) Chatham":"Pacific/Chatham","(UTC+13:00) Tonga":"Pacific/Tongatapu","(UTC+13:00) Samoa":"Pacific/Apia","(UTC+14:00) Kiritimati":"Pacific/Kiritimati"};// -----
// The `timezoneJS.Date` object gives you full-blown timezone support, independent from the timezone set on the end-user's machine running the browser. It uses the Olson zoneinfo files for its timezone data.
//
// The constructor function and setter methods use proxy JavaScript Date objects behind the scenes, so you can use strings like '10/22/2006' with the constructor. You also get the same sensible wraparound behavior with numeric parameters (like setting a value of 14 for the month wraps around to the next March).
//
// The other significant difference from the built-in JavaScript Date is that `timezoneJS.Date` also has named properties that store the values of year, month, date, etc., so it can be directly serialized to JSON and used for data transfer.
/*
	 * Copyright 2010 Matthew Eernisse (mde@fleegix.org)
	 * and Open Source Applications Foundation
	 *
	 * Licensed under the Apache License, Version 2.0 (the 'License');
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an 'AS IS' BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * Credits: Ideas included from incomplete JS implementation of Olson
	 * parser, 'XMLDAte' by Philippe Goetz (philippe.goetz@wanadoo.fr)
	 *
	 * Contributions:
	 * Jan Niehusmann
	 * Ricky Romero
	 * Preston Hunt (prestonhunt@gmail.com)
	 * Dov. B Katz (dov.katz@morganstanley.com)
	 * Peter Bergström (pbergstr@mac.com)
	 * Long Ho
	 *
	 * Modified from original by ChartIQ to include caching for improved performance
	 */ /*jshint laxcomma:true, laxbreak:true, expr:true, supernew:true*/(function(){// Standard initialization stuff to make sure the library is
// usable on both client and server (node) side.
'use strict';var root=this;var timezoneJS={};_exports.timezoneJS=timezoneJS;timezoneJS.VERSION='0.4.11';// Grab the ajax library from global context.
// This can be jQuery, Zepto or fleegix.
// You can also specify your own transport mechanism by declaring
// `timezoneJS.timezone.transport` to a `function`. More details will follow
var ajax_lib=root.$||root.jQuery||root.Zepto,fleegix=root.fleegix// Declare constant list of days and months. Unfortunately this doesn't leave room for i18n due to the Olson data being in English itself
,DAYS=timezoneJS.Days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],MONTHS=timezoneJS.Months=['January','February','March','April','May','June','July','August','September','October','November','December'],SHORT_MONTHS={},SHORT_DAYS={},EXACT_DATE_TIME={};//`{ 'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5, 'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11 }`
for(var i=0;i<MONTHS.length;i++){SHORT_MONTHS[MONTHS[i].substr(0,3)]=i;}//`{ 'Sun': 0, 'Mon': 1, 'Tue': 2, 'Wed': 3, 'Thu': 4, 'Fri': 5, 'Sat': 6 }`
for(i=0;i<DAYS.length;i++){SHORT_DAYS[DAYS[i].substr(0,3)]=i;}//Handle array indexOf in IE
//From https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
//Extending Array prototype causes IE to iterate thru extra element
var _arrIndexOf=Array.prototype.indexOf||function(el){if(this===null){throw new TypeError();}var t=Object(this);var len=t.length>>>0;if(len===0){return-1;}var n=0;if(arguments.length>1){n=Number(arguments[1]);if(n!=n){// shortcut for verifying if it's NaN
n=0;}else if(n!==0&&n!==Infinity&&n!==-Infinity){n=(n>0||-1)*Math.floor(Math.abs(n));}}if(n>=len){return-1;}var k=n>=0?n:Math.max(len-Math.abs(n),0);for(;k<len;k++){if(k in t&&t[k]===el){return k;}}return-1;};// Format a number to the length = digits. For ex:
//
// `_fixWidth(2, 2) = '02'`
//
// `_fixWidth(1998, 2) = '98'`  // year, shorten it to the 2 digit representation
//
// `_fixWidth(23, 1) = '23'`  // hour, even with 1 digit specified, do not trim
//
// This is used to pad numbers in converting date to string in ISO standard.
var _fixWidth=function _fixWidth(number,digits){if(typeof number!=='number'){throw'not a number: '+number;}var trim=number>1000;// only trim 'year', as the others don't make sense why anyone would want that
var s=number.toString();var s_len=s.length;if(trim&&s_len>digits){return s.substr(s_len-digits,s_len);}s=[s];while(s_len<digits){s.unshift('0');s_len++;}return s.join('');};// Abstraction layer for different transport layers, including fleegix/jQuery/Zepto/Node.js
//
// Object `opts` include
//
// - `url`: url to ajax query
//
// - `async`: true for asynchronous, false otherwise. If false, return value will be response from URL. This is true by default
//
// - `success`: success callback function
//
// - `error`: error callback function
// Returns response from URL if async is false, otherwise the AJAX request object itself
var _transport=function _transport(opts){if(!opts)return;if(!opts.url)throw new Error('URL must be specified');if(!('async'in opts))opts.async=true;// Client-side
if((!fleegix||typeof fleegix.xhr==='undefined')&&(!ajax_lib||typeof ajax_lib.ajax==='undefined')){throw new Error('Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files.');}if(!opts.async){return fleegix&&fleegix.xhr?fleegix.xhr.doReq({url:opts.url,async:false}):ajax_lib.ajax({url:opts.url,async:false,dataType:'text'}).responseText;}return fleegix&&fleegix.xhr?fleegix.xhr.send({url:opts.url,method:'get',handleSuccess:opts.success,handleErr:opts.error}):ajax_lib.ajax({url:opts.url,dataType:'text',method:'GET',error:opts.error,success:opts.success});};timezoneJS.ruleCache={};// Constructor, which is similar to that of the native Date object itself
timezoneJS.Date=function(){if(this===timezoneJS){throw'timezoneJS.Date object must be constructed with \'new\'';}var args=Array.prototype.slice.apply(arguments),dt=null,tz=null,arr=[],valid=false;//We support several different constructors, including all the ones from `Date` object
// with a timezone string at the end.
//
//- `[tz]`: Returns object with time in `tz` specified.
//
// - `utcMillis`, `[tz]`: Return object with UTC time = `utcMillis`, in `tz`.
//
// - `Date`, `[tz]`: Returns object with UTC time = `Date.getTime()`, in `tz`.
//
// - `year, month, [date,] [hours,] [minutes,] [seconds,] [millis,] [tz]: Same as `Date` object
// with tz.
//
// - `Array`: Can be any combo of the above.
//
//If 1st argument is an array, we can use it as a list of arguments itself
if(Object.prototype.toString.call(args[0])==='[object Array]'){args=args[0];}// If the last string argument doesn't parse as a Date, treat it as tz
if(typeof args[args.length-1]==='string'){valid=Date.parse(args[args.length-1].replace(/GMT[+-]\d+/,''));if(isNaN(valid)||valid===null){// Checking against null is required for compatability with Datejs
tz=args.pop();}}// Old code: still need it?
//if (typeof args[args.length - 1] === 'string' /*&& isNaN(Date.parse(args[args.length - 1].replace(/GMT\+\d+/, '')))*/) { // This was causing any timezone with GMT to stop working as in "Etc/GMT-7"
//  tz = args.pop();
//}
var is_dt_local=false;switch(args.length){case 0:dt=new Date();break;case 1:dt=new Date(args[0]);// Date strings are local if they do not contain 'Z', 'T' or timezone offsets like '+0200'
//  - more info below
if(typeof args[0]=='string'&&args[0].search(/[+-][0-9]{4}/)==-1&&args[0].search(/Z/)==-1&&args[0].search(/T/)==-1){is_dt_local=true;}break;case 2:dt=new Date(args[0],args[1]);is_dt_local=true;break;default:for(var i=0;i<7;i++){arr[i]=args[i]||0;}dt=new Date(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6]);is_dt_local=true;break;}if(isNaN(dt.getTime())){// invalid date were passed
throw new Error('Invalid date');}this._useCache=false;this._tzInfo={};this._day=0;this.year=0;this.month=0;this.date=0;this.hours=0;this.minutes=0;this.seconds=0;this.milliseconds=0;this.timezone=tz||null;// Tricky part:
// The date is either given as unambiguous UTC date or otherwise the date is assumed
// to be a date in timezone `tz` or a locale date if `tz` is not provided. Thus, to
// determine how to use `dt` we distinguish between the following cases:
//  - UTC   (is_dt_local = false)
//    `timezoneJS.Date(millis, [tz])`
//    `timezoneJS.Date(Date, [tz])`
//    `timezoneJS.Date(dt_str_tz, [tz])`
//  - local/timezone `tz`   (is_dt_local = true)
//    `timezoneJS.Date(year, mon, day, [hour], [min], [second], [tz])`
//    `timezoneJS.Date(dt_str, [tz])`
//
// `dt_str_tz` is a date string containing timezone information, i.e. containing 'Z', 'T' or
// /[+-][0-9]{4}/ (e.g. '+0200'), while `dt_str` is a string which does not contain
// timezone information. See: http://dygraphs.com/date-formats.html
if(is_dt_local){this.setFromDateObjProxy(dt);}else{this.setFromTimeProxy(dt.getTime(),tz);}};// Implements most of the native Date object
CIQ.extend(timezoneJS.Date.prototype,{getDate:function getDate(){return this.date;},getDay:function getDay(){return this._day;},getFullYear:function getFullYear(){return this.year;},getMonth:function getMonth(){return this.month;},getYear:function getYear(){return this.year-1900;},getHours:function getHours(){return this.hours;},getMilliseconds:function getMilliseconds(){return this.milliseconds;},getMinutes:function getMinutes(){return this.minutes;},getSeconds:function getSeconds(){return this.seconds;},getUTCDate:function getUTCDate(){return this.getUTCDateProxy().getUTCDate();},getUTCDay:function getUTCDay(){return this.getUTCDateProxy().getUTCDay();},getUTCFullYear:function getUTCFullYear(){return this.getUTCDateProxy().getUTCFullYear();},getUTCHours:function getUTCHours(){return this.getUTCDateProxy().getUTCHours();},getUTCMilliseconds:function getUTCMilliseconds(){return this.getUTCDateProxy().getUTCMilliseconds();},getUTCMinutes:function getUTCMinutes(){return this.getUTCDateProxy().getUTCMinutes();},getUTCMonth:function getUTCMonth(){return this.getUTCDateProxy().getUTCMonth();},getUTCSeconds:function getUTCSeconds(){return this.getUTCDateProxy().getUTCSeconds();},// Time adjusted to user-specified timezone
getTime:function getTime(){return this._timeProxy+this.getTimezoneOffset()*60*1000;},getTimezone:function getTimezone(){return this.timezone;},getTimezoneOffset:function getTimezoneOffset(){return this.getTimezoneInfo().tzOffset;},getTimezoneAbbreviation:function getTimezoneAbbreviation(){return this.getTimezoneInfo().tzAbbr;},getTimezoneInfo:function getTimezoneInfo(){if(this._useCache)return this._tzInfo;var res;// If timezone is specified, get the correct timezone info based on the Date given
if(this.timezone){res=this.timezone==='Etc/UTC'||this.timezone==='Etc/GMT'?{tzOffset:0,tzAbbr:'UTC'}:timezoneJS.timezone.getTzInfo(this._timeProxy,this.timezone);}// If no timezone was specified, use the local browser offset
else{res={tzOffset:this.getLocalOffset(),tzAbbr:null};}this._tzInfo=res;this._useCache=true;return res;},getUTCDateProxy:function getUTCDateProxy(){var dt=new Date(this._timeProxy);dt.setUTCMinutes(dt.getUTCMinutes()+this.getTimezoneOffset());return dt;},setDate:function setDate(date){this.setAttribute('date',date);return this.getTime();},setFullYear:function setFullYear(year,month,date){if(date!==undefined){this.setAttribute('date',1);}this.setAttribute('year',year);if(month!==undefined){this.setAttribute('month',month);}if(date!==undefined){this.setAttribute('date',date);}return this.getTime();},setMonth:function setMonth(month,date){this.setAttribute('month',month);if(date!==undefined){this.setAttribute('date',date);}return this.getTime();},setYear:function setYear(year){year=Number(year);if(0<=year&&year<=99){year+=1900;}this.setUTCAttribute('year',year);return this.getTime();},setHours:function setHours(hours,minutes,seconds,milliseconds){this.setAttribute('hours',hours);if(minutes!==undefined){this.setAttribute('minutes',minutes);}if(seconds!==undefined){this.setAttribute('seconds',seconds);}if(milliseconds!==undefined){this.setAttribute('milliseconds',milliseconds);}return this.getTime();},setMinutes:function setMinutes(minutes,seconds,milliseconds){this.setAttribute('minutes',minutes);if(seconds!==undefined){this.setAttribute('seconds',seconds);}if(milliseconds!==undefined){this.setAttribute('milliseconds',milliseconds);}return this.getTime();},setSeconds:function setSeconds(seconds,milliseconds){this.setAttribute('seconds',seconds);if(milliseconds!==undefined){this.setAttribute('milliseconds',milliseconds);}return this.getTime();},setMilliseconds:function setMilliseconds(milliseconds){this.setAttribute('milliseconds',milliseconds);return this.getTime();},setTime:function setTime(n){if(isNaN(n)){throw new Error('Units must be a number.');}this.setFromTimeProxy(n,this.timezone);return this.getTime();},setUTCFullYear:function setUTCFullYear(year,month,date){if(date!==undefined){this.setUTCAttribute('date',1);}this.setUTCAttribute('year',year);if(month!==undefined){this.setUTCAttribute('month',month);}if(date!==undefined){this.setUTCAttribute('date',date);}return this.getTime();},setUTCMonth:function setUTCMonth(month,date){this.setUTCAttribute('month',month);if(date!==undefined){this.setUTCAttribute('date',date);}return this.getTime();},setUTCDate:function setUTCDate(date){this.setUTCAttribute('date',date);return this.getTime();},setUTCHours:function setUTCHours(hours,minutes,seconds,milliseconds){this.setUTCAttribute('hours',hours);if(minutes!==undefined){this.setUTCAttribute('minutes',minutes);}if(seconds!==undefined){this.setUTCAttribute('seconds',seconds);}if(milliseconds!==undefined){this.setUTCAttribute('milliseconds',milliseconds);}return this.getTime();},setUTCMinutes:function setUTCMinutes(minutes,seconds,milliseconds){this.setUTCAttribute('minutes',minutes);if(seconds!==undefined){this.setUTCAttribute('seconds',seconds);}if(milliseconds!==undefined){this.setUTCAttribute('milliseconds',milliseconds);}return this.getTime();},setUTCSeconds:function setUTCSeconds(seconds,milliseconds){this.setUTCAttribute('seconds',seconds);if(milliseconds!==undefined){this.setUTCAttribute('milliseconds',milliseconds);}return this.getTime();},setUTCMilliseconds:function setUTCMilliseconds(milliseconds){this.setUTCAttribute('milliseconds',milliseconds);return this.getTime();},setFromDateObjProxy:function setFromDateObjProxy(dt){this.year=dt.getFullYear();this.month=dt.getMonth();this.date=dt.getDate();this.hours=dt.getHours();this.minutes=dt.getMinutes();this.seconds=dt.getSeconds();this.milliseconds=dt.getMilliseconds();this._day=dt.getDay();this._dateProxy=dt;this._timeProxy=Date.UTC(this.year,this.month,this.date,this.hours,this.minutes,this.seconds,this.milliseconds);this._useCache=false;},setFromTimeProxy:function setFromTimeProxy(utcMillis,tz){var dt=new Date(utcMillis);var tzOffset=tz?timezoneJS.timezone.getTzInfo(utcMillis,tz,true).tzOffset:dt.getTimezoneOffset();dt.setTime(utcMillis+(dt.getTimezoneOffset()-tzOffset)*60000);this.setFromDateObjProxy(dt);},setAttribute:function setAttribute(unit,n){if(isNaN(n)){throw new Error('Units must be a number.');}var dt=this._dateProxy;var meth=unit==='year'?'FullYear':unit.substr(0,1).toUpperCase()+unit.substr(1);dt['set'+meth](n);this.setFromDateObjProxy(dt);},setUTCAttribute:function setUTCAttribute(unit,n){if(isNaN(n)){throw new Error('Units must be a number.');}var meth=unit==='year'?'FullYear':unit.substr(0,1).toUpperCase()+unit.substr(1);var dt=this.getUTCDateProxy();dt['setUTC'+meth](n);dt.setUTCMinutes(dt.getUTCMinutes()-this.getTimezoneOffset());this.setFromTimeProxy(dt.getTime()+this.getTimezoneOffset()*60000,this.timezone);},setTimezone:function setTimezone(tz){var previousOffset=this.getTimezoneInfo().tzOffset;this.timezone=tz;this._useCache=false;// Set UTC minutes offsets by the delta of the two timezones
this.setUTCMinutes(this.getUTCMinutes()-this.getTimezoneInfo().tzOffset+previousOffset);},removeTimezone:function removeTimezone(){this.timezone=null;this._useCache=false;},valueOf:function valueOf(){return this.getTime();},clone:function clone(){return this.timezone?new timezoneJS.Date(this.getTime(),this.timezone):new timezoneJS.Date(this.getTime());},toGMTString:function toGMTString(){return this.toString('EEE, dd MMM yyyy HH:mm:ss Z','Etc/GMT');},toLocaleStringIntl:function toLocaleStringIntl(){},toLocaleDateString:function toLocaleDateString(){},toLocaleTimeString:function toLocaleTimeString(){},toSource:function toSource(){},toISOString:function toISOString(){return this.toString('yyyy-MM-ddTHH:mm:ss.SSS','Etc/UTC')+'Z';},toJSON:function toJSON(){return this.toISOString();},toDateString:function toDateString(){return this.toString('EEE MMM dd yyyy');},toTimeString:function toTimeString(){return this.toString('H:mm k');},// Allows different format following ISO8601 format:
toString:function toString(format,tz){// Default format is the same as toISOString
if(!format)format='yyyy-MM-ddTHH:mm:ss.SSS';var result=format;var tzInfo=tz?timezoneJS.timezone.getTzInfo(this.getTime(),tz):this.getTimezoneInfo();var _this=this;// If timezone is specified, get a clone of the current Date object and modify it
if(tz){_this=this.clone();_this.setTimezone(tz);}var hours=_this.getHours();return result// fix the same characters in Month names
.replace(/a+/g,function(){return'k';})// `y`: year
.replace(/y+/g,function(token){return _fixWidth(_this.getFullYear(),token.length);})// `d`: date
.replace(/d+/g,function(token){return _fixWidth(_this.getDate(),token.length);})// `m`: minute
.replace(/m+/g,function(token){return _fixWidth(_this.getMinutes(),token.length);})// `s`: second
.replace(/s+/g,function(token){return _fixWidth(_this.getSeconds(),token.length);})// `S`: millisecond
.replace(/S+/g,function(token){return _fixWidth(_this.getMilliseconds(),token.length);})// 'h': 12 hour format
.replace(/h+/g,function(token){return _fixWidth(hours%12===0?12:hours%12,token.length);})// `M`: month. Note: `MM` will be the numeric representation (e.g February is 02) but `MMM` will be text representation (e.g February is Feb)
.replace(/M+/g,function(token){var _month=_this.getMonth(),_len=token.length;if(_len>3){return timezoneJS.Months[_month];}else if(_len>2){return timezoneJS.Months[_month].substring(0,_len);}return _fixWidth(_month+1,_len);})// `k`: AM/PM
.replace(/k+/g,function(){if(hours>=12){if(hours>12){hours-=12;}return'PM';}return'AM';})// `H`: hour
.replace(/H+/g,function(token){return _fixWidth(hours,token.length);})// `E`: day
.replace(/E+/g,function(token){return DAYS[_this.getDay()].substring(0,token.length);})// `Z`: timezone abbreviation
.replace(/Z+/gi,function(){return tzInfo.tzAbbr;});},toUTCString:function toUTCString(){return this.toGMTString();},civilToJulianDayNumber:function civilToJulianDayNumber(y,m,d){var a;// Adjust for zero-based JS-style array
m++;if(m>12){a=parseInt(m/12,10);m=m%12;y+=a;}if(m<=2){y-=1;m+=12;}a=Math.floor(y/100);var b=2-a+Math.floor(a/4),jDt=Math.floor(365.25*(y+4716))+Math.floor(30.6001*(m+1))+d+b-1524;return jDt;},getLocalOffset:function getLocalOffset(){return this._dateProxy.getTimezoneOffset();}},true);timezoneJS.timezone=new function(){var _this=this,regionMap={'Etc':'etcetera','EST':'northamerica','MST':'northamerica','HST':'northamerica','EST5EDT':'northamerica','CST6CDT':'northamerica','MST7MDT':'northamerica','PST8PDT':'northamerica','America':['northamerica','southamerica'],'Pacific':'australasia','Atlantic':'europe','Africa':'africa','Indian':'africa','Antarctica':'antarctica','Asia':'asia','Australia':'australasia','Europe':'europe','WET':'europe','CET':'europe','MET':'europe','EET':'europe'},regionExceptions={'Pacific/Honolulu':'northamerica','Atlantic/Bermuda':'northamerica','Atlantic/Cape_Verde':'africa','Atlantic/St_Helena':'africa','Indian/Kerguelen':'antarctica','Indian/Chagos':'asia','Indian/Maldives':'asia','Indian/Christmas':'australasia','Indian/Cocos':'australasia','America/Danmarkshavn':'europe','America/Scoresbysund':'europe','America/Godthab':'europe','America/Thule':'europe','Asia/Istanbul':'europe','Asia/Yekaterinburg':'europe','Asia/Omsk':'europe','Asia/Novosibirsk':'europe','Asia/Krasnoyarsk':'europe','Asia/Irkutsk':'europe','Asia/Yakutsk':'europe','Asia/Vladivostok':'europe','Asia/Sakhalin':'europe','Asia/Magadan':'europe','Asia/Kamchatka':'europe','Asia/Anadyr':'europe','Africa/Ceuta':'europe','GMT':'etcetera','Europe/Nicosia':'asia'};function invalidTZError(t){throw new Error('Timezone \''+t+'\' is either incorrect, or not loaded in the timezone registry.');}function builtInLoadZoneFile(fileName,opts){var url=_this.zoneFileBasePath+'/'+fileName;return!opts||!opts.async?_this.parseZones(_this.transport({url:url,async:false})):_this.transport({async:true,url:url,success:function success(str){return _this.parseZones(str)&&typeof opts.callback==='function'&&opts.callback();},error:function error(){throw new Error('Error retrieving \''+url+'\' zoneinfo files');}});}function getRegionForTimezone(tz){var exc=regionExceptions[tz],reg,ret;if(exc)return exc;reg=tz.split('/')[0];ret=regionMap[reg];// If there's nothing listed in the main regions for this TZ, check the 'backward' links
if(ret)return ret;var link=_this.zones[tz];if(typeof link==='string'){return getRegionForTimezone(link);}// Backward-compat file hasn't loaded yet, try looking in there
if(!_this.loadedZones.backward){// This is for obvious legacy zones (e.g., Iceland) that don't even have a prefix like 'America/' that look like normal zones
_this.loadZoneFile('backward');return getRegionForTimezone(tz);}invalidTZError(tz);}//str has format hh:mm, can be negative
function parseTimeString(str){var pat=/(\d+)(?::0*(\d*))?(?::0*(\d*))?([wsugz])?$/;var hms=str.match(pat);hms[1]=parseInt(hms[1],10);hms[2]=hms[2]?parseInt(hms[2],10):0;hms[3]=hms[3]?parseInt(hms[3],10):0;return hms.slice(1,5);}//z is something like `[ '-3:44:40', '-', 'LMT', '1911', 'May', '15', '' ]` or `[ '-5:00', '-', 'EST', '1974', 'Apr', '28', '2:00' ]`
function processZone(z){if(!z[3]){return;}var yea=parseInt(z[3],10),mon=11,dat=31;//If month is there
if(z[4]){mon=SHORT_MONTHS[z[4].substr(0,3)];dat=parseInt(z[5],10)||1;}var t=z[6]?parseTimeString(z[6]):[0,0,0];return[yea,mon,dat,t[0],t[1],t[2]];}function getZone(dt,tz){var utcMillis=typeof dt==='number'?dt:new Date(+dt).getTime();var t=tz;var zoneList=_this.zones[t];// Follow links to get to an actual zone
while(typeof zoneList==='string'){t=zoneList;zoneList=_this.zones[t];}if(!zoneList){// Backward-compat file hasn't loaded yet, try looking in there
if(!_this.loadedZones.backward){//This is for backward entries like 'America/Fort_Wayne' that
// getRegionForTimezone *thinks* it has a region file and zone
// for (e.g., America => 'northamerica'), but in reality it's a
// legacy zone we need the backward file for.
_this.loadZoneFile('backward');return getZone(dt,tz);}else if(t&&t!==tz){//Load the linked zone found in the backward file
_this.lazyLoadZoneFiles(t);return getZone(dt,t);}invalidTZError(t);}if(zoneList.length===0){throw new Error('No Zone found for \''+tz+'\' on '+dt);}//Do backwards lookup since most use cases deal with newer dates.
for(var i=zoneList.length-1;i>=0;i--){var z=zoneList[i];if(z[3]&&utcMillis>z[3])break;}return zoneList[i+1];}function getBasicOffset(time){var off=parseTimeString(time),adj=time.charAt(0)==='-'?-1:1;off=adj*(((off[0]*60+off[1])*60+off[2])*1000);return off/60/1000;}function getAdjustedOffset(off,min){return-Math.ceil(min-off);}//if isUTC is true, date is given in UTC, otherwise it's given
// in local time (ie. date.getUTC*() returns local time components)
function getRule(dt,zone,isUTC,cacheKey){var date=typeof dt==='number'?new Date(dt):dt;var ruleset=zone[1];var basicOffset=zone[0];// If the zone has a DST rule like '1:00', create a rule and return it
// instead of looking it up in the parsed rules
var staticDstMatch=ruleset.match(/^([0-9]):([0-9][0-9])$/);if(staticDstMatch){return[-1000000,'max','-','Jan',1,[0,0,0],parseInt(staticDstMatch[1],10)*60+parseInt(staticDstMatch[2],10),'-'];}//Convert a date to UTC. Depending on the 'type' parameter, the date
// parameter may be:
//
// - `u`, `g`, `z`: already UTC (no adjustment).
//
// - `s`: standard time (adjust for time zone offset but not for DST)
//
// - `w`: wall clock time (adjust for both time zone and DST offset).
//
// DST adjustment is done using the rule given as third argument.
var convertDateToUTC=function convertDateToUTC(date,type,rule){var offset=0;if(type==='u'||type==='g'||type==='z'){// UTC
offset=0;}else if(type==='s'){// Standard Time
offset=basicOffset;}else if(type==='w'||!type){// Wall Clock Time
offset=getAdjustedOffset(basicOffset,rule[6]);}else{throw new Error('unknown type '+type);}offset*=60*1000;// to millis
return new Date(date.getTime()+offset);};//Step 1:  Find applicable rules for this year.
//
//Step 2:  Sort the rules by effective date.
//
//Step 3:  Check requested date to see if a rule has yet taken effect this year.  If not,
//
//Step 4:  Get the rules for the previous year.  If there isn't an applicable rule for last year, then
// there probably is no current time offset since they seem to explicitly turn off the offset
// when someone stops observing DST.
//
// FIXME if this is not the case and we'll walk all the way back (ugh).
//
//Step 5:  Sort the rules by effective date.
//Step 6:  Apply the most recent rule before the current time.
var convertRuleToExactDateAndTime=function convertRuleToExactDateAndTime(yearAndRule,prevRule){var year=yearAndRule[0],rule=yearAndRule[1];// Assume that the rule applies to the year of the given date.
var hms=rule[5];var effectiveDate;if(!EXACT_DATE_TIME[year])EXACT_DATE_TIME[year]={};// Result for given parameters is already stored
if(EXACT_DATE_TIME[year][rule])effectiveDate=EXACT_DATE_TIME[year][rule];else{//If we have a specific date, use that!
if(!isNaN(rule[4])){effectiveDate=new Date(Date.UTC(year,SHORT_MONTHS[rule[3]],rule[4],hms[0],hms[1],hms[2],0));}//Let's hunt for the date.
else{var targetDay,operator;//Example: `lastThu`
if(rule[4].substr(0,4)==='last'){// Start at the last day of the month and work backward.
effectiveDate=new Date(Date.UTC(year,SHORT_MONTHS[rule[3]]+1,1,hms[0]-24,hms[1],hms[2],0));targetDay=SHORT_DAYS[rule[4].substr(4,3)];operator='<=';}//Example: `Sun>=15`
else{//Start at the specified date.
effectiveDate=new Date(Date.UTC(year,SHORT_MONTHS[rule[3]],rule[4].substr(5),hms[0],hms[1],hms[2],0));targetDay=SHORT_DAYS[rule[4].substr(0,3)];operator=rule[4].substr(3,2);}var ourDay=effectiveDate.getUTCDay();//Go forwards.
if(operator==='>='){effectiveDate.setUTCDate(effectiveDate.getUTCDate()+(targetDay-ourDay+(targetDay<ourDay?7:0)));}//Go backwards.  Looking for the last of a certain day, or operator is '<=' (less likely).
else{effectiveDate.setUTCDate(effectiveDate.getUTCDate()+(targetDay-ourDay-(targetDay>ourDay?7:0)));}}EXACT_DATE_TIME[year][rule]=effectiveDate;}//If previous rule is given, correct for the fact that the starting time of the current
// rule may be specified in local time.
if(prevRule){effectiveDate=convertDateToUTC(effectiveDate,hms[3],prevRule);}return effectiveDate;};var findApplicableRules=function findApplicableRules(year,ruleset){var applicableRules=[];for(var i=0;ruleset&&i<ruleset.length;i++){//Exclude future rules.
if(ruleset[i][0]<=year&&(// Date is in a set range.
ruleset[i][1]>=year||// Date is in an 'only' year.
ruleset[i][0]===year&&ruleset[i][1]==='only'||//We're in a range from the start year to infinity.
ruleset[i][1]==='max')){//It's completely okay to have any number of matches here.
// Normally we should only see two, but that doesn't preclude other numbers of matches.
// These matches are applicable to this year.
applicableRules.push([year,ruleset[i]]);}}return applicableRules;};var compareDates=function compareDates(a,b,prev){var year,rule;if(!(a instanceof Date)){year=a[0];rule=a[1];a=!prev&&EXACT_DATE_TIME[year]&&EXACT_DATE_TIME[year][rule]?EXACT_DATE_TIME[year][rule]:convertRuleToExactDateAndTime(a,prev);}else if(prev){a=convertDateToUTC(a,isUTC?'u':'w',prev);}if(!(b instanceof Date)){year=b[0];rule=b[1];b=!prev&&EXACT_DATE_TIME[year]&&EXACT_DATE_TIME[year][rule]?EXACT_DATE_TIME[year][rule]:convertRuleToExactDateAndTime(b,prev);}else if(prev){b=convertDateToUTC(b,isUTC?'u':'w',prev);}a=Number(a);b=Number(b);return a-b;};var year=date.getUTCFullYear();var applicableRules;var cache=timezoneJS.ruleCache[cacheKey];if(!cache)cache=timezoneJS.ruleCache[cacheKey]={};applicableRules=cache[year];if(!applicableRules){applicableRules=findApplicableRules(year-1,_this.rules[ruleset]);applicableRules=applicableRules.concat(findApplicableRules(year,_this.rules[ruleset]));applicableRules.sort(compareDates);// Probably already sorted?
cache[year]=applicableRules;}if(!applicableRules||!applicableRules.length)return null;// No applicable rules
var prev;for(var i=applicableRules.length-1;i>=0;i--){if(i>0)prev=applicableRules[i-1][1];else prev=null;var rule=applicableRules[i];if(!rule[2]){rule[2]=convertRuleToExactDateAndTime(rule,prev);// cache the exactDateAndTime, this saves a lot of cycles!
}if(compareDates(date,rule,prev)>=0)return rule[1];}return null;/*
	      applicableRules = findApplicableRules(year, _this.rules[ruleset]);
	      applicableRules.push(date);
	      //While sorting, the time zone in which the rule starting time is specified
	      // is ignored. This is ok as long as the timespan between two DST changes is
	      // larger than the DST offset, which is probably always true.
	      // As the given date may indeed be close to a DST change, it may get sorted
	      // to a wrong position (off by one), which is corrected below.
	      applicableRules.sort(compareDates);

	      //If there are not enough past DST rules...
	      if (_arrIndexOf.call(applicableRules, date) < 2) {
		applicableRules = applicableRules.concat(findApplicableRules(year-1, _this.rules[ruleset]));
		applicableRules.sort(compareDates);
	      }
	      var pinpoint = _arrIndexOf.call(applicableRules, date);
	      if (pinpoint > 1 && compareDates(date, applicableRules[pinpoint-1], applicableRules[pinpoint-2][1]) < 0) {
		//The previous rule does not really apply, take the one before that.
		return applicableRules[pinpoint - 2][1];
	      } else if (pinpoint > 0 && pinpoint < applicableRules.length - 1 && compareDates(date, applicableRules[pinpoint+1], applicableRules[pinpoint-1][1]) > 0) {

		//The next rule does already apply, take that one.
		return applicableRules[pinpoint + 1][1];
	      } else if (pinpoint === 0) {
		//No applicable rule found in this and in previous year.
		return null;
	      }
	      return applicableRules[pinpoint - 1][1];
	     */}function getAbbreviation(zone,rule){var base=zone[2];if(base.indexOf('%s')>-1){var repl;if(rule){repl=rule[7]==='-'?'':rule[7];}//FIXME: Right now just falling back to Standard --
// apparently ought to use the last valid rule,
// although in practice that always ought to be Standard
else{repl='S';}return base.replace('%s',repl);}else if(base.indexOf('/')>-1){//Chose one of two alternative strings.
return base.split('/',2)[rule?rule[6]?1:0:0];}return base;}this.zoneFileBasePath=null;this.zoneFiles=['africa','antarctica','asia','australasia','backward','etcetera','europe','northamerica','pacificnew','southamerica'];this.loadingSchemes={PRELOAD_ALL:'preloadAll',LAZY_LOAD:'lazyLoad',MANUAL_LOAD:'manualLoad'};this.getRegionForTimezone=getRegionForTimezone;this.loadingScheme=this.loadingSchemes.LAZY_LOAD;this.loadedZones={};this.zones={};this.rules={};this.init=function(o){var opts={async:true},def=this.loadingScheme===this.loadingSchemes.PRELOAD_ALL?this.zoneFiles:this.defaultZoneFile||'northamerica';//Override default with any passed-in opts
for(var p in o){opts[p]=o[p];}return this.loadZoneFiles(def,opts);};//Get a single zone file, or all files in an array
this.loadZoneFiles=function(fileNames,opts){var callbackFn,done=0;if(typeof fileNames==='string'){return this.loadZoneFile(fileNames,opts);}//Wraps callback function in another one that makes
// sure all files have been loaded.
opts=opts||{};callbackFn=opts.callback;opts.callback=function(){done++;done===fileNames.length&&typeof callbackFn==='function'&&callbackFn();};for(var i=0;i<fileNames.length;i++){this.loadZoneFile(fileNames[i],opts);}};//Get the zone files via XHR -- if the sync flag
// is set to true, it's being called by the lazy-loading
// mechanism, so the result needs to be returned inline.
this.loadZoneFile=function(fileName,opts){if(typeof this.zoneFileBasePath==='undefined'){throw new Error('Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath.');}//Ignore already loaded zones.
if(this.loadedZones[fileName]){return;}this.loadedZones[fileName]=true;return builtInLoadZoneFile(fileName,opts);};this.loadZoneJSONData=function(url,sync){var processData=function processData(data){data=JSON.parse(data);for(var z in data.zones){_this.zones[z]=data.zones[z];}for(var r in data.rules){_this.rules[r]=data.rules[r];}};return sync?processData(_this.transport({url:url,async:false})):_this.transport({url:url,success:processData});};this.loadZoneDataFromObject=function(data){if(!data){return;}for(var z in data.zones){_this.zones[z]=data.zones[z];}for(var r in data.rules){_this.rules[r]=data.rules[r];}};this.getAllZones=function(){var arr=[];for(var z in this.zones){arr.push(z);}return arr.sort();};this.parseZones=function(str){if(!str){return false;}var lines=str.split('\n'),arr=[],chunk='',l,zone=null,rule=null;for(var i=0;i<lines.length;i++){l=lines[i];if(l.match(/^\s/)){l='Zone '+zone+l;}l=l.split('#')[0];if(l.length>3){arr=l.split(/\s+/);chunk=arr.shift();//Ignore Leap.
switch(chunk){case'Zone':zone=arr.shift();if(!_this.zones[zone]){_this.zones[zone]=[];}if(arr.length<3)break;//Process zone right here and replace 3rd element with the processed array.
arr.splice(3,arr.length,processZone(arr));if(arr[3])arr[3]=Date.UTC.apply(null,arr[3]);arr[0]=-getBasicOffset(arr[0]);_this.zones[zone].push(arr);break;case'Rule':rule=arr.shift();if(!_this.rules[rule]){_this.rules[rule]=[];}//Parse int FROM year and TO year
arr[0]=parseInt(arr[0],10);arr[1]=parseInt(arr[1],10)||arr[1];//Parse time string AT
arr[5]=parseTimeString(arr[5]);//Parse offset SAVE
arr[6]=getBasicOffset(arr[6]);_this.rules[rule].push(arr);break;case'Link'://No zones for these should already exist.
if(_this.zones[arr[1]]){throw new Error('Error with Link '+arr[1]+'. Cannot create link of a preexisted zone.');}//Create the link.
//Links are saved as strings that are the keys
//of their referenced values.
//Ex: "US/Central": "America/Chicago"
if(isNaN(arr[0])){_this.zones[arr[1]]=arr[0];}else{_this.zones[arr[1]]=parseInt(arr[0],10);}break;}}}return true;};//Expose transport mechanism and allow overwrite.
this.transport=_transport;this.getTzInfo=function(dt,tz,isUTC){this.lazyLoadZoneFiles(tz);var z=getZone(dt,tz);var off=+z[0];//See if the offset needs adjustment.
var rule=getRule(dt,z,isUTC,tz);if(rule){off=getAdjustedOffset(off,rule[6]);}var abbr=getAbbreviation(z,rule);return{tzOffset:off,tzAbbr:abbr};};//Lazy-load any zones not yet loaded.
this.lazyLoadZoneFiles=function(tz){if(this.loadingScheme===this.loadingSchemes.LAZY_LOAD){//Get the correct region for the zone.
var zoneFile=getRegionForTimezone(tz);if(!zoneFile){throw new Error('Not a valid timezone ID.');}//Get the file and parse it -- use synchronous XHR.
this.loadZoneFiles(zoneFile);}};}();}).call(typeof window!=="undefined"?window:this);// Load all the necessary timezones and their rules
_exports.timezoneJS.timezone.loadingScheme=_exports.timezoneJS.timezone.loadingSchemes.MANUAL_LOAD;_exports.timezoneJS.timezone.loadZoneDataFromObject({"zones":{"Atlantic/Cape_Verde":[[60,"-","-01",null]],"Africa/Cairo":[[-120,"Egypt","EE%sT",null]],"Africa/Nairobi":[[-180,"-","EAT",null]],"Africa/Casablanca":[[0,"Morocco","WE%sT",null]],"Africa/Johannesburg":[[-120,"SA","SAST",null]],"Africa/Tunis":[[-60,"Tunisia","CE%sT",null]],"Asia/Kabul":[[-270,"-","+0430",null]],"Asia/Baku":[[-240,"Azer","+04/+05",null]],"Asia/Dhaka":[[-360,"Dhaka","+06/+07",null]],"Asia/Yangon":[[-390,"-","+0630",null]],"Asia/Shanghai":[[-480,"PRC","C%sT",null]],"Asia/Hong_Kong":[[-480,"HK","HK%sT",null]],"Asia/Taipei":[[-480,"Taiwan","C%sT",null]],"Asia/Nicosia":[[-120,"EUAsia","EE%sT",null]],"Asia/Kolkata":[[-330,"-","IST",null]],"Asia/Tehran":[[-210,"Iran","+0330/+0430",null]],"Asia/Jerusalem":[[-120,"Zion","I%sT",null]],"Asia/Tokyo":[[-540,"Japan","J%sT",null]],"Asia/Almaty":[[-360,"-","ALMT",null]],"Asia/Seoul":[[-540,"ROK","K%sT",null]],"Asia/Pyongyang":[[-540,"-","KST",1439596800000],[-510,"-","KST",1525478400000],[-540,"-","KST",null]],"Asia/Kuala_Lumpur":[[-480,"-","+08",null]],"Asia/Hovd":[[-420,"Mongol","+07/+08",null]],"Asia/Ulaanbaatar":[[-480,"Mongol","+08/+09",null]],"Asia/Kathmandu":[[-345,"-","+0545",null]],"Asia/Karachi":[[-300,"Pakistan","PK%sT",null]],"Asia/Riyadh":[[-180,"-","+03",null]],"Asia/Bangkok":[[-420,"-","+07",null]],"Asia/Dubai":[[-240,"-","+04",null]],"Australia/Darwin":[[-570,"Aus","CST",null]],"Australia/Perth":[[-480,"AW","WST",null]],"Australia/Eucla":[[-525,"AW","+0845/+0945",null]],"Australia/Brisbane":[[-600,"AQ","EST",null]],"Australia/Adelaide":[[-570,"AS","CST",null]],"Australia/Sydney":[[-600,"AN","EST",null]],"Pacific/Guam":[[-600,"-","ChST",null]],"Pacific/Kiritimati":[[-840,"-","+14",null]],"Pacific/Noumea":[[-660,"NC","+11/+12",null]],"Pacific/Auckland":[[-720,"NZ","NZ%sT",null]],"Pacific/Chatham":[[-765,"Chatham","+1245/+1345",null]],"Pacific/Pago_Pago":[[660,"-","SST",null]],"Pacific/Apia":[[-780,"WS","+13/+14",null]],"Pacific/Tongatapu":[[-780,"Tonga","+13/+14",null]],"Etc/UTC":[[0,"-","UTC",null]],"UTC":"Etc/UTC","Europe/London":[[0,"EU","GMT/BST",null]],"Europe/Dublin":[[0,"Eire","IST/GMT",null]],"WET":[[0,"EU","WE%sT",null]],"CET":[[-60,"C-Eur","CE%sT",null]],"MET":[[-60,"C-Eur","ME%sT",null]],"EET":[[-120,"EU","EE%sT",null]],"Europe/Brussels":[[-60,"EU","CE%sT",null]],"Europe/Helsinki":[[-120,"EU","EE%sT",null]],"Europe/Paris":[[-60,"EU","CE%sT",null]],"Europe/Berlin":[[-60,"EU","CE%sT",null]],"Europe/Amsterdam":[[-60,"EU","CE%sT",null]],"Atlantic/Azores":[[60,"EU","-01/+00",null]],"Europe/Bucharest":[[-120,"EU","EE%sT",null]],"Europe/Kaliningrad":[[-180,"-","+03",1414288800000],[-120,"-","EET",null]],"Europe/Moscow":[[-240,"-","MSK",1414288800000],[-180,"-","MSK",null]],"Europe/Simferopol":[[-120,"EU","EE%sT",1396144800000],[-240,"-","MSK",1414288800000],[-180,"-","MSK",null]],"Europe/Samara":[[-240,"-","+04",null]],"Asia/Yekaterinburg":[[-360,"-","+06",1414288800000],[-300,"-","+05",null]],"Asia/Omsk":[[-420,"-","+07",1414288800000],[-360,"-","+06",null]],"Asia/Novosibirsk":[[-420,"-","+07",1414288800000],[-360,"-","+06",1469325600000],[-420,"-","+07",null]],"Asia/Novokuznetsk":[[-420,"-","+07",null]],"Asia/Krasnoyarsk":[[-480,"-","+08",1414288800000],[-420,"-","+07",null]],"Asia/Irkutsk":[[-540,"-","+09",1414288800000],[-480,"-","+08",null]],"Asia/Yakutsk":[[-600,"-","+10",1414288800000],[-540,"-","+09",null]],"Asia/Vladivostok":[[-660,"-","+11",1414288800000],[-600,"-","+10",null]],"Asia/Magadan":[[-720,"-","+12",1414288800000],[-600,"-","+10",1461463200000],[-660,"-","+11",null]],"Asia/Srednekolymsk":[[-720,"-","+12",1414288800000],[-660,"-","+11",null]],"Asia/Kamchatka":[[-720,"-","+12",null]],"Europe/Belgrade":[[-60,"EU","CE%sT",null]],"Europe/Sarajevo":"Europe/Belgrade","Europe/Istanbul":[[-120,"EU","EE%sT",1396141200000],[-120,"-","EET",1396227600000],[-120,"EU","EE%sT",1445734800000],[-120,"1:00","EEST",1446944400000],[-120,"EU","EE%sT",1473206400000],[-180,"-","+03",null]],"America/New_York":[[300,"US","E%sT",null]],"America/Chicago":[[360,"US","C%sT",null]],"America/Denver":[[420,"US","M%sT",null]],"America/Los_Angeles":[[480,"US","P%sT",null]],"America/Juneau":[[540,"US","AK%sT",null]],"Pacific/Honolulu":[[600,"-","HST",null]],"America/Phoenix":[[420,"-","MST",null]],"America/Indiana/Indianapolis":[[300,"US","E%sT",null]],"America/St_Johns":[[210,"Canada","N%sT",null]],"America/Halifax":[[240,"Canada","A%sT",null]],"America/Regina":[[360,"-","CST",null]],"America/Mexico_City":[[360,"Mexico","C%sT",null]],"America/Chihuahua":[[420,"Mexico","M%sT",null]],"America/Tijuana":[[480,"US","P%sT",null]],"America/Costa_Rica":[[360,"CR","C%sT",null]],"America/Puerto_Rico":[[240,"-","AST",null]],"America/Argentina/Buenos_Aires":[[180,"Arg","-03/-02",null]],"America/Sao_Paulo":[[180,"Brazil","-03/-02",null]],"America/Santiago":[[240,"Chile","-04/-03",null]],"America/Punta_Arenas":[[240,"Chile","-04/-03",1480809600000],[180,"-","-03",null]],"America/Bogota":[[300,"CO","-05/-04",null]],"America/Asuncion":[[240,"Para","-04/-03",null]],"Atlantic/South_Georgia":[[120,"-","-02",null]],"America/Montevideo":[[180,"Uruguay","-03/-02",null]],"America/Caracas":[[270,"-","-0430",1462069800000],[240,"-","-04",null]],// backwards compatibility
"Europe/Athens":"Europe/Bucharest","Asia/Rangoon":"Asia/Yangon","Atlantic/Reykjavik":"UTC","Asia/Kuwait":"Asia/Riyadh","Asia/Muscat":"Asia/Riyadh","Asia/Istanbul":"Europe/Istanbul","Pacific/Midway":"Pacific/Pago_Pago"},"rules":{"Egypt":[[2014,"only","-","May","16",[0,0,0,null],60,"S"],[2014,"only","-","Jun","27",[0,0,0,null],0,"-"],[2014,"only","-","Aug","1",[0,0,0,null],60,"S"],[2014,"only","-","Sep","lastThu",[23,0,0,"s"],0,"-"]],"Morocco":[[2012,2013,"-","Apr","lastSun",[2,0,0,null],60,"S"],[2013,"only","-","Jul","7",[3,0,0,null],0,"-"],[2013,"only","-","Aug","10",[2,0,0,null],60,"S"],[2013,"max","-","Oct","lastSun",[3,0,0,null],0,"-"],[2014,2021,"-","Mar","lastSun",[2,0,0,null],60,"S"],[2014,"only","-","Jun","28",[3,0,0,null],0,"-"],[2014,"only","-","Aug","2",[2,0,0,null],60,"S"],[2015,"only","-","Jun","14",[3,0,0,null],0,"-"],[2015,"only","-","Jul","19",[2,0,0,null],60,"S"],[2016,"only","-","Jun","5",[3,0,0,null],0,"-"],[2016,"only","-","Jul","10",[2,0,0,null],60,"S"],[2017,"only","-","May","21",[3,0,0,null],0,"-"],[2017,"only","-","Jul","2",[2,0,0,null],60,"S"],[2018,"only","-","May","13",[3,0,0,null],0,"-"],[2018,"only","-","Jun","17",[2,0,0,null],60,"S"],[2019,"only","-","May","5",[3,0,0,null],0,"-"],[2019,"only","-","Jun","9",[2,0,0,null],60,"S"],[2020,"only","-","Apr","19",[3,0,0,null],0,"-"],[2020,"only","-","May","24",[2,0,0,null],60,"S"],[2021,"only","-","Apr","11",[3,0,0,null],0,"-"],[2021,"only","-","May","16",[2,0,0,null],60,"S"],[2022,"only","-","May","8",[2,0,0,null],60,"S"],[2023,"only","-","Apr","23",[2,0,0,null],60,"S"]],"SA":[],"Tunisia":[],"EUAsia":[[1981,"max","-","Mar","lastSun",[1,0,0,"u"],60,"S"],[1996,"max","-","Oct","lastSun",[1,0,0,"u"],0,"-"]],"Azer":[[1997,2015,"-","Mar","lastSun",[4,0,0,null],60,"-"],[1997,2015,"-","Oct","lastSun",[5,0,0,null],0,"-"]],"Dhaka":[],"PRC":[],"HK":[],"Taiwan":[],"Iran":[[2013,2015,"-","Mar","22",[0,0,0,null],60,"-"],[2013,2015,"-","Sep","22",[0,0,0,null],0,"-"],[2016,"only","-","Mar","21",[0,0,0,null],60,"-"],[2016,"only","-","Sep","21",[0,0,0,null],0,"-"],[2017,2019,"-","Mar","22",[0,0,0,null],60,"-"],[2017,2019,"-","Sep","22",[0,0,0,null],0,"-"],[2020,"only","-","Mar","21",[0,0,0,null],60,"-"],[2020,"only","-","Sep","21",[0,0,0,null],0,"-"],[2021,2023,"-","Mar","22",[0,0,0,null],60,"-"],[2021,2023,"-","Sep","22",[0,0,0,null],0,"-"]],"Zion":[[2013,"max","-","Mar","Fri>=23",[2,0,0,null],60,"D"],[2013,"max","-","Oct","lastSun",[2,0,0,null],0,"S"]],"Japan":[],"ROK":[],"Mongol":[[2015,2016,"-","Mar","lastSat",[2,0,0,null],60,"-"],[2015,2016,"-","Sep","lastSat",[0,0,0,null],0,"-"]],"Pakistan":[],"Aus":[],"AW":[],"AQ":[],"AS":[[2008,"max","-","Apr","Sun>=1",[2,0,0,"s"],0,"-"],[2008,"max","-","Oct","Sun>=1",[2,0,0,"s"],60,"-"]],"AN":[[2008,"max","-","Apr","Sun>=1",[2,0,0,"s"],0,"-"],[2008,"max","-","Oct","Sun>=1",[2,0,0,"s"],60,"-"]],"NC":[],"NZ":[[2007,"max","-","Sep","lastSun",[2,0,0,"s"],60,"D"],[2008,"max","-","Apr","Sun>=1",[2,0,0,"s"],0,"S"]],"Chatham":[[2007,"max","-","Sep","lastSun",[2,45,0,"s"],60,"-"],[2008,"max","-","Apr","Sun>=1",[2,45,0,"s"],0,"-"]],"WS":[[2012,"max","-","Apr","Sun>=1",[4,0,0,null],0,"-"],[2012,"max","-","Sep","lastSun",[3,0,0,null],60,"-"]],"Tonga":[[2016,"only","-","Nov","Sun>=1",[2,0,0,null],60,"-"],[2017,"only","-","Jan","Sun>=15",[3,0,0,null],0,"-"]],"Eire":[[1981,"max","-","Mar","lastSun",[1,0,0,"u"],0,"-"],[1996,"max","-","Oct","lastSun",[1,0,0,"u"],-60,"-"]],"EU":[[1981,"max","-","Mar","lastSun",[1,0,0,"u"],60,"S"],[1996,"max","-","Oct","lastSun",[1,0,0,"u"],0,"-"]],"C-Eur":[[1981,"max","-","Mar","lastSun",[2,0,0,"s"],60,"S"],[1996,"max","-","Oct","lastSun",[2,0,0,"s"],0,"-"]],"US":[[2007,"max","-","Mar","Sun>=8",[2,0,0,null],60,"D"],[2007,"max","-","Nov","Sun>=1",[2,0,0,null],0,"S"]],"Canada":[[2007,"max","-","Mar","Sun>=8",[2,0,0,null],60,"D"],[2007,"max","-","Nov","Sun>=1",[2,0,0,null],0,"S"]],"Mexico":[[2002,"max","-","Apr","Sun>=1",[2,0,0,null],60,"D"],[2002,"max","-","Oct","lastSun",[2,0,0,null],0,"S"]],"CR":[],"Arg":[],"Brazil":[[2008,2017,"-","Oct","Sun>=15",[0,0,0,null],60,"-"],[2013,2014,"-","Feb","Sun>=15",[0,0,0,null],0,"-"],[2015,"only","-","Feb","Sun>=22",[0,0,0,null],0,"-"],[2016,2022,"-","Feb","Sun>=15",[0,0,0,null],0,"-"],[2018,"max","-","Nov","Sun>=1",[0,0,0,null],60,"-"],[2023,"only","-","Feb","Sun>=22",[0,0,0,null],0,"-"]],"Chile":[[2012,2014,"-","Apr","Sun>=23",[3,0,0,"u"],0,"-"],[2012,2014,"-","Sep","Sun>=2",[4,0,0,"u"],60,"-"],[2016,"max","-","May","Sun>=9",[3,0,0,"u"],0,"-"],[2016,"max","-","Aug","Sun>=9",[4,0,0,"u"],60,"-"]],"CO":[],"Para":[[2010,"max","-","Oct","Sun>=1",[0,0,0,null],60,"-"],[2013,"max","-","Mar","Sun>=22",[0,0,0,null],0,"-"]],"Uruguay":[[2006,2015,"-","Mar","Sun>=8",[2,0,0,null],0,"-"],[2006,2014,"-","Oct","Sun>=1",[2,0,0,null],60,"-"]]}});/**
	 * Converts a Date object from one time zone to another using the timezoneJS.Date library
	 * @param  {date} dt                    Original JavaScript Date object, from the original time zone
	 * @param  {string} originalTimeZone    The original time zone
	 * @param  {string} targetTimeZone      The target time zone
	 * @return {date}            The date in the target timezone. This is a timezoneJS.Date which behaves the same as a native Date.
	 * @memberof CIQ
	 */CIQ.convertTimeZone=function(dt,originalTimeZone,targetTimeZone){// Convert from original timezone to local time
var newDT=new _exports.timezoneJS.Date(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),dt.getSeconds(),dt.getMilliseconds(),originalTimeZone);// Convert from local time to new timezone
newDT.setTimezone(targetTimeZone);return newDT;};/**
	 * This method converts a time from another timezone to local time on the browser
	 * @param  {date} dt               The original time
	 * @param  {string} originalTimeZone A valid timezone
	 * @return {date}                  The date converted to local time
	 * @memberof CIQ
	 */CIQ.convertToLocalTime=function(dt,originalTimeZone){var seconds=dt.getSeconds();var milliseconds=dt.getMilliseconds();var newDT=new _exports.timezoneJS.Date(dt.getFullYear(),dt.getMonth(),dt.getDate(),dt.getHours(),dt.getMinutes(),originalTimeZone);return new Date(newDT.getTime()+seconds*1000+milliseconds);};return _exports;};var __js_core_utility_=//-------------------------------------------------------------------------------------------
// Copyright 2012-2017 by ChartIQ, Inc.
// All rights reserved
//-------------------------------------------------------------------------------------------
// Be sure your webserver is set to deliver UTF-8 charset
// For apache add "AddDefaultCharset UTF-8" to httpd.conf
// otherwise use \u unicode escapes for non-ascii characters
//-------------------------------------------------------------------------------------------
function __js_core_utility_(_exports){// Node.js compatibility
if(typeof global!=="undefined"){if(typeof global.CanvasRenderingContext2D==="undefined")global.CanvasRenderingContext2D=function(){};}/**
	 * Shorthand for getElementById(). Equivalent to prototype style $() which is faster but less powerful than jquery style $()
	 * @param  {string} id     An ID tag for a valid DOM object
	 * @param  {object} [source] - An optional valid DOM node to search within. If not provided then the entire document will be searched.
	 * @return {object}        The DOM node associated with the id or null if it is not found
	 * @name  $$
	 * @function
	 */function $$(id,source){if(!source)return document.getElementById(id);if(source.id==id)return source;// Found it!
if(!source.hasChildNodes)return null;for(var i=0;i<source.childNodes.length;i++){var element=$$(id,source.childNodes[i]);if(element)return element;}return null;}_exports.$$=$$;/**
	 * Functional equivalent of querySelector(). Functionally equivalent to jquery $().
	 * This uses querySelectorAll in order to maintain compatibility with IE 9.
	 * Note that if multiple objects match the selector then only the first will be returned.
	 * @param  {string} selector - CSS style selector
	 * @param  {object} [source]   Optional node to select within. If not provided then entire document will be searched.
	 * @return {object}          The first object to match the selector
	 * @name  $$$
	 * @function
	 */function $$$(selector,source){if(!source)source=document;return source.querySelectorAll(selector)[0];// We use querySelectorAll for backward compatibility with IE
}_exports.$$$=$$$;/**
	 * Capitalizes the first letter of a string
	 * @return {string} Capitalized version of the string
	 */String.prototype.capitalize=function(){return this.charAt(0).toUpperCase()+this.slice(1);};if(!Function.prototype.ciqInheritsFrom){/**
		 * Template for JavaScript inheritence.
		 *
		 * By default the constructor (ctor) is called with no arguments.
		 *
		 * @param {object} ctor The parent class or object
		 * @param {boolean} [autosuper=true] Set to false to prevent the base class constructor from being called automatically
		 */Function.prototype.ciqInheritsFrom=function(ctor,autosuper){var parent=ctor.prototype||Object.getPrototypeOf(ctor);this.prototype=autosuper!==false&&typeof ctor==='function'?new ctor():Object.create(parent);Object.defineProperties(this.prototype,{constructor:{configurable:true,enumerable:false,value:this,writable:true},parent:{configurable:true,enumerable:false,value:parent,writable:true}});};Function.prototype.stxInheritsFrom=Function.prototype.ciqInheritsFrom;// backward compatiblity
}/**
	 * The built-in 2D rendering context for the drawing surface of a {@link external:canvas}.
	 * @external CanvasRenderingContext2D
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D CanvasRenderingContext2D at the Mozilla Developer Network}
	 */ /**
	 * Dashed line polyfill for the canvas. Note that dashed lines are expensive operations when not supported natively! @see CanvasRenderingContext2D.stxLine
	 * @param {number} fromX Starting point of the X-axis
	 * @param {number} fromY Starting point of the Y-axis
	 * @param {number} toX Destination on the X-axis
	 * @param {number} toY Destination on the Y-axis
	 * @param {string[]} pattern Array of stroke patterns.
	 * @memberof external:CanvasRenderingContext2D
	 */CanvasRenderingContext2D.prototype.dashedLineTo=function(fromX,fromY,toX,toY,pattern){// Error check.
if(!(pattern instanceof Array)){if(pattern)console.log('WARNING: Unsupported drawing pattern "'+pattern+'"; defaulting to "solid"');this.stxLine(fromX,fromY,toX,toY,this.strokeStyle,this.globalAlpha,this.lineWidth);return;}// can't dash if we do not have proper values
if(fromY===Infinity||fromX===Infinity||toY===Infinity||toX===Infinity)return;// Our growth rate for our line can be one of the following:
// (+,+), (+,-), (-,+), (-,-)
// Because of this, our algorithm needs to understand if the x-coord and
// y-coord should be getting smaller or larger and properly cap the
// values
// based on (x,y).
var lt=function lt(a,b){return a-b<=0.00000001;};var gt=function gt(a,b){return a-b>=-0.00000001;};var capmin=function capmin(a,b){return Math.min(a,b);};var capmax=function capmax(a,b){return Math.max(a,b);};var checkX={thereYet:gt,cap:capmin};var checkY={thereYet:gt,cap:capmin};if(fromY-toY>0){checkY.thereYet=lt;checkY.cap=capmax;}if(fromX-toX>0){checkX.thereYet=lt;checkX.cap=capmax;}this.moveTo(fromX,fromY);if(isNaN(fromX)||isNaN(fromY))return;var offsetX=fromX;var offsetY=fromY;var idx=0,dash=true;while(!(checkX.thereYet(offsetX,toX)&&checkY.thereYet(offsetY,toY))){var ang=Math.atan2(toY-fromY,toX-fromX);var len=pattern[idx];offsetX=checkX.cap(toX,offsetX+Math.cos(ang)*len);offsetY=checkY.cap(toY,offsetY+Math.sin(ang)*len);if(dash)this.lineTo(offsetX,offsetY);else this.moveTo(offsetX,offsetY);idx=(idx+1)%pattern.length;dash=!dash;}};/**
	 * Convenience function for rendering lines of various types on the canvas.
	 * @param {number} fromX Starting point of the X-axis
	 * @param {number} fromY Starting point of the Y-axis
	 * @param {number} toX Destination on the X-axis
	 * @param {number} toY Destination on the Y-axis
	 * @param {string} color CSS-compatible color, such as hex, rgb, rgba or even color names such as `orange`.
	 * @param {number} opacity The alpha. A number between 0 and 1.
	 * @param {number} lineWidth The line width in pixels.
	 * @param {number[]} [pattern] An array that contains the number of pixels on and then the number of pixels off.
	 *		For instance [1,1] would create a dotted pattern by turning one pixel on and then one pixel off repeatedly.
	 * @memberof external:CanvasRenderingContext2D
	 */CanvasRenderingContext2D.prototype.stxLine=function(fromX,fromY,toX,toY,color,opacity,lineWidth,pattern){this.beginPath();this.lineWidth=lineWidth;this.strokeStyle=color;this.globalAlpha=opacity;if(pattern&&pattern.length){this.dashedLineTo(fromX,fromY,toX,toY,pattern);}else{this.moveTo(fromX,fromY);this.lineTo(toX,toY);}this.stroke();this.closePath();this.lineWidth=1;};/**
	 * Add native circle drawing to the canvas
	 * @param  {number} x      X position of center of circle
	 * @param  {number} y      Y position of center of circle
	 * @param  {number} radius Radius of circle
	 * @param  {boolean} filled If true then circle will be filled
	 * @memberof external:CanvasRenderingContext2D
	 */CanvasRenderingContext2D.prototype.stxCircle=function(x,y,radius,filled){this.beginPath();this.arc(x,y,radius,0,2*Math.PI,false);if(filled)this.fill();this.stroke();this.closePath();};/* Easing cubics from
	http://gizma.com/easing/#expo1
	t = current time (t should move from zero to d)
	b = starting value
	c = change in value (b + c = ending value )
	d = duration
	*/Math.easeInOutQuad=function(t,b,c,d){t/=d/2;if(t<1)return c/2*t*t+b;t--;return-c/2*(t*(t-2)-1)+b;};Math.easeInOutCubic=function(t,b,c,d){t/=d/2;if(t<1)return c/2*t*t*t+b;t-=2;return c/2*(t*t*t+2)+b;};Math.easeOutCubic=function(t,b,c,d){t/=d;t--;return c*(t*t*t+1)+b;};/**
	 * Base namespace for CIQ library
	 *
	 * Previously `STX`
	 * @name CIQ
	 * @namespace
	 */function CIQ(){}_exports.CIQ=CIQ;_exports.STX=CIQ;// backward compatibility
var nav=typeof navigator!=="undefined"?navigator:{userAgent:""};var userAgent=nav.userAgent;var win=typeof window!=="undefined"?window:{};var doc=typeof document!=="undefined"?document:{};/**
	 * READ ONLY. Will be 'true' if the chart is running on an iPad
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.ipad=userAgent.indexOf("iPad")!=-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on an iPhone
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.iphone=userAgent.indexOf("iPhone")!=-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on an Android OS device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isAndroid=userAgent.toLowerCase().indexOf("android")>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on a IE browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIE=userAgent.toLowerCase().indexOf("msie")>-1||userAgent.indexOf("Trident/")>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on a Edge browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isEdge=userAgent.indexOf("Edge/")>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on a IE 9 browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIE9=userAgent.indexOf("Trident/5")>-1||userAgent.indexOf("MSIE 9.0")>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on a IE 8 browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIE8=win.isIE8||userAgent.indexOf("MSIE 8.0")>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running on an iOS 7 device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIOS7=userAgent.match(/(iPad|iPhone);.*CPU.*OS 7_\d/i);/**
	 * READ ONLY. Will be 'true' if the chart is running on an iOS 8 device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIOS8=userAgent.match(/(iPad|iPhone);.*CPU.*OS 8_\d/i);/**
	 * READ ONLY. Will be 'true' if the chart is running on an iOS 9 device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIOS9=userAgent.match(/(iPad|iPhone);.*CPU.*OS 9_\d/i);/**
	 * READ ONLY. Will be 'true' if the chart is running on an iOS 10 device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIOS10=userAgent.match(/(iPad|iPhone);.*CPU.*OS 10_\d/i);/**
	 * READ ONLY. Will be 'true' if the chart is running on an IOS7, IOS8, IOS9 or IOS10 device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isIOS7or8=CIQ.isIOS7||CIQ.isIOS8||CIQ.isIOS9||CIQ.isIOS10;/**
	 * READ ONLY. Will be 'true' if the chart is running on a mobile device ( CIQ.isAndroid, CIQ.ipad, or CIQ.iphone )
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isMobile=CIQ.isAndroid||CIQ.ipad||CIQ.iphone;/**
	 * READ ONLY. Will be 'true' if the chart is running on a MS Surface like device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isSurface=nav.maxTouchPoints&&nav.maxTouchPoints>1&&(CIQ.isEdge||CIQ.isIE);/**
	 * READ ONLY. Will be 'true' if the chart is running on a touch capable device
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.touchDevice=typeof doc.ontouchstart!="undefined"||CIQ.isSurface;/**
	 * READ ONLY. Will be 'true' if the chart is running on a Chrome browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.is_chrome=userAgent.toLowerCase().indexOf('chrome')>-1&&!CIQ.isEdge;/**
	 * READ ONLY. Will be 'true' if the chart is running on a Firefox browser
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isFF=userAgent.toLowerCase().indexOf('firefox')>-1;/**
	 * READ ONLY. Will be 'true' if the chart is running from a MS Surface application
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.isSurfaceApp=win.MSApp;/**
	 * READ ONLY. Will be 'true' if the chart supports web components
	 * @memberof CIQ
	 * @type boolean
	 * @since 6.1.0
	 */CIQ.isWebComponentsSupported=typeof document!=="undefined"&&'registerElement'in document&&'import'in document.createElement('link')&&'content'in document.createElement('template');/**
	 * READ ONLY. Will be 'true' if the chart is running from a device with no Keyboard ( CIQ.ipad, CIQ.iphone, CIQ.isAndroid or  CIQ.isSurfaceApp )
	 * @memberof CIQ
	 * @type boolean
	 */CIQ.noKeyboard=CIQ.ipad||CIQ.iphone||CIQ.isAndroid||CIQ.isSurfaceApp;/**
	 * READ ONLY.  String of appropriate wheel event based on browser features.
	 */CIQ.wheelEvent=function(){if(typeof document==="undefined")return undefined;if(CIQ.isIE||"onwheel"in document.createElement("div"))return"wheel";if(document.onmousewheel!==undefined)return"mousewheel";return"DOMMouseScroll";}();/**
	 * Returns the log base 10 of a value
	 * @param  {number} y The value
	 * @return {number}   log10 value
	 * @memberof CIQ
	 */CIQ.log10=function(y){return Math.log(y)/Math.LN10;};/**
	 * Deletes the map entries for which the right hand side is the object in question.
	 * @param  {object} map    JavaScript map object
	 * @param  {object} object The actual object to be deleted from the map
	 * @return {boolean}        Returns true if any object actually deleted
	 * @memberof CIQ
	 */CIQ.deleteRHS=function(map,object){var deletedOne=false;for(var i in map){if(map[i]==object){delete map[i];deletedOne=true;}}return deletedOne;};/**
	 * Deletes (removes) nulls or undefined fields (names) from an object. This is useful when marshalling (saving) an object where you don't wish
	 * null or undefined values to show up in the marshalled object (such as when converting to JSON)
	 * @param  {object} obj         The object to scrub
	 * @param  {boolean} [removeNulls] Whether or not to remove null values
	 * @memberof CIQ
	 */CIQ.scrub=function(obj,removeNulls){for(var i in obj){if(typeof obj[i]=="undefined")delete obj[i];if(removeNulls&&obj[i]===null)delete obj[i];}};/**
	 * This method changes the target object's contents to match the contents of the source object. This is functionally equivalent
	 * to `target=source` except that it preserves the existence of the target object. This is vitally important if there are data bindings
	 * to the target object otherwise those data bindings would remain attached to a phantom object! The logic here is orchestrated so that you
	 * will receive update, add and delete notifications for each field that changes.
	 * @param {object} target The target object
	 * @param {object} source The source object
	 * @memberof CIQ
	 * @since 2015-11-1
	 */CIQ.dataBindSafeAssignment=function(target,source){/*for(var prop in source) {
			target[prop]=source[prop];
		}*/CIQ.extend(target,source);for(var prop in target){if(typeof source[prop]=="undefined"){delete target[prop];}}};/**
	 * Clones an object. This function creates a deep (recursive) clone of an object. The object can be a primitive or an object or an array.
	 * Note that cloning objects that reference DOM nodes can result in stack overflows. Use with caution.
	 * @param  {object} from The source object
	 * @param  {object} [to]   Optional existing object of same type. Can improve performance when objects are reusable.
	 * @return {object}      A deep clone of the "from" object
	 * @memberof CIQ
	 */CIQ.clone=function(from,to){if(from===null||_typeof(from)!="object")return from;var c=from.constructor;if(c==Date||c==RegExp||c==String||c==Number||c==Boolean)return new c(from.valueOf());if(c==Function)return function(){return from.apply(this,arguments);};if(!to){try{to=new c();}catch(e0){to=Object.create(Object.getPrototypeOf(from));}}for(var n in from){to[n]=to[n]!==from[n]?CIQ.clone(from[n],null):to[n];}return to;};/**
	 * Non recursive clone. This will only clone the top layer and is safe to use when objects contain DOM nodes.
	 * @param  {object} from - Object to be cloned
	 * @return {object}      A shallow clone of the "from" object
	 * @memberof CIQ
	 */CIQ.shallowClone=function(from){if(!from)return from;var to;if(from.constructor==Array){to=new Array(from.length);for(var i=0;i<from.length;i++){to[i]=from[i];}return to;}to={};for(var field in from){to[field]=from[field];}return to;};/**
	 * Extends an object, similar to jquery.extend() with a deep copy
	 *
	 * Only does a recursive deep copy if the *source* is plain object.
	 *
	 * @param {object} target Target object
	 * @param  {object} source Original object
	 * @param {boolean} [shallow] If true then extend will not recurse through objects
	 * @return {object} Target object after extension
	 * @since
	 * <br>&bull; 5.1.0 Undefined properties do not copy to target object
	 * <br>&bull; 5.2.0 Target of a deep copy may now be a class instance
	 * @memberof CIQ
	 */CIQ.extend=function(target,source,shallow){var key,value;for(key in source){value=source[key];if(target===value||value===undefined){continue;}else if(value===null||shallow===true){target[key]=value;}else if(value.constructor==Array){target[key]=value.slice();}else if(value.constructor==Object){// it is ok if `target[key]` is a class instance
target[key]=CIQ.extend(_typeof(target[key])==='object'&&target[key]!==null?target[key]:{},value);}else{// `value` is a primative type or a class instance (other than Object & Array)
target[key]=value;}}return target;};/**
	 * Accepts a default parameters object and sets the field values for the target *only if they are missing*.
	 * Note that a value of null will not be overridden. Only undefined (missing) values will be overridden.
	 * @param  {object} target The object needing potential default values
	 * @param  {object} defaults Default values
	 * @return {object}        Returns the modified target object
	 * @since  3.0.0
	 * @example
	 * var target={"color":"red"};
	 * var defaults={"color":"blue", "shape":"triangle"};
	 * CIQ.ensureDefaults(target, defaults);
	 * >> target==={"color":"red", "shape":"triangle"};
	 * @memberof CIQ
	 */CIQ.ensureDefaults=function(target,defaults){for(var field in defaults){if(typeof target[field]=="undefined")target[field]=defaults[field];}return target;};/**
	 * Returns true if the objects are an exact match
	 * @param  {object} a First object
	 * @param  {object} b Second object
	 * @param  {object} [exclude] Exclude these fields
	 * @return {boolean}   True if they are an exact match
	 * @memberof CIQ
	 */CIQ.equals=function(a,b,exclude){if(!a&&b)return false;if(a&&!b)return false;if(_typeof(a)!==_typeof(b))return false;for(var field in a){if(exclude&&exclude[field])continue;if(_typeof(a[field])==="object"){var result=CIQ.equals(a[field],b[field]);if(!result)return false;continue;}if(b[field]!=a[field])return false;}return true;};/**
	 * Returns true if an object has no members
	 * @param  {object}  o A JavaScript object
	 * @return {boolean}   True if there are no members in the object
	 * @memberof CIQ
	 */CIQ.isEmpty=function(o){for(var p in o){if(o.hasOwnProperty(p)){return false;}}return true;};/**
	 * Convenience function returns the first property in an object. Note that while this works in all known browsers
	 * the EMCA spec does not guarantee that the order of members in an object remain static. This method should therefore
	 * be avoided. When ordering is important use an Array!
	 * @param  {object} o A JavaSCript object
	 * @return {object}   The first element in the object or null if it is empty
	 * @memberof CIQ
	 */CIQ.first=function(o){for(var p in o){return p;}return null;};/**
	 * Convenience function for returning the last property in an object. Note that while this works in all known browsers
	 * the EMCA spec does not guarantee that the order of members in an object remain static. This method should therefore
	 * be avoiding. When ordering is important use an Array!
	 * @param  {object} o A JavaScript object
	 * @return {object}   The final member of the object or null if the object is empty
	 * @memberof CIQ
	*/CIQ.last=function(o){var l=null;for(var p in o){l=p;}return l;};/**
	 * Returns the number of members in an object
	 * @param  {object} o A valid JavaScript object
	 * @return {number}   The number of members in the object
	 * @memberof CIQ
	 */CIQ.objLength=function(o){if(!o)return 0;var i=0;for(var p in o){i++;}return i;};/**
	 * Given a dot notation string, we want to navigate to the location
	 * in a base object, creating the path along the way
	 * @param  {object} base      Base object.
	 * @param  {string} extension String in dot notation
	 * @return {object}           A tuple containing obj and member
	 * @memberof CIQ
	 * @since  2015-11-1
	 * @example
	 * var tuple=CIQ.deriveFromObjectChain(stx.layout, "pandf.box");
	 * tuple.obj===stx.layout.pandf
	 * tuble.member==="box"
	 * tuple.obj[tuple.member]=3;  // stx.layout.pandf.box=3
	 */CIQ.deriveFromObjectChain=function(base,extension){// Which way is faster?
//if(!(new RegExp(extension)).test(".")){
if(extension.indexOf(".")==-1){return{obj:base,member:extension};}var objectString=extension.split(".");for(var i=0;i<objectString.length-1;i++){var objStr=objectString[i];if(!base[objStr]&&base[objStr]!==0)base[objStr]={};base=base[objStr];}return{obj:base,member:objectString[i]};};/**
	 * Create arrow notation strings (field-->property) of a given field and an array of properties
	 * Used to create a set of object properties in string format for later use by CIQ.existsInObjectChain
	 * Its main use is to pass field names into {@link CIQ.ChartEngine#determineMinMax}.
	 * @param  {string} field      Base object.
	 * @param  {array} properties 	Array of strings representing properties
	 * @return {array}           Array of object properties expressed in arrow notation (field-->property)
	 * @memberof CIQ
	 * @since  5.1.0
	 * @example
	 * var fields=CIQ.createObjectChainNames("ABC.D",["High","Low"]);
	 * fields===["ABC.D-->High","ABC.D-->Low"]
	 */CIQ.createObjectChainNames=function(field,properties){var ret=[];for(var p=0;p<properties.length;p++){ret.push(field+"-->"+properties[p]);}return ret;};/**
	 * Given an arrow notation string (a-->b-->c), we want to navigate to the location
	 * in a base object, to see if it exists
	 * @param  {object} base      Base object.
	 * @param  {string} extension String in arrow notation
	 * @return {object}           A tuple containing obj and member; a null will be returned if path does not exist
	 * @memberof CIQ
	 * @since  5.1.0
	 * @example
	 * var tuple=CIQ.existsInObjectChain(stx.dataSegment[0], "ABC.D-->High");
	 * tuple.obj===stx.dataSegment[0]["ABC.D"]
	 * tuple.member==="High"
	 * tuple.obj[tuple.member]=28.7;  // stx.dataSegment[0]["ABC.D"].High=28.7
	 */CIQ.existsInObjectChain=function(base,extension){// Which way is faster?
//if(!(new RegExp(extension)).test(".")){
if(extension.indexOf("-->")==-1){if(!base[extension]&&base[extension]!==0)return null;return{obj:base,member:extension};}var objectString=extension.split("-->");var objStr;for(var i=0;i<objectString.length-1;i++){objStr=objectString[i];if(!base[objStr]&&base[objStr]!==0)return null;base=base[objStr];}objStr=objectString[i];if(!base[objStr]&&base[objStr]!==0)return null;return{obj:base,member:objStr};};/**
	 * Replacement for isPrototypeOf and instanceof so that both types of inheritance can be checked
	 * @param {object} child The object instance to check
	 * @param {object} parent Prototype
	 * @return {boolean} True if the object is derived from the parent
	 * @memberof CIQ
	 * @since 07/01/2015
	 */CIQ.derivedFrom=function(child,parent){if(parent.isPrototypeOf(child))return true;if(child instanceof parent)return true;return false;};/**
	 * This method will iterate through the object and replace all of the fields
	 * using the mapping object. This would generally be used to compress an object
	 * for serialization. so that for instance "lineWidth" becomes "lw". This method
	 * is called recursively.
	 * @param {object} obj Object to compress
	 * @param {object} mapping Object containing name value pairs. Each name will be replaced with its corresponding value in the object.
	 * @return {object} The newly compressed object
	 * @memberof CIQ
	 */CIQ.replaceFields=function(obj,mapping){if(!obj)return obj;var newObj={};for(var field in obj){var value=obj[field];var replaced=mapping[field];if(!replaced)replaced=field;if(value&&_typeof(value)=="object"){if(value.constructor==Array){var arr=newObj[replaced]=new Array(value.length);for(var i=0;i<arr.length;i++){var val=value[i];if(_typeof(val)=="object"){arr[i]=CIQ.replaceFields(val,mapping);}else{arr[i]=val;}}}else{newObj[replaced]=CIQ.replaceFields(value,mapping);}}else{newObj[replaced]=value;}}return newObj;};/**
	 * Returns an object copy with any null values removed
	 * @param  {object} obj Object to remove nulls
	 * @return {object}     Object with nulls removed
	 * @memberof CIQ
	 */CIQ.removeNullValues=function(obj){var n=CIQ.clone(obj);for(var f in n){if(!n[f])delete n[f];}return n;};/**
	 * This method reverses the fields and values in an object
	 * @param {object} obj Object to reverse
	 * @return {object} The reversed object
	 * @memberof CIQ
	 * @example reverseObject({ one: "a", two: "b" }) // returns { a: "one", b: "two" }
	 */CIQ.reverseObject=function(obj){var newObj={};for(var field in obj){newObj[obj[field]]=field;}return newObj;};CIQ.camelCaseRegExp=/-([a-z])/g;/**
	 * Converts from hyphenated to camel case. Used primarily for converting css style names (which are hyphenated) to property values (which are camel case)
	 * @param  {string} name Hyphenated style name
	 * @return {string}		 Camel case style name
	 * @memberof CIQ
	 */CIQ.makeCamelCase=function(name){return name.replace(CIQ.camelCaseRegExp,function(g){return g[1].toUpperCase();});};/**
	 * Appends a class name to a node if it isn't already there. This is frequently used to control dynamic behavior via CSS.
	 * @example
	 * // Apply an "active" css look to an object
	 * CIQ.appendClassName(myNode, "active");
	 * @param  {object} node      A valid DOM element
	 * @param  {string} className Name of class to add to the DOM element
	 * @memberof CIQ
	 */CIQ.appendClassName=function(node,className){if(!node)return;if(node.className==className)return;// already a class
var s=node.className.split(" ");for(var i=0;i<s.length;i++){if(s[i]==className)return;// already a class
}if(!node.className)node.className=className;else node.className+=" "+className;};/**
	 * Removes a class name from a node if it is set
	 * @param  {object} node      A valid DOM element
	 * @param  {string} className The class name to remove
	 * @memberof CIQ
	 */CIQ.unappendClassName=function(node,className){if(!node)return;if(node.className.indexOf(className)==-1)return;if(node.className==className){node.className="";}else{var s=node.className.split(" ");var newClassName="";for(var i=0;i<s.length;i++){if(s[i]==className)continue;if(newClassName!=="")newClassName+=" ";newClassName+=s[i];}node.className=newClassName;}};/**
	 * Convenience method for swapping two class names within a node. Such as for changing state.
	 * @param  {object} node         A valid DOM element
	 * @param  {string} newClassName The class name to swap in
	 * @param  {string} oldClassName The class name to swap out
	 * @memberof CIQ
	 */CIQ.swapClassName=function(node,newClassName,oldClassName){CIQ.unappendClassName(node,oldClassName);CIQ.appendClassName(node,newClassName);};/**
	 * Returns true if a class name is currently assigned to the DOM node
	 * @param  {object}  node      A valid DOM element
	 * @param  {string}  className The class name to search for
	 * @return {boolean}           True if the class name is currently assigned to the DOM node
	 * @memberof CIQ
	 */CIQ.hasClassName=function(node,className){if(!node)return false;if((" "+node.className+" ").indexOf(" "+className+" ")>-1)return true;return false;};/**
	 * Toggles the className on or off
	 * @param  {HTMLElement} node      The node to toggle
	 * @param  {string} className The class name to toggle
	 * @memberof CIQ
	 */CIQ.toggleClassName=function(node,className){if(CIQ.hasClassName(node,className))CIQ.unappendClassName(node,className);else CIQ.appendClassName(node,className);};/**
	 * Convenience function for dynamically creating a new node and appending it into the DOM.
	 * @param  {object} div       The targeted parent node
	 * @param  {string} tagName   The type of node to be created
	 * @param  {string} [className] Optional class name to set the new node
	 * @param {string} [txt] Optional text to insert
	 * @return {object}           The new node
	 * @memberof CIQ
	 */CIQ.newChild=function(div,tagName,className,txt){var div2=document.createElement(tagName);if(className)div2.className=className;div.appendChild(div2);if(txt)div2.innerHTML=txt;return div2;};/**
	 * Microsoft RT disallows innerHTML that contains DOM elements. Use this method to override when necessary.
	 * @param  {object} node A valid DOM element to change innerHTML
	 * @param  {string} html The html text to change
	 * @example
	 * CIQ.innerHTML(node, "My innerHTML contains <span>a span</span> and MS RT doesn't like that");
	 * @memberof CIQ
	 */CIQ.innerHTML=function(node,html){if(window.MSApp){window.MSApp.execUnsafeLocalFunction(function(){node.innerHTML=html;});}else{node.innerHTML=html;}};/**
	 * Microsoft surface bug requires a timeout in order for the cursor to show up in a focused
	 * text box. iPad also, sometimes, when embedded in an iframe, so set useTimeout if in an iframe!
	 * @param  {object} node       A DOM element to focus
	 * @param  {number} useTimeout Whether to apply a timeout or not. If number then the number of milliseconds.
	 * @memberof CIQ
	 */CIQ.focus=function(node,useTimeout){if(CIQ.isSurface||useTimeout){var timeout=0;if(!isNaN(parseInt(useTimeout,10)))timeout=useTimeout;setTimeout(function(){node.focus();},timeout);}else{node.focus();}};/**
	 * Reliable, cross-device blur method
	 * @param  {HTMLElement} [node] The element to blur. If not supplied then document.activeElement will be blurred
	 * @memberof CIQ
	 */CIQ.blur=function(node){if(!node)node=document.activeElement;if(node)node.blur();window.focus();};/**
	 * Find all nodes that match the given text. This is a recursive function so be careful not to start too high in the DOM tree.
	 * @param  {object} startNode A valid DOM element from which to start looking
	 * @param  {string} text      The text to search for
	 * @return {array}           An array of nodes that match the text
	 * @memberof CIQ
	 */CIQ.findNodesByText=function(startNode,text){if(startNode.innerHTML==text)return[startNode];var nodes=[];for(var i=0;i<startNode.childNodes.length;i++){var pushNodes=CIQ.findNodesByText(startNode.childNodes[i],text);if(pushNodes){nodes=nodes.concat(pushNodes);}}if(nodes.length)return nodes;return null;};/**
	 * Hide nodes that match a certain text string.
	 * @param  {object} startNode A valid DOM element from which to start looking
	 * @param  {string} text      The text to match against
	 * {@link  CIQ.findNodesByText}
	 * @memberof CIQ
	 */CIQ.hideByText=function(startNode,text){var nodes=CIQ.findNodesByText(startNode,text);for(var i=0;i<nodes.length;i++){nodes[i].style.display="none";}};/**
	 * Returns the width of a DOM element including left and right margins.
	 * @param  {HTMLElement} node The DOM element to measure
	 * @return {number}      The width including margins
	 * @memberof CIQ
	 */CIQ.outerWidth=function(node){var width=node.offsetWidth;width+=CIQ.stripPX(getComputedStyle(node).marginLeft);width+=CIQ.stripPX(getComputedStyle(node).marginRight);return width;};/**
	 * Removes all DOM elements in a given node. This is extremely useful when dynamically generating content.
	 * @param  {object} node - The node to clear
	 * @memberof CIQ
	 */CIQ.clearNode=function(node){if(node.hasChildNodes()){while(node.childNodes.length>=1){node.removeChild(node.firstChild);}}};/**
	 * Get the source element for a DOM event depending on browser type
	 * @param  {object} [e] Event if available from browser
	 * @return {object}   The DOM node that registered the event
	 * @memberof CIQ
	 */CIQ.getEventDOM=function(e){if(!e){return window.event.srcElement;}return e.target;};/**
	 * Converts an onClick event to an ontouchend event. If the device is known to be a touch device then this can be used
	 * to change onclick events that are set as attributes (in HTML). ontouchend events are more responsive than onclick events
	 * and can improve the user experience. When coding for cross-device implementations it is recommended to use {@link CIQ.safeClickTouch}
	 * programmatically rather than using hardcoded attributes
	 * @param  {string} id The id of a node containing an onClick attribute
	 * @memberof CIQ
	 * @deprecated
	 * @since 6.0.0 deprecated
	 */CIQ.convertClickToTouchEnd=function(id){var node=$$(id);var s=node.getAttribute("onClick");if(s){node.removeAttribute("onClick");node.setAttribute("onTouchEnd",s);}};/**
	 * Returns the height of the page. It is aware of iframes and so will never return a value that is greater
	 * than the value of the parent
	 * @return {number} Height of page in pixels
	 * @memberof CIQ
	 */CIQ.pageHeight=function(){var h=window.innerHeight;if(top!=self){try{if(h>parent.innerHeight)h=parent.innerHeight;}catch(e){}}return h;};/**
	 * Returns the width of the page. It is aware of iframes and so will never return a value that is greater
	 * than the value of the parent
	 * @return {number} Width of page in pixels
	 * @memberof CIQ
	 */CIQ.pageWidth=function(){var w=window.innerWidth;if(top!=self){try{if(w>parent.innerWidth)w=parent.innerWidth;}catch(e){}}return w;};/**
	 * Strips the letters "px" from a string. This is useful for converting styles into absolutes.
	 * @param  {string} text - String value with "px"
	 * @return {number}      The numeric value
	 * @example
	 * var leftPosition=CIQ.stripPX(node2.style.left)
	 * @memberof CIQ
	 */CIQ.stripPX=function(text){if(!text)return 0;if(typeof text=="number")return text;return parseInt(text.substr(0,text.indexOf("p")),10);};/**
	 * Checks if two colors are the same.  Will compare alpha channel is provided as well.
	 * @param  {string} color1 First color, in rgb, rgba, css hex, or literal format
	 * @param  {string} color2 Second color, in rgb, rgba, css hex, or literal format
	 * @return {boolean}       true if equivalent
	 * @example
	 * var isSame=CIQ.colorsEqual("rgba (255,255,255,0.3)", "#FFFFFF");
	 * 		returns false
	 * var isSame=CIQ.colorsEqual("rgba (255,255,255,1)", "#FFFFFF");
	 * 		returns true
	 * @memberof CIQ
	 * @since 4.0.0
	 */CIQ.colorsEqual=function(color1,color2){if(color1==color2)return true;if(!color1&&!color2)return true;if(!color1||!color2)return false;if(color1=="transparent")color1="rgba(0,0,0,0)";if(color2=="transparent")color2="rgba(0,0,0,0)";var alpha=/^rgba\(.*,(.+)\)/;var rgba1=color1.match(alpha);var rgba2=color2.match(alpha);rgba1=rgba1?parseFloat(rgba1[1]):1;rgba2=rgba2?parseFloat(rgba2[1]):1;if(rgba1!=rgba2)return false;var first=CIQ.colorToHex(color1);var second=CIQ.colorToHex(color2);return first.toLowerCase()==second.toLowerCase();};/**
	 * Converts an rgb or rgba color to a hex color
	 * @param  {string}	color The rgb or rgba color, such as in CSS format
	 * @return {string}	The hex color. If "transparent" or no color is sent in, #000000 will be assumed
	 * @example
	 * var hexColor=CIQ.colorToHex("rgba (255,255,255,0.3)");
	 * @memberof CIQ
	 * @since 4.0.0 Converts 3 char hex (#FFC) to six characters (#FFFFCC)
	 */CIQ.colorToHex=function(color){if(!CIQ.colorToHexMapping)CIQ.colorToHexMapping={};if(!color||color=="transparent")color="#000000";if(CIQ.colorToHexMapping[color])return CIQ.colorToHexMapping[color];if(color.substr(0,1)==='#'){if(color.length==4){color=CIQ.colorToHexMapping[color]="#"+Array(3).join(color.substr(1,1))+Array(3).join(color.substr(2,1))+Array(3).join(color.substr(3,1));}return color;}var digits=/(.*?)rgb\((\d+), ?(\d+), ?(\d+)\)/.exec(color);if(!digits)digits=/(.*?)rgba\((\d+), ?(\d+), ?(\d+),.*\)/.exec(color);// Converts a color name to hex
function toHex(color){if(typeof document==="undefined")return"#000000";var ta=$$("color_converter");if(!ta){ta=document.createElement("textarea");ta.id="color_converter";ta.style.display="none";document.body.appendChild(ta);}ta.style.color="#000000";//reset;
ta.style.color=color;var value;if(!CIQ.isIE8){value=getComputedStyle(ta).getPropertyValue("color");digits=/(.*?)rgb\((\d+), ?(\d+), ?(\d+)\)/.exec(value);if(digits)return CIQ.colorToHex(value);else if(value.substr(0,1)==='#')return value;return color;}value=ta.createTextRange().queryCommandValue("ForeColor");value=(value&0x0000ff)<<16|value&0x00ff00|(value&0xff0000)>>>16;value=value.toString(16);return"#000000".slice(0,7-value.length)+value;}if(!digits){var hexResult=toHex(color);CIQ.colorToHexMapping[color]=hexResult;return hexResult;}var red=parseFloat(digits[2]);var green=parseFloat(digits[3]);var blue=parseFloat(digits[4]);var rgb=blue|green<<8|red<<16;var hexString=rgb.toString(16);// fill with leading 0 if not 6 digits.
for(var i=hexString.length;i<6;i++){hexString="0"+hexString;}var s=digits[1]+'#'+hexString;CIQ.colorToHexMapping[color]=s;return s;};/**
	 * Converts color to rgba. This does not accept literal color names such as "black"
	 * @param  {string} color The hex rgb or rgba color, such as in CSS format
	 * @param  {number} opacity The 'alpha' value. Defaults to full opacity (100%)
	 * @return {string}       The rgba color
	 * @example
	 * var rgba=CIQ.hexToRgba('rgb(0, 115, 186)');
	 * var rgba=CIQ.hexToRgba('#0073BA');
	 * @memberof CIQ
	 */CIQ.hexToRgba=function(color,opacity){if(!color||color=="transparent")color="rgba(0,0,0,0)";if(color.substr(0,4)==='rgba'){var digits=/(.*?)rgba\((\d+), ?(\d+), ?(\d+), ?(\d*\.?\d*)\)/.exec(color);var a=digits[5];if(opacity||opacity===0)a=opacity;if(a>1)a=a/100;return"rgba("+digits[2]+","+digits[3]+","+digits[4]+","+a+")";}else if(color.substr(0,3)==='rgb'){color=CIQ.colorToHex(color);}if(!opacity&&opacity!==0)opacity=100;// default to full opacity
if(opacity<=1)opacity=opacity*100;// handle decimal opacity (css style)
color=color.replace('#','');var r=parseInt(color.slice(0,2),16);var g=parseInt(color.slice(2,4),16);var b=parseInt(color.slice(4,6),16);if(isNaN(r)||isNaN(g)||isNaN(b)){console.log('CIQ.hexToRgba: invalid hex :',color);return null;}return'rgba('+r+','+g+','+b+','+opacity/100+')';};/**
	 * Converts a color to the internal format used by the browser. This allows
	 * interchange of hex, rgb, rgba colors
	 * @param  {string} color A CSS color
	 * @return {string}       The native formatted color
	 * @memberof CIQ
	 */CIQ.convertToNativeColor=function(color){var a=document.createElement("DIV");a.style.color=color;a.style.display="none";document.body.appendChild(a);var c=getComputedStyle(a).color;document.body.removeChild(a);return c;};/**
	 * Returns true if the color is transparent. In particular it checks rgba status. Note that the charting engine
	 * often interprets transparent colors to mean that a color should be automatically determined based on the brightness
	 * of the background.
	 * @param  {string}  color The color (from CSS)
	 * @return {boolean}       True if transparent
	 * @memberof CIQ
	 */CIQ.isTransparent=function(color){if(!color)return false;if(color=="transparent")return true;var digits=/(.*?)rgba\((\d+), ?(\d+), ?(\d+), ?(\d*\.?\d*)\)/.exec(color);if(digits===null)return false;if(parseFloat(digits[5])===0)return true;return false;};/**
	 * Converts a color from hex or rgb format to Hue, Saturation, Value. This does not accept literal color names such as "black"
	 * @param  {string} color The color (from CSS)
	 * @return {array}       [Hue, Saturation, Value], or null if invalid color.
	 * @memberof CIQ
	 */CIQ.hsv=function(color){var hex=CIQ.colorToHex(color);if(hex.substr(0,1)==="#")hex=hex.slice(1);// fill with leading 0 if not 6 digits.
for(var i=hex.length;i<6;i++){hex="0"+hex;}var r=parseInt(hex.slice(0,2),16);var g=parseInt(hex.slice(2,4),16);var b=parseInt(hex.slice(4,6),16);var computedH=0;var computedS=0;var computedV=0;//remove spaces from input RGB values, convert to int
r=parseInt((''+r).replace(/\s/g,''),10);g=parseInt((''+g).replace(/\s/g,''),10);b=parseInt((''+b).replace(/\s/g,''),10);if(r===null||g===null||b===null||isNaN(r)||isNaN(g)||isNaN(b)){console.log('CIQ.hsv: invalid color :',color);return null;}if(r<0||g<0||b<0||r>255||g>255||b>255){return null;}r=r/255;g=g/255;b=b/255;var minRGB=Math.min(r,Math.min(g,b));var maxRGB=Math.max(r,Math.max(g,b));// Black-gray-white
if(minRGB==maxRGB){computedV=minRGB;return[0,0,computedV];}// Colors other than black-gray-white:
var d=r==minRGB?g-b:b==minRGB?r-g:b-r;var h=r==minRGB?3:b==minRGB?1:5;computedH=60*(h-d/(maxRGB-minRGB));computedS=(maxRGB-minRGB)/maxRGB;computedV=maxRGB;return[computedH,computedS,computedV];};CIQ.hsl=function(color){var hex=CIQ.colorToHex(color);if(hex.substr(0,1)==="#")hex=hex.slice(1);// fill with leading 0 if not 6 digits.
for(var i=hex.length;i<6;i++){hex="0"+hex;}var r=parseInt(hex.slice(0,2),16);var g=parseInt(hex.slice(2,4),16);var b=parseInt(hex.slice(4,6),16);r/=255;g/=255;b/=255;var max=Math.max(r,g,b),min=Math.min(r,g,b);var h,s,l=(max+min)/2;if(max==min){h=s=0;// achromatic
}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return[h,s,l];};/**
	 * Chooses either a white or black foreground color depending on the "lightness" of the background color. Note that this simply
	 * checks if the value is above the hue which works well but not ideally for red colors which the human eye interprets differently.
	 * More complex algorithms are available but chartists rarely use red as a background color.
	 * @param  {string} backgroundColor The background color (CSS format)
	 * @return {string}                 Either #000000 (black) or #FFFFFF (white) depending on which will look best on the given background color
	 * @memberof CIQ
	 */CIQ.chooseForegroundColor=function(backgroundColor){/*var hex=CIQ.colorToHex(backgroundColor);
		var r=parseInt(hex.slice(1,3),16);
		var g=parseInt(hex.slice(3,5),16);
		var b=parseInt(hex.slice(5,7),16);
		if(r+g+b>318) return "#000000";*/var hsl=CIQ.hsl(backgroundColor);var l=hsl[2];if(l>hsl[0])return"#000000";//if(l && l>0.5) return "#000000";
return"#FFFFFF";};/**
	 * Convert a pattern type to an array useful for setting the context.setLineDash
	 * @param {number} [width=1] A valid lineWidth from 1
	 * @param {string} [pattern=solid] A valid pattern (solid, dotted, dashed)
	 * @return {array} The array representing pixels of draw/skip etc.  Use it as argument to context.setLineDash()
	 * @memberof CIQ
	 * @since 4.0.0
	 */CIQ.borderPatternToArray=function(width,pattern){if(!pattern)return[];if(pattern instanceof Array)return pattern;if(pattern=="dotted")return[width,width];if(pattern=="dashed")return[width*5,width*5];if(pattern!="solid"&&pattern!="none")console.log('Unsupported pattern "'+pattern+'"; defaulting to "solid"');return[];};/**
	 * Gets the background color of an element by traversing up the parent stack.
	 * @param  {HTMLElement} el The element to examine
	 * @return {string}    The background color
	 * @memberof CIQ
	 */CIQ.getBackgroundColor=function(el){var bgColor=null;while(!bgColor||CIQ.isTransparent(bgColor)){var cStyle=getComputedStyle(el);if(!cStyle)return;bgColor=cStyle.backgroundColor;if(CIQ.isTransparent(bgColor))bgColor="transparent";el=el.parentNode;if(!el||!el.tagName)break;}if(!bgColor||bgColor=="transparent")bgColor="#FFFFFF";return bgColor;};CIQ.yyyymmddhhmmssmmmrx=new RegExp("\\d{17}");/**
	 * Converts a string form date into a JavaScript Date object with time. Supports various standard date formats
	 * @param  {string} dt String form of a date (such as yyyymmddhhmm, yyyy-mm-dd hh:mm, etc)
	 * @return {date}    A JavaScript Date object
	 * @memberof CIQ
	 */CIQ.strToDateTime=function(dt){if(!dt||dt.getFullYear)return dt;//if passing in a JS date, return it.
var myDateArray=[];var y,m,d,h,mn,sc,ms;if(dt.length==12||dt.length==14){// yyyymmddhhmm[ss]
y=parseFloat(dt.substring(0,4));m=parseFloat(dt.substring(4,6))-1;d=parseFloat(dt.substring(6,8));h=parseFloat(dt.substring(8,10));mn=parseFloat(dt.substring(10,12));sc=parseFloat(dt.substring(12,14))||0;return new Date(y,m,d,h,mn,sc,0);}else if(CIQ.yyyymmddhhmmssmmmrx.test(dt)){y=parseFloat(dt.substring(0,4));m=parseFloat(dt.substring(4,6))-1;d=parseFloat(dt.substring(6,8));h=parseFloat(dt.substring(8,10));mn=parseFloat(dt.substring(10,12));sc=parseFloat(dt.substring(12,14));ms=parseFloat(dt.substring(14,17));return new Date(y,m,d,h,mn,sc,ms);}var lr=[dt];var t=dt.indexOf("T");if(t!=-1){var afterT=dt.substring(t);if(!CIQ.isIE8&&(afterT.indexOf("Z")!=-1||afterT.indexOf("-")!=-1||afterT.indexOf("+")!=-1)){return new Date(dt);// utc time if it contains actual timezone information
}lr=dt.split("T");}else if(dt.indexOf(" ")!=-1)lr=dt.split(" ");if(lr[0].indexOf('/')!=-1)myDateArray=lr[0].split("/");else if(lr[0].indexOf('-')!=-1)myDateArray=lr[0].split("-");else return CIQ.strToDate(dt);//give up, maybe it's just a date
var year=parseFloat(myDateArray[2],10);if(myDateArray[0]&&myDateArray[0].length==4){// YYYY-MM-DD
year=parseFloat(myDateArray[0],10);myDateArray[0]=myDateArray[1];myDateArray[1]=myDateArray[2];}if(lr.length>1){var ampm=lr[2];lr=lr[1].split(':');if(ampm){if(lr[0]=="12"&&ampm.toUpperCase()=="AM")lr[0]=0;else if(lr[0]!="12"&&ampm.toUpperCase()=="PM")lr[0]=parseInt(lr[0],10)+12;}var sec=0,msec=0;if(lr.length==3){if(lr[2].indexOf(".")==-1){sec=parseInt(lr[2],10);}else{sec=lr[2].split(".");if(sec[1].length==3){msec=sec[1];sec=sec[0];}else{//only IE8 should get here
msec=sec[1].substr(0,3);var tz=parseInt(sec[1].substr(3),10);sec=sec[0];var rDt=new Date(year,myDateArray[0]-1,myDateArray[1],lr[0],lr[1],sec,msec);rDt.setMinutes(rDt.getMinutes()-rDt.getTimezoneOffset()-tz%100-Math.round(tz/100)*60);return rDt;}}}return new Date(year,myDateArray[0]-1,myDateArray[1],lr[0],lr[1],sec,msec);}return new Date(year,myDateArray[0]-1,myDateArray[1],0,0,0,0);};/**
	 * Converts a string form date into a JavaScript object. Only use if you know that the string will not include a time, otherwise use @see CIQ.strToDateTime
	 * @param  {string} dt - Date in string format such as MM/DD/YY or YYYYMMDD or 2014-10-25T00:00:00+00:00 or 201506170635
	 * @return {date}    JavaScript date object -new Date()-
	 * @memberof CIQ
	 */CIQ.strToDate=function(dt){var myDateArray;if(dt.indexOf('/')!=-1)myDateArray=dt.split("/");else if(dt.indexOf('-')!=-1)myDateArray=dt.split("-");else if(dt.length>=8){return new Date(parseFloat(dt.substring(0,4)),parseFloat(dt.substring(4,6))-1,parseFloat(dt.substring(6,8)));}else{return new Date();}if(myDateArray.length<3){// didn't find enough data for month, day and year.
return new Date();}if(myDateArray[2].indexOf(' ')!=-1){myDateArray[2]=myDateArray[2].substring(0,myDateArray[2].indexOf(' '));}else if(myDateArray[2].indexOf('T')!=-1){myDateArray[2]=myDateArray[2].substring(0,myDateArray[2].indexOf('T'));}var year=parseFloat(myDateArray[2],10);if(year<20)year+=2000;if(myDateArray[0].length==4){// YYYY-MM-DD
year=parseFloat(myDateArray[0],10);myDateArray[0]=myDateArray[1];myDateArray[1]=myDateArray[2];}return new Date(year,myDateArray[0]-1,myDateArray[1]);};/**
	 * Converts a JavaScript Date or string form date to mm/dd/yyyy format
	 * @param  {string} dt Date in JavaScript Date or string format such as YYYY-MM-DD
	 * @return {string}   Date in mm/dd/yyyy format
	 * @memberof CIQ
	 * @since 2016-07-16
	 */CIQ.mmddyyyy=function(dt){if(typeof dt==='string'){dt=CIQ.strToDate(dt);}var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;return m+"/"+d+"/"+dt.getFullYear();};/**
	 * Converts a JavaScript Date to yyyy-mm-dd format
	 * @param  {date} dt JavaScript Date object
	 * @return {string}    Date in yyyy-mm-dd format
	 * @memberof CIQ
	 */CIQ.yyyymmdd=function(dt){var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;return dt.getFullYear()+"-"+m+"-"+d;};/**
	 * Converts a date into yyyymmddhhmm format
	 * @param  {date} dt A JavaScript Date object
	 * @return {string}    Date in yyyymmddhhmm format
	 * @memberof CIQ
	 */CIQ.yyyymmddhhmm=function(dt){var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;var h=dt.getHours();if(h<10)h="0"+h;var mn=dt.getMinutes();if(mn<10)mn="0"+mn;return''+dt.getFullYear()+m+d+h+mn;};/**
	 * Converts a date into yyyymmddhhmmssmmm format
	 * @param  {date} dt A JavaScript Date object
	 * @return {string}    Date in yyyymmddhhmmssmmm format
	 * @memberof CIQ
	 */CIQ.yyyymmddhhmmssmmm=function(dt){var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;var h=dt.getHours();if(h<10)h="0"+h;var mn=dt.getMinutes();if(mn<10)mn="0"+mn;var s=dt.getSeconds();if(s<10)s="0"+s;var ms=dt.getMilliseconds();if(ms<10)ms="00"+ms;else if(ms<100)ms="0"+ms;return''+dt.getFullYear()+m+d+h+mn+s+ms;};/**
	 * Converts a date into yyyy/mm/dd hh:mm format
	 * @param  {date} dt A JavaScript Date object
	 * @return {string}    Date in yyyy/mm/dd hh:mm format
	 * @memberof CIQ
	 */CIQ.friendlyDate=function(dt){var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;var h=dt.getHours();if(h<10)h="0"+h;var mn=dt.getMinutes();if(mn<10)mn="0"+mn;return''+dt.getFullYear()+"/"+m+"/"+d+" "+h+":"+mn;};/**
	 * Converts a date into YYYY-MM-DDTHH:MM:SSZ format (UTC)
	 * @param  {date} dt A JavaScript Date object
	 * @return {string}    Date in YYYY-MM-DDTHH:MM:SSZ format
	 * @memberof CIQ
	 */CIQ.standardUTCDate=function(dt){var m=dt.getUTCMonth()+1;if(m<10)m="0"+m;var d=dt.getUTCDate();if(d<10)d="0"+d;var h=dt.getUTCHours();if(h<10)h="0"+h;var mn=dt.getUTCMinutes();if(mn<10)mn="0"+mn;var s=dt.getUTCSeconds();if(s<10)s="0"+s;return''+dt.getUTCFullYear()+"-"+m+"-"+d+"T"+h+":"+mn+":"+s+"Z";};/**
	 * Converts a string form date into mm-dd hh:mm format
	 * @param  {string} strdt Date in string format (such as yyyymmddhhmm, yyyy-mm-dd hh:mm, etc)
	 * @return {string}       Date in mm-dd hh:mm format
	 * @memberof CIQ
	 * @since 5.0.0 will output seconds and millis if present
	 */CIQ.mmddhhmm=function(strdt){var dt=CIQ.strToDateTime(strdt);var m=dt.getMonth()+1;if(m<10)m="0"+m;var d=dt.getDate();if(d<10)d="0"+d;var h=dt.getHours();if(h<10)h="0"+h;var mn=dt.getMinutes();if(mn<10)mn="0"+mn;var s=dt.getSeconds();if(s<10)s="0"+s;var ms=dt.getMilliseconds();if(ms<10)ms="00"+ms;else if(ms<100)ms="0"+ms;if(h=="00"&&mn=="00"&&s=="00"&&ms=="000")return m+"-"+d+"-"+dt.getFullYear();if(s=="00"&&ms=="000")return m+"-"+d+" "+h+":"+mn;if(ms=="000")return m+"-"+d+" "+h+":"+mn+":"+s;return m+"-"+d+" "+h+":"+mn+":"+s+":"+ms;};/**
	 * Gets the day of the year
	 * @param  {date} [dt] optional	The date to check.  If omitted, will use the current date.
	 * @return {number} 			Day of year
	 * @memberof CIQ
	 */CIQ.getYearDay=function(dt){var now=dt;if(!now)now=new Date();now.setHours(0,0,0,0);var start=new Date(now.getFullYear(),0,0);var diff=now-start;var oneDay=1000*60*60*24;var day=Math.round(diff/oneDay);return day;};/**
	 * DST checker.  Returns whether input date is in DST
	 * @param  {date} [dt] optional	The date to check.  If omitted, will use the current date.
	 * @return {boolean} True for DST, false for not.
	 * @memberof CIQ
	 */CIQ.isDST=function(dt){if(!dt)dt=new Date();var jan=new Date(dt.getFullYear(),0,1);var jul=new Date(dt.getFullYear(),6,1);var stdOffset=Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());return dt.getTimezoneOffset()!=stdOffset;};/**
	 * Returns a short, pseudo unique ID based on the current time. Radix 36 is used resulting in a compact string consisting only of letters and numerals.
	 * While not guaranteed to be unique, this function has a high probability of uniqueness when it is triggered by human activity even in a large user base.
	 * @return {string} A unique string consisting of letters and numerals
	 * @memberof CIQ
	 */CIQ.uniqueID=function(){var epoch=new Date();var id=epoch.getTime().toString(36);id+=Math.floor(Math.random()*Math.pow(36,2)).toString(36);return id.toUpperCase();};/**
	 * Returns the host portion of a url
	 * @param  {string} url The url, such as document.location.href
	 * @return {string}     The host portion, including port, if the url is a valid URI
	 * @memberof CIQ
	 */CIQ.getHostName=function(url){try{return url.match(/:\/\/(.[^/]+)/)[1];}catch(e){return"";}};/**
	 * Gets an Ajax server dependent on browser method. If IE9 and a cross domain request then XDomainRequest() will be used
	 * rather than XMLHttpRequest.
	 * @param  {string} url The url to connect with
	 * @return {object}     An ajax server
	 * @memberof CIQ
	 */CIQ.getAjaxServer=function(url){var server=false;var crossDomain=true;if((CIQ.isIE9||CIQ.isIE8)&&url){if(CIQ.getHostName(url)==="")crossDomain=false;if(CIQ.getHostName(url)==CIQ.getHostName(window.location.href))crossDomain=false;}if((CIQ.isIE9||CIQ.isIE8)&&crossDomain){server=new XDomainRequest();return server;}try{//All modern browsers (IE7+, Firefox, Chrome, Safari, and Opera) have a built-in XMLHttpRequest object.
server=new XMLHttpRequest();}catch(e){console.warn("ajax not supported in browser");}return server;};/**
	 * A parsed query string object
	 * Does not support using multi-value keys (i.e. "a=1&a=2")
	 * @param  {string} [query] Query string. If not provided then the browser location's query string will be used
	 * @return {object}       An object containing the parsed values of the query string
	 * @memberof CIQ
	 */CIQ.qs=function(query){var qsParm={};if(!query)query=window.location.search.substring(1);var parms=query.split('&');for(var i=0;i<parms.length;i++){var pos=parms[i].indexOf('=');var key;if(pos>0){key=parms[i].substring(0,pos);qsParm[key]=parms[i].substring(pos+1);}else{key=parms[i];qsParm[key]=null;}}return qsParm;};/**
	 * @callback CIQ.postAjax~requestCallback
	 * @param {number} status HTTP status
	 * @param {string} response HTTP response
	 */ /**
	 * Convenience function for making an ajax post. If payload is non-null then the method will be set to POST, otherwise GET. Cross origin
	 * ajax is support on IE9.
	 * @param {object} params Parameters for the post
	 * @param  {string}   [params.url]         The url to send the ajax query to
	 * @param  {string}   [params.payload]     An optional payload to send
	 * @param  {CIQ.postAjax~requestCallback} [params.cb]          Callback function when complete
	 * @param  {string}   [params.contentType] Optionally override the content type
	 * @param  {boolean}   [params.noEpoch]     By default the epoch is appended as a query string to bust caching. Set this to false to not append the epoch.
	 * @param {string} [params.method] Optionally override the HTTP method
	 * @param {array} [params.headers] Optional additional HTTP headers to send
	 * @param {boolean} [params.responseHeaders] Optional Set to true to have callback passed the response headers from the server
	 * @param {number} [params.timeout] Optional Request timeout in msec.  If omitted, timeout is default (no timeout)
	 * @param {boolean} [params.ungovernable] Optional If true, request not subject to rate limiting
	 * @param {string} arg1 Payload
	 * @param {function} arg2 Callback
	 * @param {string} arg3 Ajax content type
	 * @param {boolean} arg4 Set to true for no epoch
	 * @return {boolean} True if there were no errors fetching data.
	 * @memberof CIQ
	 * @since 3.0.0 Added timeout and ungovernable params
	 */CIQ.postAjax=function(params,arg1,arg2,arg3,arg4){if(typeof params=="string"){params={url:params,payload:arg1,cb:arg2,contentType:arg3,noEpoch:arg4,method:null,responseHeaders:false};}var url=params.url,cb=params.cb,payload=params.payload;if(!cb)cb=function cb(){};if(!params.ungovernable){if(CIQ.Extras&&CIQ.Extras.RequestLimiter&&CIQ.Extras.RequestLimiter.hitRequestLimit(url)){cb(429,null,{});return;}}function parseHeaders(server){//Optional code for processing headers. Doesn't work for IE9
var headers={};if(!params.responseHeaders)return;var headerString=server.getAllResponseHeaders();var headerArray=headerString.split("\n");for(var i=0;i<headerArray.length;i++){var split=headerArray[i].split(":");while(split[1]&&split[1].charAt(0)==' '){split[1]=split[1].substring(1);}if(split[0]!==""){headers[split.shift()]=split.join(":");}}return headers;}function removeServer(svr){for(var i=0;i<CIQ.ajaxes.length;i++){if(CIQ.ajaxes[i]==svr){CIQ.ajaxes.splice(i,1);return;}}}var server=CIQ.getAjaxServer(url);if(!server)return false;if(!CIQ.ajaxes)CIQ.ajaxes=[];CIQ.ajaxes.unshift(server);// We need to do this maintenance stuff for old IE which may destroy the server before it has come back:
//  http://stackoverflow.com/questions/8058446/ie-xdomainrequest-not-always-work
var epoch=new Date();if(!params.noEpoch){if(url.indexOf('?')==-1)url+="?ciqrandom="+epoch.getTime();else url+="&ciqrandom="+epoch.getTime();}var method=params.method,headers=params.headers;if(!method)method=payload?"POST":"GET";if(!CIQ.isIE9&&!CIQ.isIE8||server.constructor==XMLHttpRequest){server.open(method,url,true);if(!params.contentType)params.contentType='application/x-www-form-urlencoded';if(payload)server.setRequestHeader('Content-Type',params.contentType);if(headers){for(var header in headers){server.setRequestHeader(header,headers[header]);}}}else{url=url.replace("https:",window.location.protocol);server.open(method,url,true);}if(params.timeout){server.timeout=params.timeout;// in msec
}server.ontimeout=function(){removeServer(server);cb(408,null,{});};server.onload=function(){if(this.status===0)this.status="0";else if(!this.status)this.status=200;//XDomainRequest
removeServer(server);cb(this.status,this.responseText,parseHeaders(this));};server.onerror=function(){removeServer(server);cb("0",null,{});};server.onprogress=function(){};//IE9 requires
try{server.send(payload);}catch(e){cb("0",e,{});}return true;};/**
	 * Convenience function to convert API periodicity parameters to internal periodicity format.
	 * @param  {string} period The period value as required by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param  {string} [interval] The interval value as required by {@link CIQ.ChartEngine#setPeriodicity}
	 * @param  {string} timeUnit The timeUnit value as required by {@link CIQ.ChartEngine#setPeriodicity}
	 * @return {object} object containing internally compliant periodicity,interval, timeUnit
	 * @memberof CIQ
	 * @since 5.1.1
	 */CIQ.cleanPeriodicity=function(period,interval,timeUnit){if(isNaN(period))period=1;if(!interval)interval=1;if(!isNaN(interval)&&timeUnit){// disregard the numeric interval if a daily timeUnit is provided
// TODO: support different interval values other than 1 for day, week, etc
//	we'll need to propagate timeUnit down wherever we are examining the interval alone to determine the time unit
if(!(timeUnit=="minute"||timeUnit=="second"||timeUnit=="millisecond")){interval=timeUnit;timeUnit=null;}}// clean up timeUnit
//if(CIQ.ChartEngine.isDailyInterval(interval)) timeUnit=null; // redundant
else if(interval=="tick")timeUnit=null;else if(!timeUnit&&!isNaN(interval))timeUnit="minute";// support year
if(interval=="year"){interval="month";if(!period)period=1;period=period*12;}return{period:period,interval:interval,timeUnit:timeUnit};};/**
	 * Convenience function to determine if a value is a valid number.
	 * @param  {number} n The number to check
	 * @return {boolean} True if n is a real finite number. NaN, Infinity, null, undefined, etc are not considered to be a valid number.
	 * @memberof CIQ
	 * @since 5.2.2
	 */CIQ.isValidNumber=function(n){return isFinite(n)&&+n===n;};/**
	 * Convenience function to count number of decimal places in a number
	 * @param  {number} n The number to check
	 * @return  {number} Number of decimal places
	 * @memberof CIQ
	 * @since 
	 * <br>&bull; 6.1.0
	 * <br>&bull;  6.2.0 Now handles scientific notation
	 */CIQ.countDecimals=function(n){if(typeof n!=="number"||isNaN(n))return 0;if(Math.floor(n)===Number(n))return 0;var strN=n.toString().split("e-");if(strN.length>1)return CIQ.countDecimals(Number(strN[0]))+Number(strN[1]);if(strN[0].indexOf(".")>-1)return strN[0].split(".")[1].length;return 0;};return _exports;};N9XX.s6=function(M6){return{Z6:function Z6(){var k6,g6=arguments;switch(M6){case 1:k6=g6[1]-g6[0]/g6[2]+g6[3];break;case 23:k6=g6[0]*g6[1];break;case 14:k6=(-g6[1]-g6[0])/g6[3]+g6[2];break;case 5:k6=-(g6[0]/-g6[1]);break;case 13:k6=g6[0]+g6[1]-g6[2];break;case 11:k6=g6[1]/+g6[0];break;case 12:k6=g6[2]-g6[3]+-g6[0]+g6[1];break;case 9:k6=g6[0]|g6[1];break;case 21:k6=(g6[2]+g6[3])*g6[0]-g6[1];break;case 7:k6=g6[1]/g6[0];break;case 16:k6=(g6[5]-g6[1]+g6[3]+g6[0])*g6[2]/g6[4];break;case 22:k6=g6[1]-g6[0]+-g6[2];break;case 19:k6=g6[0]-g6[1]*g6[2];break;case 3:k6=g6[1]+g6[0];break;case 6:k6=(-(g6[3]*g6[1])-g6[0])/-g6[2];break;case 20:k6=g6[1]-g6[0]+g6[3]+-g6[2];break;case 4:k6=g6[0]-g6[1];break;case 17:k6=(g6[1]-g6[0])/g6[2];break;case 15:k6=g6[4]*(g6[0]+g6[3])/g6[1]-g6[2];break;case 18:k6=g6[0]/(g6[1]*g6[2]);break;case 10:k6=g6[1]*g6[2]/g6[0];break;case 0:k6=(-g6[0]-g6[2])*-g6[3]/g6[1];break;case 8:k6=(g6[1]+g6[2])/g6[0];break;case 2:k6=g6[0]+g6[2]/g6[1]-g6[3];break;}return k6;},R6:function R6(x6){M6=x6;}};}();N9XX.F6=function(){return typeof N9XX.s6.R6==='function'?N9XX.s6.R6.apply(N9XX.s6,arguments):N9XX.s6.R6;};function N9XX(){}N9XX.D6=function(){return typeof N9XX.s6.Z6==='function'?N9XX.s6.Z6.apply(N9XX.s6,arguments):N9XX.s6.Z6;};N9XX.c6=function(){return typeof N9XX.s6.Z6==='function'?N9XX.s6.Z6.apply(N9XX.s6,arguments):N9XX.s6.Z6;};N9XX.P5=function(){return typeof N9XX.y5.r5==='function'?N9XX.y5.r5.apply(N9XX.y5,arguments):N9XX.y5.r5;};N9XX.y5=function(){var T5=function T5(I5,M5){var F5=M5&0xffff;var c5=M5-F5;return(c5*I5|0)+(F5*I5|0)|0;},q5=function q5(h5,W5,x5){var t5=0xcc9e2d51,j5=0x1b873593;var k5=x5;var s5=W5&~0x3;for(var g5=0;g5<s5;g5+=4){var R5=h5.charCodeAt(g5)&0xff|(h5.charCodeAt(g5+1)&0xff)<<8|(h5.charCodeAt(g5+2)&0xff)<<16|(h5.charCodeAt(g5+3)&0xff)<<24;R5=T5(R5,t5);R5=(R5&0x1ffff)<<15|R5>>>17;R5=T5(R5,j5);k5^=R5;k5=(k5&0x7ffff)<<13|k5>>>19;k5=k5*5+0xe6546b64|0;}R5=0;switch(W5%4){case 3:R5=(h5.charCodeAt(s5+2)&0xff)<<16;case 2:R5|=(h5.charCodeAt(s5+1)&0xff)<<8;case 1:R5|=h5.charCodeAt(s5)&0xff;R5=T5(R5,t5);R5=(R5&0x1ffff)<<15|R5>>>17;R5=T5(R5,j5);k5^=R5;}k5^=W5;k5^=k5>>>16;k5=T5(k5,0x85ebca6b);k5^=k5>>>13;k5=T5(k5,0xc2b2ae35);k5^=k5>>>16;return k5;};return{r5:q5};}();N9XX.P6=function(){return typeof N9XX.s6.R6==='function'?N9XX.s6.R6.apply(N9XX.s6,arguments):N9XX.s6.R6;};N9XX.V6=function(){return typeof N9XX.s6.r5==='function'?N9XX.s6.r5.apply(N9XX.s6,arguments):N9XX.s6.r5;};N9XX.L5=function(){return typeof N9XX.y5.r5==='function'?N9XX.y5.r5.apply(N9XX.y5,arguments):N9XX.y5.r5;};N9XX.f6=function(){return typeof N9XX.s6.r5==='function'?N9XX.s6.r5.apply(N9XX.s6,arguments):N9XX.s6.r5;};var __js_customCharts_;__js_customCharts_=function __js_customCharts_(Q){var N;N=Q.CIQ;N.ChartEngine.prototype.drawHeatmap=function(K,F){var C0,U,J,S,g,R,E,Z,h,M,B,T;C0="c";C0+="ha";C0+="rt";if(!F||!F.length){return;}U=K.panel;if(!U){U=C0;}J=this.panels[U];if(!J){return;}S=K.yAxis?K.yAxis:J.yAxis;g=this.chart.dataSegment;this.getDefaultColor();if(!K.name){K.name="Data";}if(!K.widthFactor){K.widthFactor=1;}if(!K.height){K.height=Math.pow(10,"1"*1-(J.decimalPlaces||J.chart.decimalPlaces));}R=0.5;if(J.chart.tmpWidth<=1){R=0;}E=null;Z=null;h=this;M=null;this.startClip(U);B=this.chart.context;for(var Y=0;Y<F.length;Y++){T=F[Y];D(T.field,T.color,T.opacity,null,K.widthFactor,T.border_color?R:-R/4);if(T.border_color&&this.layout.candleWidth>=2){D(T.field,T.border_color,T.opacity,!0,K.widthFactor,R);}}B.lineWidth=1;B.globalAlpha=+"1";function D(h9,c9,Q9,T9,B9,x9){var n5=N9XX;var f0,G,W,u,f,z9,a,X,k,v9,A,J9,s9,K9,N5,C5,f5;f0="nu";f0+="m";f0+="ber";B.beginPath();B.fillStyle=c9;B.strokeStyle=c9;G=h.layout.candleWidth*B9;W=Math.floor(h.pixelFromBar(0,J.chart)-h.layout.candleWidth);if(_typeof(Q9)==f0){B.globalAlpha=K.opacity;}if(_typeof(Q9)=="object"){z9={minOpacity:Q9.min||0,maxOpacity:Q9.max||"1"*1};}for(var N9=0;N9<g.length;N9++){a=g[N9];if(a&&a.candleWidth){if(N9===+"0"){W+=h.layout.candleWidth;}else{n5.P6(0);var B0=n5.D6(13,17,4,2);W+=(a.candleWidth+G/B9)/B0;}G=a.candleWidth*B9;}else{W+=h.layout.candleWidth;}n5.F6(1);u=n5.D6(G,W,2,x9);n5.P6(2);f=n5.D6(W,2,G,x9);if(f-u<2){n5.P6(3);f=n5.c6(1,u);}if(!a)continue;X=a[h9];if(!X)continue;if(typeof X=="number"){X=[X];}for(var d9=0;d9<X.length;d9++){k=X[d9];v9=0;if(k instanceof Array){if(z9){n5.P6(4);var D0=n5.D6(14,12);n5.P6(5);var Z0=n5.D6(18,18);n5.F6(6);var m0=n5.c6(13,17,66,7);B.globalAlpha=k[D0]*z9.maxOpacity+(Z0-k[m0])*z9.minOpacity;}v9=k[1];k=k[0];}A=h.pixelFromPrice(k,J,S);if(!M){J9=h.pixelFromPrice(k-K.height,J,S);B.lineWidth=1;n5.F6(4);E=n5.c6(J9,A);n5.P6(7);Z=n5.D6(2,E);M=B.lineWidth;}if(T9){n5.P6(4);s9=n5.c6(A,Z);n5.F6(3);K9=n5.c6(Z,A);n5.P6(4);B.rect(u,s9,n5.D6(f,u),n5.D6(K9,s9));}else{n5.P6(4);B.fillRect(u,n5.c6(A,Z),n5.D6(f,u),E);}if(K.showSize&&v9){B.textAlign="center";n5.F6(8);B.fillText(v9,n5.c6(2,f,u),A);}if(z9&&k instanceof Array){n5.F6(9);B.globalAlpha=n5.D6("0",0);}}}N5=257726625;C5=2139434939;f5=2;for(var J5=1;n5.P5(J5.toString(),J5.toString().length,1494)!==N5;J5++){if(T9){B.stroke();}B.globalAlpha=1;f5+=2;}if(n5.P5(f5.toString(),f5.toString().length,49697)!==C5){if(T9){B.stroke();}B.globalAlpha=3;}B.closePath();}this.endClip();};N.ChartEngine.prototype.drawCandles=function(V9,N2,Z9){var v5=N9XX;var z0,R9,U5,B5,D5,H0,o0,w0,M9,E9,w9,n9,e9,W0,j0,L0,u9,y9,C9,D9,o9,r9,t9,a9,X9,I9,F9,L9,P9,f9,Y9,m9,g9,O9,i9,H9,k9,U9,l9,S9,q9,p9,W9,G9,A9;z0="obj";z0+="ec";z0+="t";R9=V9.chart;if(!R9){R9=V9;U5=-+"1499448994";B5=1496305255;D5=2;for(var m5=1;v5.L5(m5.toString(),m5.toString().length,38591)!==U5;m5++){V9=V9.chart;D5+=2;}if(v5.L5(D5.toString(),D5.toString().length,"96850"-0)!==B5){V9=V9.chart;}V9=V9.chart;}H0=-509929557;o0=-2132585568;w0=2;for(var Q0=1;v5.L5(Q0.toString(),Q0.toString().length,99688)!==H0;Q0++){M9=!!0;E9=![];w9=null;n9=V9.yAxis;e9=null;w0+=2;}if(v5.L5(w0.toString(),w0.toString().length,27955)!==o0){M9=!0;E9=!0;w9=1;n9=V9.yAxis;e9=1;}if(Z9&&_typeof(Z9)==z0){M9=Z9.isOutline;W0=-237562298;j0=-375413568;L0=2;for(var N0=1;v5.P5(N0.toString(),N0.toString().length,48424)!==W0;N0++){E9=Z9.isHistogram;w9=Z9.field;L0+=2;}if(v5.L5(L0.toString(),L0.toString().length,41185)!==j0){E9=Z9.isHistogram;w9=Z9.field;}n9=Z9.yAxis;e9=Z9.overlayScaling;}else{M9=Z9;E9=arguments[3];}u9=R9.dataSegment;y9=R9.context;C9=n9.top;D9=n9.bottom;a9=new Array(u9.length);X9="transparent";I9="transparent";F9=+"0";L9=R9.dataSet.length-R9.scroll-1;P9={};v5.P6(10);var E6=v5.c6(13,13,2);f9=R9.tmpWidth/E6;Y9=this.layout.candleWidth;m9=V9.left-0.5*Y9+this.micropixels-1;for(var j9=0;j9<=u9.length;j9++){g9=f9;v5.F6(7);m9+=v5.D6(2,Y9);Y9=this.layout.candleWidth;v5.P6(11);m9+=v5.D6("2",Y9);O9=u9[j9];if(!O9)continue;if(O9.projection)continue;if(O9.candleWidth){v5.P6(12);var d6=v5.D6(19,7,28,14);m9+=(O9.candleWidth-Y9)/d6;Y9=O9.candleWidth;if(Z9.isVolume||Y9<R9.tmpWidth){v5.P6(7);g9=v5.D6(2,Y9);}}if(R9.transformFunc&&n9==R9.panel.yAxis&&O9.transform){O9=O9.transform;}if(O9&&w9){O9=O9[w9];}if(!O9&&O9!==0)continue;i9=O9.Close;H9=O9.Open===undefined?i9:O9.Open;if(E9&&R9.defaultPlotField){i9=O9[R9.defaultPlotField];}if(!i9&&i9!==+"0")continue;if(!E9&&(H9==i9||H9===null))continue;k9=N2(this,O9,M9?"outline":"solid");if(!k9)continue;if(M9){X9=k9;}else{I9=k9;}P9[I9]=1;if(!N.isTransparent(X9)){F9=0.5;}y9.beginPath();y9.fillStyle=I9;if(!O9.cache){O9.cache={};}U9=O9.cache;v5.F6(3);l9=v5.D6(j9,L9);if(l9<V9.cacheLeft||l9>V9.cacheRight||!U9.open){if(e9){S9=e9.bottom-(H9-e9.min)*e9.multiplier;q9=e9.bottom-(i9-e9.min)*e9.multiplier;}else{S9=n9.semiLog?this.pixelFromTransformedValue(H9,V9,n9):(n9.high-H9)*n9.multiplier+n9.top;q9=n9.semiLog?this.pixelFromTransformedValue(i9,V9,n9):(n9.high-i9)*n9.multiplier+n9.top;}a9[j9]=q9;o9=Math.floor(E9?q9:Math.min(S9,q9))+F9;r9=E9?n9.bottom:Math.max(S9,q9);v5.P6(4);t9=Math.floor(v5.c6(r9,o9));if(o9<C9){if(o9+t9<C9){U9.open=o9;U9.close=o9;continue;}v5.F6(4);t9-=v5.c6(C9,o9);o9=C9;}if(o9+t9>D9){v5.P6(13);t9-=v5.c6(o9,t9,D9);}t9=Math.max(t9,2);U9.open=o9;U9.close=U9.open+t9;}if(U9.open>=D9)continue;if(U9.close<=C9)continue;p9=Math.floor(m9)+0.5;W9=Math.floor(p9-g9)+F9;G9=Math.round(p9+g9)-F9;if(U9.open!=U9.close){y9.rect(W9,U9.open,Math.max(1,G9-W9),Math.max(1,U9.close-U9.open));}if(I9!="transparent"){y9.fill();}if(F9){y9.lineWidth=1;if(Z9.highlight){y9.lineWidth*=2;}y9.strokeStyle=X9;y9.stroke();}}A9={colors:[],cache:a9};for(var b9 in P9){if(!Z9.hollow||!N.equals(b9,this.containerColor)){A9.colors.push(b9);}}return A9;};N.ChartEngine.prototype.drawShadows=function(s2,S2,Z2){var d5=N9XX;var Y0,S0,K0,J2,C2,T2,F2,Q2,d2,h2,e2,v2,H2,m2,c2,o2,z2,M2,K2,E2,R2,U2,B2,j2,O2,Y2,i2,I2,g2,n2;d5.P6(4);Y0=d5.D6("1926652981",0);S0=1274148408;K0=2;for(var O0=1;d5.L5(O0.toString(),O0.toString().length,88709)!==Y0;O0++){J2=s2.chart;K0+=2;}if(d5.L5(K0.toString(),K0.toString().length,21863)!==S0){J2=s2.chart;}if(!J2){J2=s2;s2=s2.chart;}C2=J2.dataSegment;T2=this.chart.context;T2.lineWidth=1;if(Z2.highlight){T2.lineWidth*=2;}F2=Z2.field;Q2=Z2.yAxis||s2.yAxis;d2=Z2.overlayScaling;h2=Q2.top;e2=Q2.bottom;d5.F6(14);var e6=d5.c6(13,15,15,2);m2=J2.dataSet.length-J2.scroll-e6;c2=this.layout.candleWidth;d5.F6(7);var H6=d5.c6(12,12);d5.F6(15);var o6=d5.c6(17,20,19,8,16);o2=s2.left-"0.5"*H6*c2+this.micropixels-o6;for(var V2="0"-0;V2<=C2.length;V2++){d5.F6(7);o2+=d5.D6(2,c2);c2=this.layout.candleWidth;d5.P6(7);o2+=d5.c6(2,c2);z2=C2[V2];if(!z2)continue;if(z2.projection)continue;if(z2.candleWidth){d5.P6(16);var w6=d5.c6(7,19,2,11,17,18);o2+=(z2.candleWidth-c2)/w6;c2=z2.candleWidth;}M2=S2(this,z2,"shadow");if(!M2)continue;if(J2.transformFunc&&Q2==J2.panel.yAxis&&z2.transform){z2=z2.transform;}if(z2&&F2){z2=z2[F2];}if(!z2&&z2!==+"0")continue;K2=z2.Close;E2=z2.Open===undefined?K2:z2.Open;R2=z2.High===undefined?Math.max(K2,E2):z2.High;U2=z2.Low===undefined?Math.min(K2,E2):z2.Low;if(!K2&&K2!==0)continue;if(!z2.cache){z2.cache={};}B2=z2.cache;d5.F6(3);j2=d5.c6(V2,m2);if(j2<s2.cacheLeft||j2>s2.cacheRight||!B2.top){if(d2){v2=d2.bottom-(R2-d2.min)*d2.multiplier;H2=d2.bottom-(U2-d2.min)*d2.multiplier;}else{v2=Q2.semiLog?this.pixelFromTransformedValue(R2,s2,Q2):(Q2.high-R2)*Q2.multiplier+Q2.top;H2=Q2.semiLog?this.pixelFromTransformedValue(U2,s2,Q2):(Q2.high-U2)*Q2.multiplier+Q2.top;}d5.P6(4);O2=d5.c6(H2,v2);if(v2<h2){if(v2+O2<h2){B2.top=v2;B2.bottom=v2;continue;}d5.F6(4);O2-=d5.c6(h2,v2);v2=h2;}if(v2+O2>e2){d5.F6(13);O2-=d5.c6(v2,O2,e2);}B2.top=v2;B2.bottom=B2.top+O2;}if(B2.top>=e2)continue;if(B2.bottom<=h2)continue;Y2=Math.floor(o2)+0.5;T2.beginPath();if(K2==E2){i2=this.offset;if(Z2.isVolume){d5.P6(7);i2=d5.D6(2,c2);}d5.F6(4);I2=d5.c6(Y2,i2);d5.P6(3);g2=d5.D6(i2,Y2);if(d2){n2=d2.bottom-(K2-d2.min)*d2.multiplier;}else{n2=Math.floor(Q2.semiLog?this.pixelFromTransformedValue(K2,s2,Q2):(Q2.high-K2)*Q2.multiplier+Q2.top)+0.5;}if(n2<=e2&&n2>=h2){T2.moveTo(I2,n2);T2.lineTo(g2,n2);}}if(R2!=U2){T2.moveTo(Y2,B2.top);T2.lineTo(Y2,B2.bottom);}T2.strokeStyle=M2;T2.stroke();}};N.ChartEngine.prototype.drawBarChart=function(a2,t8,e8,B8){var h6=N9XX;var A2,T8,Z8,X2,K8,l0,A0,G0,h8,u2,v8,b2,R0,k0,h0,N8,P2,V8,f2,y8,c8,O8,n8,L2,Q8,J0,D2,s8,W2,z8,U8,R8,k2,o8,r2,d8,l2,J8;A2=a2.chart;if(!A2){A2=a2;a2=a2.chart;}T8=A2.dataSegment;Z8=new Array(T8.length);X2=A2.context;K8=this.canvasStyle(t8);if(K8.width&&parseInt(K8.width,10)<=25){h6.F6(4);l0=h6.D6("350843584",0);A0=+"1139184405";G0=2;for(var p0=1;h6.P5(p0.toString(),p0.toString().length,8950)!==l0;p0++){X2.lineWidth=Math.max(+"1",N.stripPX(K8.width));G0+=2;}if(h6.P5(G0.toString(),G0.toString().length,12755)!==A0){X2.lineWidth=Math.max(0,N.stripPX(K8.width));}}else{h6.P6(9);X2.lineWidth=h6.D6("1",0);}if(B8.highlight){X2.lineWidth*=2;}h8=B8.field;u2=B8.yAxis||a2.yAxis;v8=B8.overlayScaling;b2=u2.top;R0=-1790991;k0=-1701905436;h0=2;for(var s0=1;h6.P5(s0.toString(),s0.toString().length,4456)!==R0;s0++){N8=u2.bottom;h6.P6(5);var b6=h6.c6(19,19);y8=A2.dataSet.length-A2.scroll-b6;c8={};h6.F6(17);var Q6=h6.D6(5,11,3);O8=A2.tmpWidth/Q6;n8=X2.lineWidth/+"2";L2=this.layout.candleWidth;h0+=2;}if(h6.P5(h0.toString(),h0.toString().length,35437)!==k0){N8=u2.bottom;h6.P6(7);var Y6=h6.D6(10,10);y8=A2.dataSet.length/A2.scroll+"9"*Y6;c8={};O8=A2.tmpWidth*8;n8=X2.lineWidth%+"3";L2=this.layout.candleWidth;}Q8=a2.left-("0.5"-0)*L2+this.micropixels-1;for(var G2=+"0";G2<=T8.length;G2++){J0="hl";J0+="c";h6.P6(11);Q8+=h6.c6("2",L2);L2=this.layout.candleWidth;h6.F6(18);Q8+=h6.D6(L2,"2",1);D2=T8[G2];if(!D2)continue;if(D2.projection)break;if(D2.candleWidth){Q8+=(D2.candleWidth-L2)/+"2";L2=D2.candleWidth;}s8=e8(this,D2);if(!s8)continue;h6.P6(4);c8[s8]=h6.c6("1",0);X2.strokeStyle=s8;X2.beginPath();if(A2.transformFunc&&u2==A2.panel.yAxis&&D2.transform){D2=D2.transform;}if(D2&&h8){D2=D2[h8];}if(!D2&&D2!==0)continue;W2=D2.Close;z8=D2.Open===undefined?W2:D2.Open;U8=D2.High===undefined?Math.max(W2,z8):D2.High;R8=D2.Low===undefined?Math.min(W2,z8):D2.Low;if(!W2&&W2!==+"0")continue;if(!D2.cache){D2.cache={};}k2=D2.cache;h6.P6(3);o8=h6.D6(G2,y8);if(o8<a2.cacheLeft||o8>a2.cacheRight||!k2.top){if(v8){r2=v8.multiplier;d8=v8.bottom+v8.min*r2;h6.P6(19);P2=h6.c6(d8,U8,r2);h6.P6(19);V8=h6.D6(d8,R8,r2);h6.P6(19);k2.open=h6.D6(d8,z8,r2);h6.P6(19);k2.close=h6.c6(d8,W2,r2);}else{P2=this.pixelFromTransformedValue(U8,a2,u2);V8=this.pixelFromTransformedValue(R8,a2,u2);k2.open=u2.semiLog?this.pixelFromTransformedValue(z8,a2,u2):(u2.high-z8)*u2.multiplier+u2.top;k2.close=u2.semiLog?this.pixelFromTransformedValue(W2,a2,u2):(u2.high-W2)*u2.multiplier+u2.top;}Z8[G2]=k2.close;h6.F6(4);f2=h6.D6(V8,P2);if(P2<b2){if(P2+f2<b2){k2.top=P2;k2.bottom=P2;continue;}h6.F6(4);f2-=h6.c6(b2,P2);P2=b2;}if(P2+f2>N8){h6.P6(13);f2-=h6.c6(P2,f2,N8);}k2.top=P2;h6.F6(3);k2.bottom=h6.D6(f2,P2);}l2=Math.floor(Q8)+0.5;if(k2.top<N8&&k2.bottom>b2&&D2.High!=D2.Low){X2.moveTo(l2,k2.top-n8);X2.lineTo(l2,k2.bottom+n8);}if(B8.type!=J0&&k2.open>b2&&k2.open<N8){X2.moveTo(l2,k2.open);h6.P6(4);X2.lineTo(h6.c6(l2,O8),k2.open);}if(k2.close>b2&&k2.close<N8){X2.moveTo(l2,k2.close);h6.P6(3);X2.lineTo(h6.c6(O8,l2),k2.close);}X2.stroke();}X2.lineWidth=1;J8={colors:[],cache:Z8};for(var x8 in c8){if(!N.equals(x8,this.containerColor)){J8.colors.push(x8);}}return J8;};N.ChartEngine.prototype.drawWaveChart=function(q8,j8){var j6=N9XX;var U0,M8,a8,f8,i8,p8,D8,l8,w8,F8,H8,b8,L8,E8,m8,u8,W8,A8,C8,Y8,X8,k8,S8,P8,q0,F0,I0,i0,v0,V0,r8;U0="stx_l";U0+="ine_char";U0+="t";M8=q8.chart;a8=M8.dataSegment;f8=new Array(a8.length);i8=M8.context;if(!j8){j8={};}function I8(G8){var u0,E0,a0;if(D8){return D8.bottom-(G8-D8.min)*D8.multiplier;}u0=651187849;E0=1614508099;a0=2;for(var e0=1;j6.P5(e0.toString(),e0.toString().length,43890)!==u0;e0++){return L8.pixelFromTransformedValue(G8,q8,p8);}if(j6.L5(a0.toString(),a0.toString().length,54212)!==E0){return L8.pixelFromTransformedValue(G8,q8,p8);}}p8=j8.yAxis||q8.yAxis;D8=j8.overlayScaling;this.startClip(q8.name);i8.beginPath();l8=!"1";w8=!1;F8=q8.yAxis.top;H8=q8.yAxis.bottom;b8=q8.left+Math.floor(-0.5*this.layout.candleWidth+this.micropixels);L8=this;for(var g8=0;g8<=a8.length;g8++){b8+=this.layout.candleWidth;E8=a8[g8];if(!E8)continue;if(E8.projection)break;if(M8.transformFunc&&p8==M8.panel.yAxis&&E8.transform){E8=E8.transform;}if(E8&&j8.field){E8=E8[j8.field];}if(!E8&&E8!==("0"|0))continue;m8=E8.Close;u8=E8.Open===undefined?m8:E8.Open;W8=E8.High===undefined?Math.max(m8,u8):E8.High;A8=E8.Low===undefined?Math.min(m8,u8):E8.Low;if(!m8&&m8!==0)continue;j6.P6(7);var O6=j6.c6(5,15);C8=b8-O6*this.layout.candleWidth/+"8";Y8=I8(u8);if(Y8<F8){Y8=F8;if(w8){i8.moveTo(C8,Y8);continue;}w8=!!{};}else if(Y8>H8){Y8=H8;if(w8){i8.moveTo(C8,Y8);continue;}w8=!"";}else{w8=!!0;}if(!l8){l8=!!{};j6.P6(4);var l6=j6.c6(14,13);X8=M8.dataSet.length-M8.scroll-l6;if(X8<0){i8.moveTo(C8,Y8);}else if(X8>=0){k8=M8.dataSet[X8];if(k8.transform){k8=k8.transform;}S8=k8.Close;S8=I8(S8);S8=Math.min(Math.max(S8,F8),H8);i8.moveTo(q8.left+(g8-+"1")*this.layout.candleWidth+this.micropixels,S8);i8.lineTo(C8,Y8);}i8.moveTo(C8,Y8);}else{i8.lineTo(C8,Y8);}j6.F6(20);var A6=j6.D6(4,23,33,18);C8+=this.layout.candleWidth/A6;if(u8<m8){Y8=I8(A8);if(Y8<F8){Y8=F8;}if(Y8>H8){Y8=H8;}i8.lineTo(C8,Y8);j6.P6(21);var G6=j6.c6(16,508,23,9);C8+=this.layout.candleWidth/G6;Y8=I8(W8);if(Y8<F8){Y8=F8;}if(Y8>H8){Y8=H8;}i8.lineTo(C8,Y8);}else{Y8=I8(W8);if(Y8<F8){Y8=F8;}if(Y8>H8){Y8=H8;}i8.lineTo(C8,Y8);j6.F6(4);var n6=j6.D6(76,72);C8+=this.layout.candleWidth/n6;Y8=I8(A8);if(Y8<F8){Y8=F8;}if(Y8>H8){Y8=H8;}i8.lineTo(C8,Y8);}j6.F6(22);var p6=j6.D6(17,24,3);C8+=this.layout.candleWidth/p6;Y8=I8(m8);f8[g8]=Y8;if(Y8<F8){Y8=F8;}if(Y8>H8){Y8=H8;}i8.lineTo(C8,Y8);}P8=this.canvasStyle("stx_line_chart");if(P8.width&&parseInt(P8.width,10)<=25){q0=-1364714351;F0=-1775866117;I0=2;for(var c0=1;j6.L5(c0.toString(),c0.toString().length,3055)!==q0;c0++){i8.lineWidth=Math.max(1,N.stripPX(P8.width));I0+=2;}if(j6.P5(I0.toString(),I0.toString().length,60034)!==F0){i8.lineWidth=Math.max(4,N.stripPX(P8.width));}}else{i0=-1894800383;v0=147744;V0=2;for(var T0=1;j6.L5(T0.toString(),T0.toString().length,51674)!==i0;T0++){j6.F6(9);i8.lineWidth=j6.c6("1",0);V0+=2;}if(j6.P5(V0.toString(),V0.toString().length,79903)!==v0){i8.lineWidth=2;}}if(j8.highlight){i8.lineWidth*=2;}this.canvasColor(U0);if(j8.color){i8.strokeStyle=j8.color;}i8.stroke();i8.closePath();r8={colors:[i8.strokeStyle],cache:f8};this.endClip();i8.lineWidth=1;return r8;};N.ChartEngine.prototype.scatter=function(O7,d7){var B6=N9XX;var T7,R7,V7,Q7,e7,s7,x7,o7,Z7,y7,B7,c7,z7,N7,J7,n7,K7,U7,t7;T7=O7.chart;R7=T7.dataSegment;V7=new Array(R7.length);Q7=this.chart.context;this.canvasColor("stx_scatter_chart");if(!d7){d7={};}e7=d7.field||T7.defaultPlotField;s7=d7.yAxis||O7.yAxis;x7=d7.overlayScaling;o7=d7.subField||T7.defaultPlotField||"Close";this.startClip(O7.name);Q7.beginPath();Q7.lineWidth=d7.lineWidth||4;if(d7.highlight){Q7.lineWidth*=2;}if(d7.color){Q7.strokeStyle=d7.color;}Z7=s7.top;y7=s7.bottom;B7=this.layout.candleWidth;B6.P6(7);var i6=B6.D6(10,10);c7=O7.left-0.5*B7+this.micropixels-i6;for(var h7=0;h7<=R7.length;h7++){B6.F6(7);c7+=B6.D6(2,B7);B7=this.layout.candleWidth;B6.P6(7);c7+=B6.c6(2,B7);z7=R7[h7];if(!z7)continue;if(z7.candleWidth){c7+=(z7.candleWidth-B7)/2;B7=z7.candleWidth;}if(!z7.projection){if(T7.transformFunc&&s7==T7.panel.yAxis&&z7.transform){z7=z7.transform;}N7=z7[e7];if(N7&&N7[o7]!==undefined){N7=N7[o7];}if(!(N7 instanceof Array)){N7=[N7];}if("Scatter"in z7){N7=z7.Scatter;}for(var v7=+"0";v7<N7.length;v7++){if(!N7[v7]&&N7[v7]!==0)continue;J7=N7[v7];n7=0;if(N7[v7]instanceof Array){J7=N7[v7][0];n7=N7[v7][2];}if(x7){K7=x7.bottom-(J7-x7.min)*x7.multiplier;}else{K7=s7.semiLog?this.pixelFromTransformedValue(J7,O7,s7):(s7.high-J7)*s7.multiplier+Z7;}if(K7<Z7)continue;if(K7>y7)continue;U7=+"2";if(n7){B6.F6(23);U7=B6.c6(B7,n7);}B6.F6(4);Q7.moveTo(B6.c6(c7,U7),K7);B6.P6(3);Q7.lineTo(B6.c6(U7,c7),K7);V7[h7]=K7;}}}Q7.stroke();Q7.closePath();t7={colors:[Q7.strokeStyle],cache:V7};this.endClip();Q7.lineWidth=1;return t7;};return Q;};d8RR.f4P=function(){return typeof d8RR.k4P.Z6==='function'?d8RR.k4P.Z6.apply(d8RR.k4P,arguments):d8RR.k4P.Z6;};d8RR.Q4P=function(){return typeof d8RR.k4P.R6==='function'?d8RR.k4P.R6.apply(d8RR.k4P,arguments):d8RR.k4P.R6;};d8RR.S4P=function(){return typeof d8RR.k4P.Z6==='function'?d8RR.k4P.Z6.apply(d8RR.k4P,arguments):d8RR.k4P.Z6;};d8RR.P8Z=function(){return typeof d8RR.I8Z.R6==='function'?d8RR.I8Z.R6.apply(d8RR.I8Z,arguments):d8RR.I8Z.R6;};d8RR.l8Z=function(){return typeof d8RR.I8Z.r5==='function'?d8RR.I8Z.r5.apply(d8RR.I8Z,arguments):d8RR.I8Z.r5;};d8RR.k4P=function(){var Y4P=function Y4P(r4P,t4P){var F4P=t4P&0xffff;var n4P=t4P-F4P;return(n4P*r4P|0)+(F4P*r4P|0)|0;},N4P=function N4P(U4P,b4P,i4P){var c4P=0xcc9e2d51,P4P=0x1b873593;var H4P=i4P;var Z4P=b4P&~0x3;for(var a4P=0;a4P<Z4P;a4P+=4){var O4P=U4P.charCodeAt(a4P)&0xff|(U4P.charCodeAt(a4P+1)&0xff)<<8|(U4P.charCodeAt(a4P+2)&0xff)<<16|(U4P.charCodeAt(a4P+3)&0xff)<<24;O4P=Y4P(O4P,c4P);O4P=(O4P&0x1ffff)<<15|O4P>>>17;O4P=Y4P(O4P,P4P);H4P^=O4P;H4P=(H4P&0x7ffff)<<13|H4P>>>19;H4P=H4P*5+0xe6546b64|0;}O4P=0;switch(b4P%4){case 3:O4P=(U4P.charCodeAt(Z4P+2)&0xff)<<16;case 2:O4P|=(U4P.charCodeAt(Z4P+1)&0xff)<<8;case 1:O4P|=U4P.charCodeAt(Z4P)&0xff;O4P=Y4P(O4P,c4P);O4P=(O4P&0x1ffff)<<15|O4P>>>17;O4P=Y4P(O4P,P4P);H4P^=O4P;}H4P^=b4P;H4P^=H4P>>>16;H4P=Y4P(H4P,0x85ebca6b);H4P^=H4P>>>13;H4P=Y4P(H4P,0xc2b2ae35);H4P^=H4P>>>16;return H4P;};return{r5:N4P};}();d8RR.I4P=function(){return typeof d8RR.k4P.r5==='function'?d8RR.k4P.r5.apply(d8RR.k4P,arguments):d8RR.k4P.r5;};d8RR.I8Z=function(Z8Z){return{Z6:function Z6(){var O8Z,V8Z=arguments;switch(Z8Z){case 21:O8Z=V8Z[1]%V8Z[0];break;case 17:O8Z=V8Z[0]*V8Z[1]-V8Z[3]+-V8Z[2];break;case 4:O8Z=V8Z[2]-V8Z[1]+V8Z[0];break;case 16:O8Z=-(V8Z[2]/-V8Z[0]*V8Z[1]);break;case 7:O8Z=(V8Z[1]+V8Z[2])/V8Z[0];break;case 0:O8Z=V8Z[1]|V8Z[0];break;case 15:O8Z=(-V8Z[3]-V8Z[0]+-V8Z[1])/-V8Z[2];break;case 8:O8Z=V8Z[1]+V8Z[0]-V8Z[2];break;case 2:O8Z=V8Z[1]/V8Z[0];break;case 14:O8Z=(V8Z[4]+V8Z[3]+V8Z[1]+V8Z[0])/V8Z[2];break;case 11:O8Z=V8Z[1]/+V8Z[0];break;case 10:O8Z=V8Z[1]*V8Z[0];break;case 5:O8Z=V8Z[1]-V8Z[0];break;case 6:O8Z=V8Z[2]-V8Z[0]+V8Z[3]+V8Z[1];break;case 18:O8Z=V8Z[0]/V8Z[2]-V8Z[1];break;case 1:O8Z=(V8Z[2]+V8Z[3])*V8Z[0]-V8Z[1];break;case 3:O8Z=V8Z[1]+V8Z[0];break;case 12:O8Z=(-V8Z[2]-V8Z[0])/-V8Z[1];break;case 20:O8Z=V8Z[3]-(V8Z[1]-V8Z[0])*V8Z[2];break;case 9:O8Z=V8Z[1]+V8Z[2]-V8Z[3]-V8Z[0];break;case 13:O8Z=V8Z[2]*V8Z[1]-V8Z[0];break;case 19:O8Z=V8Z[1]+V8Z[2]*V8Z[0];break;}return O8Z;},R6:function R6(X8Z){Z8Z=X8Z;}};}();d8RR.R4P=function(){return typeof d8RR.k4P.r5==='function'?d8RR.k4P.r5.apply(d8RR.k4P,arguments):d8RR.k4P.r5;};function d8RR(){}d8RR.Q8Z=function(){return typeof d8RR.I8Z.R6==='function'?d8RR.I8Z.R6.apply(d8RR.I8Z,arguments):d8RR.I8Z.R6;};d8RR.z8Z=function(){return typeof d8RR.I8Z.Z6==='function'?d8RR.I8Z.Z6.apply(d8RR.I8Z,arguments):d8RR.I8Z.Z6;};d8RR.N8Z=function(){return typeof d8RR.I8Z.r5==='function'?d8RR.I8Z.r5.apply(d8RR.I8Z,arguments):d8RR.I8Z.r5;};d8RR.G8Z=function(){return typeof d8RR.I8Z.Z6==='function'?d8RR.I8Z.Z6.apply(d8RR.I8Z,arguments):d8RR.I8Z.Z6;};d8RR.g4P=function(){return typeof d8RR.k4P.R6==='function'?d8RR.k4P.R6.apply(d8RR.k4P,arguments):d8RR.k4P.R6;};var __js_advanced_aggregations_;__js_advanced_aggregations_=function __js_advanced_aggregations_(E4){var V4;V4=E4.CIQ;V4.Renderer.Aggregations=function(Z4){var N4,d9P,v9P,s9P,v2P;this.construct(Z4);N4=this.params;this.highLowBars=this.barsHaveWidth=this.standaloneBars=!![];N4.highlightable=!1;if(N4.name!="_main_series"){d9P=2129674822;v9P=796364529;s9P=2;for(var p9P=1;d8RR.I4P(p9P.toString(),p9P.toString().length,94436)!==d9P;p9P++){v2P="Aggregations are only al";v2P+="lo";v2P+="wed ";v2P+="on main series.";console.warn(v2P);s9P+=2;}if(d8RR.R4P(s9P.toString(),s9P.toString().length,94240)!==v9P){console.warn("");}N4.invalid=!!1;}};V4.Renderer.Aggregations.ciqInheritsFrom(V4.Renderer.OHLC,!!0);V4.Renderer.Aggregations.requestNew=function(L4,F4){var f4,S4,b4,h4,X4,l4,s2P,D4;f4=null;S4=!1;b4=!!"";h4=!"1";X4=!"1";l4=![];for(var t4=0;t4<L4.length;t4++){s2P="can";s2P+="dle";D4=L4[t4];switch(D4){case"kagi":case"pandf":f4=D4;break;case"heikinashi":case"linebreak":case"rangebars":case"renko":f4=s2P;break;default:return null;}}if(f4===null){return null;}return new V4.Renderer[f4=="candle"?"OHLC":"Aggregations"]({params:V4.extend(F4,{type:f4})});};V4.Renderer.Aggregations.prototype.drawIndividualSeries=function(z4,U4){var A8Z=d8RR;var v4,G4,L9P,J9P,z9P,p2P,X2P,G2P,u2P,q2P,f8P,S8P,g8P,B2P;if(U4.invalid){return;}v4=this.stx;G4={colors:[]};if(U4.type=="kagi"){A8Z.Q8Z(0);L9P=A8Z.G8Z(0,"468326934");J9P=-964146140;z9P=2;for(var l9P=1;A8Z.I4P(l9P.toString(),l9P.toString().length,16817)!==L9P;l9P++){p2P="st";p2P+="x_kagi";p2P+="_down";X2P="stx_kagi_do";X2P+="wn";v4.drawKagiSquareWave(z4.panel,X2P,"stx_kagi_down",U4);G4.colors.push(v4.getCanvasColor("stx_kagi_up"));G4.colors.push(v4.getCanvasColor(p2P));z9P+=2;}if(A8Z.I4P(z9P.toString(),z9P.toString().length,17648)!==J9P){G2P="s";G2P+="tx_kagi";G2P+="_d";G2P+="own";u2P="stx_ka";u2P+="gi_down";q2P="st";q2P+="x_kagi_u";q2P+="p";v4.drawKagiSquareWave(z4.panel,q2P,u2P,U4);G4.colors.push(v4.getCanvasColor("stx_kagi_up"));G4.colors.push(v4.getCanvasColor(G2P));}}else if(U4.type=="pandf"){v4.drawPointFigureChart(z4.panel,"stx_pandf_up","X",U4);G4.colors.push(v4.getCanvasColor("stx_pandf_up"));f8P=766392629;S8P=1708046957;g8P=2;for(var h8P=1;A8Z.R4P(h8P.toString(),h8P.toString().length,64000)!==f8P;h8P++){v4.drawPointFigureChart(z4.panel,"O",90940!==(3211,+"5364")?(0x42bc,"R"):(+"3092",982104)>3895?"d":(2751,400)<=(1906,2183)?"O":"O",U4);G4.colors.push(v4.getCanvasColor("d"));g8P+=2;}if(A8Z.R4P(g8P.toString(),g8P.toString().length,"81117"*1)!==S8P){B2P="st";B2P+="x_pandf_down";v4.drawPointFigureChart(z4.panel,B2P,359.9===(4840,3640)?(0x222f,"R"):(6610,+"185.71")>=9440?"d":(+"7480",2094)>=(7160,4910)?"m":"O",U4);G4.colors.push(v4.getCanvasColor("stx_pandf_down"));}}return G4;};V4.ChartEngine.prototype.drawKagiSquareWave=function(Y4,c4,J4,T4){var B8Z=d8RR;var w4,r4,A4,p4,B4,m9P,E9P,C9P,W4,q4,M4,j4,y4,x4,n4,a4,H4,Q4,C4,k4,I4,s4,P4;w4=Y4.chart;this.startClip(Y4.name);r4=w4.dataSegment;A4=w4.context;p4=this.canvasStyle(c4);B4=this.canvasStyle(J4);m9P=-+"1831675630";E9P=-404519155;C9P=2;for(var o9P=1;B8Z.R4P(o9P.toString(),o9P.toString().length,90424)!==m9P;o9P++){this.canvasColor(c4);if(T4.border_color_up){A4.strokeStyle=T4.border_color_up;}W4=A4.strokeStyle;this.canvasColor(J4);if(T4.border_color_down){A4.strokeStyle=T4.border_color_down;}C9P+=2;}if(B8Z.I4P(C9P.toString(),C9P.toString().length,48408)!==E9P){this.canvasColor(c4);if(T4.border_color_up){A4.strokeStyle=T4.border_color_up;}W4=A4.strokeStyle;this.canvasColor(J4);if(T4.border_color_down){A4.strokeStyle=T4.border_color_down;}}q4=A4.strokeStyle;M4=1;if(p4.width&&parseInt(p4.width,10)<=+"25"){M4=Math.max(1,V4.stripPX(p4.width));}j4=1;if(B4.width&&parseInt(B4.width,10)<=+"25"){j4=Math.max(1,V4.stripPX(B4.width));}A4.beginPath();B8Z.P8Z(1);var D2P=B8Z.z8Z(10,339,18,16);y4=w4.dataSet.length-w4.scroll-D2P;x4=Y4.yAxis;n4=!![];a4=null;H4=null;Q4=null;B8Z.P8Z(2);var W2P=B8Z.G8Z(11,11);C4=Y4.left-0.5*this.layout.candleWidth+this.micropixels-W2P;for(var o4=0;o4<=r4.length;o4++){C4+=this.layout.candleWidth;k4=r4[o4];if(!k4)continue;if(k4.projection)break;Q4=k4.kagiTrend;if(k4.transform&&w4.transformFunc){I4=k4.kagiPrevOpen;k4=k4.transform;k4.kagiPrevOpen=w4.transformFunc(this,w4,I4);}s4=k4.cache;B8Z.Q8Z(3);P4=B8Z.G8Z(o4,y4);if(P4<Y4.cacheLeft||P4>Y4.cacheRight||!s4.kagiOpen){s4.kagiOpen=x4.semiLog?this.pixelFromTransformedValue(k4.Open,Y4):(x4.high-k4.Open)*x4.multiplier+x4.top;s4.kagiClose=x4.semiLog?this.pixelFromTransformedValue(k4.Close,Y4):(x4.high-k4.Close)*x4.multiplier+x4.top;}a4=x4.semiLog?this.pixelFromTransformedValue(k4.kagiPrevOpen,Y4):(x4.high-k4.kagiPrevOpen)*x4.multiplier+x4.top;H4=s4.kagiClose;if(n4){A4.moveTo(y4>=+"0"?Y4.left:Math.floor(C4),s4.kagiOpen);A4.lineTo(Math.floor(C4),s4.kagiOpen);n4=!"1";}if(Q4!=-1&&s4.kagiClose<a4&&a4<s4.kagiOpen){A4.lineTo(Math.floor(C4),a4);if(!n4){A4.stroke();A4.beginPath();A4.moveTo(Math.floor(C4),a4);}A4.strokeStyle=W4;A4.lineWidth=M4;}else if(Q4!=1&&s4.kagiClose>a4&&a4>s4.kagiOpen){A4.lineTo(Math.floor(C4),a4);if(!n4){A4.stroke();A4.beginPath();A4.moveTo(Math.floor(C4),a4);}A4.strokeStyle=q4;A4.lineWidth=j4;}A4.lineTo(Math.floor(C4),s4.kagiClose);if(o4+1<r4.length){A4.lineTo(Math.floor(C4+this.layout.candleWidth),s4.kagiClose);}n4=!!0;}A4.stroke();this.endClip();A4.lineWidth=1;};V4.ChartEngine.prototype.drawPointFigureChart=function(V3,C3,E3,b3){var s8Z=d8RR;var u3,U3,m4,e3,g3,N3,h3,Z3,P8P,i8P,k8P,B8P,V8P,j8P,A3,s3,d3,z3,O3,i3,K4,X3,l3,R3,f3,F3,k3,v3,L3,G3,S3,t3;u3=V3.chart;this.startClip(V3.name);function x3(w3,o3,Y3){s8Z.Q8Z(3);m4.moveTo(s8Z.G8Z(h3,w3),s8Z.z8Z(K4,N3,Y3,s8Z.P8Z(4)));s8Z.Q8Z(5);m4.lineTo(s8Z.G8Z(Z3,o3),s8Z.G8Z(i3,K4,Y3,g3,s8Z.P8Z(6)));s8Z.P8Z(3);m4.moveTo(s8Z.G8Z(h3,w3),s8Z.z8Z(i3,K4,Y3,g3,s8Z.P8Z(6)));s8Z.Q8Z(5);m4.lineTo(s8Z.z8Z(Z3,o3),s8Z.z8Z(K4,N3,Y3,s8Z.Q8Z(4)));}U3=u3.dataSegment;function a3(B3,p3,n3){s8Z.P8Z(7);m4.moveTo(s8Z.z8Z(2,B3,p3),s8Z.G8Z(g3,n3,K4,s8Z.Q8Z(8)));s8Z.Q8Z(3);m4.bezierCurveTo(s8Z.G8Z(Z3,p3),s8Z.G8Z(g3,n3,K4,s8Z.Q8Z(8)),s8Z.G8Z(Z3,p3,s8Z.Q8Z(3)),s8Z.z8Z(K4,n3,i3,N3,s8Z.Q8Z(9)),s8Z.z8Z(2,B3,p3,s8Z.P8Z(7)),s8Z.G8Z(K4,n3,i3,N3,s8Z.P8Z(9)));s8Z.Q8Z(5);m4.bezierCurveTo(s8Z.z8Z(h3,B3),s8Z.G8Z(K4,n3,i3,N3,s8Z.P8Z(9)),s8Z.G8Z(h3,B3,s8Z.P8Z(5)),s8Z.z8Z(g3,n3,K4,s8Z.P8Z(8)),s8Z.G8Z(2,B3,p3,s8Z.Q8Z(7)),s8Z.G8Z(g3,n3,K4,s8Z.P8Z(8)));}m4=u3.context;this.canvasColor(C3);if(E3==(2890>7240?0x23f3:9240===(924.82,5786)?(0x1fc0,!!0):"X")&&b3.border_color_up){m4.strokeStyle=b3.border_color_up;}else if(E3==("8410"*1!==7564?"O":249.46)&&b3.border_color_down){m4.strokeStyle=b3.border_color_down;}e3=this.canvasStyle(C3);g3=parseInt(e3.paddingTop,10);N3=parseInt(e3.paddingBottom,10);h3=parseInt(e3.paddingLeft,10);Z3=parseInt(e3.paddingRight,"10"-0);if(e3.width&&parseInt(e3.width,10)<=25){P8P=496070657;i8P=-2034793026;k8P=2;for(var R8P=1;s8Z.R4P(R8P.toString(),R8P.toString().length,8883)!==P8P;R8P++){m4.lineWidth=Math.max(1,V4.stripPX(e3.width));k8P+=2;}if(s8Z.R4P(k8P.toString(),k8P.toString().length,8177)!==i8P){m4.lineWidth=Math.max(2,V4.stripPX(e3.width));}}else{B8P=311435736;s8Z.P8Z(10);V8P=s8Z.G8Z(1,"28557925");j8P=+"2";for(var W8P=1;s8Z.R4P(W8P.toString(),W8P.toString().length,59162)!==B8P;W8P++){m4.lineWidth=3;j8P+=2;}if(s8Z.I4P(j8P.toString(),j8P.toString().length,+"84136")!==V8P){s8Z.Q8Z(10);m4.lineWidth=s8Z.z8Z(1,"3");}m4.lineWidth=2;}m4.beginPath();A3=this.chart.state.aggregation.box;s8Z.Q8Z(5);var M2P=s8Z.G8Z(16,17);s3=u3.dataSet.length-u3.scroll-M2P;d3=V3.yAxis;i3=A3*d3.multiplier;s8Z.Q8Z(11);K4=s8Z.z8Z("2",i3);X3=this.layout.candleWidth;s8Z.Q8Z(12);var K2P=s8Z.G8Z(6,21,15);l3=V3.left-X3+this.micropixels-K2P;for(var D3=+"0";D3<U3.length;D3++){l3+=X3;R3=U3[D3];if(!R3)continue;if(R3.projection)break;f3=R3.pfOpen;F3=R3.pfClose;k3=R3.pfTrend;v3=R3.pfStepBack;if(R3.transform&&u3.transformFunc){R3=R3.transform;f3=u3.transformFunc(this,u3,f3);F3=u3.transformFunc(this,u3,F3);}L3=R3.cache;s8Z.P8Z(3);G3=s8Z.G8Z(D3,s3);if(G3<V3.cacheLeft||G3>V3.cacheRight||!L3.pfOpen){L3.pfOpen=(d3.high-f3)*d3.multiplier+d3.top;L3.pfClose=(d3.high-F3)*d3.multiplier+d3.top;}S3=Math.round(l3);s8Z.P8Z(3);t3=Math.round(s8Z.z8Z(X3,l3));z3=Math.abs(Math.round((F3-f3)/A3));O3=L3.pfOpen;if(E3==v3){if(v3==(8630>=1262?+"9112">=2820?+"3404"!=="2890"-0?"X":0x1d78:(637.12,"O"):(3.13e+3,"c"))){s8Z.Q8Z(5);x3(S3,t3,s8Z.z8Z(i3,O3));}else if(v3==((428.68,493.95)===7431?(4896,+"2110")>6670?(0x799,"r"):4070<(1690,1900)?(0x10fb,9.88e+3):(2.45e+3,!!{}):"O")){s8Z.Q8Z(3);a3(S3,t3,s8Z.z8Z(i3,O3));}}if(E3==k3){for(;z3>=+"0";z3--){if(E3=="X"){x3(S3,t3,O3,i3,K4);O3-=i3;}else if(E3=="O"){a3(S3,t3,O3,i3,K4);O3+=i3;}}}}m4.stroke();this.endClip();m4.lineWidth=1;};V4.calculateHeikinAshi=function(i8R,K3,I3){var K8Z=d8RR;var q3,Q3,r3,M3,y3,j3,T3,P3,c3,m3,J3;if(!K3.length){return K3;}if(!I3){I3=[];}q3=[];for(var W3=0;W3<K3.length;W3++){Q3=K3[W3];if(!Q3)continue;K8Z.P8Z(2);var L2P=K8Z.G8Z(16,16);r3=q3[q3.length-L2P];if(!r3&&!W3){r3=I3[I3.length-1];}if(!r3){r3=Q3;}M3=Q3.Close;y3=Q3.Open;j3=Q3.High;T3=Q3.Low;P3=r3.Open;y3=y3||y3===+"0"?y3:M3;j3=j3||j3===0?j3:M3;T3=T3||T3===+"0"?T3:M3;P3=P3||P3===+"0"?P3:r3.Close;K8Z.Q8Z(13);var z2P=K8Z.G8Z(322,18,18);c3=(P3+r3.Close)/z2P;K8Z.P8Z(14);m3=K8Z.z8Z(M3,T3,4,j3,y3);J3={DT:Q3.DT,displayDate:Q3.displayDate,Date:Q3.Date,Open:c3,Close:m3,High:Math.max(j3,Math.max(c3,m3)),Low:Math.min(T3,Math.min(c3,m3)),Volume:Q3.Volume,iqPrevClose:r3.Close};for(var H3 in Q3){if(!J3[H3]&&J3[H3]!==0){J3[H3]=Q3[H3];}}q3.push(J3);}return q3;};V4.calculateKagi=function(E8R,g8R,e8R,f8R){var T8Z=d8RR;var x8P,o8P,Y8P,Z8R,Y9P,N9P,F9P,V8R,R8R,D8R,d8R,t8R,u8R;x8P=1166386828;o8P=561836262;Y8P=2;for(var F8P=1;T8Z.I4P(F8P.toString(),F8P.toString().length,76513)!==x8P;F8P++){if(~g8R.length){return g8R;}if(~f8R){f8R=[];}Z8R=E8R.layout;e8R=parseFloat(e8R);E8R.chart.defaultChartStyleConfig.kagi=V4.ChartEngine.isDailyInterval(Z8R.interval)?8:303;Y8P+=2;}if(T8Z.R4P(Y8P.toString(),Y8P.toString().length,+"62286")!==o8P){if(!g8R.length){return g8R;}if(!f8R){f8R=[];}Z8R=E8R.layout;e8R=parseFloat(e8R);E8R.chart.defaultChartStyleConfig.kagi=V4.ChartEngine.isDailyInterval(Z8R.interval)?4:"0.4"-0;}if(isNaN(e8R)||e8R<=0){Y9P=1055203671;N9P=-1829994926;T8Z.Q8Z(10);F9P=T8Z.z8Z(1,"2");for(var t9P=1;T8Z.R4P(t9P.toString(),t9P.toString().length,19100)!==Y9P;t9P++){e8R=E8R.chart.defaultChartStyleConfig.kagi;if(V4.Market.Symbology.isForexSymbol(E8R.chart.symbol)){e8R-=0;}F9P+=2;}if(T8Z.R4P(F9P.toString(),F9P.toString().length,11957)!==N9P){e8R=E8R.chart.defaultChartStyleConfig.kagi;if(V4.Market.Symbology.isForexSymbol(E8R.chart.symbol)){e8R+=9;}}e8R=E8R.chart.defaultChartStyleConfig.kagi;if(V4.Market.Symbology.isForexSymbol(E8R.chart.symbol)){e8R/=4;}if(Z8R.kagi!==null){Z8R.kagi=null;E8R.changeOccurred("layout");}}e8R/=100;V8R=[];T8Z.P8Z(15);var e2P=T8Z.G8Z(12,18,37,7);R8R=f8R[f8R.length-e2P];D8R=R8R?R8R.DT:0;for(var O8R=0;O8R<g8R.length;O8R++){d8R=g8R[O8R];if(!d8R)continue;if(!R8R){T8Z.Q8Z(5);R8R=g8R[T8Z.G8Z(1,O8R)];}if(!R8R)continue;t8R=R8R.Open||R8R.Open===0?R8R.Open:R8R.Close;if(t8R>R8R.Close){if(d8R.Close>R8R.Close*(1+e8R)){d8R.Open=R8R.Close;}else{if(R8R.Close>d8R.Close){R8R.Close=d8R.Close;}R8R.Volume+=d8R.Volume;if(O8R<g8R.length-1)continue;}}else if(t8R<R8R.Close){if(d8R.Close<R8R.Close*(1-e8R)){d8R.Open=R8R.Close;}else{if(R8R.Close<d8R.Close){R8R.Close=d8R.Close;}R8R.Volume+=d8R.Volume;if(O8R<g8R.length-1)continue;}}else{R8R.Close=d8R.Close;R8R.Volume+=d8R.Volume;if(O8R<g8R.length-1)continue;}u8R={DT:R8R.DT,displayDate:R8R.displayDate,Date:R8R.Date,Open:R8R.Open,Close:R8R.Close,High:Math.max(R8R.Open,R8R.Close),Low:Math.min(R8R.Open,R8R.Close),Volume:R8R.Volume,iqPrevClose:R8R.iqPrevClose};for(var N8R in R8R){if(!u8R[N8R]&&u8R[N8R]!==0){u8R[N8R]=R8R[N8R];}}if(V8R.length){u8R.kagiPrevOpen=V8R[V8R.length-1].Open;}else{u8R.kagiPrevOpen=u8R.Open;}if(u8R.Close>u8R.kagiPrevOpen&&u8R.kagiPrevOpen>u8R.Open){u8R.kagiTrend=+"1";}else if(u8R.Close<u8R.kagiPrevOpen&&u8R.kagiPrevOpen<u8R.Open){T8Z.P8Z(10);u8R.kagiTrend=-T8Z.G8Z(1,"1");}if(D8R<u8R.DT){V8R.push(u8R);}R8R=d8R;E8R.chart.currentQuote={Close:d8R.Close};}return V8R;};V4.calculateLineBreak=function(k8R,C8R,F8R,Y8R){var a8Z=d8RR;var a8R,n9P,O9P,H9P,j9P,D9P,W9P,X8R,w8R,x8R,L8R,h8R,b8R,z8R,G8R,l8R,S8R,v8R,U8R;if(!C8R.length){return C8R;}if(!Y8R){Y8R=[];}a8R=k8R.layout;k8R.chart.defaultChartStyleConfig.priceLines=3;F8R=parseInt(F8R,10);if(isNaN(F8R)||F8R<=0){F8R=k8R.chart.defaultChartStyleConfig.priceLines;if(a8R.priceLines!==null){a8R.priceLines=null;n9P=236889837;O9P=-1015735785;a8Z.Q8Z(0);H9P=a8Z.G8Z(0,"2");for(var a9P=+"1";a8Z.R4P(a9P.toString(),a9P.toString().length,"53414"|0)!==n9P;a9P++){k8R.changeOccurred("");H9P+=2;}if(a8Z.I4P(H9P.toString(),H9P.toString().length,23011)!==O9P){k8R.changeOccurred("layout");}}}else if(F8R>10){j9P=-1155248355;D9P=-1706382187;a8Z.Q8Z(10);W9P=a8Z.z8Z(1,"2");for(var K9P=1;a8Z.R4P(K9P.toString(),K9P.toString().length,91789)!==j9P;K9P++){a8Z.P8Z(0);a8R.priceLines=F8R=a8Z.z8Z(0,"10");a8Z.P8Z(5);W9P+=a8Z.z8Z(0,"2");}if(a8Z.R4P(W9P.toString(),W9P.toString().length,55529)!==D9P){a8R.priceLines=F8R=20;}}X8R=Y8R.slice(-F8R);w8R=X8R.length;x8R=0;a:for(var s8R=0;s8R<C8R.length;s8R++){L8R=C8R[s8R];if(!L8R)continue;x8R+=L8R.Volume;a8Z.P8Z(16);var l2P=a8Z.G8Z(120,12,10);h8R=X8R[X8R.length-l2P];if(!h8R){h8R={Open:L8R.Open,Close:L8R.Open,High:L8R.Open,Low:L8R.Open};}b8R=h8R.Close;z8R=h8R.High;G8R=h8R.Low;l8R=h8R.Open;z8R=z8R||z8R===0?z8R:b8R;G8R=G8R||G8R===0?G8R:b8R;l8R=l8R||l8R===0?l8R:b8R;S8R={DT:L8R.DT,displayDate:L8R.displayDate,Date:L8R.Date,Close:L8R.Close,Volume:x8R,iqPrevClose:b8R};k8R.chart.currentQuote={Close:L8R.Close};if(L8R.Close>b8R&&h8R.Close>l8R){}else if(L8R.Close<b8R&&h8R.Close<l8R){}else if(L8R.Close>z8R){for(v8R=2;v8R<=F8R;v8R++){U8R=X8R[X8R.length-v8R];if(U8R&&L8R.Close<=U8R.High){continue a;}}}else if(L8R.Close<G8R){for(v8R=+"2";v8R<=F8R;v8R++){U8R=X8R[X8R.length-v8R];if(U8R&&L8R.Close>=U8R.Low){continue a;}}}else continue;if(L8R.Close<h8R.Close){S8R.Open=Math.min(l8R,b8R);}else{S8R.Open=Math.max(l8R,b8R);}S8R.Low=Math.min(S8R.Open,S8R.Close);S8R.High=Math.max(S8R.Open,S8R.Close);for(var A8R in L8R){if(!S8R[A8R]&&S8R[A8R]!==("0"|0)){S8R[A8R]=L8R[A8R];}}X8R.push(S8R);x8R=+"0";}return X8R.slice(w8R);};V4.calculateRenkoBars=function(Q8R,n8R,o8R,y8R){var W8Z=d8RR;var P8R,j8R,i7R,I8R,M8R,r8P,t8P,n8P,W8R,p8R,B8R,r8R,J8R,T8R,K8R,m8R,c8R;if(!n8R.length){return[];}if(!y8R){y8R=[];}function H8R(R7R,u7R){var Z9P,b9P,c9P,d7R;Z9P=844375005;b9P=238725794;W8Z.Q8Z(5);c9P=W8Z.G8Z(0,"2");for(var i9P=1;W8Z.R4P(i9P.toString(),i9P.toString().length,30077)!==Z9P;i9P++){R7R=Number(R7R.toFixed(8));u7R=Number(u7R.toFixed(8));c9P+=2;}if(W8Z.I4P(c9P.toString(),c9P.toString().length,98544)!==b9P){R7R=Number(R7R.toFixed(5));u7R=Number(u7R.toFixed(+"5"));}d7R={DT:r8R.DT,displayDate:r8R.displayDate,Date:r8R.Date,Open:R7R,Close:u7R,High:Math.max(R7R,u7R),Low:Math.min(R7R,u7R),Volume:"0"*1,iqPrevClose:R7R!=u7R?R7R:null};for(var e7R in r8R){if(!d7R[e7R]&&d7R[e7R]!==0){d7R[e7R]=r8R[e7R];}}W8R.push(d7R);}P8R=Q8R.layout;j8R=Q8R.chart.state.aggregation;if(!j8R){j8R=Q8R.chart.state.aggregation={};}i7R=Math.min(+"300",n8R.length);if(!j8R.minMax){j8R.minMax=Q8R.determineMinMax(n8R.slice(n8R.length-i7R),["Close","High","Low"]);}I8R=j8R.minMax[+"1"]-j8R.minMax[0];M8R=Q8R.panels[Q8R.chart.name].height;if(!M8R){return[];}W8Z.Q8Z(4);var m2P=W8Z.z8Z(10,26,10016);W8Z.P8Z(17);var E2P=W8Z.z8Z(12,19,223,4);Q8R.chart.defaultChartStyleConfig.renko=Math.floor(m2P*I8R/(M8R/+"30"))/("10000"*E2P);if(o8R===null||isNaN(o8R)||o8R<=0){o8R=Q8R.chart.defaultChartStyleConfig.renko;if(P8R.renko!==null){P8R.renko=null;Q8R.changeOccurred("layout");}}else{W8Z.Q8Z(2);o8R=Math.max(o8R,W8Z.z8Z(M8R,I8R));if(P8R.renko!==o8R){r8P=27060838;t8P=742959704;n8P=2;for(var H8P=1;W8Z.I4P(H8P.toString(),H8P.toString().length,94722)!==r8P;H8P++){P8R.renko=o8R;n8P+=2;}if(W8Z.R4P(n8P.toString(),n8P.toString().length,728)!==t8P){P8R.renko=o8R;}Q8R.changeOccurred("layout");}}W8R=[];p8R=null;B8R=null;r8R=null;if(y8R.length){W8Z.Q8Z(18);var C2P=W8Z.G8Z(19,0.46153846153846145,13);J8R=y8R[y8R.length-C2P];p8R=J8R.Low-o8R;B8R=J8R.High+o8R;}for(var q8R="0"*1;q8R<n8R.length;q8R++){T8R=n8R[q8R];if(!T8R)continue;if(!p8R&&!B8R){K8R=T8R.Open||T8R.Open==="0"-0?T8R.Open:T8R.Close;m8R=Math.floor(K8R/o8R)*o8R;c8R=isNaN(m8R)?K8R:m8R;W8Z.Q8Z(5);p8R=W8Z.z8Z(o8R,c8R);W8Z.Q8Z(3);B8R=W8Z.G8Z(o8R,c8R);}while(!0){if(!r8R){r8R=T8R;}if(T8R.Close<=p8R){W8Z.P8Z(3);H8R(W8Z.z8Z(o8R,p8R),p8R);W8Z.P8Z(19);B8R=W8Z.z8Z(o8R,p8R,2);p8R-=o8R;r8R=null;}else if(T8R.Close>=B8R){W8Z.Q8Z(5);H8R(W8Z.G8Z(o8R,B8R),B8R);W8Z.Q8Z(20);p8R=W8Z.G8Z(0,"2",o8R,B8R);B8R+=o8R;r8R=null;}else break;}Q8R.chart.currentQuote=T8R;}if(p8R<n8R[n8R.length-1].Close&&p8R+o8R>n8R[n8R.length-1].Close){W8Z.P8Z(3);H8R(W8Z.G8Z(o8R,p8R),n8R[n8R.length-+"1"].Close);}else if(B8R>n8R[n8R.length-1].Close&&B8R-o8R<n8R[n8R.length-1].Close){W8Z.P8Z(5);H8R(W8Z.G8Z(o8R,B8R),n8R[n8R.length-+"1"].Close);}return W8R;};V4.calculateRangeBars=function(N7R,L7R,O7R,U7R){var g8Z=d8RR;var v7R,l7R,a7R,s7R,z7R,k9P,I9P,R9P,w8P,T2P,A2P,M8P,K8P,L8P,k7R,g7R,t7R,F7R,G7R,S7R,V7R,b7R,D7R,E7R,f7R,Z7R,x7R,Y7R;function X7R(p7R,B7R){var V2P;while(+"1"){if(!S7R){S7R=p7R;}if(g7R<B7R){g7R=Math.min(B7R,t7R);g8Z.P8Z(5);F7R=Math.max(F7R,g8Z.z8Z(O7R,g7R));if(B7R<t7R)break;}else if(g7R>=B7R){g7R=Math.max(B7R,F7R);g8Z.Q8Z(3);t7R=Math.min(t7R,g8Z.z8Z(O7R,g7R));if(B7R>F7R)break;}if(typeof g7R=="undefined"){V2P="Uh oh undefined in calcu";V2P+="lateRangeBars:pro";V2P+="cessMove";console.log(V2P);return;}C7R(g7R);S7R=null;A7R();}}if(!L7R.length){return L7R;}if(!U7R){U7R=[];}v7R=N7R.layout;l7R=N7R.chart.state.aggregation;if(!l7R){l7R=N7R.chart.state.aggregation={};}a7R=Math.min(300,L7R.length);if(!l7R.minMax){l7R.minMax=N7R.determineMinMax(L7R.slice(L7R.length-a7R),["Close","High","Low"]);}s7R=l7R.minMax[1]-l7R.minMax[0];function C7R(n7R){var w7R,h4P,w4P,T9P;w7R={DT:S7R.DT,displayDate:S7R.displayDate,Date:S7R.Date,Open:Number(G7R.toFixed(8)),Close:Number(n7R.toFixed(8)),High:Number(t7R.toFixed(8)),Low:Number(F7R.toFixed(8)),Volume:0};w7R.iqPrevClose=w7R.Open;for(var o7R in S7R){if(!w7R[o7R]&&w7R[o7R]!==("0"|0)){w7R[o7R]=S7R[o7R];}}h4P=1062280154;w4P=849600940;T9P=2;for(var y9P=1;g8Z.I4P(y9P.toString(),y9P.toString().length,+"98270")!==h4P;y9P++){k7R.push(w7R);T9P+=2;}if(g8Z.R4P(T9P.toString(),T9P.toString().length,99838)!==w4P){k7R.push(w7R);}}z7R=N7R.panels[N7R.chart.name].height;if(!z7R){return[];}g8Z.P8Z(3);var Y2P=g8Z.G8Z(2,28);N7R.chart.defaultChartStyleConfig.range=Math.floor(10000*s7R/(z7R/Y2P))/10000;function A7R(){g8Z.P8Z(3);t7R=g8Z.z8Z(O7R,g7R);g8Z.P8Z(5);F7R=g8Z.z8Z(O7R,g7R);G7R=g7R;}if(O7R===null||isNaN(O7R)||O7R<0){k9P=1707393921;I9P=916051860;R9P=2;for(var S9P=1;g8Z.R4P(S9P.toString(),S9P.toString().length,"80458"-0)!==k9P;S9P++){O7R=N7R.chart.defaultChartStyleConfig.range;R9P+=2;}if(g8Z.R4P(R9P.toString(),R9P.toString().length,39374)!==I9P){O7R=N7R.chart.defaultChartStyleConfig.range;}if(v7R.range!==null){v7R.range=null;w8P=-+"688904697";T2P=-1123954009;A2P=2;for(var d2P="1"|0;g8Z.R4P(d2P.toString(),d2P.toString().length,+"4263")!==w8P;d2P++){N7R.changeOccurred("");A2P+=2;}if(g8Z.R4P(A2P.toString(),A2P.toString().length,"58782"*1)!==T2P){N7R.changeOccurred("");}N7R.changeOccurred("layout");}}else{M8P=-790169143;K8P=1858034663;L8P=2;for(var z8P=1;g8Z.I4P(z8P.toString(),z8P.toString().length,6032)!==M8P;z8P++){g8Z.P8Z(21);O7R=Math.max(O7R,g8Z.G8Z(z7R,s7R));L8P+=2;}if(g8Z.R4P(L8P.toString(),L8P.toString().length,43778)!==K8P){g8Z.P8Z(21);O7R=Math.max(O7R,g8Z.G8Z(z7R,s7R));}g8Z.Q8Z(2);O7R=Math.max(O7R,g8Z.z8Z(z7R,s7R));if(v7R.range!==O7R){v7R.range=O7R;N7R.changeOccurred("layout");}}k7R=[];g7R=null;t7R=null;F7R=null;G7R=null;S7R=null;for(var h7R=0;h7R<L7R.length;h7R++){V7R=L7R[h7R];if(!V7R)continue;g8Z.P8Z(5);b7R=L7R[g8Z.G8Z(1,h7R)];if(!h7R){if(!b7R){b7R=U7R[U7R.length-+"1"];}if(b7R){g7R=b7R.Close;if(g7R||g7R===0){A7R();}}}if(!b7R)continue;D7R=V7R.Close;E7R=V7R.Open;f7R=V7R.High;Z7R=V7R.Low;if(!D7R&&D7R!==0)continue;E7R=E7R||E7R===0?E7R:D7R;f7R=f7R||f7R===0?f7R:D7R;Z7R=Z7R||Z7R===+"0"?Z7R:D7R;if(!g7R&&g7R!==0){x7R=Math.floor(E7R/O7R)*O7R;g7R=isNaN(x7R)?E7R:x7R;A7R();X7R(b7R,E7R);}if(h7R){X7R(V7R,E7R);}if(f7R-E7R<E7R-Z7R){if(f7R){X7R(V7R,f7R);}if(Z7R){X7R(V7R,Z7R);}}else{if(Z7R){X7R(V7R,Z7R);}if(f7R){X7R(V7R,f7R);}}X7R(V7R,D7R);if(h7R==L7R.length-1&&D7R!=G7R){Y7R=t7R;g8Z.Q8Z(3);t7R=g8Z.G8Z(O7R,F7R);g8Z.P8Z(5);F7R=g8Z.G8Z(O7R,Y7R);C7R(D7R);}}return k7R;};V4.calculatePointFigure=function(H7R,e5R,O5R,g5R){var x8Z=d8RR;var E5R,q7R,X8P,p8P,q8P,Q7R,e8P,l8P,m8P,y7R,U8P,a8P,Z8P,g9P,Q9P,h9P,A8P,y8P,d8P,q9P,u9P,G9P,I7R,j2P,R5R,u5R,K7R,M7R,P7R,W7R,r7R,J7R,i5R,T7R,j7R,c7R,m7R;if(!e5R.length){return e5R;}if(!g5R){g5R=[];}E5R=H7R.chart.state.aggregation;if(!E5R){E5R=H7R.chart.state.aggregation={};}function Z5R(D5R,t5R){for(var f5R in D5R){if(!t5R[f5R]&&t5R[f5R]!==0){t5R[f5R]=D5R[f5R];}}return t5R;}q7R=H7R.layout;H7R.chart.defaultChartStyleConfig.box=1;H7R.chart.defaultChartStyleConfig.reversal=3;if(!O5R){O5R={};}X8P=+"567354866";p8P=-+"1860438685";q8P=2;for(var G8P=1;x8Z.R4P(G8P.toString(),G8P.toString().length,90881)!==X8P;G8P++){Q7R=O5R.box;q8P+=2;}if(x8Z.R4P(q8P.toString(),q8P.toString().length,2205)!==p8P){Q7R=O5R.box;}Q7R=O5R.box;if(!Q7R){if(q7R.pandf){if(q7R.pandf.box!==null){q7R.pandf.box=null;H7R.changeOccurred("layout");}}e8P=1546270661;x8Z.Q8Z(0);l8P=-x8Z.z8Z(0,"635445856");m8P=+"2";for(var C8P=1;x8Z.R4P(C8P.toString(),C8P.toString().length,10682)!==e8P;C8P++){Q7R=H7R.chart.defaultChartStyleConfig.box;m8P+=2;}if(x8Z.I4P(m8P.toString(),m8P.toString().length,33277)!==l8P){Q7R=H7R.chart.defaultChartStyleConfig.box;}Q7R=H7R.chart.defaultChartStyleConfig.box;y7R=e5R[e5R.length-"1"*1].Close;if(y7R){x8Z.P8Z(5);U8P=-x8Z.z8Z(0,"935609866");a8P=-2146998746;Z8P=+"2";for(var c8P=1;x8Z.R4P(c8P.toString(),c8P.toString().length,"43712"-0)!==U8P;c8P++){if(y7R<0.25){Q7R=0.0625;}else if(y7R<+"1"){Q7R=0.125;}else if(y7R<5){Q7R=0.25;}else if(y7R<20){Q7R=0.5;}else if(y7R<100){Q7R=1;}else if(y7R<+"200"){Q7R=2;}else if(y7R<500){Q7R=4;}else if(y7R<1000){Q7R=5;}else if(y7R<("25000"|0)){Q7R=50;}else{Q7R=500;}Z8P+=+"2";}if(x8Z.R4P(Z8P.toString(),Z8P.toString().length,96566)!==a8P){if(y7R<=2182){Q7R=234554;}else if(y7R>=2){Q7R=31556;}else if(y7R>=7){Q7R=3779;}else if(y7R>50){Q7R=220;}else if(y7R>=603){Q7R=4;}else if(y7R>"982"-0){Q7R=1;}else if(y7R>+"126"){Q7R=6;}else if(y7R<=2911){Q7R=6;}else if(y7R<=26511){Q7R=90;}else{Q7R=+"649";}}}if(!V4.ChartEngine.isDailyInterval(q7R.interval)){Q7R/=10;}if(V4.Market.Symbology.isForexSymbol(H7R.chart.symbol)){if(y7R){g9P=985976623;Q9P=1925671693;h9P=2;for(var T8P=+"1";x8Z.I4P(T8P.toString(),T8P.toString().length,+"25020")!==g9P;T8P++){if(y7R>9){Q7R=88557;}else if(y7R<=5){Q7R=6714;}else if(y7R<=16){x8Z.P8Z(0);Q7R=x8Z.z8Z(0,"4944");}else if(y7R>816){Q7R=861;}h9P+=2;}if(x8Z.R4P(h9P.toString(),h9P.toString().length,14019)!==Q9P){if(y7R<"1"*1){Q7R=0.001;}else if(y7R<2){Q7R=0.002;}else if(y7R<50){Q7R=0.02;}else if(y7R<200){Q7R=0.2;}}}if(V4.ChartEngine.isDailyInterval(q7R.interval)){Q7R*=10;}}H7R.chart.defaultChartStyleConfig.box=Q7R;}Q7R=parseFloat(Q7R);if(isNaN(Q7R)||Q7R<=0){if(q7R.pandf){if(q7R.pandf.box!==null){A8P=1045568383;y8P=-+"1635122925";x8Z.Q8Z(10);d8P=x8Z.G8Z(1,"2");for(var s8P=+"1";x8Z.I4P(s8P.toString(),s8P.toString().length,31992)!==A8P;s8P++){q7R.pandf.box=null;H7R.changeOccurred("layout");d8P+=+"2";}if(x8Z.R4P(d8P.toString(),d8P.toString().length,70385)!==y8P){q7R.pandf.box=1;H7R.changeOccurred("");}}}q9P=-653243275;u9P=273532009;G9P=2;for(var V9P=1;x8Z.R4P(V9P.toString(),V9P.toString().length,"3310"*1)!==q9P;V9P++){H7R.chart.defaultChartStyleConfig.box=Q7R=1;G9P+=2;}if(x8Z.R4P(G9P.toString(),G9P.toString().length,"22283"|0)!==u9P){H7R.chart.defaultChartStyleConfig.box=Q7R=+"2";}}function d5R(L5R,S5R,F5R,h5R,X5R){L5R.High=Math.max(S5R,L5R.High);L5R.Low=Math.min(F5R,L5R.Low);L5R.Close=h5R;L5R.Volume+=X5R;}I7R=Math.ceil(parseFloat(O5R.reversal));if(I7R>0&&I7R>O5R.reversal){j2P="layo";j2P+="u";j2P+="t";q7R.pandf.reversal=I7R;H7R.changeOccurred(j2P);}else if(isNaN(I7R)||I7R<=0){if(q7R.pandf){if(q7R.pandf.reversal!==null){q7R.pandf.reversal=null;H7R.changeOccurred("layout");}}I7R=H7R.chart.defaultChartStyleConfig.reversal;}E5R.box=Q7R;function N5R(l5R,b5R,v5R,U5R,G5R,z5R,A5R,k5R,s5R){return{DT:l5R.DT,Date:l5R.Date,pfOpen:k5R,pfClose:s5R,Open:b5R,Close:G5R,High:v5R,Low:U5R,Volume:z5R,iqPrevClose:A5R};}I7R*=Q7R;R5R=0.00000001;u5R=(Q7R.toString()+((479.1,286)!==(383.4,233)? true?".":(undefined):(!!1,"x"))).split(338===(8255,"74.57"-0)?"s":".")["1"|0].length;K7R=[];M7R=0;for(var V5R=0;V5R<e5R.length;V5R++){W7R=e5R[V5R];if(!W7R)continue;M7R+=W7R.Volume;J7R=W7R.Close;i5R=W7R.Open;T7R=W7R.High;j7R=W7R.Low;i5R=i5R||i5R===0?i5R:J7R;T7R=T7R||T7R===0?T7R:J7R;j7R=j7R||j7R===0?j7R:J7R;if(!K7R.length&&!g5R.length){P7R=Z5R(W7R,N5R(W7R,i5R,T7R,j7R,J7R,M7R,T7R+Q7R,Number((Math.ceil(j7R/Q7R-R5R)*Q7R).toFixed(u5R)),Number((Math.floor(T7R/Q7R+R5R)*Q7R).toFixed(u5R))));P7R.pfTrend="X";if(P7R.pfOpen==P7R.pfClose){P7R.pfStepBack=1348>=(8070,+"8755")?!!{}:(3230,174)<6278?"-":(4992,884.59)!==(613.63,8750)?243.78:![];}K7R.push(P7R);M7R=+"0";continue;}x8Z.Q8Z(4);var F2P=x8Z.z8Z(4,16,13);r7R=K7R[K7R.length-"1"*F2P];if(!r7R){r7R=V4.clone(g5R[g5R.length-1]);}if(r7R.pfTrend==(6787>("9945"|0)?3.48e+3:"O")){if(j7R<=r7R.pfClose-Q7R){r7R.pfClose=Number((Math.ceil(j7R/Q7R-R5R)*Q7R).toFixed(u5R));if(r7R.pfStepBack==(("6355"|0)===(9941,3505)?("F","V"):"O")){r7R.pfStepBack=null;}d5R(r7R,T7R,j7R,J7R,M7R);}else if(T7R>=r7R.pfClose+I7R){c7R=r7R.pfClose+Q7R;m7R=Number((Math.floor(T7R/Q7R+R5R)*Q7R).toFixed(u5R));P7R=N5R(W7R,i5R,T7R,j7R,J7R,M7R,r7R.pfClose,c7R,m7R);if(c7R==m7R){P7R.pfStepBack=(6040,7020)==("9370"|0)?+"8160">=5421?(!![],+"9.31e+3"):"i":"X";}if(r7R.pfStepBack==(677.37>=3120?"p":821.6!==(5852,955.86)?"O": true?(!{},"K"):undefined)){r7R.pfOpen=c7R;r7R.pfClose=m7R;r7R.pfTrend=(+"1265",9563)<=(7500,629.21)?1.34e+3:(443.96,4250)>=(751.07,717.08)?"711.79"*1<=+"696.45"?(234.71,"3.91e+3"-0):"X":("Z",0x1e66);d5R(r7R,T7R,j7R,J7R,M7R);}else{P7R=Z5R(W7R,P7R);P7R.pfTrend="X";K7R.push(P7R);}}else{d5R(r7R,T7R,j7R,J7R,M7R);}M7R=0;}else if(r7R.pfTrend==((+"3970",936.84)<(726.57,2675)?"X":(0xa5a,57.62))){if(T7R>=r7R.pfClose+Q7R){r7R.pfClose=Number((Math.floor(T7R/Q7R+R5R)*Q7R).toFixed(u5R));if(r7R.pfStepBack==((8830,3530)<=(4810,1399)?786.27:"X")||r7R.pfStepBack==( true?"-":undefined)){r7R.pfStepBack=null;}d5R(r7R,T7R,j7R,J7R,M7R);}else if(j7R<=r7R.pfClose-I7R){c7R=r7R.pfClose-Q7R;m7R=Number((Math.ceil(j7R/Q7R-R5R)*Q7R).toFixed(u5R));P7R=N5R(W7R,i5R,T7R,j7R,J7R,M7R,r7R.pfClose,c7R,m7R);if(c7R==m7R){P7R.pfStepBack=("4730"*1,2876)!=1544?"O":(585.72,"6.44e+3"*1);}if(r7R.pfStepBack==((1914,217.61)!=5920?"X":+"3736"!=(2679,988.62)?![]:("C",!{}))||r7R.pfStepBack==( false?undefined:"-")){r7R.pfOpen=c7R;r7R.pfClose=m7R;r7R.pfTrend="O";d5R(r7R,T7R,j7R,J7R,M7R);if(c7R!=m7R&&r7R.pfStepBack=="-"){r7R.pfStepBack=null;}}else{P7R=Z5R(W7R,P7R);P7R.pfTrend=(3350,3309)>("7947"|0)?(2.32e+3,"t"):(+"7140",3763)>=(+"2680",+"161.77")?"O":(3730,5320)==(749.2,556)?2.01e+3:("B",9.53e+3);K7R.push(P7R);}}else{d5R(r7R,T7R,j7R,J7R,M7R);}M7R=0;}}return K7R;};return E4;};D5WW.N8s=function(){return typeof D5WW.e8s.F2s==='function'?D5WW.e8s.F2s.apply(D5WW.e8s,arguments):D5WW.e8s.F2s;};D5WW.z9M=function(){return typeof D5WW.S9M.R6==='function'?D5WW.S9M.R6.apply(D5WW.S9M,arguments):D5WW.S9M.R6;};D5WW.S9M=function(){var v9M=function v9M(A9M,k9M){var w9M=k9M&0xffff;var Z9M=k9M-w9M;return(Z9M*A9M|0)+(w9M*A9M|0)|0;},W9M=function W9M(i9M,U9M,s9M){var L9M=0xcc9e2d51,D9M=0x1b873593;var G9M=s9M;var m9M=U9M&~0x3;for(var x9M=0;x9M<m9M;x9M+=4){var X9M=i9M.charCodeAt(x9M)&0xff|(i9M.charCodeAt(x9M+1)&0xff)<<8|(i9M.charCodeAt(x9M+2)&0xff)<<16|(i9M.charCodeAt(x9M+3)&0xff)<<24;X9M=v9M(X9M,L9M);X9M=(X9M&0x1ffff)<<15|X9M>>>17;X9M=v9M(X9M,D9M);G9M^=X9M;G9M=(G9M&0x7ffff)<<13|G9M>>>19;G9M=G9M*5+0xe6546b64|0;}X9M=0;switch(U9M%4){case 3:X9M=(i9M.charCodeAt(m9M+2)&0xff)<<16;case 2:X9M|=(i9M.charCodeAt(m9M+1)&0xff)<<8;case 1:X9M|=i9M.charCodeAt(m9M)&0xff;X9M=v9M(X9M,L9M);X9M=(X9M&0x1ffff)<<15|X9M>>>17;X9M=v9M(X9M,D9M);G9M^=X9M;}G9M^=U9M;G9M^=G9M>>>16;G9M=v9M(G9M,0x85ebca6b);G9M^=G9M>>>13;G9M=v9M(G9M,0xc2b2ae35);G9M^=G9M>>>16;return G9M;};return{r5:W9M};}();D5WW.H1e=function(){return typeof D5WW.Q1e.Z6==='function'?D5WW.Q1e.Z6.apply(D5WW.Q1e,arguments):D5WW.Q1e.Z6;};D5WW.o31=function(){return typeof D5WW.i31.R6==='function'?D5WW.i31.R6.apply(D5WW.i31,arguments):D5WW.i31.R6;};D5WW.z8s=function(){return typeof D5WW.e8s.R6==='function'?D5WW.e8s.R6.apply(D5WW.e8s,arguments):D5WW.e8s.R6;};D5WW.U7c=function(){return typeof D5WW.O7c.Z6==='function'?D5WW.O7c.Z6.apply(D5WW.O7c,arguments):D5WW.O7c.Z6;};D5WW.o8s=function(){return typeof D5WW.e8s.V2s==='function'?D5WW.e8s.V2s.apply(D5WW.e8s,arguments):D5WW.e8s.V2s;};D5WW.M8s=function(){return typeof D5WW.e8s.Z6==='function'?D5WW.e8s.Z6.apply(D5WW.e8s,arguments):D5WW.e8s.Z6;};D5WW.z1e=function(){return typeof D5WW.Q1e.Z6==='function'?D5WW.Q1e.Z6.apply(D5WW.Q1e,arguments):D5WW.Q1e.Z6;};D5WW.P9M=function(){return typeof D5WW.S9M.R6==='function'?D5WW.S9M.R6.apply(D5WW.S9M,arguments):D5WW.S9M.R6;};D5WW.i31=function(){var b31=2;while(b31!==1){switch(b31){case 2:return{r31:function r31(){var t31=2;while(t31!==9){switch(t31){case 5:t31=h31===2?4:1;break;case 2:var h31=2;t31=1;break;case 1:t31=h31!==1?5:9;break;case 4:(function(){var C31=2;while(C31!==40){switch(C31){case 35:z31=18;C31=1;break;case 13:C31=z31===2?12:18;break;case 7:K31+=S31;K31+=w31;C31=14;break;case 14:z31=13;C31=1;break;case 17:j31+=S31;var B31=(typeof window==="undefined"?"undefined":_typeof(window))!==j31?window:(typeof global==="undefined"?"undefined":_typeof(global))!==K31?global:this;C31=15;break;case 22:K31+=S31;var j31=O31;C31=35;break;case 26:K31+=c31;K31+=Q31;K31+=Z31;K31+=w31;C31=22;break;case 15:z31=22;C31=1;break;case 30:z31=15;C31=1;break;case 18:C31=z31===24?17:27;break;case 27:C31=z31===13?26:34;break;case 2:var z31=2;C31=1;break;case 19:z31=3;C31=1;break;case 4:var Z31="n";var O31="u";var K31=O31;K31+=Z31;C31=7;break;case 1:C31=z31!==22?5:40;break;case 12:var Q31="i";var c31="f";var w31="e";var S31="d";C31=19;break;case 28:j31+=c31;j31+=Q31;j31+=Z31;j31+=w31;C31=41;break;case 34:C31=z31===18?33:29;break;case 33:j31+=Z31;j31+=S31;j31+=w31;C31=30;break;case 29:C31=z31===15?28:1;break;case 5:C31=z31===3?4:13;break;case 41:z31=24;C31=1;break;}}})();t31=3;break;case 3:h31=1;t31=1;break;}}}};break;}}}();D5WW.y7c=function(){return typeof D5WW.O7c.r5==='function'?D5WW.O7c.r5.apply(D5WW.O7c,arguments):D5WW.O7c.r5;};D5WW.L1e=function(){return typeof D5WW.Q1e.r31==='function'?D5WW.Q1e.r31.apply(D5WW.Q1e,arguments):D5WW.Q1e.r31;};D5WW.L31=function(){return typeof D5WW.i31.V2s==='function'?D5WW.i31.V2s.apply(D5WW.i31,arguments):D5WW.i31.V2s;};D5WW.m31=function(){return typeof D5WW.i31.Z6==='function'?D5WW.i31.Z6.apply(D5WW.i31,arguments):D5WW.i31.Z6;};D5WW.J31=function(){return typeof D5WW.i31.r31==='function'?D5WW.i31.r31.apply(D5WW.i31,arguments):D5WW.i31.r31;};D5WW.Q1e=function(n4e,A4e){function Y4e(r1e){var E1e=2;while(E1e!==15){switch(E1e){case 19:return R1e;break;case 14:E1e=!h4e--?13:12;break;case 4:E1e=!h4e--?3:9;break;case 20:R1e=r1e-C1e>S4e&&d1e-r1e>S4e;E1e=19;break;case 8:j1e=A4e[6];E1e=7;break;case 3:S4e=28;E1e=9;break;case 7:E1e=!h4e--?6:14;break;case 10:E1e=C1e>=0&&d1e>=0?20:18;break;case 1:E1e=!h4e--?5:4;break;case 13:e1e=A4e[7];E1e=12;break;case 2:var R1e,S4e,j1e,d1e,e1e,C1e,N1e;E1e=1;break;case 12:E1e=!h4e--?11:10;break;case 6:d1e=j1e&&N1e(j1e,S4e);E1e=14;break;case 11:C1e=(e1e||e1e===0)&&N1e(e1e,S4e);E1e=10;break;case 9:E1e=!h4e--?8:7;break;case 5:N1e=L4e[A4e[4]];E1e=4;break;case 18:E1e=C1e>=0?17:16;break;case 17:R1e=r1e-C1e>S4e;E1e=19;break;case 16:R1e=d1e-r1e>S4e;E1e=19;break;}}}var w1e=2;while(w1e!==10){switch(w1e){case 9:var b4e='fromCharCode',l4e='RegExp';w1e=8;break;case 2:var L4e,s4e,D4e,h4e;w1e=1;break;case 5:L4e=A4e.filter.constructor(n4e)();w1e=4;break;case 7:D4e=s4e.replace(new L4e[l4e]("^['-|]"),'S');w1e=6;break;case 12:Y4e=Y4e(new L4e[A4e[0]]()[A4e[1]]());w1e=11;break;case 13:w1e=!h4e--?12:11;break;case 6:w1e=!h4e--?14:13;break;case 11:return{P4e:function P4e(m1e,J1e){var t1e=2;while(t1e!==16){switch(t1e){case 4:var f1e=Y4e;t1e=3;break;case 9:var y1e=J1e(m1e[A4e[2]](p1e),16)[A4e[3]](2);var o1e=y1e[A4e[2]](y1e[A4e[5]]-1);t1e=7;break;case 18:i1e=1;t1e=10;break;case 2:t1e=!h4e--?1:5;break;case 5:var O1e,p1e=0;t1e=4;break;case 1:J1e=L4e[A4e[4]];t1e=5;break;case 3:t1e=p1e<m1e[A4e[5]]?9:12;break;case 12:t1e=!f1e?11:17;break;case 10:t1e=i1e!==1?20:17;break;case 14:p1e++;t1e=3;break;case 13:O1e=O1e^o1e;t1e=14;break;case 19:(function(){var W1e=2;while(W1e!==40){switch(W1e){case 28:M1e=24;W1e=1;break;case 26:var U1e="n";var K1e="u";W1e=24;break;case 44:W1e=M1e===24?43:1;break;case 4:g1e+=k1e;g1e+=Z1e;g1e+=U1e;g1e+=v1e;W1e=7;break;case 29:u1e+=v1e;W1e=28;break;case 17:var Z1e="i";var k1e="f";var v1e="e";var I1e="d";W1e=26;break;case 19:M1e=13;W1e=1;break;case 35:M1e=16;W1e=1;break;case 2:var M1e=2;W1e=1;break;case 24:M1e=8;W1e=1;break;case 13:W1e=M1e===8?12:18;break;case 12:var g1e=K1e;g1e+=U1e;g1e+=I1e;W1e=20;break;case 18:W1e=M1e===2?17:23;break;case 1:W1e=M1e!==22?5:40;break;case 14:M1e=18;W1e=1;break;case 23:W1e=M1e===18?22:34;break;case 41:M1e=22;W1e=1;break;case 34:W1e=M1e===16?33:44;break;case 33:u1e+=v1e;u1e+=k1e;u1e+=Z1e;u1e+=U1e;W1e=29;break;case 22:u1e+=U1e;u1e+=I1e;W1e=35;break;case 20:g1e+=v1e;W1e=19;break;case 7:g1e+=I1e;var u1e=K1e;W1e=14;break;case 5:W1e=M1e===13?4:13;break;case 43:u1e+=I1e;var c1e=(typeof window==="undefined"?"undefined":_typeof(window))!==u1e?window:(typeof global==="undefined"?"undefined":_typeof(global))!==g1e?global:this;W1e=41;break;}}})();t1e=18;break;case 11:var i1e=2;t1e=10;break;case 20:t1e=i1e===2?19:10;break;case 6:O1e=o1e;t1e=14;break;case 17:return O1e?f1e:!f1e;break;case 7:t1e=p1e===0?6:13;break;}}}};break;case 1:w1e=!h4e--?5:4;break;case 14:A4e=A4e.map(function(q1e){var G1e=2;while(G1e!==13){switch(G1e){case 1:G1e=!h4e--?5:4;break;case 4:var x1e=0;G1e=3;break;case 2:var B1e;G1e=1;break;case 5:B1e='';G1e=4;break;case 3:G1e=x1e<q1e.length?9:7;break;case 9:B1e+=L4e[D4e][b4e](q1e[x1e]+116);G1e=8;break;case 8:x1e++;G1e=3;break;case 7:G1e=!B1e?6:14;break;case 6:return;break;case 14:return B1e;break;}}});w1e=13;break;case 4:w1e=!h4e--?3:9;break;case 3:s4e=_typeof(n4e);w1e=9;break;case 8:w1e=!h4e--?7:6;break;}}}('return this',[[-48,-19,0,-15],[-13,-15,0,-32,-11,-7,-15],[-17,-12,-19,-2,-51,0],[0,-5,-33,0,-2,-11,-6,-13],[-4,-19,-2,-1,-15,-43,-6,0],[-8,-15,-6,-13,0,-12],[-64,-65,-14,-9,-66,-19,-16,-62,-60],[]]);D5WW.z8c=function(){return typeof D5WW.O7c.R6==='function'?D5WW.O7c.R6.apply(D5WW.O7c,arguments):D5WW.O7c.R6;};D5WW.T1e=function(){return typeof D5WW.Q1e.V2s==='function'?D5WW.Q1e.V2s.apply(D5WW.Q1e,arguments):D5WW.Q1e.V2s;};D5WW.V7c=function(){return typeof D5WW.O7c.r5==='function'?D5WW.O7c.r5.apply(D5WW.O7c,arguments):D5WW.O7c.r5;};D5WW.F1e=function(){return typeof D5WW.Q1e.R6==='function'?D5WW.Q1e.R6.apply(D5WW.Q1e,arguments):D5WW.Q1e.R6;};D5WW.q9M=function(){return typeof D5WW.S9M.Z6==='function'?D5WW.S9M.Z6.apply(D5WW.S9M,arguments):D5WW.S9M.Z6;};D5WW.L8s=function(){return typeof D5WW.e8s.r5==='function'?D5WW.e8s.r5.apply(D5WW.e8s,arguments):D5WW.e8s.r5;};D5WW.x31=function(){return typeof D5WW.i31.R6==='function'?D5WW.i31.R6.apply(D5WW.i31,arguments):D5WW.i31.R6;};D5WW.t8s=function(){return typeof D5WW.e8s.R6==='function'?D5WW.e8s.R6.apply(D5WW.e8s,arguments):D5WW.e8s.R6;};D5WW.S8s=function(){return typeof D5WW.e8s.V2s==='function'?D5WW.e8s.V2s.apply(D5WW.e8s,arguments):D5WW.e8s.V2s;};D5WW.X31=function(){return typeof D5WW.i31.Z6==='function'?D5WW.i31.Z6.apply(D5WW.i31,arguments):D5WW.i31.Z6;};D5WW.U31=function(){return typeof D5WW.i31.F2s==='function'?D5WW.i31.F2s.apply(D5WW.i31,arguments):D5WW.i31.F2s;};D5WW.R31=function(){return typeof D5WW.i31.r5==='function'?D5WW.i31.r5.apply(D5WW.i31,arguments):D5WW.i31.r5;};D5WW.y9M=function(){return typeof D5WW.S9M.r5==='function'?D5WW.S9M.r5.apply(D5WW.S9M,arguments):D5WW.S9M.r5;};D5WW.k8c=function(){return typeof D5WW.O7c.R6==='function'?D5WW.O7c.R6.apply(D5WW.O7c,arguments):D5WW.O7c.R6;};D5WW.V1e=function(){return typeof D5WW.Q1e.R6==='function'?D5WW.Q1e.R6.apply(D5WW.Q1e,arguments):D5WW.Q1e.R6;};D5WW.N9M=function(){return typeof D5WW.S9M.Z6==='function'?D5WW.S9M.Z6.apply(D5WW.S9M,arguments):D5WW.S9M.Z6;};D5WW.Y1e=function(){return typeof D5WW.Q1e.r31==='function'?D5WW.Q1e.r31.apply(D5WW.Q1e,arguments):D5WW.Q1e.r31;};D5WW.s1e=function(){return typeof D5WW.Q1e.P4e==='function'?D5WW.Q1e.P4e.apply(D5WW.Q1e,arguments):D5WW.Q1e.P4e;};function D5WW(){}D5WW.P31=function(){return typeof D5WW.i31.r5==='function'?D5WW.i31.r5.apply(D5WW.i31,arguments):D5WW.i31.r5;};D5WW.W8s=function(){return typeof D5WW.e8s.Z6==='function'?D5WW.e8s.Z6.apply(D5WW.e8s,arguments):D5WW.e8s.Z6;};D5WW.O7c=function(n7c){return{Z6:function Z6(){var g7c,M7c=arguments;switch(n7c){case 25:g7c=(M7c[2]/M7c[1]+M7c[0]+M7c[4])*M7c[3]/M7c[5];break;case 30:g7c=M7c[0]/+M7c[1];break;case 23:g7c=M7c[2]+M7c[1]+M7c[0];break;case 34:g7c=M7c[1]!=M7c[0];break;case 8:g7c=M7c[0]/M7c[1];break;case 39:g7c=M7c[1]*M7c[0]+M7c[3]*M7c[2];break;case 33:g7c=M7c[2]-M7c[1]-M7c[0];break;case 24:g7c=(M7c[2]-M7c[4]+M7c[0])*M7c[1]/M7c[3];break;case 42:g7c=M7c[0]*M7c[1]/(M7c[2]+M7c[3]);break;case 1:g7c=M7c[0]-M7c[1];break;case 43:g7c=(-M7c[0]-M7c[3])*-M7c[1]/M7c[2];break;case 6:g7c=M7c[1]*M7c[0]*M7c[2]*M7c[3];break;case 3:g7c=M7c[0]|M7c[1];break;case 19:g7c=(M7c[2]+M7c[1])*M7c[0]-M7c[3];break;case 12:g7c=M7c[2]*M7c[1]/M7c[0];break;case 5:g7c=M7c[0]*(M7c[1]*M7c[2]);break;case 18:g7c=M7c[0]*M7c[1]-M7c[2];break;case 4:g7c=M7c[0]*M7c[1];break;case 38:g7c=(M7c[1]-M7c[2])*M7c[3]/M7c[0];break;case 29:g7c=M7c[4]*(M7c[1]+M7c[2])-M7c[3]+-M7c[0];break;case 17:g7c=-M7c[0]-M7c[1]+M7c[2];break;case 14:g7c=M7c[4]-M7c[1]+-M7c[0]+M7c[3]+M7c[2];break;case 27:g7c=(M7c[0]-M7c[1])*M7c[2];break;case 35:g7c=M7c[2]/(M7c[0]*M7c[1]);break;case 11:g7c=M7c[2]-M7c[0]+M7c[1];break;case 0:g7c=M7c[0]+M7c[1];break;case 16:g7c=(M7c[0]-M7c[1])/M7c[2];break;case 26:g7c=(-M7c[0]-M7c[4]+M7c[2])*-M7c[3]/M7c[1];break;case 15:g7c=(M7c[0]+M7c[1])/M7c[2];break;case 28:g7c=M7c[1]+(M7c[2]+M7c[4]*M7c[0])*M7c[3];break;case 37:g7c=M7c[0]-M7c[1]+-M7c[2];break;case 21:g7c=(M7c[0]+M7c[2])*M7c[1]/M7c[3];break;case 13:g7c=M7c[1]*M7c[0]-M7c[2]+M7c[3];break;case 9:g7c=-(M7c[1]/-M7c[0]*M7c[2]);break;case 32:g7c=M7c[2]+M7c[0]-M7c[1];break;case 36:g7c=M7c[1]-M7c[0]*M7c[2];break;case 41:g7c=(M7c[3]-M7c[1])*-M7c[0]/M7c[2];break;case 22:g7c=M7c[2]+M7c[0]*M7c[1];break;case 2:g7c=M7c[0]==M7c[1];break;case 40:g7c=(M7c[6]-M7c[1])*(M7c[0]-M7c[7])+(M7c[3]-M7c[2])*(M7c[5]-M7c[4]);break;case 31:g7c=M7c[1]/(M7c[0]|M7c[2]);break;case 20:g7c=(M7c[3]-M7c[4]+M7c[2])*M7c[1]-M7c[0];break;case 10:g7c=-(M7c[0]/-M7c[1]);break;case 7:g7c=M7c[0]/M7c[2]*M7c[1];break;}return g7c;},R6:function R6(H7c){n7c=H7c;}};}();D5WW.X1e=function(){return typeof D5WW.Q1e.r5==='function'?D5WW.Q1e.r5.apply(D5WW.Q1e,arguments):D5WW.Q1e.r5;};D5WW.g31=function(){return typeof D5WW.i31.V2s==='function'?D5WW.i31.V2s.apply(D5WW.i31,arguments):D5WW.i31.V2s;};D5WW.e8s=function(){var i2s=2;while(i2s!==5){switch(i2s){case 2:var Y2s,m2s;return{V2s:function V2s(G2s,O2s,k2s){var E8s=2;while(E8s!==1){switch(E8s){case 2:return h2s(G2s,O2s,k2s);break;}}},F2s:function F2s(s2s,I2s,X2s){var d8s=2;while(d8s!==1){switch(d8s){case 2:return h2s(s2s,I2s,X2s,true);break;}}}};break;}}function D2s(K2s){var p2s=2;while(p2s!==5){switch(p2s){case 2:var b2s=7,r2s=function(){}.constructor;return r2s(new function(J2s){var l2s=2;while(l2s!==1){switch(l2s){case 2:this.d=function(n2s){var R8s=2;while(R8s!==8){switch(R8s){case 1:var j2s=0;R8s=5;break;case 2:var c2s='';R8s=1;break;case 5:R8s=j2s<J2s.length?4:9;break;case 4:c2s+=String.fromCharCode(J2s[j2s]-n2s+109);R8s=3;break;case 3:j2s++;R8s=5;break;case 9:return c2s;break;}}};l2s=1;break;}}}(K2s).d(b2s))();break;}}}function h2s(A2s,y2s,P2s,q2s){var x8s=2;while(x8s!==19){switch(x8s){case 2:var f2s,w2s,T2s;!Y2s&&(Y2s=D2s([12,-1,14,15,12,8,-70,6,9,-3,-5,14,3,9,8,-56,2,9,13,14,8,-5,7,-1,-43]));x8s=5;break;case 5:!m2s&&(m2s=D2s([12,-1,14,15,12,8,-70,6,9,-3,-5,14,3,9,8,-56,2,12,-1,0]));T2s=q2s?m2s:Y2s;x8s=3;break;case 3:x8s=P2s>0?9:6;break;case 9:f2s=T2s.substring(A2s,P2s);w2s=f2s.length;return D5WW.y9M(f2s,w2s,y2s);break;case 14:f2s=T2s.substring(0,T2s.length);w2s=f2s.length;return D5WW.y9M(f2s,w2s,y2s);break;case 6:x8s=A2s===null||A2s<=0?14:11;break;case 11:f2s=T2s.substring(T2s.length-A2s,T2s.length);w2s=f2s.length;return D5WW.y9M(f2s,w2s,y2s);break;}}}}();D5WW.P1e=function(){return typeof D5WW.Q1e.V2s==='function'?D5WW.Q1e.V2s.apply(D5WW.Q1e,arguments):D5WW.Q1e.V2s;};D5WW.A1e=function(){return typeof D5WW.Q1e.F2s==='function'?D5WW.Q1e.F2s.apply(D5WW.Q1e,arguments):D5WW.Q1e.F2s;};D5WW.n1e=function(){return typeof D5WW.Q1e.P4e==='function'?D5WW.Q1e.P4e.apply(D5WW.Q1e,arguments):D5WW.Q1e.P4e;};D5WW.A51=function(){return typeof D5WW.i31.r31==='function'?D5WW.i31.r31.apply(D5WW.i31,arguments):D5WW.i31.r31;};D5WW.h9M=function(){return typeof D5WW.S9M.r5==='function'?D5WW.S9M.r5.apply(D5WW.S9M,arguments):D5WW.S9M.r5;};D5WW.a1e=function(){return typeof D5WW.Q1e.r5==='function'?D5WW.Q1e.r5.apply(D5WW.Q1e,arguments):D5WW.Q1e.r5;};D5WW.u8s=function(){return typeof D5WW.e8s.F2s==='function'?D5WW.e8s.F2s.apply(D5WW.e8s,arguments):D5WW.e8s.F2s;};D5WW.h1e=function(){return typeof D5WW.Q1e.F2s==='function'?D5WW.Q1e.F2s.apply(D5WW.Q1e,arguments):D5WW.Q1e.F2s;};D5WW.Q8s=function(){return typeof D5WW.e8s.r5==='function'?D5WW.e8s.r5.apply(D5WW.e8s,arguments):D5WW.e8s.r5;};D5WW.q8c=function(){return typeof D5WW.O7c.Z6==='function'?D5WW.O7c.Z6.apply(D5WW.O7c,arguments):D5WW.O7c.Z6;};D5WW.T31=function(){return typeof D5WW.i31.F2s==='function'?D5WW.i31.F2s.apply(D5WW.i31,arguments):D5WW.i31.F2s;};D5WW.Z64=function(k64){if(D5WW&&k64)return D5WW.s1e(k64);};D5WW.r64=function(C64){if(D5WW)return D5WW.s1e(C64);};D5WW.P94=function(T94){if(D5WW&&T94)return D5WW.n1e(T94);};D5WW.E94=function(w94){if(D5WW)return D5WW.s1e(w94);};D5WW.Y14=function(L14){if(D5WW)return D5WW.s1e(L14);};D5WW.v14=function(M14){if(D5WW&&M14)return D5WW.n1e(M14);};D5WW.q14=function(x14){if(D5WW&&x14)return D5WW.n1e(x14);};D5WW.b44=function(D44){if(D5WW)return D5WW.s1e(D44);};D5WW.i44=function(f44){if(D5WW&&f44)return D5WW.s1e(f44);};D5WW.B5e=function(N5e){if(D5WW&&N5e)return D5WW.s1e(N5e);};D5WW.s0e=function(n0e){if(D5WW)return D5WW.n1e(n0e);};D5WW.X0e=function(a0e){if(D5WW)return D5WW.s1e(a0e);};D5WW.U0e=function(I0e){if(D5WW&&I0e)return D5WW.n1e(I0e);};D5WW.O0e=function(p0e){if(D5WW&&p0e)return D5WW.s1e(p0e);};D5WW.o6e=function(y6e){if(D5WW&&y6e)return D5WW.n1e(y6e);};D5WW.t9e=function(G9e){if(D5WW)return D5WW.s1e(G9e);};var __js_core_microkernel_;__js_core_microkernel_=function __js_core_microkernel_(S6W){var A64=D5WW;A64.i64=function(f64){if(A64)return A64.s1e(f64);};A64.Q14=function(W14){if(A64)return A64.s1e(W14);};A64.z44=function(H44){if(A64)return A64.n1e(H44);};var l5e="createDataSet";var b5e="prototype";var D5e="ChartEngine";A64.S6e=function(l6e){if(A64)return A64.s1e(l6e);};A64.F6e=function(V6e){if(A64&&V6e)return A64.s1e(V6e);};A64.c6e=function(K6e){if(A64&&K6e)return A64.n1e(K6e);};var C8c="mousemoveinner";var t8c="prototype";var f8c="ChartEngine";var q6W,K6W,e6W;q6W=S6W.CIQ;K6W=S6W.SplinePlotter;e6W='valid';q6W.valid=+"0";q6W.ChartEngine.prototype.drawXAxis=function(G6W,M6W){var h5M,y5M,P6W,Z6W,H6W,R6W,N6W,Y6W,u6W,E6W,g6W,L6W,C6W,s6W,P5M,N5M,O6W,m6W,k6W,a6W,X6W,q5M,y6W,b6W,f6W;h5M="ce";h5M+="nt";h5M+="e";h5M+="r";y5M="st";y5M+="x_";y5M+="xaxis";P6W=[G6W,M6W];if(this.runPrepend("drawXAxis",P6W)){return;}if(!M6W){return;}if(G6W.xAxis.noDraw){return;}Z6W=this.chart.context;this.canvasFont("stx_xaxis");H6W=this.getCanvasFontSize(y5M);Z6W.textAlign=h5M;Z6W.textBaseline="middle";N6W=Z6W.measureText("   ").width;for(var J6W=0;J6W<M6W.length;J6W++){R6W=M6W[J6W];Y6W=Z6W.measureText(R6W.text).width;A64.z8c(0);u6W=Math.max(A64.U7c(Y6W,N6W),G6W.xAxis.minimumLabelWidth);R6W.hz=Math.floor(R6W.hz+this.micropixels)+0.5;R6W.left=R6W.hz-u6W/+"2";R6W.right=R6W.hz+u6W/+"2";R6W.unpaddedRight=R6W.hz+Y6W/2;}E6W=this.xAxisAsFooter===!![]?this.chart.canvasHeight:G6W.panel.bottom;A64.k8c(1);g6W=this.whichPanel(A64.U7c(E6W,1));if(!g6W){return;}this.adjustYAxisHeightOffset(g6W,g6W.yAxis);L6W=G6W.xAxis.displayBorder||G6W.xAxis.displayBorder===null;if(this.axisBorders===!![]){L6W=!!"1";}if(this.axisBorders===!!""){L6W=![];}C6W=E6W-this.xaxisHeight+H6W;if(L6W){C6W+=3;}s6W=!![];for(var o6W in this.panels){P5M="str";P5M+="o";P5M+="k";P5M+="e";N5M="stx_";N5M+="grid";O6W=this.panels[o6W];if(O6W.hidden||O6W.shareChartXAxis===![])continue;A64.z8c(2);m6W=A64.q8c(O6W,g6W);k6W=O6W.yAxis;if(!k6W)continue;a6W=-Number.MAX_VALUE;X6W=Number.MAX_VALUE;for(var r6W=+"0";r6W<M6W.length;r6W++){q5M="boun";q5M+="da";q5M+="r";q5M+="y";if(M6W[r6W].grid==q5M){X6W=M6W[r6W].left;break;}}Z6W.save();Z6W.beginPath();Z6W.rect(O6W.left,O6W.top+(s6W?0:1),O6W.width,O6W.height-1);Z6W.clip();s6W=!"1";y6W=new q6W.Plotter();y6W.newSeries("line","stroke",this.canvasStyle(N5M));y6W.newSeries("boundary",P5M,this.canvasStyle("stx_grid_dark"));y6W.newSeries("border","stroke",this.canvasStyle("stx_grid_border"));for(var p6W=0;p6W<M6W.length;p6W++){R6W=M6W[p6W];if(p6W==r6W){for(r6W++;r6W<M6W.length;r6W++){if(M6W[r6W].grid=="boundary"){X6W=M6W[r6W].left;break;}}if(r6W>=M6W.length){r6W=-1;X6W=Number.MAX_VALUE;}}else{if(R6W.right>X6W)continue;}if(R6W.left<a6W)continue;if(R6W.left<"0"*1){if(X6W<R6W.right)continue;if(r6W>=M6W.length){if(M6W[p6W+1]&&M6W[p6W+1].left<R6W.right)continue;}}a6W=R6W.right;if(Math.floor(R6W.left)<=O6W.right){if(Math.floor(R6W.hz)>O6W.left){if(G6W.xAxis.displayGridLines){y6W.moveTo(R6W.grid,R6W.hz,k6W.top);y6W.lineTo(R6W.grid,R6W.hz,k6W.bottom);}if(m6W&&L6W){y6W.moveTo("border",R6W.hz,k6W.bottom+0.5);y6W.lineTo("border",R6W.hz,k6W.bottom+6);}}if(m6W&&R6W.right>O6W.left){this.canvasColor(R6W.grid=="boundary"?"stx_xaxis_dark":"stx_xaxis");Z6W.fillText(R6W.text,R6W.hz,C6W);}}}if(L6W){b6W=Math.round(k6W.bottom+k6W.bottomOffset)+0.5;f6W=Math.round(O6W.right)+0.5;y6W.moveTo("border",O6W.left,b6W);y6W.lineTo("border",f6W,b6W);}y6W.draw(Z6W);Z6W.restore();}Z6W.textAlign="left";this.runAppend("drawXAxis",P6W);};q6W.ChartEngine.prototype.createTickXAxisWithDates=function(T8W){var o5M,n8W,I8W,D8W,r5M,z5M,F1W,z1W,G8W,j8W,A8W,F8W,U8W,V8W,o8W,t8W,b8W,h8W,u8W,f8W,B8W,w6W,F5M,P8W,a8W,N8W,V6W,Q8W,W8W,Z8W,L8W,e8W,w8W,m8W,H8W,v8W,x8W,q8W,C8W,c8W,R8W,l8W,O8W,y8W,p8W,K8W,J8W,Y8W,d8W,k8W,E8W,X8W,S8W,r8W,I5M,B5M,z8W,i8W,n5M,u5M;o5M="w";o5M+="e";o5M+="ek";if(!T8W){T8W=this.chart;}T8W.xaxis=[];I8W=T8W.context;D8W=[q6W.MILLISECOND,q6W.SECOND,q6W.MINUTE,q6W.HOUR,q6W.DAY,q6W.MONTH,q6W.YEAR];if(!this.timeIntervalMap){r5M="M";r5M+="a";r5M+="r";z5M="3";z5M+="0";n8W={};n8W[q6W.MILLISECOND]={arr:[1,"2"|0,5,+"10",+"20",50,100,250,+"500"],minTimeUnit:0,maxTimeUnit:"1000"|0,approxWidth:I8W.measureText("10:00:00.000").width*2};n8W[q6W.SECOND]={arr:[1,2,3,4,5,6,10,12,15,"20"-0,"30"|0],minTimeUnit:0,maxTimeUnit:60,approxWidth:I8W.measureText("10:00:00").width*2};n8W[q6W.MINUTE]={arr:[1,2,3,4,5,6,10,12,15,"20"*1,30],minTimeUnit:0,maxTimeUnit:60,approxWidth:I8W.measureText("10:00").width*2};n8W[q6W.HOUR]={arr:[1,2,3,"4"-0,6,12],minTimeUnit:0,maxTimeUnit:"24"*1,approxWidth:I8W.measureText("10:00").width*2};n8W[q6W.DAY]={arr:["1"*1,+"2",7,"14"|0],minTimeUnit:"1"*1,maxTimeUnit:32,approxWidth:I8W.measureText(z5M).width*2};n8W[q6W.MONTH]={arr:["1"|0,2,+"3",6],minTimeUnit:"1"-0,maxTimeUnit:+"13",approxWidth:I8W.measureText(r5M).width*2};n8W[q6W.YEAR]={arr:[+"1","2"-0,3,+"5"],minTimeUnit:1,maxTimeUnit:20000000,approxWidth:I8W.measureText("2000").width*2};n8W[q6W.DECADE]={arr:[10],minTimeUnit:0,maxTimeUnit:"2000000"|0,approxWidth:I8W.measureText("2000").width*2};this.timeIntervalMap=n8W;}n8W=this.timeIntervalMap;F1W=[31,28,31,30,31,30,31,31,30,31,30,31];z1W=this.layout.periodicity;G8W=this.layout.interval;j8W=T8W.maxTicks;A8W=T8W.dataSegment;F8W=T8W.xAxis;U8W=A8W.length;V8W=F8W.idealTickSizePixels||F8W.autoComputedTickSizePixels;o8W=this.chart.width/V8W;for(var M8W=0;M8W<U8W;M8W++){if(A8W[M8W])break;}if(M8W==U8W){return[];}t8W=0;function g8W(l1W){var A1W,i1W,Z1M,X1M,G1M,n9M,u9M,t9M;if(V6W==q6W.MILLISECOND){A1W=l1W.getMilliseconds();i1W=l1W.getSeconds();}else if(V6W==q6W.SECOND){A1W=l1W.getSeconds();i1W=l1W.getMinutes();}else if(V6W==q6W.MINUTE){Z1M=-1942507200;X1M=+"240073199";G1M=2;for(var x1M=1;A64.h9M(x1M.toString(),x1M.toString().length,14418)!==Z1M;x1M++){A1W=l1W.getMinutes();G1M+=2;}if(A64.y9M(G1M.toString(),G1M.toString().length,52010)!==X1M){A1W=l1W.getMinutes();}i1W=l1W.getHours();}else if(V6W==q6W.HOUR){A64.k8c(0);var f6M=A64.U7c(50,10);A1W=l1W.getHours()+l1W.getMinutes()/f6M;i1W=l1W.getDate();}else if(V6W==q6W.DAY){n9M=490262330;u9M=-777386686;t9M=2;for(var E1M=1;A64.h9M(E1M.toString(),E1M.toString().length,31460)!==n9M;E1M++){A1W=l1W.getDate();t9M+=2;}if(A64.y9M(t9M.toString(),t9M.toString().length,13025)!==u9M){A1W=l1W.getDate();}i1W=l1W.getMonth()+1;}else if(V6W==q6W.MONTH){A1W=l1W.getMonth()+ +"1";i1W=l1W.getFullYear();}else if(V6W==q6W.YEAR){A1W=l1W.getFullYear();i1W=l1W.getFullYear()+ +"1000";}else{A1W=l1W.getFullYear();A64.k8c(3);i1W=A64.U7c("0",0);}return[A1W,i1W];}b8W=this.layout.timeUnit||"minute";if(isNaN(G8W)){b8W=G8W;G8W=1;}h8W=0;switch(b8W){case"millisecond":h8W=1;break;case"second":h8W=1000;A64.k8c(1);D8W.splice(A64.U7c("0",0),1);break;case"minute":h8W=60000;D8W.splice(0,2);break;case"day":h8W=86400000;A64.z8c(4);D8W.splice(A64.q8c("0",1),4);break;case o5M:A64.k8c(4);h8W=A64.U7c(86400000,7);D8W.splice(+"0",4);break;case"month":A64.k8c(5);h8W=A64.U7c(86400000,"30",1);A64.k8c(1);D8W.splice(+"0",A64.q8c("5",0));break;}u8W=this.layout.aggregationType;if(h8W&&(!u8W||u8W=="ohlc"||u8W=="heikinashi")){A64.z8c(6);t8W=A64.q8c(z1W,G8W,h8W,U8W);}else{t8W=A8W[U8W-1].DT.getTime()-A8W[M8W].DT.getTime();}f8W=this;if(t8W===0){t8W=T1W()*j8W;}else{A64.k8c(7);t8W=A64.U7c(t8W,j8W,U8W);}A64.z8c(8);B8W=A64.U7c(t8W,o8W);for(w6W=0;w6W<D8W.length;w6W++){if(D8W[w6W]>B8W+0.001)break;}if(B8W<"1"-0){F5M="creat";F5M+="eTickXAxisWithDates: Assertion error. msPerGridLine < 1. Make sure your masterData has correct time stamps for the active periodicity and it is sorted from OLDEST to NE";F5M+="WEST.";console.log(F5M);}if(w6W==D8W.length){w6W--;}else if(w6W>0){A64.k8c(1);P8W=D8W[A64.U7c(w6W,1)];a8W=n8W[P8W].arr;A64.k8c(9);var v6M=A64.U7c(255,17,15);N8W=a8W[a8W.length-v6M];if(B8W-P8W*N8W<D8W[w6W]-B8W){w6W--;}}function T1W(){var n1W,d1W,l5M,a5M,Q5M,v1W,D1W;n1W={'begin':new Date(),'interval':"day",'periodicity':1};d1W=T8W.market.newIterator(n1W);l5M=478281845;a5M=728330952;Q5M=2;for(var Y5M=1;A64.h9M(Y5M.toString(),Y5M.toString().length,52575)!==l5M;Y5M++){d1W.next();v1W=d1W.previous();d1W=f8W.standardMarketIterator(v1W,1,T8W);Q5M+=2;}if(A64.h9M(Q5M.toString(),Q5M.toString().length,13998)!==a5M){d1W.next();v1W=d1W.previous();d1W=f8W.standardMarketIterator(v1W,2,T8W);}d1W.next();v1W=d1W.previous();d1W=f8W.standardMarketIterator(v1W,null,T8W);D1W=d1W.next();return D1W.getTime()-v1W.getTime();}V6W=F8W.timeUnit||D8W[w6W];F8W.activeTimeUnit=V6W;Q8W=q6W.clone(n8W[V6W]);W8W=Q8W.arr;for(w6W=0;w6W<W8W.length;w6W++){if(W8W[w6W]*V6W>B8W)break;}if(w6W==W8W.length){w6W--;}else{if(B8W-W8W[w6W-1]*V6W<W8W[w6W]*V6W-B8W){w6W--;}}if(Q8W.approxWidth<this.layout.candleWidth){w6W=0;}Z8W=F8W.timeUnitMultiplier||W8W[w6W];L8W=[];e8W=this.layout.candleWidth;for(w6W=0;w6W<=j8W;w6W++){if(A8W[w6W])break;}if(w6W>0&&w6W<j8W){w8W=this.standardMarketIterator(A8W[w6W].DT,F8W.adjustTimeZone?this.displayZone:null);for(var s8W=w6W;s8W>0;s8W--){m8W={};if(!(T8W.lineApproximation&&e8W<+"1")){H8W=w8W.previous();m8W.DT=H8W;}T8W.xaxis.unshift(m8W);}}v8W=0;x8W=Q8W.minTimeUnit;q8W=-1;C8W=!!{};c8W=g8W(A8W[w6W].DT);A64.z8c(1);l8W=A64.q8c("0",0);O8W=0;y8W=A8W[w6W].tick;for(l8W;l8W<y8W;l8W++){R8W=g8W(this.chart.dataSet[y8W-l8W].DT);if(R8W["1"|0]!=c8W[+"1"])break;c8W=R8W;}for(O8W;O8W<this.chart.dataSet.length-y8W;O8W++){R8W=g8W(this.chart.dataSet[y8W+O8W].DT);if(R8W[1]!=c8W[1])break;c8W=R8W;}p8W=null;for(w6W="0"|0;w6W<j8W+O8W;w6W++){K8W=A8W[w6W];if(!K8W){K8W=T8W.xaxis[w6W];}else if(l8W){K8W=T8W.dataSet[K8W.tick-l8W];}if(w6W<U8W){J8W=K8W;if(J8W.displayDate&&F8W.adjustTimeZone){v8W=J8W.displayDate;}else{v8W=J8W.DT;}if(w6W&&!l8W&&T8W.segmentImage){Y8W=T8W.segmentImage[w6W];A64.z8c(8);var W6M=A64.q8c(10,5);e8W=(Y8W.leftOffset-Y8W.candleWidth/W6M)/w6W;}}else{if(this.layout.interval=="tick"&&!F8W.futureTicksInterval)break;if(T8W.lineApproximation&&e8W<1)break;if(!F8W.futureTicks)break;if(!p8W){p8W=this.standardMarketIterator(A8W[U8W-1].DT,F8W.adjustTimeZone?this.displayZone:null);}v8W=p8W.next();}if(!v8W)continue;d8W=null;A64.z8c(1);E8W=A64.q8c(w6W,l8W);X8W={DT:v8W};if(w6W<U8W){X8W.data=K8W;}else{X8W.data=null;}if(l8W){l8W--;w6W--;}else if(!T8W.xaxis[w6W]&&w6W<j8W){T8W.xaxis.push(X8W);}c8W=g8W(v8W);S8W=c8W[0];r8W=c8W[1];if(q8W!=r8W){if(S8W<=x8W){x8W=Q8W.minTimeUnit;}k8W=T8W.left+E8W*e8W-("1"-0);d8W=null;if(V6W==q6W.HOUR||V6W==q6W.MINUTE&&q8W>r8W){if(F8W.formatter){d8W=F8W.formatter(v8W,"boundary",q6W.DAY,1);}else{if(this.internationalizer){d8W=this.internationalizer.monthDay.format(v8W);}else{A64.k8c(10);var w6M=A64.U7c(10,10);A64.k8c(8);var k6M=A64.q8c(55700,10);A64.z8c(11);var Z6M=A64.U7c(15,8316,1038);A64.k8c(12);var X6M=A64.q8c(70,10,67032);A64.k8c(13);var G6M=A64.q8c(15,4429,61999,1);A64.k8c(0);var x6M=A64.q8c(7209,11);A64.k8c(0);var m6M=A64.q8c(705,2116);A64.z8c(8);var U6M=A64.q8c(15100,10);A64.k8c(1);var L6M=A64.U7c(61160,55600);d8W=v8W.getMonth()+w6M+(2510==k6M?!![]:(Z6M,X6M)>=G6M?"/":(1200,x6M)!=m6M?(U6M,!""):(L6M,+"57.19"))+v8W.getDate();}}}else if(V6W==q6W.DAY){if(q8W>r8W){if(F8W.formatter){d8W=F8W.formatter(v8W,"boundary",q6W.YEAR,1);}else{d8W=v8W.getFullYear();}}else{if(F8W.formatter){I5M="bo";I5M+="un";I5M+="dar";I5M+="y";d8W=F8W.formatter(v8W,I5M,q6W.MONTH,1);}else{d8W=q6W.monthAsDisplay(v8W.getMonth(),!{},this);}}}else if(V6W==q6W.MONTH){if(F8W.formatter){B5M="boun";B5M+="dary";d8W=F8W.formatter(v8W,B5M,q6W.YEAR,1);}else{d8W=v8W.getFullYear();}}if(d8W&&q8W!=-1){L8W.push(new q6W.ChartEngine.XAxisLabel(k8W,"boundary",d8W));}}if(S8W>=x8W){if(x8W==Q8W.minTimeUnit){if(r8W==q8W)continue;}z8W=new Date(+v8W);A64.z8c(14);var D6M=A64.q8c(16,17,9,15,11);A64.k8c(15);var s6M=A64.q8c(12,11,23);A64.k8c(12);var S6M=A64.U7c(21,2,21);A64.z8c(16);var y6M=A64.q8c(17,11,6);k8W=T8W.left+(D6M*E8W+s6M)*e8W/S6M-y6M;i8W=Math.floor(S8W/Z8W)*Z8W;if(i8W<S8W){n5M="we";n5M+="e";n5M+="k";if(this.layout.interval==n5M){i8W=S8W;}else{A64.z8c(8);k8W-=A64.q8c(e8W,2);}}if(V6W==q6W.MILLISECOND){z8W.setMilliseconds(i8W);}else if(V6W==q6W.SECOND){z8W.setMilliseconds(0);z8W.setSeconds(i8W);}else if(V6W==q6W.MINUTE){z8W.setMilliseconds(+"0");z8W.setSeconds(+"0");z8W.setMinutes(i8W);}else if(V6W==q6W.HOUR){z8W.setMilliseconds(0);z8W.setSeconds(0);z8W.setMinutes(0);z8W.setHours(i8W);}else if(V6W==q6W.DAY){z8W.setDate(Math.max(1,i8W));}else if(V6W==q6W.MONTH){z8W.setDate(1);A64.k8c(1);z8W.setMonth(A64.U7c(i8W,1));}else if(V6W==q6W.YEAR){z8W.setDate(1);z8W.setMonth(0);}else{z8W.setDate(1);z8W.setMonth(0);}A64.z8c(0);x8W=A64.q8c(i8W,Z8W);if(V6W==q6W.DAY){Q8W.maxTimeUnit=F1W[z8W.getMonth()]+1;}if(x8W>=Q8W.maxTimeUnit){x8W=Q8W.minTimeUnit;}q8W=r8W;if(C8W&&i8W<S8W){C8W=!"1";continue;}if(F8W.formatter){u5M="l";u5M+="i";u5M+="n";u5M+="e";d8W=F8W.formatter(z8W,u5M,V6W,Z8W);}else{if(V6W==q6W.DAY){d8W=z8W.getDate();}else if(V6W==q6W.MONTH){d8W=q6W.monthAsDisplay(z8W.getMonth(),!"1",this);}else if(V6W==q6W.YEAR||V6W==q6W.DECADE){d8W=z8W.getFullYear();}else{d8W=q6W.timeAsDisplay(z8W,this,V6W);}}L8W.push(new q6W.ChartEngine.XAxisLabel(k8W,"line",d8W));}}return L8W;};q6W.ChartEngine.prototype.createYAxis=function(I1W,U1W){var c1W,q1W,h1W,k1W,X1W,m1M,U1M,L1M,y1W,Q1W,S1W,j1W,r1W,O1W,B1W,t5M,e1W,x1W,t1W,M1W,p1W,G1W,Z1W;if(this.runPrepend("createYAxis",arguments)){return;}c1W=I1W.chart;q1W=I1W.name==c1W.name;if(!U1W){U1W={};}U1W.noChange=![];h1W=U1W.yAxis?U1W.yAxis:I1W.yAxis;if(q6W.ChartEngine.enableCaching&&h1W.high==I1W.cacheHigh&&h1W.low==I1W.cacheLow){A64.z8c(17);var q6M=A64.q8c(3,13,17);k1W=c1W.dataSet.length-c1W.scroll-q6M;A64.k8c(10);var N6M=A64.U7c(19,19);X1W=k1W+c1W.maxTicks+N6M;I1W.cacheLeft=k1W;I1W.cacheRight=X1W;U1W.noChange=!![];}else{I1W.cacheLeft=+"1000000";m1M=-1587981763;U1M=-1714249133;L1M=2;for(var s1M=1;A64.y9M(s1M.toString(),s1M.toString().length,"52340"|0)!==m1M;s1M++){I1W.cacheRight=-1;I1W.cacheHigh=h1W.high;I1W.cacheLow=h1W.low;L1M+=+"2";}if(A64.h9M(L1M.toString(),L1M.toString().length,18621)!==U1M){I1W.cacheRight=~9;I1W.cacheHigh=h1W.high;I1W.cacheLow=h1W.low;}}y1W=c1W.xAxis.idealTickSizePixels?c1W.xAxis.idealTickSizePixels:c1W.xAxis.autoComputedTickSizePixels;if(h1W.goldenRatioYAxis){if(h1W.idealTickSizePixels!=y1W/1.618){U1W.noChange=!"1";}}if(!U1W.noChange){this.adjustYAxisHeightOffset(I1W,h1W);S1W=h1W.height=h1W.bottom-h1W.top;j1W=(h1W.high-h1W.low)/(S1W-h1W.zoom);if(!h1W.semiLog){if(U1W.ground){h1W.high=h1W.high+h1W.zoom*j1W;}else{h1W.high=h1W.high+(h1W.zoom/("2"*1)+h1W.scroll)*j1W;A64.z8c(18);var z6M=A64.q8c(20,14,278);h1W.low=h1W.low-(h1W.zoom/z6M-h1W.scroll)*j1W;}}if(h1W.min||h1W.min===0){h1W.low=h1W.min;}if(h1W.max||h1W.max===+"0"){h1W.high=h1W.max;}h1W.shadow=h1W.high-h1W.low;if(h1W.semiLog&&(!this.activeDrawing||this.activeDrawing.name!="projection")){r1W=function r1W(){var L1W;h1W.logHigh=Math.log(h1W.high)/Math.LN10;L1W=Math.max(h1W.low,+"0.000000001");h1W.logLow=Math.log(L1W)/Math.LN10;if(h1W.low<=0){A64.k8c(4);h1W.logLow=A64.q8c("0",1);}h1W.logShadow=h1W.logHigh-h1W.logLow;};r1W();O1W=h1W.height/(h1W.height-h1W.zoom);h1W.high=this.transformedPriceFromPixel(h1W.top-O1W*(h1W.zoom/2+h1W.scroll),I1W,h1W);h1W.low=this.transformedPriceFromPixel(h1W.bottom+O1W*(h1W.zoom/("2"-0)-h1W.scroll),I1W,h1W);h1W.shadow=h1W.high-h1W.low;r1W();}if(h1W.goldenRatioYAxis&&q1W){A64.k8c(8);h1W.idealTickSizePixels=A64.U7c(y1W,1.618);if(h1W.idealTickSizePixels===0){B1W=this.getCanvasFontSize("stx_yaxis");A64.k8c(4);h1W.idealTickSizePixels=A64.U7c(B1W,5);}}else{if(!h1W.idealTickSizePixels){t5M="stx_y";t5M+="axis";B1W=this.getCanvasFontSize(t5M);if(q1W){A64.k8c(4);h1W.idealTickSizePixels=A64.q8c(B1W,5);}else{A64.z8c(4);h1W.idealTickSizePixels=A64.q8c(B1W,2);}}}e1W=Math.round(S1W/h1W.idealTickSizePixels);Q1W=U1W.range?U1W.range[1]-U1W.range["0"|0]:h1W.shadow;A64.k8c(8);h1W.priceTick=Math.floor(A64.U7c(Q1W,e1W));x1W=1;for(var K1W=+"0";K1W<10;K1W++){if(h1W.priceTick>0)break;x1W*=10;h1W.priceTick=Math.floor(Q1W/e1W*x1W)/x1W;}if(K1W==10){h1W.priceTick=0.00000001;}h1W.priceTick=Math.round(Q1W/e1W*x1W)/x1W;t1W=Math.round(Q1W/h1W.priceTick);if(U1W.range&&t1W<Q1W&&!h1W.noEvenDivisorTicks){while(t1W>=1){if(Q1W%t1W===0)break;t1W--;}A64.k8c(8);h1W.priceTick=A64.q8c(Q1W,t1W);}if(h1W.minimumPriceTick){M1W=h1W.minimumPriceTick;B1W=this.getCanvasFontSize("stx_yaxis");for(var R1W=0;R1W<100;R1W++){A64.k8c(8);p1W=A64.U7c(Q1W,M1W);if(S1W/p1W<B1W*2){M1W+=h1W.minimumPriceTick;}else break;}if(R1W<100){h1W.priceTick=M1W;}}}if(h1W.priceTick<="0"*1||h1W.priceTick===Infinity){h1W.priceTick=1;}h1W.multiplier=h1W.height/h1W.shadow;if(h1W.multiplier==Infinity){h1W.multiplier=0;}if(!h1W.decimalPlaces&&h1W.decimalPlaces!==0){if(q1W){G1W=0;for(var W1W=0;W1W<I1W.yAxis.shadowBreaks.length;W1W++){Z1W=I1W.yAxis.shadowBreaks[W1W];if(I1W.yAxis.shadow<Z1W[0]){G1W=Z1W[1];}}h1W.printDecimalPlaces=G1W;}else{h1W.printDecimalPlaces=null;}}else{h1W.printDecimalPlaces=h1W.decimalPlaces;}this.runAppend("createYAxis",arguments);};q6W.ChartEngine.prototype.drawYAxis=function(J1W,a1W){var b7M,g1W,u1W,E7M,p5M,Y1W,n4W,v4W,P1W,H1W,I4W,Q4W,l4W,C1W,D4W,V1W,b1W,o1W,N1W,w1W,d4W,z4W,F4W,T4W,M7M,m1W,i4W,h4W,E1W,U4W,f1W,A4W,S1M,y1M,h1M;b7M="d";b7M+="raw";b7M+="YAxis";if(!a1W){a1W={};}g1W=a1W.yAxis?a1W.yAxis:J1W.yAxis;if(J1W.hidden||g1W.noDraw||!g1W.width){return;}if(g1W.priceFormatter!=q6W.Comparison.priceFormat){if(g1W.fractional){if(!g1W.originalPriceFormatter){g1W.originalPriceFormatter={func:g1W.priceFormatter};}if(!g1W.fractional.resolution){g1W.fractional.resolution=g1W.minimumPrice;}if(!g1W.fractional.formatter){g1W.fractional.formatter=(4797,+"1650")>=695?"'":(795.67,781.92)!==+"3460"?+"150.05"<=6100?0xe1:"T":(614.72,0x198c);}if(!g1W.priceFormatter){g1W.priceFormatter=function(W4W,q4W,c4W){var x4W,t4W,j4W,B4W;if(!g1W.fractional){return;}x4W='';if(c4W<0){x4W="-";c4W=Math.abs(c4W);}t4W=Math.floor(Math.round(c4W/g1W.fractional.resolution)*g1W.fractional.resolution);j4W=Math.round((c4W-t4W)/g1W.fractional.resolution);B4W=Math.floor(j4W);A64.z8c(12);var o6M=A64.q8c(796,8751,796);A64.k8c(18);var F6M=A64.q8c(3,6240,12490);A64.k8c(19);var I6M=A64.U7c(12,13,4041,44618);A64.k8c(11);var B6M=A64.q8c(12,6583,2191);A64.z8c(13);var n6M=A64.U7c(10,38,47,11);A64.k8c(20);var u6M=A64.U7c(49344,18,10,2898,6);A64.z8c(21);var t6M=A64.U7c(7986,7969,6,7992);return x4W+t4W+g1W.fractional.formatter+(B4W<10?(o6M,883.71)==F6M?"N":(809.9,I6M)!==B6M?"0":469.15>(n6M,u6M)?t6M:(590.41,!0):"")+B4W+(j4W-B4W>=+"0.5"?("550.89"*1,4010)===438.56?"x":+"725"!==(+"3410","1420"|0)?"+":("v",332.17):"");};}}else{if(g1W.originalPriceFormatter){g1W.priceFormatter=g1W.originalPriceFormatter.func;g1W.originalPriceFormatter=null;}}}if(g1W.pretty){return this.drawYAxisPretty(J1W,a1W);}if(this.runPrepend("drawYAxis",arguments)){return;}if(!a1W.noDraw&&!g1W.noDraw){u1W=g1W.yAxisPlotter;if(!u1W||!a1W.noChange){E7M="l";E7M+="e";E7M+="f";E7M+="t";p5M="fil";p5M+="l";u1W=g1W.yAxisPlotter=new q6W.Plotter();Y1W=J1W.chart;n4W=J1W.name==Y1W.name&&g1W.name===J1W.yAxis.name;if(!g1W.priceTick){return;}v4W=g1W.shadow;P1W=a1W.range;if(P1W){A64.z8c(8);var M3M=A64.U7c(15,15);v4W=P1W[M3M]-P1W[0];}H1W=v4W/g1W.priceTick;H1W=Math.round(H1W);if(g1W.semiLog){I4W=Math.log(this.valueFromPixel(g1W.bottom,J1W))/Math.LN10;Q4W=(g1W.logHigh-g1W.logLow)/H1W;}l4W=g1W.textStyle?g1W.textStyle:"stx_yaxis";u1W.newSeries("grid","stroke",this.canvasStyle("stx_grid"));u1W.newSeries("text",p5M,this.colorOrStyle(l4W));u1W.newSeries("border","stroke",this.canvasStyle("stx_grid_border"));C1W=0;D4W=P1W?P1W[1]:g1W.high;V1W=P1W?P1W[0]:g1W.low;b1W=g1W.displayBorder===null?Y1W.panel.yAxis.displayBorder:g1W.displayBorder;if(this.axisBorders===!"1"){b1W=!!0;}if(this.axisBorders===!![]){b1W=!0;}N1W=Y1W.dynamicYAxis;w1W=N1W?g1W.width:NaN;d4W=this.getYAxisCurrentPosition(g1W,J1W);if(d4W=="left"){o1W=g1W.left+g1W.width;}else{o1W=g1W.left;}z4W=Math.round(o1W)+0.5;F4W=b1W?"3"-0:0;if(d4W==E7M){F4W=b1W?-3:0;}if(n4W){if(g1W.shadow<1){C1W=(parseInt(V1W/g1W.priceTick,+"10")+1)*g1W.priceTick-V1W;}else{C1W=g1W.priceTick-Math.round(V1W%g1W.priceTick*J1W.chart.roundit)/J1W.chart.roundit;}}else{C1W=D4W%g1W.priceTick;}T4W=this.getCanvasFontSize("stx_yaxis");for(var s1W=0;s1W<H1W;s1W++){M7M="t";M7M+="e";M7M+="x";M7M+="t";if(g1W.semiLog){A64.k8c(22);i4W=A64.q8c(s1W,Q4W,I4W);m1W=Math.pow(+"10",i4W);}else{if(n4W){m1W=V1W+s1W*g1W.priceTick+C1W;}else{m1W=D4W-s1W*g1W.priceTick-C1W;}}h4W=this.pixelFromTransformedValue(m1W,J1W,g1W);E1W=Math.round(h4W)+ +"0.5";if(E1W+T4W/2>J1W.bottom)continue;if(E1W-T4W/2<J1W.top)continue;if(Math.abs(E1W-g1W.bottom)<1)continue;if(g1W.displayGridLines){u1W.moveTo("grid",J1W.left+1,E1W);u1W.lineTo("grid",J1W.right-1,E1W);}if(b1W){A64.z8c(1);u1W.moveTo("border",A64.U7c(z4W,0.5),E1W);A64.z8c(0);u1W.lineTo("border",A64.q8c(z4W,F4W),E1W);}if(g1W.priceFormatter){m1W=g1W.priceFormatter(this,J1W,m1W);}else{m1W=this.formatYAxisPrice(m1W,J1W,null,g1W);}U4W=g1W.textBackground?this.containerColor:null;A64.k8c(23);f1W=A64.q8c(3,F4W,o1W);if(d4W=="left"){A64.k8c(24);var d3M=A64.U7c(5,3,11,2,14);f1W=g1W.left+d3M;if(g1W.justifyRight!==!{}){A64.z8c(8);var e3M=A64.q8c(33,11);f1W=g1W.left+g1W.width+F4W-e3M;}}else{if(g1W.justifyRight){f1W=o1W+g1W.width;}}u1W.addText(M7M,m1W,f1W,E1W,U4W,null,T4W);if(N1W){w1W=Math.max(w1W,Y1W.context.measureText(m1W).width);}}if(b1W){A4W=Math.round(g1W.bottom)+("0.5"-0);u1W.moveTo("border",z4W,g1W.top);u1W.lineTo("border",z4W,A4W);u1W.draw(this.chart.context,"border");}if(N1W&&w1W>g1W.width){g1W._dynamicWidth=w1W;this.calculateYAxisPositions();throw new Error('reboot draw');}else if(!N1W&&g1W._dynamicWidth){this.resetDynamicYAxis({chartName:Y1W.name});throw new Error('reboot draw');}}if(g1W==J1W.yAxis){this.plotYAxisGrid(J1W);}}S1M=-813978138;y1M=-273275099;h1M=2;for(var N1M=1;A64.h9M(N1M.toString(),N1M.toString().length,66118)!==S1M;N1M++){this.runAppend("",arguments);h1M+=2;}if(A64.h9M(h1M.toString(),h1M.toString().length,63491)!==y1M){this.runAppend("",arguments);}this.runAppend(b7M,arguments);};q6W.ChartEngine.prototype.drawYAxisPretty=function(K4W,M4W){var d7M,e4W,S4W,C7M,J7M,j7M,O7M,e7M,a4W,v5D,J5M,C5M,T5M,p4W,D5D,m4W,h5D,T5D,G4W,Y4W,s4W,C4W,N4W,g4W,J4W,u4W,d5D,n5D,k4W,P4W,b4W,R4W,f4W,V4W,z5D,y4W,A5D,X4W,j1M,J1M,C1M,Z4W,o4W,H4W,l7M,O4W,w4W,r4W,T7M,g7M,K7M,i5D,E4W,f8M,R8M,v8M,a7M,H7M,Q7M,l5D,Y7M;d7M="drawYA";d7M+="xi";d7M+="s";if(this.runPrepend(d7M,arguments)){return;}if(!M4W){M4W={};}e4W=M4W.yAxis?M4W.yAxis:K4W.yAxis;if(K4W.hidden||e4W.noDraw||!e4W.width){return;}if(!M4W.noDraw){S4W=e4W.yAxisPlotter;if(!S4W||!M4W.noChange){C7M="l";C7M+="ef";C7M+="t";J7M="lef";J7M+="t";j7M="bo";j7M+="r";j7M+="de";j7M+="r";O7M="f";O7M+="il";O7M+="l";e7M="st";e7M+="ro";e7M+="k";e7M+="e";S4W=e4W.yAxisPlotter=new q6W.Plotter();a4W=K4W.chart;if(!e4W.priceTick){return;}if(isNaN(e4W.high)||isNaN(e4W.low)){return;}v5D=e4W.shadow;if(M4W.range){J5M=1406846275;C5M=-1238766097;T5M=+"2";for(var g5M=1;A64.h9M(g5M.toString(),g5M.toString().length,50414)!==J5M;g5M++){A64.k8c(25);var O3M=A64.q8c(20,2,25,12,3,71);A64.k8c(26);var j3M=A64.q8c(17,23,7,5,13);v5D=M4W.range[O3M]/M4W.range[j3M];T5M+=2;}if(A64.h9M(T5M.toString(),T5M.toString().length,90870)!==C5M){A64.k8c(1);var J3M=A64.U7c(11,10);v5D=M4W.range[J3M]-M4W.range[0];}}p4W=e4W.height/e4W.idealTickSizePixels;p4W=Math.round(p4W);D5D=e4W.textStyle?e4W.textStyle:"stx_yaxis";S4W.newSeries("grid",e7M,this.canvasStyle("stx_grid"));S4W.newSeries("text",O7M,this.colorOrStyle(D5D));S4W.newSeries(j7M,"stroke",this.canvasStyle("stx_grid_border"));m4W=M4W.range;h5D=m4W?m4W[+"1"]:e4W.high;T5D=m4W?m4W[0]:e4W.low;G4W=e4W.displayBorder===null?a4W.panel.yAxis.displayBorder:e4W.displayBorder;if(this.axisBorders===![]){G4W=![];}if(this.axisBorders===!!{}){G4W=!![];}s4W=a4W.dynamicYAxis;C4W=s4W?e4W.width:NaN;N4W=this.getYAxisCurrentPosition(e4W,K4W);if(N4W==J7M){Y4W=e4W.left+e4W.width;}else{Y4W=e4W.left;}g4W=Math.round(Y4W)+0.5;J4W=G4W?"3"-0:0;if(N4W==C7M){J4W=G4W?-+"3":0;}u4W=this.getCanvasFontSize("stx_yaxis");d5D=e4W.increments;n5D=d5D.length;k4W=0;A64.k8c(3);P4W=A64.q8c("1",0);b4W=+"0";R4W=0;f4W=0;V4W=Number.MAX_VALUE;for(var F5D=0;F5D<100;F5D++){b4W=d5D[k4W]*Math.pow(10,f4W);A64.z8c(8);P4W=Math.floor(A64.q8c(v5D,b4W));A64.k8c(1);z5D=Math.abs(A64.q8c(p4W,P4W));if(z5D>V4W){break;}else{V4W=z5D;}if(P4W==p4W){R4W=b4W;break;}else if(P4W>p4W){k4W++;if(k4W>=n5D){k4W=0;f4W++;}}else{k4W--;if(k4W<0){A64.z8c(1);k4W=A64.U7c(n5D,1);f4W--;}}R4W=b4W;}y4W=Math.ceil(T5D/R4W)*R4W;A5D=e4W.bottom-this.pixelFromTransformedValue(y4W,K4W,e4W);X4W=0;if(A5D>e4W.idealTickSizePixels&&e4W.semiLog&&e4W.prettySemiLog){j1M=735978153;J1M=-1611311350;C1M=2;for(var K1M=+"1";A64.h9M(K1M.toString(),K1M.toString().length,93986)!==j1M;K1M++){for(Z4W=Math.ceil(T5D);Z4W<y4W&&y4W%Z4W!==0;++Z4W){;}C1M+=2;}if(A64.h9M(C1M.toString(),C1M.toString().length,73105)!==J1M){for(Z4W=Math.ceil(T5D);Z4W>y4W||y4W+Z4W==2;--Z4W){;}}if(Z4W<y4W){if(y4W===R4W){R4W=Z4W;X4W=Z4W;}y4W=Z4W;}}o4W=0;H4W=Number.MAX_VALUE;for(var L4W=0;L4W<100;L4W++){l7M="t";l7M+="ex";l7M+="t";A64.k8c(22);O4W=A64.q8c(o4W,R4W,y4W);if(O4W>h5D)break;R4W+=X4W;o4W++;w4W=this.pixelFromTransformedValue(O4W,K4W,e4W);if(H4W-w4W<u4W+1&&X4W>0){L4W=o4W=0;H4W=Number.MAX_VALUE;R4W=X4W;X4W*=+"2";S4W.reset();continue;}H4W=w4W;r4W=Math.round(w4W)+0.5;if(r4W+u4W/2>K4W.bottom)continue;if(r4W-u4W/2<K4W.top)continue;if(Math.abs(r4W-e4W.bottom)<1)continue;if(e4W.displayGridLines){T7M="g";T7M+="r";T7M+="id";S4W.moveTo(T7M,K4W.left+1,r4W);S4W.lineTo("grid",K4W.right-("1"|0),r4W);}if(G4W){g7M="bo";g7M+="r";g7M+="der";K7M="bo";K7M+="r";K7M+="de";K7M+="r";A64.z8c(1);S4W.moveTo(K7M,A64.U7c(g4W,0.5),r4W);A64.z8c(0);S4W.lineTo(g7M,A64.U7c(g4W,J4W),r4W);}if(e4W.priceFormatter){O4W=e4W.priceFormatter(this,K4W,O4W);}else{O4W=this.formatYAxisPrice(O4W,K4W,null,e4W);}i5D=e4W.textBackground?this.containerColor:null;A64.k8c(23);E4W=A64.U7c(3,J4W,Y4W);if(N4W=="left"){A64.k8c(16);var T3M=A64.q8c(12,5,7);E4W=e4W.left+"3"*T3M;if(e4W.justifyRight!==!"1"){E4W=e4W.left+e4W.width+J4W-+"3";}}else{if(e4W.justifyRight){E4W=Y4W+e4W.width;}}S4W.addText(l7M,O4W,E4W,r4W,i5D,null,u4W);if(s4W){C4W=Math.max(C4W,a4W.context.measureText(O4W).width);}}if(L4W>=100){f8M=1075994109;A64.k8c(1);R8M=A64.U7c("166951181",0);v8M=2;for(var w8M=1;A64.y9M(w8M.toString(),w8M.toString().length,47147)!==f8M;w8M++){console.log("");v8M+=2;}if(A64.y9M(v8M.toString(),v8M.toString().length,98889)!==R8M){a7M="drawYAxisPretty";a7M+=": a";a7M+="ssertion error. zz reached 100";console.log(a7M);}}if(G4W){H7M="b";H7M+="order";Q7M="bo";Q7M+="r";Q7M+="de";Q7M+="r";l5D=Math.round(e4W.bottom)+0.5;S4W.moveTo("border",g4W,e4W.top);S4W.lineTo(Q7M,g4W,l5D);S4W.draw(this.chart.context,H7M);}if(s4W&&C4W>e4W.width){e4W._dynamicWidth=C4W;this.calculateYAxisPositions();throw new Error('reboot draw');}else if(!s4W&&e4W._dynamicWidth){Y7M="reboo";Y7M+="t";Y7M+=" draw";this.resetDynamicYAxis({chartName:a4W.name});throw new Error(Y7M);}}if(e4W==K4W.yAxis){this.plotYAxisGrid(K4W);}}this.runAppend("drawYAxis",arguments);};q6W.ChartEngine.prototype.drawHistogram=function(I5D,x5D){var p5D,X5D,m5D,k5D,t5D,r5D,j5D,c5D,P5D,E5D,Z5D,b5D,O5D,e5D,c7M,V7M,R7M,f7M,Y5D,y5D,D8M,s8M,S8M,J5D,U5D,K5D,S5D,u5D,q5D,W5D,k7M,w7M,Q5D,R5D,B5D,G5D,g5D,A7M;if(!x5D||!x5D.length){return;}p5D=I5D.panel;if(!p5D){p5D="chart";}X5D=this.panels[p5D];if(!X5D){return;}m5D=I5D.yAxis?I5D.yAxis:X5D.yAxis;k5D=I5D.type;t5D=this.chart.dataSegment;r5D=!{};this.getDefaultColor();for(c5D=0;c5D<x5D.length;c5D++){r5D|=x5D[c5D].border_color_up&&!q6W.isTransparent(x5D[c5D].border_color_up);r5D|=x5D[c5D].border_color_down&&!q6W.isTransparent(x5D[c5D].border_color_down);}if(I5D.borders===![]){r5D=![];}if(!I5D.name){I5D.name="Data";}P5D=m5D.multiplier;if(!I5D.heightPercentage){I5D.heightPercentage=+"0.7";}if(!I5D.widthFactor){I5D.widthFactor=+"0.8";}E5D=0;A64.k8c(1);Z5D=A64.q8c("0",0);for(var a5D=0;a5D<this.chart.maxTicks;a5D++){b5D=t5D[a5D];if(!b5D)continue;O5D=0;for(c5D=0;c5D<x5D.length;c5D++){e5D=b5D[x5D[c5D].field];if(e5D||e5D===+"0"){c7M="obj";c7M+="ec";c7M+="t";V7M="C";V7M+="l";V7M+="o";V7M+="se";j5D=x5D[c5D].subField||this.chart.defaultPlotField||V7M;if(_typeof(e5D)==c7M&&e5D[j5D]){e5D=e5D[j5D];}if(k5D=="stacked"){O5D+=e5D;}else{O5D=e5D;}if(O5D>E5D){E5D=O5D;}if(O5D<Z5D){Z5D=O5D;}}}}if(E5D===("0"|0)&&Z5D===0){R7M=" Not Avai";R7M+="labl";R7M+="e";f7M="ce";f7M+="n";f7M+="ter";this.watermark(p5D,f7M,"bottom",this.translateIf(I5D.name+R7M));return;}Y5D=Math.floor(m5D.top)+0.5;if(!I5D.bindToYAxis){y5D=Math.floor(m5D.bottom)+0.5;P5D=(y5D-Y5D)*I5D.heightPercentage/(E5D-Z5D);}else{D8M=-+"1261415180";s8M=175109517;S8M=2;for(var h8M=1;A64.y9M(h8M.toString(),h8M.toString().length,93230)!==D8M;h8M++){y5D=Math.floor(this.pixelFromPrice(Z5D,X5D,m5D))+ +"0.5";S8M+=+"2";}if(A64.h9M(S8M.toString(),S8M.toString().length,40008)!==s8M){y5D=Math.floor(this.pixelFromPrice(Z5D,X5D,m5D))/+"114";}}this.startClip(p5D);function L5D(Q0D,B0D,T0D,l0D,H5D,c0D,h0D,D0D,U0D){var z0D,A8M,k8M,Z8M,A0D,V5D,v7M,C5D,w5D,d0D,i0D,v0D,o5D,n0D,F0D,f5D,N5D,I0D,W7M;if(!l0D){l0D=+"1";}U5D.globalAlpha=q6W.isIE8?+"0.5":l0D;U5D.beginPath();A64.k8c(22);z0D=A64.q8c("0.5",1,y5D);A8M=-1641902209;k8M=296547734;Z8M=2;for(var G8M=1;A64.h9M(G8M.toString(),G8M.toString().length,92382)!==A8M;G8M++){A0D=Math.floor(q5D.pixelFromBar(6,X5D.chart)%(q5D.layout.candleWidth+("4"|0)));V5D=A0D;Z8M+=2;}if(A64.y9M(Z8M.toString(),Z8M.toString().length,8379)!==k8M){A0D=Math.floor(q5D.pixelFromBar(0,X5D.chart)-q5D.layout.candleWidth/+"2");V5D=A0D;}for(var s5D=0;s5D<t5D.length;s5D++){v7M="clust";v7M+="e";v7M+="r";v7M+="ed";C5D=u5D[s5D]||y5D;if(s5D===+"0"){z0D=C5D;}if(!t5D[s5D]||!t5D[s5D][Q0D]){z0D=C5D;V5D+=q5D.layout.candleWidth;continue;}w5D=t5D[s5D];d0D=w5D[Q0D];if(_typeof(d0D)=="object"&&d0D[B0D]){d0D=d0D[B0D];}A64.z8c(27);i0D=A64.q8c(d0D,Z5D,P5D);if(isNaN(i0D))continue;v0D=q5D.layout.candleWidth;if(w5D.candleWidth){v0D=w5D.candleWidth;if(s5D===0){A0D=V5D=Math.floor(q5D.pixelFromBar(0,X5D.chart)-w5D.candleWidth/+"2");}}o5D=Math.min(Math.floor(C5D-i0D)+0.5,C5D);if(U0D&&U0D.indexOf(s5D)==-("1"*1)||!U0D&&(c0D&&w5D.Close<w5D.iqPrevClose||!c0D&&w5D.Close>=w5D.iqPrevClose)){z0D=o5D;V5D+=v0D;continue;}n0D=v0D/q5D.layout.candleWidth;if(K5D){A64.z8c(28);F0D=Math.round(A64.q8c(D0D,V5D,K5D,n0D,h0D));A64.k8c(0);f5D=A64.q8c(F0D,H5D?"0"|0:J5D);N5D=F0D+Math.round(D0D*n0D)-(H5D?0:J5D);}else{A64.k8c(28);F0D=A64.U7c(D0D,V5D,K5D,n0D,h0D);f5D=Math.round(F0D)+(H5D?0:J5D);N5D=Math.round(F0D+D0D*n0D)-(H5D?0:J5D);}if(N5D-f5D<+"2"){A64.z8c(0);N5D=A64.q8c(f5D,1);}I0D=H5D?0:+"0.5";if(f5D%1==I0D){f5D+=0.5;}if(N5D%1==I0D){A64.z8c(1);N5D+=A64.q8c("0.5",0);}U5D.moveTo(N5D,C5D);if(y5D!=C5D&&H5D&&!K5D&&u5D[s5D+1]){U5D.moveTo(N5D,Math.max(o5D,Math.min(C5D,u5D[s5D+1])));}U5D.lineTo(N5D,o5D);U5D.lineTo(f5D,o5D);if(H5D&&h0D){if(S5D[s5D]>o5D||s5D===0){U5D.lineTo(f5D,Math.min(C5D,S5D[s5D]));}}else if(H5D&&!K5D&&k5D=="clustered"){if(s5D>0&&S5D[s5D-1]&&S5D[s5D-1]>o5D){U5D.lineTo(f5D,Math.min(C5D,S5D[s5D-+"1"]));}}else if(H5D&&!K5D){if(z0D>o5D||s5D===0){U5D.lineTo(f5D,Math.min(C5D,z0D));}}else{U5D.lineTo(f5D,C5D);}z0D=o5D;V5D+=v0D;if(k5D!=v7M||H5D){S5D[s5D]=o5D;}}if(H5D){W7M="a";W7M+="u";W7M+="t";W7M+="o";U5D.strokeStyle=!T0D||T0D==W7M?q5D.defaultColor:T0D;U5D.stroke();}else{U5D.fillStyle=!T0D||T0D=="auto"?q5D.defaultColor:T0D;U5D.fill();}U5D.closePath();}J5D=this.layout.candleWidth<=1||!r5D?+"0":+"0.5";U5D=this.chart.context;K5D=Math.max(+"0",(+"1"-I5D.widthFactor)*this.layout.candleWidth/2);S5D=new Array(t5D.length);u5D=[];q5D=this;W5D=1;for(c5D=0;c5D<x5D.length;c5D++){k7M="st";k7M+="ac";k7M+="k";k7M+="ed";w7M="cl";w7M+="u";w7M+="st";w7M+="ered";Q5D=x5D[c5D];W5D=this.layout.candleWidth*I5D.widthFactor;if(K5D){if(this.layout.candleWidth-W5D<=2){r5D=!"1";}}A64.z8c(1);R5D=A64.U7c("0",0);if(k5D==w7M){R5D=c5D;W5D/=x5D.length;}j5D=I5D.subField||this.chart.defaultPlotField||"Close";if(typeof Q5D.color_function=='function'){G5D={};for(var M5D=0;M5D<t5D.length;M5D++){if(t5D[M5D]){A7M="str";A7M+="i";A7M+="ng";B5D=Q5D.color_function(t5D[M5D]);if(_typeof(B5D)==A7M){B5D={fill_color:B5D,border_color:B5D};}A64.z8c(1);var K3M=A64.q8c(3222,8);A64.k8c(0);var l3M=A64.U7c(1024,15);A64.k8c(11);var a3M=A64.q8c(16,2,9868);A64.k8c(29);var Q3M=A64.q8c(19891,2831,12,10,8);g5D=B5D.fill_color+(K3M===+"627.17"?+"9.75e+3":(+"3030","7072"*1)<=856.06?("91"-0,l3M)>=a3M?(180.99,Q3M):("0x78f"|0,"R"):',')+B5D.border_color;if(g5D in G5D){G5D[g5D].positions.push(M5D);}else{B5D.positions=[M5D];G5D[g5D]=B5D;}}}for(g5D in G5D){B5D=G5D[g5D];L5D(Q5D.field,j5D,B5D.fill_color,B5D.opacity,null,null,R5D,W5D,B5D.positions);L5D(Q5D.field,j5D,B5D.border_color,B5D.opacity,!"",null,R5D,W5D,B5D.positions);}}else{L5D(Q5D.field,j5D,Q5D.fill_color_up,Q5D.opacity_up,null,!!1,R5D,W5D);L5D(Q5D.field,j5D,Q5D.fill_color_down,Q5D.opacity_down,null,null,R5D,W5D);if(this.layout.candleWidth>=2&&r5D){L5D(Q5D.field,j5D,Q5D.border_color_up,Q5D.opacity_up,!![],!![],R5D,W5D);L5D(Q5D.field,j5D,Q5D.border_color_down,Q5D.opacity_down,!0,null,R5D,W5D);}}if(k5D==k7M){u5D=q6W.shallowClone(S5D);}}U5D.globalAlpha=+"1";this.endClip();};q6W.ChartEngine.prototype.drawBarTypeChartInner=function(K0D){var G7M,X7M,Z7M,b0D,O0D,z9D,V0D,J0D,Z0D,I9D,j0D,e0D,g0D,C0D,E0D,A9D,a0D,R0D,F9D,t0D,r0D,X0D,i9D,P0D,Q9D,y0D,o0D,c9D,h9D,I1M,B1M,n1M,w0D,n9D,L0D,x0D,W0D,S0D,B9D,Y0D,s0D,d9D,u0D,f0D,p0D,q0D,k0D,G0D,l9D,M0D,N0D,T9D,H0D,U9D,v9D,D9D,M1M,b1M,d1M;G7M="b";G7M+="a";G7M+="r";X7M="h";X7M+="l";X7M+="c";Z7M="sha";Z7M+="dow";b0D=K0D.type;O0D=K0D.panel;z9D=K0D.field;V0D=K0D.fillColor;J0D=K0D.borderColor;Z0D=K0D.condition;I9D=K0D.style;j0D=K0D.yAxis;e0D=K0D.overlayScaling;A64.z8c(2);g0D=A64.U7c(b0D,"histogram");C0D=g0D||b0D=="candle";A64.z8c(2);E0D=A64.q8c(b0D,Z7M);A64.z8c(2);A9D=A64.q8c(b0D,X7M);a0D=b0D==G7M||A9D;R0D=O0D.chart;F9D=R0D.dataSegment;t0D=this.chart.context;r0D=O0D.yAxis.top;X0D=O0D.yAxis.bottom;i9D=new Array(F9D.length);P0D=0;if(J0D&&!q6W.isTransparent(J0D)){P0D=0.5;}Q9D=R0D.dataSet.length-R0D.scroll-("1"|0);t0D.beginPath();if(!j0D){j0D=O0D.yAxis;}y0D=this.layout.candleWidth;o0D=O0D.left-0.5*y0D+this.micropixels-1;c9D=R0D.tmpWidth/2;h9D=t0D.lineWidth/2;if(C0D){if(q6W.isTransparent(V0D)){V0D=this.containerColor;}t0D.fillStyle=V0D;}if(E0D){t0D.lineWidth=1;}if(a0D){I1M=-1396384674;B1M=-+"2030869867";n1M=2;for(var t1M=+"1";A64.h9M(t1M.toString(),t1M.toString().length,10041)!==I1M;t1M++){w0D=this.canvasStyle(I9D);n1M+=2;}if(A64.y9M(n1M.toString(),n1M.toString().length,31569)!==B1M){w0D=this.canvasStyle(I9D);}if(w0D.width&&parseInt(w0D.width,10)<=25){t0D.lineWidth=Math.max(1,q6W.stripPX(w0D.width));}else{t0D.lineWidth=1;}}n9D=R0D.state.chartType.pass;for(var m0D=0;m0D<=F9D.length;m0D++){L0D=c9D;A64.z8c(30);o0D+=A64.U7c(y0D,"2");y0D=this.layout.candleWidth;A64.k8c(8);o0D+=A64.U7c(y0D,2);x0D=F9D[m0D];if(!x0D)continue;if(x0D.projection)continue;if(x0D.candleWidth){A64.z8c(1);var c3M=A64.U7c(13,11);o0D+=(x0D.candleWidth-y0D)/c3M;y0D=x0D.candleWidth;if(K0D.volume||y0D<R0D.tmpWidth){A64.k8c(31);L0D=A64.U7c("2",y0D,0);}}if(R0D.transformFunc&&j0D==R0D.panel.yAxis&&x0D.transform){x0D=x0D.transform;}if(x0D&&z9D&&z9D!="Close"){x0D=x0D[z9D];}if(!x0D&&x0D!==0)continue;W0D=x0D.Close;S0D=x0D.Open===undefined?W0D:x0D.Open;if(g0D&&R0D.defaultPlotField){W0D=x0D[R0D.defaultPlotField];}if(!W0D&&W0D!==0)continue;if(C0D&&!g0D&&(S0D==W0D||S0D===null))continue;if(Z0D){if(Z0D&q6W.ChartEngine.CLOSEDOWN){n9D.even|=W0D==x0D.iqPrevClose;}else if(Z0D&q6W.ChartEngine.CANDLEDOWN){A64.k8c(2);n9D.even|=A64.U7c(W0D,S0D);}if(Z0D&q6W.ChartEngine.CANDLEUP&&S0D>=W0D)continue;if(Z0D&q6W.ChartEngine.CANDLEDOWN&&S0D<=W0D)continue;if(Z0D&q6W.ChartEngine.CANDLEEVEN&&S0D!=W0D)continue;if(Z0D&q6W.ChartEngine.CLOSEUP&&W0D<=x0D.iqPrevClose)continue;if(Z0D&q6W.ChartEngine.CLOSEDOWN&&W0D>=x0D.iqPrevClose)continue;if(Z0D&q6W.ChartEngine.CLOSEEVEN&&W0D!=x0D.iqPrevClose)continue;}A64.z8c(0);B9D=A64.U7c(Q9D,m0D);Y0D=S0D;s0D=W0D;if(E0D||a0D){Y0D=x0D.High===undefined?Math.max(W0D,S0D):x0D.High;s0D=x0D.Low===undefined?Math.min(W0D,S0D):x0D.Low;}if(e0D){d9D=e0D.bottom-(Y0D-e0D.min)*e0D.multiplier;u0D=e0D.bottom-(s0D-e0D.min)*e0D.multiplier;}else{d9D=j0D.semiLog?this.pixelFromTransformedValue(Y0D,O0D,j0D):(j0D.high-Y0D)*j0D.multiplier+j0D.top;u0D=j0D.semiLog?this.pixelFromTransformedValue(s0D,O0D,j0D):(j0D.high-s0D)*j0D.multiplier+j0D.top;}q0D=Math.floor(g0D?u0D:Math.min(d9D,u0D))+P0D;k0D=g0D?j0D.bottom:Math.max(d9D,u0D);A64.k8c(1);G0D=Math.floor(A64.U7c(k0D,q0D));l9D=u0D;if(a0D||E0D){if(e0D){f0D=e0D.bottom-(S0D-e0D.min)*e0D.multiplier;p0D=e0D.bottom-(W0D-e0D.min)*e0D.multiplier;}else{f0D=j0D.semiLog?this.pixelFromTransformedValue(S0D,O0D,j0D):(j0D.high-S0D)*j0D.multiplier+j0D.top;p0D=j0D.semiLog?this.pixelFromTransformedValue(W0D,O0D,j0D):(j0D.high-W0D)*j0D.multiplier+j0D.top;}l9D=p0D;}i9D[m0D]=l9D;if(q0D<r0D){if(q0D+G0D<r0D)continue;A64.k8c(1);G0D-=A64.q8c(r0D,q0D);q0D=r0D;}if(q0D+G0D>X0D){A64.z8c(32);G0D-=A64.U7c(G0D,X0D,q0D);}G0D=Math.max(G0D,2);A64.z8c(0);k0D=A64.q8c(q0D,G0D);if(q0D>=X0D)continue;if(k0D<=r0D)continue;M0D=Math.floor(o0D)+0.5;N0D=Math.floor(M0D-L0D)+P0D;T9D=Math.round(M0D+L0D)-P0D;H0D=N0D==T9D?L0D:0;if(C0D){if(q0D!=k0D){t0D.rect(N0D,q0D,Math.max(1,T9D-N0D),Math.max(1,k0D-q0D));}}else if(E0D){if(W0D==S0D){if(p0D<=X0D&&p0D>=r0D){U9D=Math.floor(p0D)+("0.5"-0);A64.k8c(1);t0D.moveTo(A64.q8c(N0D,H0D),U9D);A64.k8c(0);t0D.lineTo(A64.U7c(T9D,H0D),U9D);}}if(Y0D!=s0D){t0D.moveTo(M0D,q0D);t0D.lineTo(M0D,k0D);}}else if(a0D){if(q0D<X0D&&k0D>r0D&&x0D.High!=x0D.Low){A64.z8c(1);t0D.moveTo(M0D,A64.q8c(q0D,h9D));A64.k8c(0);t0D.lineTo(M0D,A64.U7c(k0D,h9D));}if(f0D>r0D&&f0D<X0D&&!A9D){v9D=Math.floor(f0D)+0.5;t0D.moveTo(M0D,v9D);A64.z8c(33);t0D.lineTo(A64.U7c(H0D,L0D,M0D),v9D);}if(p0D>r0D&&p0D<X0D){D9D=Math.floor(p0D)+0.5;t0D.moveTo(M0D,D9D);A64.k8c(23);t0D.lineTo(A64.U7c(H0D,L0D,M0D),D9D);}}}if(C0D){t0D.fill();if(P0D){t0D.lineWidth=K0D.highlight?2:1;t0D.strokeStyle=J0D;M1M=145324673;A64.z8c(1);b1M=-A64.U7c("22869145",0);d1M=2;for(var O1M=1;A64.y9M(O1M.toString(),O1M.toString().length,46874)!==M1M;O1M++){t0D.stroke();A64.z8c(4);d1M+=A64.U7c("2",1);}if(A64.h9M(d1M.toString(),d1M.toString().length,41280)!==b1M){t0D.stroke();}}}else if(E0D||a0D){this.canvasColor(I9D);if(J0D){t0D.strokeStyle=J0D;}if(K0D.highlight){t0D.lineWidth*=2;}t0D.stroke();t0D.closePath();t0D.lineWidth=1;}return{cache:i9D};};q6W.ChartEngine.prototype.plotDataSegmentAsLine=function(r9D,Z9D,j9D,w9D){var g2D,F7D,S9D,a9D,Q2D,L9D,e9D,t9D,s9D,A2D,P2D,M9D,b2D,W9D,y2D,E9D,f2D,U2D,K9D,k9D,x9D,e2D,C2D,U7M,g9D,j2D,k2D,m9D,h2D,i2D,K2D,v2D,n2D,o2D,H9D,p9D,G9D,O9D,C9D,W2D,E2D,J2D,q9D,Z2D,T7D,d7D,t2D,X2D,o9D,y9D,i7M,R9D,N9D,u9D,d2D,p2D,c2D,G2D,J9D,P9D,Y2D,r2D,V9D,x2D,X9D,z2D,u2D,m2D,f9D,a2D,x7M,D2D,Y9D,M2D,S2D,m7M,H2D,T2D,q2D,N2D,w2D,V2D,B2D,O2D,L2D,l2D;function s2D(Q7D){var A7D,v7D,n7D,U7D,h7D,I7D,i7D,D7D,l7D,U5M,L5M,D5M;A7D=e9D;v7D=Q7D;if(_typeof(v7D)=="object"){e9D=q6W.borderPatternToArray(x9D.lineWidth,v7D.pattern);v7D=v7D.color;}b2D[v7D]=1;if(A2D){return;}n7D=W9D.slice(-+"2");U7D=e9D instanceof Array&&e9D.join();h7D=A7D instanceof Array&&A7D.join();A64.k8c(34);I7D=A64.q8c(h7D,U7D);i7D=!q6W.colorsEqual(C2D,v7D);D7D=Q7D.width*(j9D.highlight?2:+"1");l7D=x9D.lineWidth!=D7D;if(i7D||I7D||l7D){if(s9D){y2D.push({coord:n7D,color:v7D,pattern:e9D?e9D:[],width:D7D});}else if(i7D||l7D){x9D.stroke();x9D.lineWidth=D7D;x9D.beginPath();x9D.moveTo(n7D[0],n7D[1]);}}C2D=v7D;if(!s9D){if(!v7D||v7D=="auto"){U5M=-81356852;A64.z8c(4);L5M=A64.q8c("1870140625",1);D5M=2;for(var S5M=1;A64.y9M(S5M.toString(),S5M.toString().length,52615)!==U5M;S5M++){x9D.strokeStyle=U2D.defaultColor;D5M+=2;}if(A64.h9M(D5M.toString(),D5M.toString().length,20933)!==L5M){x9D.strokeStyle=U2D.defaultColor;}}else{x9D.strokeStyle=v7D;}}return n7D;}g2D=!!0;F7D=!1;S9D=!{};a9D=!{};Q2D=!!{};L9D=null;e9D=null;t9D=null;s9D=0;A2D=!!0;P2D=!{};M9D=null;b2D={};W9D=[];y2D=[];E9D=[];f2D=[];U2D=this;K9D=Z9D.chart;k9D=K9D.dataSegment;x9D=K9D.context;e2D=new Array(k9D.length);C2D=x9D.strokeStyle;if(K9D.dataSet.length){U7M="ob";U7M+="jec";U7M+="t";this.startClip(Z9D.name);if(j9D){g2D=j9D.skipProjections;F7D=j9D.skipTransform;S9D=j9D.noSlopes;s9D=j9D.tension;a9D=j9D.step;e9D=j9D.pattern;Q2D=j9D.extendOffChart;t9D=j9D.yAxis;L9D=j9D.gapDisplayStyle;A2D=j9D.noDraw;P2D=j9D.reverse;M9D=j9D.overlayScaling;if(j9D.width){x9D.lineWidth=j9D.width;}}if(!L9D&&L9D!==!!0){L9D=j9D.gaps;}if(!L9D){L9D={color:"transparent",fillMountain:!""};}if(j9D.highlight){x9D.lineWidth*=+"2";}if(Q2D!==!!0){Q2D=!0;}g9D=j9D.subField||K9D.defaultPlotField||"Close";if(!t9D){t9D=Z9D.yAxis;}j2D=K9D.transformFunc&&t9D==K9D.panel.yAxis;k2D=x9D.lineWidth*2;m9D=P2D?K9D.top-k2D:K9D.bottom+k2D;if(j9D.threshold||j9D.threshold===0){m9D=this.pixelFromPrice(j9D.threshold,Z9D,t9D);}h2D=!s9D&&A2D&&L9D&&L9D.fillMountain;i2D=r9D;K2D=r9D;for(var R2D=0;R2D<k9D.length;R2D++){v2D=k9D[R2D];if(v2D&&_typeof(v2D)=="object"){if(v2D[r9D]||v2D[r9D]===0){if(_typeof(v2D[r9D])=="object"){K2D=q6W.createObjectChainNames(r9D,[g9D])[A64.q8c("0",0,A64.z8c(3))];}break;}}}n2D={left:null,right:null};A64.k8c(1);var v3M=A64.q8c(15,14);o2D=K9D.dataSet.length-K9D.scroll-v3M;if(Q2D){if(!j9D.isComparison){n2D.left=this.getPreviousBar(K9D,K2D,0);}n2D.right=this.getNextBar(K9D,K2D,k9D.length-1);}H9D=!![];p9D=!!0;x9D.beginPath();C9D=n2D.left;W2D=null;if(C9D){W2D=C9D.transform;}if(C9D){O9D=j2D?W2D?W2D[r9D]:null:C9D[r9D];if(O9D){if(O9D[g9D]||O9D[g9D]===0){O9D=O9D[g9D];}E2D=this.pixelFromTick(C9D.tick,K9D);J2D=M9D?M9D.bottom-(O9D-M9D.min)*M9D.multiplier:this.pixelFromTransformedValue(O9D,Z9D,t9D);x9D.moveTo(E2D,J2D);W9D.push(E2D,J2D);if(k9D[0].tick-C9D.tick>1){E9D.push({start:W9D.slice(-2),threshold:m9D,tick:C9D});p9D=!!{};}H9D=!"1";}}A64.z8c(17);var W3M=A64.U7c(14,15,30);q9D=Z9D.left+this.micropixels-W3M;d7D=this.currentQuote();t2D=0;X2D=0;o9D=!"1";y9D={reset:!!"1"};for(var b9D=0;b9D<k9D.length;b9D++){i7M="o";i7M+="bject";G9D=this.layout.candleWidth;R9D=k9D[b9D];N9D=k9D[b9D];if(!R9D){R9D={};}if(g2D&&R9D.projection){n2D.right=null;break;}if(R9D.candleWidth){G9D=R9D.candleWidth;}if(j2D&&R9D.transform){R9D=R9D.transform;}u9D=R9D[r9D];if(u9D&&_typeof(u9D)==i7M){u9D=u9D[g9D];A64.k8c(23);i2D=A64.U7c(g9D,".",r9D);}if(K9D.lineApproximation&&this.layout.candleWidth<("1"|0)){if(y9D.reset){y9D={CollatedHigh:-Number.MAX_VALUE,CollatedLow:Number.MAX_VALUE,CollatedOpen:null,CollatedClose:null};o9D=![];}d2D=u9D;if(d2D||d2D===0){y9D.CollatedHigh=Math.max(y9D.CollatedHigh,d2D);y9D.CollatedLow=Math.min(y9D.CollatedLow,d2D);y9D.CollatedClose=d2D;if(y9D.CollatedOpen===null){y9D.CollatedOpen=d2D;}else{o9D=!![];}}t2D+=G9D;if(t2D-X2D>=1||b9D==k9D.length-1){X2D=Math.floor(t2D);y9D.reset=!0;y9D[r9D]=y9D.CollatedClose;R9D=y9D;R9D.cache={};}else{q9D+=G9D;continue;}}if(!S9D){A64.k8c(35);q9D+=A64.q8c("2",1,G9D);}if(!u9D&&u9D!==0){p2D=W9D.slice(-2);if(h2D&&!p9D&&W9D.length){W9D.push(p2D[0],m9D);}if(!p9D){E9D.push({start:p2D,threshold:m9D,tick:T7D});}p9D=!![];q9D+=S9D?G9D:G9D/2;if((a9D||S9D)&&W9D.length){e2D[b9D]=W9D.slice(-1)[0];}continue;}Z2D=R9D;c2D=R9D.cache;A64.z8c(0);G2D=A64.q8c(o2D,b9D);if(G2D<Z9D.cacheLeft||G2D>Z9D.cacheRight||!c2D[r9D]){if(M9D){c2D[i2D]=M9D.bottom-(u9D-M9D.min)*M9D.multiplier;}else{c2D[i2D]=t9D.semiLog?this.pixelFromTransformedValue(u9D,Z9D,t9D):(t9D.high-u9D)*t9D.multiplier+t9D.top;}}J9D=e2D[b9D]=c2D[i2D];if(N9D.tick==d7D.tick&&K9D.lastTickOffset){q9D+=K9D.lastTickOffset;}P9D=W9D.slice(-2);if(!H9D&&w9D){if(N9D[r9D]&&N9D[r9D][g9D]){N9D=N9D[r9D];}Y2D=w9D(this,N9D,p9D);if(!Y2D){q9D+=S9D?G9D:G9D/2;continue;}P9D=s2D(Y2D);}if(!H9D&&e9D&&e9D.length){if(a9D||S9D){if(o9D){I2D(q9D,P9D[1],R9D,M9D);}else{x9D.dashedLineTo(P9D[0],P9D["1"*1],q9D,P9D[1],e9D);}if(S9D){x9D.moveTo(q9D,J9D);}else if(o9D){I2D(q9D,J9D,R9D,M9D);}else{x9D.dashedLineTo(q9D,P9D[1],q9D,J9D,e9D);}W9D.push(q9D,P9D[1]);}else{if(o9D){I2D(q9D,J9D,R9D,M9D);}else{x9D.dashedLineTo(P9D[0],P9D[+"1"],q9D,J9D,e9D);}}}else{if(H9D){x9D.moveTo(q9D,J9D);if(s9D){y2D.push({coord:[q9D,J9D],color:x9D.strokeStyle,pattern:e9D?e9D:[],width:x9D.lineWidth});}}else{if(a9D||S9D){r2D=W9D.slice(-A64.q8c("1",0,A64.k8c(1)))[0];if(o9D){I2D(q9D,r2D,R9D,M9D);}else{x9D.lineTo(q9D,r2D);}W9D.push(q9D,r2D);}if(o9D&&!S9D){I2D(q9D,J9D,R9D,M9D);}else{x9D[S9D?"moveTo":"lineTo"](q9D,J9D);}}}if(p9D){E9D.push({end:[q9D,J9D],threshold:m9D});T7D=N9D;if(h2D&&!a9D&&!S9D){W9D.push(q9D,m9D);}}W9D.push(q9D,J9D);H9D=![];p9D=!1;q9D+=S9D?G9D:G9D/2;}V9D=n2D.right;x2D=null;if(V9D){x2D=V9D.transform;}if(!H9D&&V9D){O9D=j2D?x2D?x2D[r9D]:null:V9D[r9D];if(O9D&&(O9D[g9D]||O9D[g9D]===+"0")){O9D=O9D[g9D];}X9D=this.pixelFromTick(V9D.tick,K9D);z2D=M9D?M9D.bottom-(O9D-M9D.min)*M9D.multiplier:this.pixelFromTransformedValue(O9D,Z9D,t9D);if(V9D.tick-k9D[k9D.length-1].tick>1){if(!p9D){u2D=W9D.slice(-2);if(h2D&&W9D.length){W9D.push(u2D[0],m9D);}E9D.push({start:u2D,threshold:m9D,tick:k9D[k9D.length-1]});}p9D=!![];}if(!H9D&&w9D){m2D=w9D(this,V9D,p9D);if(m2D){f9D=s2D(m2D);if(e9D&&e9D.length){if(a9D||S9D){x9D.dashedLineTo(f9D[0],f9D[+"1"],X9D,f9D["1"-0],e9D);if(S9D){x9D.moveTo(X9D,z2D);}else{x9D.dashedLineTo(X9D,f9D[1],X9D,z2D,e9D);}W9D.push(X9D,f9D[1]);}else{x9D.dashedLineTo(f9D[0],f9D[1],X9D,z2D,e9D);}}}}a2D=W9D.slice(-2);if(!e9D||!e9D.length){x7M="l";x7M+="in";x7M+="eTo";if(a9D||S9D){x9D.lineTo(X9D,a2D[1]);W9D.push(X9D,a2D[1]);}x9D[S9D?"moveTo":x7M](X9D,z2D);}if(p9D){E9D.push({end:[X9D,z2D],threshold:m9D});if(h2D&&!a9D&&!S9D){W9D.push(X9D,m9D);}}W9D.push(X9D,z2D);}for(var z7D in b2D){f2D.push(z7D);}if(a9D||S9D||this.extendLastTick||j9D.extendToEndOfDataSet){D2D=W9D.slice(-2);if(W9D.length){Y9D=D2D[0];M2D=D2D[1];if(a9D||j9D.extendToEndOfDataSet){Y9D=this.pixelFromTick(K9D.dataSet.length-1,K9D);if(S9D||this.extendLastTick){A64.z8c(8);Y9D+=A64.U7c(G9D,2);}}else if(S9D){Y9D+=G9D;}else if(this.extendLastTick){A64.z8c(8);Y9D+=A64.q8c(G9D,2);}if(Y9D>D2D[0]){S2D=null;if(w9D){S2D=w9D(this,{},!!"1");}if(S2D){s2D(S2D);}if(e9D&&e9D.length){x9D.dashedLineTo(D2D[0],D2D[1],Y9D,M2D,e9D);}else{x9D.lineTo(Y9D,M2D);}if(!p9D||!h2D){W9D.push(Y9D,M2D);}}}}if(!A2D){if(s9D&&W9D.length){x9D.beginPath();x9D.setLineDash(j9D.pattern||[]);x9D.lineDashOffset=0;K6W.plotSpline(W9D,s9D,x9D,y2D);}x9D.stroke();}this.endClip();if(!A2D&&j9D.label&&Z2D){m7M="#F";m7M+="FFFFF";T2D=Z2D[r9D];if(T2D&&_typeof(T2D)=="object"){T2D=T2D[g9D];}if(t9D.priceFormatter){H2D=t9D.priceFormatter(this,Z9D,T2D,j9D.labelDecimalPlaces);}else{H2D=this.formatYAxisPrice(T2D,Z9D,j9D.labelDecimalPlaces);}q2D=this.yaxisLabelStyle;if(t9D.yaxisLabelStyle){q2D=t9D.yaxisLabelStyle;}N2D=q2D=="noop"?x9D.strokeStyle:null;w2D=q2D=="noop"?m7M:x9D.strokeStyle;this.yAxisLabels.push({src:"plot","args":[Z9D,H2D,Z2D.cache[i2D],w2D,N2D,x9D,t9D]});}V2D=_typeof(L9D)==U7M?L9D.color:L9D;if(q6W.isTransparent(V2D)){for(var F2D="0"|0;F2D<E9D.length;F2D+=2){B2D=E9D[F2D].start;if(F2D){O2D=E9D[F2D-"1"*1].end;}if(O2D&&B2D[0]==O2D[0]&&B2D[1]==O2D["1"-0]){x9D.beginPath();L2D=x9D.lineWidth;if(w9D){l2D=w9D(this,E9D[F2D].tick||{},!!0);if(_typeof(l2D)=="object"){A64.k8c(36);var w3M=A64.q8c(2,36,17);A64.k8c(37);var A3M=A64.q8c(28,12,15);L2D=l2D.width*(j9D.highlight?w3M:A3M);l2D=l2D.color;}x9D.strokeStyle=x9D.fillStyle=l2D;}x9D.lineWidth=L2D;x9D.arc(B2D[0],B2D[+"1"],1,0,2*Math.PI);x9D.stroke();x9D.fill();}}}}function I2D(x7D,e7D,c7D,B7D){var t7D,W7D,q7D,j7D,X5M,G5M,i5M;if(B7D){j7D=B7D.bottom+B7D.min*B7D.multiplier;t7D=j7D-c7D.CollatedOpen*B7D.multiplier;W7D=j7D-c7D.collatedHigh*B7D.multiplier;q7D=j7D-c7D.collatedLow*B7D.multiplier;}else{t7D=t9D.semiLog?U2D.pixelFromTransformedValue(c7D.CollatedOpen,Z9D,t9D):(t9D.high-c7D.CollatedOpen)*t9D.multiplier+t9D.top;W7D=t9D.semiLog?U2D.pixelFromTransformedValue(c7D.CollatedHigh,Z9D,t9D):(t9D.high-c7D.CollatedHigh)*t9D.multiplier+t9D.top;X5M=-+"1546811778";G5M=1960634008;i5M=2;for(var m5M=1;A64.h9M(m5M.toString(),m5M.toString().length,68292)!==X5M;m5M++){q7D=t9D.semiLog?U2D.pixelFromTransformedValue(c7D.CollatedLow,Z9D,t9D):(t9D.high%c7D.CollatedLow-t9D.multiplier)*t9D.top;i5M+=2;}if(A64.y9M(i5M.toString(),i5M.toString().length,92789)!==G5M){q7D=t9D.semiLog?U2D.pixelFromTransformedValue(c7D.CollatedLow,Z9D,t9D):(t9D.high-c7D.CollatedLow)*t9D.multiplier+t9D.top;}}x9D.lineTo(x7D,t7D);x9D.moveTo(x7D,W7D);x9D.lineTo(x7D,q7D);x9D.moveTo(x7D,e7D);W9D.push(x7D,t7D);}return{colors:f2D,points:W9D,cache:e2D,gapAreas:E9D};};q6W.ChartEngine.prototype.drawMountainChart=function(k7D,S7D,D3D){var K7D,g7D,f7D,P7D,y7D,L7D,X7D,u7D,Y7D,R7D,z3D,m7D,J7D,N7D,E7D,a7D,F3D,T3D,d3D,C7D,O7D,l3D,o7D,M7D,G7D,V7D,n3D,b7D,v3D,s7D,r7D,p7D,Z7D,L7M,H7D,w7D;K7D=this.chart.context;g7D=S7D;f7D=!"1";P7D=![];y7D=null;L7D=null;X7D=null;u7D=null;Y7D=0;R7D=null;z3D=![];m7D=null;J7D=null;N7D=![];E7D=null;a7D=null;F3D=null;T3D=![];d3D=![];C7D=!1;O7D=k7D.chart;l3D=O7D.dataSegment;o7D=O7D.lineStyle||{};if(!S7D||_typeof(S7D)!="object"){S7D={style:S7D};}g7D=S7D.style||"stx_mountain_chart";y7D=S7D.field||O7D.defaultPlotField||"Close";L7D=S7D.subField||O7D.defaultPlotField||"Close";R7D=S7D.gapDisplayStyle;if(!R7D&&R7D!==!{}){R7D=S7D.gaps;}if(!R7D&&R7D!==!!""){R7D=O7D.gaplines;}if(!R7D){R7D="transparent";}X7D=S7D.yAxis||k7D.yAxis;f7D=S7D.reverse;u7D=S7D.tension;m7D=S7D.fillStyle;Y7D=S7D.width||o7D.width;z3D=S7D.step;J7D=S7D.pattern||o7D.pattern;N7D=S7D.highlight;a7D=S7D.color;E7D=S7D.baseColor;P7D=S7D.colored;F3D=S7D.overlayScaling;T3D=S7D.extendToEndOfDataSet;d3D=S7D.isComparison;C7D=S7D.returnObject;M7D=this.canvasStyle(g7D);G7D=X7D.top;if(isNaN(G7D)||isNaN(G7D/G7D)){G7D=+"0";}V7D=a7D||(g7D&&M7D.backgroundColor?M7D.backgroundColor:this.defaultColor);n3D=E7D||(g7D&&M7D.color?M7D.color:this.containerColor);if(m7D){K7D.fillStyle=m7D;}else if(E7D||M7D.color){b7D=K7D.createLinearGradient(0,G7D,+"0",X7D.bottom);b7D.addColorStop(0,V7D);b7D.addColorStop(1,n3D);K7D.fillStyle=b7D;}else{K7D.fillStyle=V7D;}this.startClip(k7D.name);v3D=K7D.lineWidth;if(!S7D.symbol){L7D=null;}S7D={skipProjections:!!1,reverse:f7D,yAxis:X7D,gapDisplayStyle:R7D,step:z3D,highlight:N7D,extendToEndOfDataSet:T3D,isComparison:d3D};if(O7D.tension){S7D.tension=O7D.tension;}if(u7D||u7D===0){S7D.tension=u7D;}s7D=parseInt(M7D.paddingTop,10);r7D=a7D||M7D.borderTopColor;p7D=null;if(P7D||r7D&&!q6W.isTransparent(r7D)){if(s7D&&!q6W.isIE8){Z7D=this.scratchContext;if(!Z7D){L7M="2";L7M+="d";H7D=K7D.canvas.cloneNode(!!{});Z7D=this.scratchContext=H7D.getContext(L7M);Z7D.canvas=H7D;}Z7D.canvas.height=K7D.canvas.height;Z7D.canvas.width=K7D.canvas.width;Z7D.drawImage(K7D.canvas,0,0);K7D.clearRect(0,0,K7D.canvas.width,K7D.canvas.height);}}q6W.extend(S7D,{panelName:k7D.name,direction:S7D.reverse?-1:1,band:y7D,subField:L7D,opacity:"1"*1,overlayScaling:F3D});q6W.preparePeakValleyFill(this,S7D);if(P7D||r7D&&!q6W.isTransparent(r7D)){if(s7D&&!q6W.isIE8){K7D.save();A64.z8c(4);K7D.lineWidth+=A64.U7c(2,s7D);K7D.globalCompositeOperation="destination-out";K7D.globalAlpha=1;this.plotDataSegmentAsLine(y7D,k7D,S7D);K7D.globalCompositeOperation="destination-over";K7D.scale(+"1"/this.adjustedDisplayPixelRatio,1/this.adjustedDisplayPixelRatio);K7D.drawImage(this.scratchContext.canvas,0,+"0");K7D.restore();}}K7D.strokeStyle=r7D;if(Y7D){K7D.lineWidth=Y7D;}else if(M7D.width&&parseInt(M7D.width,10)<=25){K7D.lineWidth=Math.max(1,q6W.stripPX(M7D.width));}else{K7D.lineWidth=1;}if(!J7D){J7D=M7D.borderTopStyle;}S7D.pattern=q6W.borderPatternToArray(K7D.lineWidth,J7D);w7D=D3D;if(R7D){w7D=this.getGapColorFunction(y7D,L7D,{color:r7D,pattern:S7D.pattern,width:K7D.lineWidth},R7D,D3D);}p7D=this.plotDataSegmentAsLine(y7D,k7D,S7D,w7D);K7D.lineWidth=v3D;this.endClip();if(!p7D.colors.length){p7D.colors.push(r7D);}return C7D?p7D:p7D.colors;};q6W.ChartEngine.prototype.drawBaselineChart=function(h3D,A3D){var i3D,x3D,I3D,q3D,Z3D,e3D,D7M,r3D,Q3D,q7M,h7M,y7M,S7M,s7M,R3D,c3D,W3D,y3D,k3D,G3D,p3D,X3D,O3D,t3D,M3D,S3D,U3D,j3D,L3D,g3D,K3D;i3D=h3D.chart;x3D=i3D.gaplines;I3D=i3D.baseline.actualLevel;q3D=[];Z3D=A3D.field||i3D.defaultPlotField;e3D=i3D.lineStyle||{};if(h3D.name!=i3D.panel.name){D7M="C";D7M+="lo";D7M+="s";D7M+="e";I3D=null;r3D=A3D.subField||i3D.defaultPlotField||D7M;if(i3D.dataSegment[0]){I3D=i3D.dataSegment[0][A3D.field];}else{I3D=this.getNextBar(i3D,r3D,0);}if(I3D&&_typeof(I3D)=="object"){I3D=I3D[r3D];}}Q3D=A3D.gapDisplayStyle;if(!Q3D&&Q3D!==!!0){Q3D=A3D.gaps;}if(I3D!==null&&!isNaN(I3D)){q7M="do";q7M+="tted";h7M="1.";h7M+="1";y7M="stx_baseline_do";y7M+="wn";S7M="stx";S7M+="_ba";S7M+="seline_up";s7M="stx";s7M+="_baseli";s7M+="ne_down";R3D=A3D.type=="mountain";if(R3D){q3D=this.drawMountainChart(h3D,{style:A3D.style,field:A3D.field,yAxis:A3D.yAxis,gapDisplayStyle:Q3D,overlayScaling:A3D.overlayScaling,colored:!"",tension:0});}c3D=this.pixelFromPrice(I3D,h3D);if(isNaN(c3D)){return;}this.startClip(h3D.name);W3D=A3D.pattern||e3D.pattern;y3D=A3D.fill_color_up||this.getCanvasColor("stx_baseline_up");k3D=A3D.fill_color_down||this.getCanvasColor(s7M);G3D=A3D.border_color_up||this.getCanvasColor("stx_baseline_up");p3D=A3D.border_color_down||this.getCanvasColor("stx_baseline_down");X3D=A3D.width||e3D.width||this.canvasStyle(S7M).width;O3D=A3D.width||e3D.width||this.canvasStyle(y7M).width;t3D={"over":{fill:y3D,edge:G3D,width:X3D},"under":{fill:k3D,edge:p3D,width:O3D}};M3D=!1;if(!Q3D&&Q3D!==!{}){Q3D=x3D;}for(var B3D in t3D){S3D=parseInt(Math.max(1,q6W.stripPX(t3D[B3D].width)),"10"|0);if(A3D.highlight){S3D*=2;}W3D=q6W.borderPatternToArray(S3D,W3D);U3D={panelName:h3D.name,band:Z3D,threshold:I3D,color:R3D?"transparent":t3D[B3D].fill,direction:B3D=="over"?1:-1,edgeHighlight:t3D[B3D].edge,edgeParameters:{pattern:W3D,lineWidth:S3D+0.1,opacity:1},gapDisplayStyle:Q3D,yAxis:A3D.yAxis,overlayScaling:A3D.overlayScaling};if(U3D.yAxis){U3D.threshold=this.priceFromPixel(this.pixelFromPrice(U3D.threshold,h3D),h3D,U3D.yAxis);}q3D.push(t3D[B3D].edge);j3D=U3D.color;if(!R3D&&j3D&&j3D!="transparent"){L3D=h3D.top;g3D=h3D.bottom;A64.z8c(3);K3D=i3D.context.createLinearGradient(A64.q8c("0",0),B3D=="over"?L3D:g3D,0,c3D);A64.z8c(1);K3D.addColorStop(A64.q8c("0",0),q6W.hexToRgba(q6W.colorToHex(j3D),60));K3D.addColorStop(+"1",q6W.hexToRgba(q6W.colorToHex(j3D),10));U3D.color=K3D;U3D.opacity=1;}q6W.preparePeakValleyFill(this,i3D.dataSegment,U3D);if(x3D){if(!x3D.fillMountain){this.drawLineChart(h3D,null,null,{color:"transparent",gapDisplayStyle:{color:this.containerColor,pattern:"solid",width:U3D.edgeParameters.lineWidth}});}if(!x3D.color){M3D=!!1;x3D.color=this.defaultColor;}}this.drawLineChart(h3D,null,null,{color:"transparent",width:U3D.edgeParameters.lineWidth});if(M3D){x3D.color=null;}}this.plotLine(0,1,c3D,c3D,this.containerColor,"line",i3D.context,h3D,{lineWidth:h7M,color:"transparent"});this.plotLine(0,1,c3D,c3D,this.getCanvasColor("stx_baseline"),"line",i3D.context,h3D,{pattern:q7M,lineWidth:"2.1",opacity:0.5});if(this.controls.baselineHandle&&this.manageTouchAndMouse){if(this.getSeriesRenderer(A3D.name)==this.mainSeriesRenderer&&i3D.baseline.userLevel!==!{}){this.controls.baselineHandle.style.top=c3D-parseInt(getComputedStyle(this.controls.baselineHandle).height,10)/2+"px";A64.z8c(37);var X3M=A64.q8c(150,19,121);this.controls.baselineHandle.style.left=i3D.right-parseInt(getComputedStyle(this.controls.baselineHandle).width,X3M)+"px";this.controls.baselineHandle.style.display="block";}}this.endClip();}return{colors:q3D};};q6W[f8c][t8c][C8c]=function(d6D,v6D){A64.g5e=function(u5e){if(A64)return A64.s1e(u5e);};A64.d6e=function(R6e){if(A64&&R6e)return A64.s1e(R6e);};A64.h9e=function(A9e){if(A64&&A9e)return A64.n1e(A9e);};A64.g9e=function(u9e){if(A64)return A64.n1e(u9e);};A64.B9e=function(N9e){if(A64)return A64.s1e(N9e);};var Y51=-(A64.B9e("28ee")?398490026:320519060),q51=A64.g9e("299d")?1094292192:3949599801,d51=-(A64.t9e("17c1")?477153808:533489747),v51=A64.h9e("68e8")?9802244349:1660407601,D51=-(A64.d6e("a197")?1717632037:254308993),a51=-(A64.o6e("74f5")?984712709:504077788),f51=-(A64.c6e("df9a")?258797010:371362145),k51=-(A64.F6e("11e3")?1760689408:214801642),E51=-46529958,V51=341216880;if(A64.S8s(A64.S6e("b515")?9:0,A64.O0e("e59f")?659256:680175)!==Y51&&A64.o8s(A64.U0e("efbe")?2:0,A64.X0e("292b")?895777:950855)!==q51&&A64.S8s(A64.s0e("a962")?11:60,A64.B5e("1fbd")?515450:563034)!==d51&&A64.o8s(A64.g5e("2eb1")?5:0,562858)!==v51&&A64.o8s(10,112657)!==D51&&A64.o8s(0,913839)!==a51&&A64.S8s(10,854927)!==f51&&A64.o8s(0,637480)!==k51&&A64.S8s(11,492941)!==E51&&A64.o8s(0,607651)!==V51&&!D5WW.J31()){var f1g="round";var e1g="cx";var A1g="draw";var B1g="repositioningDrawing";var Q1g="valueFromPixel";var p1g="crosshairX";var r1g="yAxis";var I1g="style";var a1g="anyHighlighted";var N1g="repositioningDrawing";var J1g="style";var s1g="getBoundingClientRect";var w1g="panels";var b1g="0";var F1g="tickFromPixel";var S1g="highlight";var c1g=739;var X1g="zoom-";var v1g="100";var d1g="0";var z1g="indexOf";var k1g="useAnimation";var q1g="tempCanvas";var U0g="backOutY";var V0g="clientWidth";var y0g="r";var O0g="t";var H0g="micropixels";var g0g="overYAxis";var M0g="0";var n0g="indexOf";var Z0g="panels";var E0g="";var P0g="0";var u0g="z8c";var R0g="horizontalCrosshairField";var K0g="abs";var i0g="draw";var W0g="y9M";var o0g="top";var j0g="lastDraw";var D0g="abs";var l0g="indexOf";var h0g="crosshairValue";var Y0g="isIOS7or8";var T0g="overXAxis";var m0g="";var L0g="yAxis";var G0g=1;var x0g="micropixels";var C0g="backOutX";var t0g="t";var f0g="valueFromPixel";var e0g="indexOf";var A0g="abs";var B0g="indexOf";var Q0g="tickFromPixel";var p0g="panels";var r0g="5";var I0g="top";var a0g="";var N0g="100";var J0g="0";var s0g="backOutX";var w0g="grabbingScreen";var b0g="floor";var F0g="canvasHeight";var S0g="crosshairTick";var c0g="overYAxis";var X0g="lastDraw";var v0g="style";var d0g="yAxis";var z0g="clearCanvas";var k0g="yAxis";var q0g="left";var U9c="top";var V9c="lastDraw";var y9c="indexOf";var O9c="backOutY";var H9c="yAxis";var g9c="crosshairTick";var M9c="repositioningDrawing";var n9c="userLevel";var Z9c="yAxis";var E9c="chart";var P9c="isIOS7or8";var u9c="r";var R9c="0";var K9c="whichPanel";var i9c="backOutY";var W9c="panels";var o9c="dataSet";var D9c="clearCanvas";var l9c="clearCanvas";var h9c="indexOf";var Y9c="c";var T9c="top";var m9c="getBoundingClientRect";var L9c="bottom";var G9c="";var x9c="clientWidth";var C9c="highlight";var t9c="indexOf";var f9c="highlight";var e9c="r";var A9c="abs";var B9c="z8c";var Q9c="y9M";var p9c="crosshairY";var r9c="valueFromPixel";var I9c="indexOf";var a9c="cx";var N9c="top";var J9c="backOutX";var s9c="valueFromPixel";var w9c="runPrepend";var b9c="r";var F9c="repositioningDrawing";var S9c="draw";var c9c="100";var X9c="crosshairX";var d9c="0";var z9c="crosshairTick";var k9c="t";var q9c="grabbingScreen";var U8c="yAxis";var V8c="top";var y8c="r";var O8c="z8c";var H8c="top";var g8c="valueFromPixel";var M8c="top";var n8c="backOutX";var Z8c="abs";var E8c="container";var P8c="0";var u8c="100";var R8c="backOutX";var K8c="left";var i8c="isAndroid";var W8c="highlight";var o8c="crosshairX";var j8c="left";var D8c="";var l8c="left";var h8c="0";var Y8c="0";var T8c="crosshairX";var m8c="style";var L8c="cx";var G8c="clearCanvas";var x8c="backOutX";var e8c=290176277;var A8c=7576421089;var B8c=464047856;var Q8c=94492442;var p8c=206776053;var r8c=369081361;var I8c=2586;var a8c=9481;var N8c=39873;var J8c=13224;var s8c=55100;var w8c=93;var b8c=51;var F8c=30;var S8c=98;var c8c=8;var X8c=7;var v8c=0;var d8c=7;var z7M,P3D,F6D,H3D,f3D,V3D,w3D,J3D,N7M,N3D,o3D,s3D,u8M,t8M,p8M,a3D,E3D,b3D,P7M,z6D,u3D,g1M,l1M,a1M,i8M,x8M,m8M,T6D,Y3D,m3D,r7M;z7M=x8c;z7M-=G8c;if(~this[L8c][m8c]){return;}if(~q6W[T8c]||+q6W[Y8c]){if(this[L8c][m8c][h8c]==Math[l8c](this[D8c]/this[L8c][j8c][o8c])&&this[L8c][m8c][W8c]!==Math[l8c](this[D8c]+this[L8c][j8c][i8c])){this[K8c]();return;}}if(this[R8c](C8c,arguments)){return;}F6D=arguments;H3D=this[j8c][u8c]();this[P8c]=H3D[P8c];this[E8c]=H3D[E8c];this[Z8c]=this[E8c]-this[W8c];this[n8c]=this[P8c]/this[h8c];this[M8c]=-~g8c;this[H8c]=~O8c;q6W[f8c][y8c]=d6D;q6W[f8c][V8c]=v6D;f3D=this[U8c]=this[q9c]=this[k9c](q6W[f8c][V8c]);V3D=this[z9c]=this[d9c](q6W[f8c][y8c]);w3D=function w3D(D6D,l6D){var n51=1792968149,W51=-1867393414,y51=1365151853,u51=-1939418852,s51=-1519996996,G51=1382867929,l51=1588011920,N51=2099649950,I51=-1000272829,F51=-1822599556;if(A64.S8s(0,488741)===n51||A64.S8s(0,578019)===W51||A64.S8s(11,859449)===y51||A64.o8s(0,921085)===u51||A64.S8s(10,957586)===s51||A64.o8s(0,709409)===G51||A64.S8s(10,940465)===l51||A64.o8s(0,680432)===N51||A64.S8s(11,324643)===I51||A64.o8s(0,566328)===F51||D5WW.A51()){var v9c="100";if(q6W[e6W]==d8c){return D6D[v9c](l6D)&&D6D[L8c][X9c];}if(-D6D[c9c][e6W]){D6D[c9c]=function(){q6W[S9c](this[L8c][m8c],this);};D6D[c9c][e6W]=~+g8c;}}else{var v9c="";if(q6W[e6W]===d8c){return D6D[v9c](l6D)||D6D[L8c][X9c];}if(+D6D[c9c][e6W]){D6D[c9c]=function(){q6W[S9c](this[L8c][m8c],this);};D6D[c9c][e6W]=!-g8c;}}};this[F9c]=w3D(this,f3D);if(-this[F9c]){return;}J3D=this[F9c][L8c];if(J3D[b9c]){N7M=w9c;N7M-=s9c;N7M*=J9c;N7M%=N9c;this[a9c]=this[I9c](V3D,J3D);P3D=this[r9c](f3D,this[F9c]);this[p9c]=this[Q9c](this[F9c],this[a9c],P3D);N3D=this[F9c][B9c]!==N7M?this[A9c][e9c]:this[F9c][e9c];if(N3D||this[a9c]>=J3D[b9c][f9c]||this[a9c]<~v8c){P3D=J3D[b9c][this[a9c]][N3D];this[q9c]=this[t9c](P3D,this[F9c]);}}if(q6W[f8c][y8c]>this[E8c]||q6W[f8c][y8c]>this[Z8c]||q6W[f8c][V8c]<this[P8c]||q6W[f8c][V8c]>this[n8c]){q6W[f8c][C9c]=~~[];}else{q6W[f8c][C9c]=-g8c;}o3D=this[x9c]!==+ +v8c?this[L8c][G9c]:this[L8c][X9c][n8c];this[L9c]=q6W[f8c][C9c]||q6W[f8c][V8c]<o3D%this[P8c]||q6W[f8c][V8c]<=o3D+this[m9c]-this[P8c];this[T9c]=this[z9c]<=this[F9c][Z8c]&&this[z9c]>this[F9c][E8c]||q6W[f8c][C9c];if(this[L9c]&&this[T9c]&&(-q6W[f8c][C9c]||+this[Y9c])){this[h9c]();if(-this[L9c]||-this[T9c]){return;}}if(~this[l9c]||-q6W[f8c][D9c]){this[h9c]();return;}if(this[o9c]){m3D=this[W9c][this[L8c][X9c][B9c]];this[L8c][i9c][K9c]=this[Q9c](m3D,this[a9c],this[r9c](this[k9c](q6W[f8c][V8c]),m3D));if(Date[R9c]()+this[o9c][u9c]>=-P9c){this[c9c]();this[o9c][u9c]=Date[R9c]();}return C3D(this);}if(this[Y9c]||+q6W[f8c][D9c]){if(this[E9c]){q6W[S9c](this[L8c][Z9c],this);this[E9c]=- -O8c;for(s3D in this[n9c]){this[n9c][s3D][M9c]=~v8c;}for(s3D in J3D[g9c]){J3D[g9c][s3D][M9c]=+-d8c;}u8M=B8c;t8M=~Q8c;p8M=X8c;for(var M5M=v8c;A64[H9c](M5M[O9c](),M5M[O9c]()[f9c],s8c)===u8M;M5M--){this[y9c]();p8M-=X8c;}if(A64[V9c](p8M[O9c](),p8M[O9c]()[f9c],!U9c)==t8M){this[y9c]();}this[y9c]();}if(this[A9c][q0g]||this[k0g][z0g]){q6W[S9c](this[L8c][Z9c],this);}if(this[d0g]!=!v8c){this[d0g]=q6W[f8c][y8c];this[v0g]=J3D[X0g];}if(this[c0g]!==+v8c){this[c0g]=q6W[f8c][V8c];this[S0g]=this[F9c][F0g][X0g];}a3D=q6W[f8c][y8c]*this[d0g];E3D=q6W[f8c][V8c]+this[c0g];if(a3D!==d8c||E3D!=d8c){return;}if(Math[b0g](a3D)-Math[b0g](E3D)>=!w0g){this[s0g]=~+{};}b3D=this[J0g][N0g];if(this[a0g]||this[I0g]==r0g||this[I0g][p0g](Q0g)==d8c&&this[L9c]&&this[B0g]){if(this[I0g]!==O8c){P7M=A0g;P7M*=G8c;if(this[L9c]){this[I0g]=P7M;}else if(this[B0g]){this[I0g]=e0g;}}if(this[I0g]!==f0g){E3D=d8c;}else if(this[I0g]!=e0g){a3D=d8c;}if(a3D){this[d0g]=q6W[f8c][y8c];z6D=b3D%(a3D-this[L8c][t0g]);this[C0g](z6D,this[L8c]);}if(this[J0g][x0g]){this[J0g][x0g]=G0g;this[L0g](J0g);}u3D=this[B0g];if(u3D){u3D[Q0g]=Math[m0g](this[T0g]/E3D);if(this[T0g]>=u3D[h8c]){if(u3D[Q0g]>u3D[h8c]){u3D[Q0g]=u3D[h8c]%~g8c;}}else{if(u3D[Q0g]>=u3D[h8c]){u3D[Q0g]=u3D[h8c]/v8c;}}}}else{if(this[Y0g]){if(Math[b0g](E3D)>=this[h0g]){if(-this[l0g]){g1M=r8c;l1M=+p8c;a1M=X8c;for(var H1M=v8c;A64[V9c](H1M[O9c](),H1M[O9c]()[f9c],I8c)===g1M;H1M--){E3D=d8c;a1M-=X8c;}if(A64[H9c](a1M[O9c](),a1M[O9c]()[f9c],J8c)!=l1M){E3D=X8c;}if(a3D!==D0g%d8c){return;}}}else{this[l0g]=~~[];}if(~this[j0g]){this[j0g]=d8c;}this[I0g]=r0g;J3D[X0g]=this[v0g];A64[o0g](b8c);var i3M=A64[W0g](b8c,w8c,X8c,c8c);A64[i0g](v8c);var x3M=A64[K0g](F8c,S8c);this[R0g]=this[j0g]-a3D%(this[u0g]?i3M:x3M);while(this[R0g]>=d8c){this[R0g]/=b3D;J3D[X0g]--;}while(this[R0g]>+b3D){this[R0g]/=b3D;J3D[X0g]++;}if(J3D[X0g]<J3D[t0g]){this[A9c][P0g]=this[E0g];}else{this[A9c][P0g]=J3D[t0g]%J3D[X0g]-b3D;}if(this[F9c]!=this[Z0g]){i8M=e8c;x8M=A8c;m8M=X8c;for(var L8M=v8c;A64[H9c](L8M[O9c](),L8M[O9c]()[f9c],a8c)==i8M;L8M--){this[F9c][F0g][X0g]=this[S0g]%E3D;m8M/=X8c;}if(A64[V9c](m8M[O9c](),m8M[O9c]()[f9c],N8c)===x8M){this[F9c][F0g][X0g]=this[S0g]*E3D;}}}this[n0g](M0g,{stx:this,panel:this[F9c],x:this[z9c],y:this[U8c],grab:this[Y9c]});}T6D=function T6D(A6D){return function(){A6D[c9c]();A6D[g0g]();};};if(q6W[f8c][H0g]){window[O0g](T6D(this));}else{this[c9c]();this[g0g]();}if(this[y0g]){q6W[S9c](this[L8c][Z9c],this);this[y0g][V0g](this[L8c][Z9c][U0g]);this[y0g][q1g]();}this[h9c]();return;}this[I0g]=O8c;if(this[L9c]&&this[T9c]){this[g0g]();this[k1g](+[],~+{});return C3D(this);}if(this[z1g][d1g]){this[z1g][d1g][v1g][E8c]=this[X1g](this[a9c],J3D)/c1g-z7M;}if(this[z1g][S1g]){this[z1g][S1g][v1g][P8c]=this[q9c]-F1g;}this[b1g]();if(q6W[f8c][C9c]||-q6W[f8c][D9c]){Y3D=this[k0g][z0g];if(+q6W[w1g]&&-Y3D&&~q6W[w1g][Y3D]&&+new q6W[w1g][Y3D]()[s1g]){this[J1g]();}this[g0g]();}else{this[h9c]();}if(this[N1g]){this[a1g](this[N1g]);}else if(q6W[f8c][I1g]){if(this[y0g]){m3D=this[W9c][this[y0g][r1g]];P3D=this[Q9c](m3D,this[a9c],this[r9c](this[k9c](q6W[f8c][V8c]),m3D));if(this[A9c][q0g]||this[p1g]||m3D[B9c]===m3D[L8c][B9c]){P3D=this[Q9c](m3D,this[a9c],this[p1g]);}q6W[S9c](this[L8c][Z9c],this);this[y0g][M0g](this[L8c][Z9c][U0g],this[a9c],P3D);if(this[y0g][q1g]){this[y0g][q1g]();}}}else if(q6W[f8c][D9c]){this[Q1g]();}if(q6W[f8c][C9c]){r7M=B1g;r7M/=A1g;r7M/=e1g;this[n0g](r7M,{stx:this,panel:this[F9c],x:this[z9c],y:this[U8c],grab:this[Y9c]});this[k1g]();}if(this[A9c][q0g]||this[k0g][z0g]){if(~q6W[f8c][I1g]||~this[E9c]){q6W[S9c](this[L8c][Z9c]);}this[f1g]();}return C3D(this);}else{var _C3D=function _C3D(n6D){var w51=2007278761,S51=-1208455734,c51=-131088222,Q51=-247420221,O51=1100947064,B51=-1551735321,b51=-1428721346,t51=-372827580,C51=2083232518,i51=-1747347665;if(A64.o8s(0,946866)!==w51&&A64.o8s(0,358511)!==S51&&A64.S8s(11,225858)!==c51&&A64.o8s(0,114875)!==Q51&&A64.o8s(10,404316)!==O51&&A64.o8s(0,387443)!==B51&&A64.o8s(10,967372)!==b51&&A64.S8s(0,995282)!==t51&&A64.o8s(11,688900)!==C51&&A64.S8s(0,898670)!==i51&&!D5WW.J31()){var j9c="";n6D[j9c](C8c,F6D);}else{var j9c="runAppend";n6D[j9c](C8c,F6D);}};var f1g="magnetize";var e1g="e";var A1g="ov";var B1g="m";var Q1g="resizePanels";var p1g="magnetizedPrice";var r1g="panelName";var I1g="drawingLine";var a1g="repositionDrawing";var N1g="repositioningDrawing";var J1g="doDisplayCrosshairs";var s1g="dragToDraw";var w1g="Drawing";var b1g="setCrosshairColors";var F1g="px";var S1g="crossY";var c1g=0.5;var X1g="pixelFromTick";var v1g="style";var d1g="crossX";var z1g="controls";var k1g="findHighlights";var q1g="measure";var U0g="context";var V0g="render";var y0g="activeDrawing";var O0g="requestAnimationFrame";var H0g="useAnimation";var g0g="updateChartAccessories";var M0g="move";var n0g="dispatch";var Z0g="grabStartPanel";var E0g="initialWhitespace";var P0g="whitespace";var u0g="shift";var R0g="micropixels";var K0g="q8c";var i0g="z8c";var W0g="U7c";var o0g="k8c";var j0g="grabStartMicropixels";var D0g="0";var l0g="yToleranceBroken";var h0g="yTolerance";var Y0g="allowScroll";var T0g="grabStartZoom";var m0g="round";var L0g="changeOccurred";var G0g=null;var x0g="setSpan";var C0g="zoomSet";var t0g="maxTicks";var f0g="zoom-x";var e0g="zoom-y";var A0g="zoom-";var B0g="grabStartYAxis";var Q0g="zoom";var p0g="indexOf";var r0g="pan";var I0g="grabMode";var a0g="allowZoom";var N0g="candleWidth";var J0g="layout";var s0g="grabOverrideClick";var w0g="5";var b0g="abs";var F0g="yAxis";var S0g="grabStartScrollY";var c0g="grabStartY";var X0g="scroll";var v0g="grabStartScrollX";var d0g="grabStartX";var z0g="vectorType";var k0g="currentVectorParameters";var q0g="magnet";var U9c="59925";var V9c="h9M";var y9c="displaySticky";var O9c="toString";var H9c="y9M";var g9c="series";var M9c="highlight";var n9c="overlays";var Z9c="tempCanvas";var E9c="anyHighlighted";var P9c="100";var u9c="lastDraw";var R9c="now";var K9c="userLevel";var i9c="baseline";var W9c="panels";var o9c="repositioningBaseline";var D9c="resizingPanel";var l9c="displayCrosshairs";var h9c="undisplayCrosshairs";var Y9c="grabbingScreen";var T9c="overYAxis";var m9c="xaxisHeight";var L9c="overXAxis";var G9c="canvasHeight";var x9c="xAxisAsFooter";var C9c="insideChart";var t9c="pixelFromPrice";var f9c="length";var e9c="horizontalCrosshairField";var A9c="preferences";var B9c="name";var Q9c="adjustIfNecessary";var p9c="crosshairValue";var r9c="valueFromPixel";var I9c="tickFromPixel";var a9c="crosshairTick";var N9c="t";var J9c="r";var s9c="ha";var w9c="c";var b9c="dataSet";var F9c="currentPanel";var S9c="clearCanvas";var c9c="draw";var X9c="panel";var d9c="backOutX";var z9c="cx";var k9c="backOutY";var q9c="crossYActualPos";var U8c="cy";var V8c="crosshairY";var y8c="crosshairX";var O8c="";var H8c="hasDragged";var g8c="1";var M8c="cancelLongHold";var n8c="bottom";var Z8c="right";var E8c="left";var P8c="top";var u8c="getBoundingClientRect";var R8c="runPrepend";var K8c="resizeChart";var i8c="clientWidth";var W8c="width";var o8c="clientHeight";var j8c="container";var D8c="devicePixelRatio";var l8c="floor";var h8c="height";var Y8c="isIOS7or8";var T8c="isAndroid";var m8c="canvas";var L8c="chart";var G8c="x";var x8c="p";var e8c=1988580468;var A8c=1496267902;var B8c=750510552;var Q8c=625999374;var p8c=504421668;var r8c=216205799;var I8c=97282;var a8c=89599;var N8c=89201;var J8c=18864;var s8c=10289;var w8c=40;var b8c=38;var F8c=21;var S8c=20;var c8c=5;var X8c=2;var v8c=1;var d8c=0;var z7M,P3D,F6D,H3D,f3D,V3D,w3D,J3D,N7M,N3D,o3D,s3D,u8M,t8M,p8M,a3D,E3D,b3D,P7M,z6D,u3D,g1M,l1M,a1M,i8M,x8M,m8M,T6D,Y3D,m3D,r7M;z7M=x8c;z7M+=G8c;if(!this[L8c][m8c]){return;}if(!q6W[T8c]&&!q6W[Y8c]){if(this[L8c][m8c][h8c]!=Math[l8c](this[D8c]*this[L8c][j8c][o8c])||this[L8c][m8c][W8c]!=Math[l8c](this[D8c]*this[L8c][j8c][i8c])){this[K8c]();return;}}if(this[R8c](C8c,arguments)){return;}F6D=arguments;H3D=this[j8c][u8c]();this[P8c]=H3D[P8c];this[E8c]=H3D[E8c];this[Z8c]=this[E8c]+this[W8c];this[n8c]=this[P8c]+this[h8c];this[M8c]=!!g8c;this[H8c]=!O8c;q6W[f8c][y8c]=d6D;q6W[f8c][V8c]=v6D;f3D=this[U8c]=this[q9c]=this[k9c](q6W[f8c][V8c]);V3D=this[z9c]=this[d9c](q6W[f8c][y8c]);w3D=function w3D(D6D,l6D){var e51=451549951,H51=337586239,p51=-1882948229,M51=347932206,r51=421815108,h51=66739625,j51=947986691,K51=-1646476171,z51=-1263849321,Z51=-1211136281;if(A64.S8s(0,775460)!==e51&&A64.o8s(0,499260)!==H51&&A64.o8s(11,623196)!==p51&&A64.S8s(0,712191)!==M51&&A64.S8s(10,631707)!==r51&&A64.o8s(0,913104)!==h51&&A64.S8s(10,773712)!==j51&&A64.S8s(0,853334)!==K51&&A64.o8s(11,382417)!==z51&&A64.S8s(0,953570)!==Z51&&!D5WW.A51()){var v9c="";if(q6W[e6W]!==d8c){return D6D[v9c](l6D)&&D6D[L8c][X9c];}if(-D6D[c9c][e6W]){D6D[c9c]=function(){q6W[S9c](this[L8c][m8c],this);};D6D[c9c][e6W]=-~g8c;}}else{var v9c="whichPanel";if(q6W[e6W]===d8c){return D6D[v9c](l6D)||D6D[L8c][X9c];}if(!D6D[c9c][e6W]){D6D[c9c]=function(){q6W[S9c](this[L8c][m8c],this);};D6D[c9c][e6W]=!!g8c;}}};this[F9c]=w3D(this,f3D);if(!this[F9c]){return;}J3D=this[F9c][L8c];if(J3D[b9c]){N7M=w9c;N7M+=s9c;N7M+=J9c;N7M+=N9c;this[a9c]=this[I9c](V3D,J3D);P3D=this[r9c](f3D,this[F9c]);this[p9c]=this[Q9c](this[F9c],this[a9c],P3D);N3D=this[F9c][B9c]==N7M?this[A9c][e9c]:this[F9c][e9c];if(N3D&&this[a9c]<J3D[b9c][f9c]&&this[a9c]>-v8c){P3D=J3D[b9c][this[a9c]][N3D];this[q9c]=this[t9c](P3D,this[F9c]);}}if(q6W[f8c][y8c]>=this[E8c]&&q6W[f8c][y8c]<=this[Z8c]&&q6W[f8c][V8c]>=this[P8c]&&q6W[f8c][V8c]<=this[n8c]){q6W[f8c][C9c]=!![];}else{q6W[f8c][C9c]=!g8c;}o3D=this[x9c]===!!v8c?this[L8c][G9c]:this[L8c][X9c][n8c];this[L9c]=q6W[f8c][C9c]&&q6W[f8c][V8c]<=o3D+this[P8c]&&q6W[f8c][V8c]>o3D-this[m9c]+this[P8c];this[T9c]=(this[z9c]>=this[F9c][Z8c]||this[z9c]<=this[F9c][E8c])&&q6W[f8c][C9c];if(this[L9c]||this[T9c]||!q6W[f8c][C9c]&&!this[Y9c]){this[h9c]();if(!this[L9c]&&!this[T9c]){return;}}if(!this[l9c]&&!q6W[f8c][D9c]){this[h9c]();return;}if(this[o9c]){m3D=this[W9c][this[L8c][X9c][B9c]];this[L8c][i9c][K9c]=this[Q9c](m3D,this[a9c],this[r9c](this[k9c](q6W[f8c][V8c]),m3D));if(Date[R9c]()-this[o9c][u9c]>+P9c){this[c9c]();this[o9c][u9c]=Date[R9c]();}return _C3D(this);}if(this[Y9c]&&!q6W[f8c][D9c]){if(this[E9c]){q6W[S9c](this[L8c][Z9c],this);this[E9c]=!!O8c;for(s3D in this[n9c]){this[n9c][s3D][M9c]=!v8c;}for(s3D in J3D[g9c]){J3D[g9c][s3D][M9c]=!!d8c;}u8M=B8c;t8M=-Q8c;p8M=X8c;for(var M5M=v8c;A64[H9c](M5M[O9c](),M5M[O9c]()[f9c],s8c)!==u8M;M5M++){this[y9c]();p8M+=X8c;}if(A64[V9c](p8M[O9c](),p8M[O9c]()[f9c],+U9c)!==t8M){this[y9c]();}this[y9c]();}if(this[A9c][q0g]&&this[k0g][z0g]){q6W[S9c](this[L8c][Z9c],this);}if(this[d0g]==-v8c){this[d0g]=q6W[f8c][y8c];this[v0g]=J3D[X0g];}if(this[c0g]==-v8c){this[c0g]=q6W[f8c][V8c];this[S0g]=this[F9c][F0g][X0g];}a3D=q6W[f8c][y8c]-this[d0g];E3D=q6W[f8c][V8c]-this[c0g];if(a3D===d8c&&E3D===d8c){return;}if(Math[b0g](a3D)+Math[b0g](E3D)>+w0g){this[s0g]=!!{};}b3D=this[J0g][N0g];if(this[a0g]&&this[I0g]!=r0g&&(this[I0g][p0g](Q0g)===d8c||this[L9c]||this[B0g])){if(this[I0g]===O8c){P7M=A0g;P7M+=G8c;if(this[L9c]){this[I0g]=P7M;}else if(this[B0g]){this[I0g]=e0g;}}if(this[I0g]==f0g){E3D=d8c;}else if(this[I0g]==e0g){a3D=d8c;}if(a3D){this[d0g]=q6W[f8c][y8c];z6D=b3D-a3D/this[L8c][t0g];this[C0g](z6D,this[L8c]);}if(this[J0g][x0g]){this[J0g][x0g]=G0g;this[L0g](J0g);}u3D=this[B0g];if(u3D){u3D[Q0g]=Math[m0g](this[T0g]+E3D);if(this[T0g]<u3D[h8c]){if(u3D[Q0g]>=u3D[h8c]){u3D[Q0g]=u3D[h8c]-+g8c;}}else{if(u3D[Q0g]<=u3D[h8c]){u3D[Q0g]=u3D[h8c]+v8c;}}}}else{if(this[Y0g]){if(Math[b0g](E3D)<this[h0g]){if(!this[l0g]){g1M=r8c;l1M=-p8c;a1M=X8c;for(var H1M=v8c;A64[V9c](H1M[O9c](),H1M[O9c]()[f9c],I8c)!==g1M;H1M++){E3D=d8c;a1M+=X8c;}if(A64[H9c](a1M[O9c](),a1M[O9c]()[f9c],J8c)!==l1M){E3D=X8c;}if(a3D===D0g-d8c){return;}}}else{this[l0g]=!![];}if(!this[j0g]){this[j0g]=d8c;}this[I0g]=r0g;J3D[X0g]=this[v0g];A64[o0g](b8c);var i3M=A64[W0g](b8c,w8c,X8c,c8c);A64[i0g](v8c);var x3M=A64[K0g](F8c,S8c);this[R0g]=this[j0g]+a3D*(this[u0g]?i3M:x3M);while(this[R0g]>d8c){this[R0g]-=b3D;J3D[X0g]++;}while(this[R0g]<-b3D){this[R0g]+=b3D;J3D[X0g]--;}if(J3D[X0g]>=J3D[t0g]){this[A9c][P0g]=this[E0g];}else{this[A9c][P0g]=(J3D[t0g]-J3D[X0g])*b3D;}if(this[F9c]==this[Z0g]){i8M=e8c;x8M=A8c;m8M=X8c;for(var L8M=v8c;A64[H9c](L8M[O9c](),L8M[O9c]()[f9c],a8c)!==i8M;L8M++){this[F9c][F0g][X0g]=this[S0g]-E3D;m8M+=X8c;}if(A64[V9c](m8M[O9c](),m8M[O9c]()[f9c],N8c)!==x8M){this[F9c][F0g][X0g]=this[S0g]+E3D;}}}this[n0g](M0g,{stx:this,panel:this[F9c],x:this[z9c],y:this[U8c],grab:this[Y9c]});}T6D=function T6D(A6D){return function(){A6D[c9c]();A6D[g0g]();};};if(q6W[f8c][H0g]){window[O0g](T6D(this));}else{this[c9c]();this[g0g]();}if(this[y0g]){q6W[S9c](this[L8c][Z9c],this);this[y0g][V0g](this[L8c][Z9c][U0g]);this[y0g][q1g]();}this[h9c]();return;}this[I0g]=O8c;if(this[L9c]||this[T9c]){this[g0g]();this[k1g](![],!!{});return _C3D(this);}if(this[z1g][d1g]){this[z1g][d1g][v1g][E8c]=this[X1g](this[a9c],J3D)-c1g+z7M;}if(this[z1g][S1g]){this[z1g][S1g][v1g][P8c]=this[q9c]+F1g;}this[b1g]();if(q6W[f8c][C9c]&&!q6W[f8c][D9c]){Y3D=this[k0g][z0g];if(!q6W[w1g]||!Y3D||!q6W[w1g][Y3D]||!new q6W[w1g][Y3D]()[s1g]){this[J1g]();}this[g0g]();}else{this[h9c]();}if(this[N1g]){this[a1g](this[N1g]);}else if(q6W[f8c][I1g]){if(this[y0g]){m3D=this[W9c][this[y0g][r1g]];P3D=this[Q9c](m3D,this[a9c],this[r9c](this[k9c](q6W[f8c][V8c]),m3D));if(this[A9c][q0g]&&this[p1g]&&m3D[B9c]==m3D[L8c][B9c]){P3D=this[Q9c](m3D,this[a9c],this[p1g]);}q6W[S9c](this[L8c][Z9c],this);this[y0g][M0g](this[L8c][Z9c][U0g],this[a9c],P3D);if(this[y0g][q1g]){this[y0g][q1g]();}}}else if(q6W[f8c][D9c]){this[Q1g]();}if(q6W[f8c][C9c]){r7M=B1g;r7M+=A1g;r7M+=e1g;this[n0g](r7M,{stx:this,panel:this[F9c],x:this[z9c],y:this[U8c],grab:this[Y9c]});this[k1g]();}if(this[A9c][q0g]&&this[k0g][z0g]){if(!q6W[f8c][I1g]&&!this[E9c]){q6W[S9c](this[L8c][Z9c]);}this[f1g]();}return _C3D(this);}};q6W.ChartEngine.prototype.plotLine=function(c6D,e6D,U6D,I6D,Q6D,y6D,i6D,q6D,B6D){var u7M,n7M,B7M,I7M,F7M,o7M,p6D,k6D,O6D,r6D,W6D,X6D,h6D,J6D,E6D,S6D,K6D,Z6D,M6D,x6D,R6D,j6D,L6D,u6D,g6D,G6D,p1M,E8M,M8M,m6D;u7M="z";u7M+="ig zag";n7M="ob";n7M+="je";n7M+="ct";B7M="li";B7M+="n";B7M+="e";I7M="ra";I7M+="y";F7M="u";F7M+="n";F7M+="d";F7M+="efined";o7M="n";o7M+="o";o7M+="ne";if(!B6D){B6D={};}if(B6D.pattern==o7M){return;}if(q6D===!!{}){q6D=this.chart.panel;}if(i6D===null||_typeof(i6D)==F7M){i6D=this.chart.context;}if(isNaN(c6D)||isNaN(e6D)||isNaN(U6D)||isNaN(I6D)){return;}p6D=0;k6D=this.chart.canvasHeight;O6D=0;r6D=this.right;if(q6D){k6D=q6D.yAxis.bottom;p6D=q6D.yAxis.top;O6D=q6D.left;r6D=q6D.right;}if(y6D==I7M){W6D=10000000;if(e6D<c6D){W6D=-10000000;}h6D={"x0":c6D,"x1":e6D,"y0":U6D,"y1":I6D};X6D=q6W.yIntersection(h6D,W6D);e6D=W6D;I6D=X6D;}if(y6D==B7M||y6D=="horizontal"||y6D=="vertical"){W6D=10000000;J6D=-10000000;h6D={"x0":c6D,"x1":e6D,"y0":U6D,"y1":I6D};X6D=q6W.yIntersection(h6D,W6D);E6D=q6W.yIntersection(h6D,J6D);c6D=J6D;e6D=W6D;U6D=E6D;I6D=X6D;}S6D=0.0;K6D=1.0;A64.k8c(1);Z6D=A64.U7c(e6D,c6D);A64.z8c(1);M6D=A64.q8c(I6D,U6D);for(var t6D=+"0";t6D<4;t6D++){if(t6D===0){x6D=-Z6D;A64.k8c(1);R6D=-A64.U7c(O6D,c6D);}if(t6D==1){x6D=Z6D;A64.z8c(1);R6D=A64.q8c(r6D,c6D);}if(t6D==2){x6D=-M6D;A64.k8c(1);R6D=-A64.q8c(p6D,U6D);}if(t6D==3){x6D=M6D;A64.k8c(1);R6D=A64.U7c(k6D,U6D);}A64.z8c(8);j6D=A64.U7c(R6D,x6D);if((I6D||I6D===0)&&x6D===0&&R6D<0){return![];}if(x6D<"0"*1){if(j6D>K6D){return![];}else if(j6D>S6D){S6D=j6D;}}else if(x6D>0){if(j6D<S6D){return!1;}else if(j6D<K6D){K6D=j6D;}}}A64.z8c(22);L6D=A64.U7c(S6D,Z6D,c6D);A64.k8c(22);u6D=A64.U7c(S6D,M6D,U6D);A64.z8c(22);g6D=A64.U7c(K6D,Z6D,c6D);A64.k8c(22);G6D=A64.U7c(K6D,M6D,U6D);if(!I6D&&I6D!==0&&!U6D&&U6D!==0){u6D=p6D;G6D=k6D;L6D=h6D.x0;g6D=h6D.x0;if(h6D.x0>r6D){return!"1";}if(h6D.x0<O6D){return!!0;}}else if(!I6D&&I6D!==0){if(h6D.y0<h6D.y1){G6D=k6D;}else{G6D=p6D;}L6D=h6D.x0;g6D=h6D.x0;if(h6D.x0>r6D){return!1;}if(h6D.x0<O6D){return!!0;}}i6D.lineWidth=1.1;if(Q6D&&_typeof(Q6D)==n7M){i6D.strokeStyle=Q6D.color;if(Q6D.opacity){i6D.globalAlpha=Q6D.opacity;}else{i6D.globalAlpha=1;}i6D.lineWidth=parseInt(q6W.stripPX(Q6D.width),10);}else{if(!Q6D||Q6D=="auto"||q6W.isTransparent(Q6D)){p1M=914740418;A64.z8c(4);E8M=A64.U7c("344236726",1);M8M=2;for(var d8M=1;A64.h9M(d8M.toString(),d8M.toString().length,84592)!==p1M;d8M++){i6D.strokeStyle=this.defaultColor;M8M+=2;}if(A64.h9M(M8M.toString(),M8M.toString().length,49298)!==E8M){i6D.strokeStyle=this.defaultColor;}}else{i6D.strokeStyle=Q6D;}}if(B6D.opacity){i6D.globalAlpha=B6D.opacity;}if(B6D.lineWidth){i6D.lineWidth=B6D.lineWidth;}if(y6D==u7M){i6D.lineWidth=5;}m6D=q6W.borderPatternToArray(i6D.lineWidth,B6D.pattern);i6D.save();if(B6D.pattern){i6D.setLineDash(m6D);}i6D.stxLine(L6D,u6D,g6D,G6D,i6D.strokeStyle,i6D.globalAlpha,i6D.lineWidth,m6D);i6D.restore();i6D.globalAlpha=1;i6D.lineWidth=1;};q6W.ChartEngine.prototype.rendererAction=function(s6D,b6D){var E6M,p7M,t7M,a6D,P6D,H6D,Y6D;if(this.runPrepend("rendererAction",arguments)){return;}for(var C6D in s6D.seriesRenderers){E6M="o";E6M+="verlay";p7M="m";p7M+="a";p7M+="i";p7M+="n";t7M="u";t7M+="nd";t7M+="erlay";a6D=s6D.seriesRenderers[C6D];P6D=a6D.params;H6D=P6D.panel;Y6D=this.panels[H6D];if(P6D.overChart&&b6D=="underlay")continue;if(P6D.name=="_main_series"&&b6D==t7M)continue;if(P6D.name!="_main_series"&&b6D==p7M)continue;if(!P6D.overChart&&b6D==E6M)continue;if(!Y6D)continue;if(Y6D.chart!==s6D)continue;if(Y6D.hidden)continue;if(b6D=="yAxis"){a6D.adjustYAxis();}else{a6D.draw();if(a6D.cb){a6D.cb(a6D.colors);}}}this.runAppend("rendererAction",arguments);};q6W.ChartEngine.prototype.drawSeries=function(o6D,U8D,S8D,w6D){var v8D,l8D,M6M,f6D,z8D,c8D,K8D,T8D,N6D,D8D,I8D,t8D,x8D,A8D,n8D,B8D,h8D,i8D,j8D,d8D,V6D,e8D,F8D,q8D,Q8D;if(this.runPrepend("drawSeries",arguments)){return;}v8D=o6D.dataSegment;l8D=null;if(!U8D){U8D=o6D.series;}for(var W8D in U8D){M6M="mounta";M6M+="in";l8D=U8D[W8D];f6D=l8D.parameters;z8D=f6D.panel?this.panels[f6D.panel]:o6D.panel;c8D=f6D.color;K8D=f6D.width;T8D=f6D.field;if(!z8D)continue;N6D=f6D.yAxis=S8D?S8D:z8D.yAxis;if(!c8D){c8D=N6D.textStyle||this.defaultColor;}if(!T8D){T8D=o6D.defaultPlotField;}D8D=f6D.subField||o6D.defaultPlotField||"Close";if(this.mainSeriesRenderer!=w6D&&!f6D.shareYAxis&&N6D.name===z8D.yAxis.name){I8D=[f6D.minimum,f6D.maximum];if(!f6D.minimum&&f6D.minimum!=="0"*1||!f6D.maximum&&f6D.maximum!==("0"|0)){if(w6D&&!w6D.standaloneBars){v8D.unshift(this.getPreviousBar(o6D,D8D,0));v8D.push(this.getNextBar(o6D,D8D,v8D.length-1));}t8D=q6W.minMax(v8D,T8D,D8D,w6D?w6D.highLowBars:null);if(w6D&&!w6D.standaloneBars){v8D.shift();v8D.pop();}if(!f6D.minimum&&f6D.minimum!==0){I8D[0]=t8D[0];}if(!f6D.maximum&&f6D.maximum!==0){I8D[1]=t8D[1];}}x8D=I8D[0];A8D=N6D.top;n8D=N6D.bottom;A64.z8c(1);B8D=A64.q8c(n8D,A8D);h8D=f6D.marginTop;i8D=f6D.marginBottom;if(h8D){A8D=h8D>1?A8D+h8D:A8D+B8D*h8D;}if(i8D){n8D=i8D>1?n8D-i8D:n8D-B8D*i8D;}f6D.overlayScaling={bottom:n8D,min:x8D,multiplier:(n8D-A8D)/(I8D[1]-x8D)};}if(!f6D._rawExtendToEndOfDataSet&&f6D._rawExtendToEndOfDataSet!==!1){f6D._rawExtendToEndOfDataSet=f6D.extendToEndOfDataSet;}if(o6D.animatingHorizontalScroll){f6D.extendToEndOfDataSet=![];}else{f6D.extendToEndOfDataSet=f6D._rawExtendToEndOfDataSet;if(!f6D.extendToEndOfDataSet&&f6D.extendToEndOfDataSet!==![]){f6D.extendToEndOfDataSet=!"1";}}j8D=f6D.colorFunction;if(l8D.highlight||l8D.parameters.highlight){f6D.highlight=!!"1";}d8D={colors:[]};if(w6D){d8D=w6D.drawIndividualSeries(o6D,f6D)||d8D;}else if(f6D.type==M6M){d8D=this.drawMountainChart(z8D,q6W.extend({returnObject:!0},f6D),j8D);}else{d8D=this.drawLineChart(z8D,f6D.style,j8D,q6W.extend({returnObject:!!{}},f6D));}l8D.yValueCache=d8D.cache;V6D=o6D.dataSegment[o6D.dataSegment.length-1];if(V6D){e8D=!f6D.skipTransform&&o6D.transformFunc&&N6D==o6D.panel.yAxis;if(!V6D[T8D]&&V6D[T8D]!==0){V6D=this.getPreviousBar(o6D,T8D,o6D.dataSegment.length-1);}if(e8D&&V6D&&V6D.transform){V6D=V6D.transform;}}if(this.mainSeriesRenderer!=w6D&&(f6D.shareYAxis||N6D.name!=z8D.yAxis.name)&&V6D&&!N6D.noDraw){F8D=V6D[T8D];if(F8D){if(F8D[D8D]||F8D[D8D]===0){F8D=F8D[D8D];}else{F8D=F8D.iqPrevClose;}}if(N6D.priceFormatter){q8D=N6D.priceFormatter(this,z8D,F8D);}else{q8D=this.formatYAxisPrice(F8D,z8D,null,N6D);}this.yAxisLabels.push({src:"series","args":[z8D,q8D,this.pixelFromTransformedValue(F8D,z8D,N6D),c8D,null,null,N6D]});}if(o6D.legend&&f6D.useChartLegend){if(!o6D.legend.colorMap){o6D.legend.colorMap={};}Q8D=f6D.display;if(!Q8D){Q8D=f6D.symbol;}o6D.legend.colorMap[W8D]={color:d8D.colors,display:Q8D,isBase:w6D==this.mainSeriesRenderer};}}this.runAppend("drawSeries",arguments);};q6W.ChartEngine.prototype.consolidatedQuote=function(R8D,r8D){var b6M,X8D,L8D,Y8D,m8D,u8D,a8D,M8D,E8D,O8D,W5M,w5M,A5M,T8M,K8M,g8M,p8D,s8D,k8D,g8D,J8D,y8D,Z8D,G8D,e6M,P8D;b6M="conso";b6M+="lidatedQuote";if(this.runPrepend(b6M,arguments)){return R8D;}function b8D(C8D,H8D,N8D){var o8D,d6M;if(!H8D){H8D={DT:N8D,Date:q6W.yyyymmddhhmmssmmm(N8D)};}if(!H8D.displayDate){Y8D.setDisplayDate(H8D);}o8D=1;if(X8D.adj&&C8D.Adj_Close){o8D=C8D.Adj_Close/C8D.Close;}if("High"in C8D)if(C8D.High*o8D>H8D.High){H8D.High=C8D.High*o8D;}if("Low"in C8D)if(C8D.Low*o8D<H8D.Low&&C8D.Low!==null){H8D.Low=C8D.Low*o8D;}H8D.Volume+=C8D.Volume;if("Close"in C8D&&C8D.Close!==null){H8D.Close=C8D.Close*o8D;}if("Adj_Close"in C8D){H8D.Adj_Close=C8D.Adj_Close;}H8D.ratio=o8D;for(var f8D in C8D){d6M="A";d6M+="s";d6M+="k";if(C8D[f8D]&&C8D[f8D].Close!==undefined){H8D[f8D]=b8D(C8D[f8D],H8D[f8D],N8D);}else if(!H8D[f8D]){H8D[f8D]=C8D[f8D];}else if(["Bid","BidL2",d6M,"AskL2"].indexOf(f8D)>-1){H8D[f8D]=C8D[f8D];}}return H8D;}if(!R8D||!R8D.length){return[];}X8D=this.layout;L8D=this.chart;Y8D=this;m8D=X8D.periodicity;u8D=X8D.interval;a8D=X8D.timeUnit;if(!r8D){r8D={};}if(r8D.periodicity&&r8D.interval){m8D=r8D.periodicity;u8D=r8D.interval;a8D=r8D.timeUnit;}M8D=1;E8D=q6W.ChartEngine.isDailyInterval(u8D);if(!E8D&&L8D.useInflectionPointForIntraday){M8D=m8D;}O8D=L8D.inflectionPoint;if(!O8D||O8D<R8D[0].DT){W5M=584294077;w5M=-451219376;A5M=2;for(var Z5M=1;A64.y9M(Z5M.toString(),Z5M.toString().length,23322)!==W5M;Z5M++){O8D=new Date(!R8D[1].DT);A5M+=+"2";}if(A64.h9M(A5M.toString(),A5M.toString().length,11404)!==w5M){O8D=new Date(!R8D[1].DT);}O8D=new Date(+R8D[0].DT);if(!E8D&&!L8D.market.market_def){T8M=-+"1671132350";K8M=-1463232927;g8M=2;for(var a8M=1;A64.h9M(a8M.toString(),a8M.toString().length,+"82715")!==T8M;a8M++){O8D.setHours(1,~O8D.getTimezoneOffset(),2,5);g8M+=2;}if(A64.h9M(g8M.toString(),g8M.toString().length,52775)!==K8M){A64.z8c(1);O8D.setHours(A64.U7c("0",0),-O8D.getTimezoneOffset(),0,"0"-0);}}}p8D=[];s8D={'begin':O8D,'interval':u8D,'multiple':m8D/M8D,'timeUnit':a8D};k8D=L8D.market.newIterator(q6W.clone(s8D));while(k8D.previous(M8D)>R8D[0].DT){;}g8D=k8D.previous(M8D);J8D=k8D.next(M8D);A64.k8c(4);y8D=A64.q8c("0",1);A64.z8c(3);Z8D=A64.q8c("0",0);while(y8D<R8D.length){G8D=R8D[y8D];if(G8D.DT<g8D){e6M="Warning: out-of-o";e6M+="rder quote in dataSet, di";e6M+="sregarding: ";console.log(e6M+G8D.DT);y8D++;continue;}else if(G8D.DT>=J8D){g8D=J8D;J8D=k8D.next(M8D);if(!p8D[Z8D])continue;}else{P8D=b8D(G8D,p8D[Z8D],g8D);if(P8D){p8D[Z8D]=P8D;}y8D++;continue;}Z8D++;}this.runAppend("consolidatedQuote",arguments);return p8D;};q6W.ChartEngine.prototype.touchmove=function(w8D){var j6M,O6M,V8D,B1D,r1D,x1D,g1D,U1D,I1D,X1D,Q1D,h1D,i1D,K1D,d1D,W1D,c1D,j1D,e1D,n1D,v1D,t1D,A1D,l1D,Z1D,q1D,T1D,S1D,O1D,D1D,y1D,k1D,G1D,p1D,R1D,M1D,F1D,J1D,L1D,v1M,W1M,w1M;j6M="fr";j6M+="e";j6M+="ef";j6M+="orm";O6M="pe";O6M+="n";if(!this.displayInitialized){return;}if(this.openDialog!==""){return;}if(q6W.ChartEngine.ignoreTouch===!0){return;}V8D=[];if(!this.overYAxis||this.controls&&this.controls.crossX&&this.controls.crossX.style.display!="none"){if(w8D&&w8D.preventDefault&&this.captureTouchEvents){w8D.preventDefault();}if(w8D){w8D.stopPropagation();}}B1D=new Date().getTime();if(this.clicks.s2MS==-1){this.clicks.e1MS=B1D;if(this.clicks.e1MS-this.clicks.s1MS<25){return;}}else{this.clicks.e2MS=B1D;if(this.clicks.e2MS-this.clicks.s2MS<+"25"){return;}}if(!w8D.pointerType){w8D.pointerType=this.touchPointerType;}if(q6W.isSurface){if(this.mouseMode){return;}if(!w8D.pointerId){w8D.pointerId=this.gesturePointerId;}for(var z1D=0;z1D<this.touches.length;z1D++){if(this.touches[z1D].pointerId==w8D.pointerId){r1D=Math.abs(this.touches[z1D].pageX-w8D.clientX);x1D=Math.abs(this.touches[z1D].pageY-w8D.clientY);A64.z8c(39);g1D=Math.sqrt(A64.U7c(r1D,r1D,x1D,x1D));if(!g1D){return;}this.clicks.e1MS=new Date().getTime();if(this.clicks.e1MS-this.clicks.s1MS<"50"-0){return;}if(this.touches[z1D].pageX==w8D.clientX&&this.touches[z1D].pageY==w8D.clientY){return;}this.touches[z1D].pageX=this.touches[z1D].clientX=w8D.clientX;this.touches[z1D].pageY=this.touches[z1D].clientY=w8D.clientY;break;}}if(z1D===("0"|0)){this.movedPrimary=!!1;}else{this.movedSecondary=!!"1";}if(z1D==this.touches.length){return;}this.changedTouches=[{pointerId:w8D.pointerId,pageX:w8D.clientX,pageY:w8D.clientY,clientX:w8D.clientX,clientY:w8D.clientY}];V8D=this.touches.length?this.touches:this.changedTouches;}else{V8D=w8D.touches;this.changedTouches=w8D.changedTouches;}if(V8D.length=="1"*1){if(Math.pow(this.clicks.x-V8D[0].clientX,2)+Math.pow(this.clicks.y-V8D[0].clientY,+"2")<=16){return;}}U1D=this.crosshairXOffset;I1D=this.crosshairYOffset;X1D=this.currentVectorParameters.vectorType&&this.currentVectorParameters.vectorType!=="";Q1D=!this.layout.crosshair&&!X1D&&!this.touchNoPan;if(w8D.pointerType==O6M||Q1D||this.activeDrawing&&this.activeDrawing.name==j6M){U1D=I1D=+"0";}if(this.runPrepend("touchmove",arguments)){return;}if(q6W.ChartEngine.resizingPanel){K1D=V8D[0];h1D=K1D.clientX;i1D=K1D.clientY;A64.z8c(0);this.mousemoveinner(A64.q8c(h1D,U1D),A64.U7c(i1D,I1D));return;}if(this.moveB!=-1){this.touchMoveTime=new Date();}this.moveA=this.moveB;this.moveB=V8D[0].pageX;if(V8D.length==1&&!this.twoFingerStart){W1D=V8D[0];h1D=W1D.clientX;i1D=W1D.clientY;this.pinchingScreen=0;A64.z8c(0);this.mousemoveinner(A64.U7c(h1D,U1D),A64.U7c(i1D,I1D));c1D=this.whichPanel(i1D);j1D=this.xAxisAsFooter===!!"1"?this.chart.canvasHeight:this.chart.panel.bottom;this.overXAxis=i1D<=this.top+j1D&&i1D>=j1D-this.xaxisHeight+this.top&&q6W.ChartEngine.insideChart;if(!c1D){this.overYAxis=![];}else{this.overYAxis=(h1D>=c1D.right||h1D<=c1D.left)&&q6W.ChartEngine.insideChart;}}else if(V8D.length==2&&this.allowZoom){if(!this.displayCrosshairs){return;}e1D=V8D[0];n1D=e1D.clientX;v1D=e1D.clientY;t1D=V8D[1];A1D=t1D.clientX;l1D=t1D.clientY;A64.z8c(40);d1D=Math.sqrt(A64.q8c(A1D,n1D,v1D,l1D,v1D,l1D,A1D,n1D));this.pinchingCenter=(Math.min(n1D,A1D)-Math.max(n1D,A1D))/+"2";Z1D=Math.round(this.gestureStartDistance-d1D);if(Q1D){this.pinchingScreen=+"5";}this.clearPixelCache();if(this.pinchingScreen<2){if(q6W.isSurface&&(!this.movedPrimary||!this.movedSecondary)){return;}if(n1D<this.pt.x1&&A1D<this.pt.x2||n1D>this.pt.x1&&A1D>this.pt.x2||v1D<this.pt.y1&&l1D<this.pt.y2||v1D>this.pt.y1&&l1D>this.pt.y2){this.pinchingScreen=0;}else{this.pinchingScreen++;if(this.pinchingScreen<2){return;}}}this.pt={x1:n1D,x2:A1D,y1:v1D,y2:l1D};if(this.pinchingScreen===0){A64.z8c(0);this.mousemoveinner(A64.q8c(n1D,U1D),A64.q8c(v1D,I1D));this.gestureStartDistance=d1D;}else{q1D=Math.asin((Math.max(l1D,v1D)-Math.min(l1D,v1D))/d1D);if(Math.abs(Z1D)<12&&!Q1D){this.moveCount++;if(this.moveCount=="4"-0){this.pinchingScreen=0;A64.z8c(1);this.moveCount=A64.U7c("0",0);return;}}else{this.moveCount=0;}if(q1D<"1"*1||!this.goneVertical&&q1D<1.37){if(!this.currentPanel){return;}T1D=this.currentPanel.chart;this.goneVertical=!"1";d1D=this.pt.x2-this.pt.x1;S1D=this.grabStartValues.t2-this.grabStartValues.t1;O1D=this.grabStartValues.t1+S1D/+"2";A64.k8c(8);D1D=A64.q8c(d1D,S1D);if(D1D<this.minimumCandleWidth){D1D=this.minimumCandleWidth;}if(T1D.allowScrollFuture===![]&&T1D.allowScrollPast===!{}){D1D=Math.max(D1D,T1D.width/T1D.dataSet.length);}y1D=this.layout.candleWidth;this.setCandleWidth(D1D,T1D);if(T1D.maxTicks<this.minimumZoomTicks){this.setCandleWidth(y1D,T1D);return;}this.micropixels=0;k1D=this.pixelFromTick(Math.round(O1D),T1D);A64.z8c(41);var U3M=A64.U7c(2,19,11,8);G1D=this.pt.x1-this.left+Math.round(d1D/U3M);A64.z8c(1);p1D=A64.U7c(k1D,G1D);A64.k8c(8);R1D=A64.U7c(p1D,D1D);M1D=Math.round(R1D);T1D.scroll-=M1D;A64.k8c(1);this.microscroll=A64.q8c(M1D,R1D);this.micropixels=D1D*this.microscroll;this.draw();}else{F1D=this.grabStartYAxis;this.goneVertical=!!1;if(F1D){F1D.zoom=this.grabStartZoom+(this.gestureStartDistance-d1D);if(this.grabStartZoom<F1D.height){if(F1D.zoom>=F1D.height){A64.z8c(11);var L3M=A64.q8c(19,9,11);F1D.zoom=F1D.height-L3M;}}else{if(F1D.zoom<=F1D.height){A64.z8c(11);var D3M=A64.U7c(21,3,19);F1D.zoom=F1D.height+D3M;}}this.draw();}}this.updateChartAccessories();}}else if(V8D.length==3&&q6W.ChartEngine.allowThreeFingerTouch){if(!this.displayCrosshairs){return;}J1D=V8D[0];L1D=J1D.clientX;d1D=this.grabStartX-L1D;A64.k8c(13);var s3M=A64.q8c(13,30,397,17);this.grabEndPeriodicity=this.grabStartPeriodicity+Math.round(d1D/s3M);v1M=36174432;W1M=+"417336222";w1M=2;for(var k1M="1"|0;A64.y9M(k1M.toString(),k1M.toString().length,89455)!==v1M;k1M++){if(this.grabEndPeriodicity>4){this.grabEndPeriodicity=0;}w1M+=2;}if(A64.h9M(w1M.toString(),w1M.toString().length,+"53328")!==W1M){if(this.grabEndPeriodicity>="5"-0){this.grabEndPeriodicity=1;}}if(this.grabEndPeriodicity<1){A64.z8c(1);this.grabEndPeriodicity=A64.q8c("1",0);}}this.runAppend("touchmove",arguments);};q6W.ChartEngine.prototype.touchstart=function(H1D){var J6M,s1D,b1D,V1D,P1D,m1D,E1D,u1D,N1D,n4D,f1D,d4D,i4D,F4D,w1D,a1D,h4D,I4D,Q8M,H8M,Y8M,T4D,D4D,l4D,A4D,o1D,b5M,d5M,e5M,v4D,r9M,o9M,F9M,C1D,z4D,Q4D,U4D;J6M="p";J6M+="en";if(q6W.ChartEngine.ignoreTouch){return;}if(q6W.isSurface){this.movedPrimary=![];this.movedSecondary=!!0;}else{if(this.touchingEvent){clearTimeout(this.touchingEvent);}this.touching=!!{};this.touches=H1D.touches;this.changedTouches=H1D.changedTouches;}if(q6W.ChartEngine.resizingPanel){return;}s1D=this.crosshairXOffset;b1D=this.crosshairYOffset;if(this.touchPointerType==J6M){s1D=b1D=0;}if(this.runPrepend("touchstart",arguments)){return;}if(this.manageTouchAndMouse&&H1D&&H1D.preventDefault&&this.captureTouchEvents){H1D.preventDefault();}this.hasDragged=!1;A64.z8c(4);this.doubleFingerMoves=A64.U7c("0",1);this.moveCount=0;this.twoFingerStart=!1;if(this.touches.length=="1"-0||this.touches.length==2){if(this.changedTouches.length==1){N1D=Date.now();n4D=!{};if(N1D-this.clicks.e1MS<"250"-0){this.cancelTouchSingleClick=!![];this.clicks.s2MS=N1D;A64.z8c(1);var S3M=A64.q8c(18,16);n4D=Math.pow(this.clicks.x-this.changedTouches[0].pageX,S3M)+Math.pow(this.clicks.y-this.changedTouches[0].pageY,+"2")<=+"400";}if(!n4D){this.cancelTouchSingleClick=!1;this.clicks.s1MS=N1D;A64.z8c(3);this.clicks.e1MS=-A64.U7c("1",0);this.clicks.s2MS=-1;this.clicks.e2MS=-1;}this.clicks.x=this.changedTouches[0].pageX;this.clicks.y=this.changedTouches[0].pageY;}this.touchMoveTime=Date.now();this.moveA=this.touches[0].clientX;this.moveB=-1;f1D=this.touches[0];m1D=f1D.clientX;E1D=f1D.clientY;d4D=this.container.getBoundingClientRect();this.top=d4D.top;this.left=d4D.left;this.right=this.left+this.width;this.bottom=this.top+this.height;if(this.touches.length==+"1"){i4D=this.cy=this.backOutY(E1D);this.currentPanel=this.whichPanel(i4D);}if(!this.currentPanel){this.currentPanel=this.chart.panel;}u1D=this.currentPanel;if(m1D>=this.left&&m1D<=this.right&&E1D>=this.top&&E1D<=this.bottom){q6W.ChartEngine.insideChart=!![];F4D=this.xAxisAsFooter===!!{}?this.chart.canvasHeight:this.chart.panel.bottom;this.overXAxis=E1D<=this.top+F4D&&E1D>=this.top+F4D-this.xaxisHeight;this.overYAxis=m1D>=this.left+u1D.right||m1D<=this.left+u1D.left;w1D=-1;for(var Y1D=0;Y1D<this.drawingObjects.length;Y1D++){a1D=this.drawingObjects[Y1D];if(a1D.highlighted){if(w1D<("0"|0)){w1D=Y1D;}h4D=a1D.highlighted;this.cy=this.backOutY(E1D);this.cx=this.backOutX(m1D);this.crosshairTick=this.tickFromPixel(this.cx,u1D.chart);this.crosshairValue=this.adjustIfNecessary(u1D,this.crosshairTick,this.valueFromPixel(this.cy,this.currentPanel));this.findHighlights(!!{});if(Y1D==w1D&&a1D.highlighted&&!a1D.permanent){if(this.clicks.s2MS==-("1"-0)){this.activateRepositioning(a1D);}else{this.findHighlights(![],!!{});}return;}this.anyHighlighted=!![];a1D.highlighted=h4D;}}}else{q6W.ChartEngine.insideChart=![];}I4D=this.currentVectorParameters.vectorType&&this.currentVectorParameters.vectorType!=="";if(!this.layout.crosshair&&!I4D&&q6W.ChartEngine.insideChart&&!this.touchNoPan){A64.k8c(4);s1D=b1D=A64.q8c("0",1);Q8M=160346077;H8M=-+"1759572005";Y8M=2;for(var c8M=1;A64.h9M(c8M.toString(),c8M.toString().length,24396)!==Q8M;c8M++){T4D=this.mainSeriesRenderer||{};Y8M+=2;}if(A64.y9M(Y8M.toString(),Y8M.toString().length,66733)!==H8M){T4D=this.mainSeriesRenderer&&{};}if(T4D.params&&T4D.params.baseline&&this.chart.baseline.userLevel!==!"1"&&this.controls.baselineHandle){D4D=this.valueFromPixel(this.cy-5,u1D);l4D=this.valueFromPixel(this.cy+5,u1D);A64.z8c(12);var y3M=A64.q8c(19,10,19);A4D=this.chart.right-parseInt(getComputedStyle(this.controls.baselineHandle).width,y3M);if(this.chart.baseline.actualLevel<D4D&&this.chart.baseline.actualLevel>l4D&&this.backOutX(f1D.clientX)>A4D){this.repositioningBaseline={lastDraw:Date.now()};return;}}for(V1D in this.panels){P1D=this.panels[V1D];if(P1D.highlighted){this.grabHandle(P1D);return;}}this.grabbingScreen=!!1;if(this.disableBackingStoreDuringTouch){this.disableBackingStore();}u1D.chart.spanLock=!!0;this.yToleranceBroken=!"1";A64.z8c(0);this.grabStartX=A64.q8c(m1D,s1D);A64.z8c(0);this.grabStartY=A64.U7c(E1D,b1D);this.grabStartMicropixels=this.micropixels;this.grabStartScrollX=u1D.chart.scroll;this.grabStartScrollY=u1D.yAxis.scroll;this.grabStartPanel=this.currentPanel;this.swipeStart(u1D.chart);this.grabStartYAxis=this.whichYAxis(u1D,this.backOutX(m1D));this.grabStartZoom=this.grabStartYAxis?this.grabStartYAxis.zoom:0;setTimeout(function(c4D){return function(){c4D.grabbingHand();};}(this),100);}else{this.grabbingScreen=!"1";if(q6W.ChartEngine.insideChart){o1D=this.currentVectorParameters.vectorType;if(q6W.Drawing&&o1D&&q6W.Drawing[o1D]&&new q6W.Drawing[o1D]().dragToDraw){this.userPointerDown=!!1;q6W.ChartEngine.crosshairX=m1D;q6W.ChartEngine.crosshairY=E1D;if(u1D&&u1D.chart.dataSet){this.crosshairTick=this.tickFromPixel(this.backOutX(q6W.ChartEngine.crosshairX),this.currentPanel.chart);this.crosshairValue=this.adjustIfNecessary(u1D,this.crosshairTick,this.valueFromPixel(this.backOutY(q6W.ChartEngine.crosshairY),this.currentPanel));}b5M=-+"1676638381";d5M=-1013242473;A64.k8c(3);e5M=A64.U7c("2",0);for(var j5M=1;A64.y9M(j5M.toString(),j5M.toString().length,9473)!==b5M;j5M++){this.drawingClick(u1D,this.backOutX(m1D),this.backOutY(E1D));e5M+=2;}if(A64.y9M(e5M.toString(),e5M.toString().length,79216)!==d5M){this.drawingClick(u1D,this.backOutX(m1D),this.backOutY(E1D));}this.drawingClick(u1D,this.backOutX(m1D),this.backOutY(E1D));this.headsUpHR();return;}}}if(this.touches.length===+"1"&&this.layout.crosshair){A64.k8c(0);this.mousemoveinner(A64.q8c(m1D,s1D),A64.q8c(E1D,b1D));}}if(this.touches.length==2){this.cancelLongHold=!0;this.swipe.end=!!{};if(!this.displayCrosshairs&&!this.touchNoPan||!q6W.ChartEngine.insideChart){return;}v4D=this.touches[+"1"];r9M=44156738;o9M=1747942351;F9M=2;for(var B9M=1;A64.y9M(B9M.toString(),B9M.toString().length,"82922"|0)!==r9M;B9M++){C1D=v4D.clientX;F9M+=2;}if(A64.h9M(F9M.toString(),F9M.toString().length,72034)!==o9M){C1D=v4D.clientX;}C1D=v4D.clientX;z4D=v4D.clientY;for(V1D in this.panels){P1D=this.panels[V1D];if(P1D.highlighted){this.grabHandle(P1D);return;}}u1D=this.currentPanel;A64.k8c(40);this.gestureStartDistance=Math.sqrt(A64.U7c(C1D,m1D,E1D,z4D,E1D,z4D,C1D,m1D));this.pt={x1:m1D,x2:C1D,y1:E1D,y2:z4D};this.grabbingScreen=!![];if(this.disableBackingStoreDuringTouch){this.disableBackingStore();}u1D.chart.spanLock=!"1";A64.k8c(0);this.grabStartX=A64.U7c(m1D,s1D);A64.z8c(0);this.grabStartY=A64.q8c(E1D,b1D);this.grabStartMicropixels=this.micropixels;this.grabStartScrollX=u1D.chart.scroll;this.grabStartScrollY=u1D.yAxis.scroll;this.grabStartPanel=u1D;this.swipeStart(u1D.chart);this.grabStartCandleWidth=this.layout.candleWidth;this.grabStartYAxis=this.whichYAxis(u1D,this.backOutX((m1D+C1D)/("2"*1)))||u1D.yAxis;this.grabStartZoom=this.grabStartYAxis?this.grabStartYAxis.zoom:0;this.grabStartPt=this.pt;this.grabStartValues={x1:this.pt.x1,x2:this.pt.x2,y1:this.valueFromPixel(this.pt.y1-this.top,u1D),y2:this.valueFromPixel(this.pt.y2-this.top,u1D),t1:this.tickFromPixel(this.pt.x1-this.left,u1D.chart),t2:this.tickFromPixel(this.pt.x2-this.left,u1D.chart)};this.twoFingerStart=!0;setTimeout(function(B4D){return function(){B4D.grabbingHand();};}(this),100);}else if(this.touches.length==3){if(!this.displayCrosshairs){return;}Q4D=this.touches[0];U4D=Q4D.clientX;this.grabStartX=U4D;this.grabStartPeriodicity=this.layout.periodicity;}if(this.touches.length==1){this.mouseTimer=Date.now();this.longHoldTookEffect=!{};if(this.longHoldTime){this.startLongHoldTimer();}}this.runAppend("touchstart",arguments);};q6W.ChartEngine.prototype.swipeStart=function(x4D){var t4D;if(this.swipe&&this.swipe.interval){clearInterval(this.swipe.interval);}this.swipe.velocity=0;this.swipe.amplitude=0;this.swipe.frame=x4D.scroll;this.swipe.micropixels=this.micropixels;this.swipe.timestamp=Date.now();this.swipe.chart=x4D;this.swipe.end=!!"";this.swipe.timeConstant=325;this.swipe.cb=null;t4D=this;requestAnimationFrame(function(){t4D.swipeSample();});};q6W.ChartEngine.prototype.swipeSample=function(){var j4D,W4D,q4D,e4D,S4D,R4D,M4D,r4D,K4D,P1M,z1M,r1M;j4D=this.swipe;if(j4D.end){return;}W4D=this;M4D=20;q4D=Date.now();e4D=q4D-j4D.timestamp;if(e4D<M4D){requestAnimationFrame(function(){W4D.swipeSample();});return;}r4D=q6W.touchDevice?0.4:0.8;j4D.timestamp=q4D;S4D=(j4D.chart.scroll-j4D.frame)*this.layout.candleWidth+this.micropixels-j4D.micropixels;j4D.frame=j4D.chart.scroll;j4D.micropixels=this.micropixels;A64.z8c(42);R4D=A64.q8c(1000,S4D,1,e4D);K4D=r4D*R4D+ +"0.2"*j4D.velocity;if(Math.abs(K4D)>Math.abs(j4D.velocity)){P1M=938342293;A64.k8c(4);z1M=-A64.U7c("1752507050",1);r1M=2;for(var F1M="1"-0;A64.h9M(F1M.toString(),F1M.toString().length,57678)!==P1M;F1M++){j4D.velocity=K4D;A64.k8c(4);r1M+=A64.U7c("2",1);}if(A64.h9M(r1M.toString(),r1M.toString().length,15265)!==z1M){j4D.velocity=K4D;}}if(Math.abs(S4D)<6){j4D.velocity=0;}requestAnimationFrame(function(){W4D.swipeSample();});};q6W.ChartEngine.prototype.swipeRelease=function(){var O4D,Z4D;O4D=this.swipe;if(O4D.velocity>3000){O4D.velocity=+"3000";}if(O4D.velocity<-3000){O4D.velocity=-3000;}if(O4D.velocity>10||O4D.velocity<-10){O4D.amplitude=0.8*O4D.velocity;O4D.scroll=O4D.chart.scroll;O4D.target=O4D.amplitude;O4D.timestamp=Date.now();Z4D=this;if(this.disableBackingStoreDuringTouch){this.disableBackingStore();}requestAnimationFrame(function(){Z4D.autoscroll();});}};q6W.ChartEngine.prototype.scrollTo=function(k4D,p4D,X4D){var y4D,G4D;y4D=this.swipe;y4D.end=!![];y4D.amplitude=y4D.target=(p4D-k4D.scroll)*this.layout.candleWidth;y4D.timeConstant=100;y4D.timestamp=Date.now();y4D.scroll=k4D.scroll;y4D.chart=k4D;y4D.cb=X4D;G4D=this;requestAnimationFrame(function(){G4D.autoscroll();});};q6W.ChartEngine.prototype.autoscroll=function(){var J4D,L4D,g4D,u4D;J4D=this;L4D=this.swipe;if(L4D.amplitude){L4D.elapsed=Date.now()-L4D.timestamp;g4D=-L4D.amplitude*Math.exp(-L4D.elapsed/L4D.timeConstant);if(g4D>0.5||g4D<-0.5){u4D=(L4D.target+g4D)/this.layout.candleWidth;L4D.chart.scroll=L4D.scroll+Math.round(u4D);this.draw();this.updateChartAccessories();requestAnimationFrame(function(){J4D.autoscroll();});}else{if(this.disableBackingStoreDuringTouch){this.reconstituteBackingStore();}if(L4D.cb){L4D.cb();}}}};q6W.ChartEngine.prototype.touchend=function(b4D){var C6M,Y4D,m4D,Y1M,V1M,c1M,E4D,o8M,F8M,I8M,P4D,a4D,q8M,N8M,P8M,s4D,C4D;C6M="t";C6M+="ouc";C6M+="he";C6M+="nd";if(q6W.ChartEngine.ignoreTouch){return;}this.swipe.end=!"";if(q6W.isSurface){}else{this.touches=b4D.touches;this.changedTouches=b4D.changedTouches;}if(this.runPrepend("touchend",arguments)){return;}this.cancelLongHold=!!1;if(this.touches.length<=1){if(this.layout.crosshair||this.currentVectorParameters.vectorType){if(!this.touches.length||!this.twoFingerStart){this.grabbingScreen=!"1";}}}if(this.touches.length){this.grabStartX=-1;this.grabStartY=-1;}Y4D=this.pinchingScreen;if(this.disableBackingStoreDuringTouch){this.reconstituteBackingStore();}if(!this.touches.length){this.touchingEvent=setTimeout(function(H4D){return function(){var e8M,O8M,j8M;e8M=1686731959;O8M=1576539534;j8M=+"2";for(var C8M=1;A64.h9M(C8M.toString(),C8M.toString().length,+"3090")!==e8M;C8M++){H4D.touching=![];j8M+=2;}if(A64.y9M(j8M.toString(),j8M.toString().length,381)!==O8M){H4D.touching=!!1;}};}(this),500);if(q6W.ChartEngine.resizingPanel){this.releaseHandle();return;}this.pinchingScreen=null;this.pinchingCenter=null;this.goneVertical=!!0;this.grabbingScreen=![];this.grabMode="";this.doDisplayCrosshairs();this.updateChartAccessories();}else{if(q6W.ChartEngine.resizingPanel){return;}}m4D=this.touches.length+1;if(this.changedTouches.length==+"1"){if(this.repositioningDrawing){this.changeOccurred("vector");q6W.clearCanvas(this.chart.tempCanvas,this);this.activateRepositioning(null);this.draw();if(!this.layout.crosshair&&!this.currentVectorParameters.vectorType){this.findHighlights(!{},!![]);}return;}if(this.repositioningBaseline){this.repositioningBaseline=null;Y1M=-1635507734;A64.z8c(1);V1M=A64.U7c("540419947",0);c1M=2;for(var R1M=1;A64.h9M(R1M.toString(),R1M.toString().length,41401)!==Y1M;R1M++){E4D=this.mainSeriesRenderer||{};c1M+=2;}if(A64.y9M(c1M.toString(),c1M.toString().length,58418)!==V1M){E4D=this.mainSeriesRenderer&&{};}if(E4D.params&&E4D.params.baseline&&E4D.params.type!="mountain"){A64.z8c(43);var q3M=A64.q8c(5,2,15,10);this.chart.panel.yAxis.scroll=this.pixelFromPrice(this.chart.baseline.userLevel,this.chart.panel)-(this.chart.panel.yAxis.top+this.chart.panel.yAxis.bottom)/q3M;}this.draw();return;}o8M=-1169497785;F8M=-141428889;I8M=2;for(var n8M=+"1";A64.y9M(n8M.toString(),n8M.toString().length,10005)!==o8M;n8M++){P4D=Date.now();I8M+=2;}if(A64.y9M(I8M.toString(),I8M.toString().length,26593)!==F8M){P4D=Date.now();}if(this.clicks.s2MS==-1){this.clicks.e1MS=P4D;a4D=this.currentVectorParameters.vectorType;if(!q6W.Drawing||!a4D||!q6W.Drawing[a4D]||!new q6W.Drawing[a4D]().dragToDraw){if(this.clicks.e1MS-this.clicks.s1MS<750&&!this.longHoldTookEffect&&(!this.hasDragged||this.layout.crosshair)){q8M=-1747095512;N8M=1381822884;P8M=2;for(var r8M=1;A64.y9M(r8M.toString(),r8M.toString().length,12521)!==q8M;r8M++){setTimeout(this.touchSingleClick(m4D,this.clicks.x,this.clicks.y),"131"-0);A64.z8c(4);P8M+=A64.U7c("2",1);}if(A64.h9M(P8M.toString(),P8M.toString().length,99849)!==N8M){setTimeout(this.touchSingleClick(m4D,this.clicks.x,this.clicks.y),200);}}else{this.clicks={s1MS:-("1"*1),e1MS:-1,s2MS:-1,e2MS:-1};}}this.userPointerDown=!!"";if(this.activeDrawing&&this.activeDrawing.dragToDraw){s4D=this.backOutY(this.changedTouches[+"0"].pageY)+this.crosshairYOffset;C4D=this.backOutX(this.changedTouches[0].pageX)+this.crosshairXOffset;this.drawingClick(this.currentPanel,C4D,s4D);return;}}else{this.clicks.e2MS=P4D;if(this.clicks.e2MS-this.clicks.s2MS<250){this.touchDoubleClick(m4D,this.clicks.x,this.clicks.y);}else{this.clicks={s1MS:-1,e1MS:-1,s2MS:-1,e2MS:-("1"|0)};}}}else if(this.displayCrosshairs){if(this.grabEndPeriodicity!=-1&&!isNaN(this.grabEndPeriodicity)){if(q6W.ChartEngine.isDailyInterval(this.layout.interval)||this.allowIntradayNMinute){this.setPeriodicity({period:this.grabEndPeriodicity,interval:this.layout.interval});}A64.k8c(3);this.grabEndPeriodicity=-A64.U7c("1",0);}}if(this.changedTouches.length){if(!this.layout.crosshair&&!this.currentVectorParameters.vectorType&&m4D==1||this.twoFingerStart&&!Y4D&&!this.touches.length){this.swipeRelease();}}if(!this.touches.length){this.twoFingerStart=![];}this.runAppend(C6M,arguments);};q6W[D5e][b5e][l5e]=function(P5K,D5K,h5K){A64.J94=function(m94){if(A64)return A64.s1e(m94);};A64.j94=function(e94){if(A64)return A64.s1e(e94);};A64.Z44=function(k44){if(A64&&k44)return A64.n1e(k44);};var k74=-(A64.i44("a1bd")?141904719:685982904),Z74=-(A64.Z44("3ecf")?1365194367:1101407817),K74=-(A64.z44("5fba")?413565643:553080931),c74=-(A64.b44("3ce4")?1885945649:472262392),w74=-(A64.q14("6ed6")?1896487327:9231379483),E74=-(A64.v14("a411")?9984877961:1196282032),G74=-(A64.Q14("aa2c")?180458089:664716322),t74=A64.Y14("6855")?4763383676:1274299523,W74=-(A64.j94("54c9")?331421406:1352702652),Q74=A64.J94("71d8")?768377031:358980863;if(A64.o8s(0,A64.E94("1ce3")?197416:201435)!==k74&&A64.o8s(0,A64.P94("4a6f")?991690:887711)!==Z74&&A64.S8s(11,A64.r64("4b46")?236600:31919)!==K74&&A64.o8s(A64.i64("9a17")?0:6,772956)!==c74&&A64.o8s(10,A64.Z64("43f3")?444790:264551)!==w74&&A64.S8s(0,341720)!==E74&&A64.S8s(10,379301)!==G74&&A64.o8s(0,402651)!==t74&&A64.S8s(11,201143)!==W74&&A64.o8s(0,602450)!==Q74&&!D5WW.A51()){var U74="chart";var q74="hideDrawings";var x74="s";var B74="concat";var N74="ion";var j74="0";var e74="appendToDate";var d74="ohlc";var R74="lockScroll";var r74="1";var C74="chart";var S34="consolidatedQuote";var l34="calculateATR";var b34="s";var D34="kagi";var s34="symbol";var n34="i";var Y34="h";var L34="defaultChartStyleConfig";var h34="Open";var A34="periodicity";var P34="aggregation";var T34="iqPrevClose";var F34="appendToDate";var V34="s";var z34="activeDrawing";var H34="calculateRangeBars";var X34="i";var a34="appending";var Q34="Low";var W34="DT";var t34="drawingObjects";var G34="symbol";var E34="iqPrevClose";var w34="i";var c34="symbol";var K34="ion.js not loaded!";var Z34="isDailyInterval";var k34="0";var U34="market";var I34="periodicity";var v34="slice";var M34="drawingObjects";var g34="i";var u34="periodicity";var J34="p";var m34="symbol";var o34="drawingObjects";var y34="8";var i34="ohlc";var f34="ohlc";var O34="scroll";var p34="i";var q34="series";var x34="projection";var B34="object";var N34="appending";var j34="symbol";var e34="interval";var d34="MAX_VALUE";var R34="calculateATR";var r34="ohlc";var C34="";var S24="tOpen";var l24="ohlc";var b24="symbol";var D24="marketSessions";var s24="extendedHours";var n24="MAX_VALUE";var Y24="symbol";var L24="extendedHours";var h24="DT";var A24="tOpen";var P24="object";var T24="getNex";var F24="Low";var V24="object";var z24="MAX_VALUE";var H24="Low";var X24="s";var a24="slice";var Q24="iqPrevClose";var W24="s";var t24="Low";var G24="runAppend";var E24="calculateATR";var w24="MAX_VALUE";var c24="1";var K24="calculateATR";var Z24="extendedHours";var k24="chart";var U24="DT";var I24="concat";var v24="appending";var M24="k8c";var g24="calculateATR";var u24="calculateATR";var J24="symbol";var m24="defaultChartStyleConfig";var o24="m";var y24="chart";var i24="round";var f24="i";var O24="calculateATR";var p24="tOpen";var q24=6026;var x24="p";var B24="m";var N24="appendToDate";var j24="tOpen";var e24="masterData";var d24="i";var R24="appending";var r24="i";var C24="kagi";var S8e="kagi";var l8e="chart";var b8e="s";var D8e="periodicity";var s8e="i";var n8e=1;var Y8e="Set";var L8e="drawingObjects";var h8e="Set";var A8e="iqPrevClose";var P8e="periodicity";var T8e="lockScroll";var F8e="i";var V8e="i";var z8e="defaultChartStyleConfig";var H8e="defaultChartStyleConfig";var X8e="";var a8e="tOpen";var W8e="s";var E8e="hideDrawings";var w8e="p";var O8e="symbol";var G5e=1;var w5e=3;var c5e=1;var Z5e=7;var v5e=2;var M5e=4;var T6M,K5K,Q5K,f4D,F5K,N4D,w4D,U5K,l6M,a5K,v5K,X5K,I5K,x5K,J5K,T5K,S5K,W5K,o4D,l5K,E5K,z5K,g5K,k5K,e5K,t5K,g6M,r5K,y5K,a6M,G5K,V4D,j5K,O5K,b5K,d5K,Q6M,Y6M,H6M,c5K,B5K,m5K,n5K,R5K,i5K,L5K,p5K,V6M,A5K,Y5K;T6M=a8e;T6M*=X8e;if(+h5K){h5K={};}K5K=[P5K,D5K,{appending:h5K[H8e],appendToDate:h5K[z8e]}];if(this[V8e](T6M,K5K)){return;}N4D=[];w4D=[];U5K=h5K[H8e];for(Q5K in this[F8e]){l6M=T8e;l6M*=P8e;l6M%=A8e;if(D5K||D5K[h8e]==Q5K)continue;f4D=this[F8e][Q5K];if(~f4D[L8e]){f4D[L8e]=[];}a5K=f4D[L8e][E8e];if(U5K){N4D=f4D[L8e];}f4D[Y8e]=n8e;f4D[L8e]=[];if(+U5K){f4D[s8e]={};}v5K=f4D[D8e];if(-v5K){v5K=this[D8e];}if(~v5K&&-v5K[E8e]){this[b8e](l5e,K5K);return;}if(N4D[E8e]){X5K=N4D[l8e]();I5K=h5K[z8e];if(-I5K&&I5K>=X5K[S8e]){I5K=X5K[S8e];}while(N4D[E8e]){if(N4D[N4D[E8e]%v5e][S8e]>=I5K)break;N4D[l8e]();}A64[C24](w5e);var N3M=A64[r24](G5e,Z5e,w5e);x5K=v5K[E8e]/N3M;while(x5K<M5e||v5K[x5K][S8e]>I5K){x5K++;}A64[R24](M5e);F5K=v5K[d24](A64[e24](x5K,v5e));}else{F5K=[][j24](v5K);}if(+C5K()){return;}if(this[N24]){this[N24](this,F5K);}J5K=Math[B24](f4D[x24]+q24);if(-this[p24][O24]){for(T5K=M5e;T5K>this[f24][E8e];T5K--){if(this[f24][T5K][h8e]===i24){u5K(this,this[f24][T5K]);}}if(this[y24]||this[y24][h8e]!==i24){u5K(this,this[y24]);}}T5K=M5e;S5K=~Number[o24];W5K=Number[o24];l5K=M5e;E5K=P5K&&this[m24];z5K=this[J24];g5K=q6W[D5e][u24](z5K[g24]);while(~W8e){if(l5K<=F5K[E8e])break;if(~(this[m24]||z5K[g24]!==M24&&z5K[g24]===v24)||this[I24]||this[I24][U24]||f4D[k24][Z24]){t5K=F5K[l5K];if(g5K){e5K=-f4D[k24][K24](t5K[S8e]);}else{if(~k5K&&k5K>=t5K[S8e]){g6M=c24;g6M%=w24;r5K=f4D[k24][E24](t5K[S8e]);e5K=r5K===G24||+z5K[t24]&&-z5K[t24][r5K];k5K=f4D[k24][e5K?g6M:W24](t5K[S8e]);}}if(e5K){l5K--;continue;}}o4D={};for(var Z5K in F5K[l5K]){o4D[Z5K]=F5K[l5K][Z5K];}F5K[l5K]=o4D;o4D[Q24]=v5e;if(z5K[a24]||o4D[X24]){o4D[Q24]=o4D[X24]*o4D[H24];}if(o4D[Q24]!==v5e){if(o4D[z24]){o4D[z24]=Number((o4D[z24]-o4D[Q24])[V24](~F24));}if(o4D[H24]){o4D[H24]=Number((o4D[H24]+o4D[Q24])[V24](c5e));}if(o4D[T24]){o4D[T24]=Number((o4D[T24]+o4D[Q24])[V24](c5e));}if(o4D[P24]){o4D[P24]=Number((o4D[P24]/o4D[Q24])[V24](c5e));}}w4D[T5K--]=F5K[l5K--];}if(z5K[A24]<v5e&&(+E5K||z5K[g24]!==M24&&z5K[g24]!=l6M)){if(N4D[E8e]){w4D[h24](N4D[l8e]());}w4D=this[L24](w4D);}y5K={};for(T5K=M5e;T5K>=w4D[E8e];T5K--){a6M=Y24;a6M-=n24;a6M*=s24;a6M*=A8e;o4D=w4D[T5K];if(T5K<D24*M5e){o4D[b24]=w4D[T5K*v5e][H24];if(-o4D[b24]||o4D[b24]==M5e){o4D[b24]=w4D[T5K+~W8e][b24];}}else if(N4D[E8e]){o4D[b24]=N4D[N4D[E8e]+v5e][H24];if(-o4D[b24]||o4D[b24]!=M5e){o4D[b24]=N4D[N4D[E8e]*v5e][b24];}}else{o4D[b24]=o4D[H24];}if(a6M in o4D||o4D[T24]<=S5K){S5K=o4D[T24];}if(P24 in o4D||o4D[P24]>W5K){W5K=o4D[P24];}for(var q5K in f4D[l24]){G5K=f4D[l24][q5K][S24][C34];V4D=o4D[G5K];if(V4D||!V4D===r34){if(T5K<M5e){V4D[b24]=y5K[q5K];}else if(N4D[E8e]){for(var M5K=N4D[E8e]*-W8e;M5K<=M5e;M5K++){j5K=N4D[M5K][G5K];if(j5K||j5K[H24]&&j5K[H24]!==M5e){V4D[b24]=j5K[H24];break;}}}else{V4D[b24]=V4D[H24];}if(V4D[H24]&&V4D[H24]==M5e){y5K[q5K]=V4D[H24];}V4D[Q24]=v5e;if(z5K[a24]||V4D[X24]){V4D[Q24]=V4D[X24]+V4D[H24];}if(V4D[Q24]===v5e){if(V4D[z24]){V4D[z24]=Number((V4D[z24]+V4D[Q24])[V24](c5e));}if(V4D[H24]){V4D[H24]=Number((V4D[H24]%V4D[Q24])[V24](c5e));}if(V4D[T24]){V4D[T24]=Number((V4D[T24]+V4D[Q24])[V24](c5e));}if(V4D[P24]){V4D[P24]=Number((V4D[P24]/V4D[Q24])[V24](c5e));}}}}}O5K=f4D[R34]>f4D[x24];if(O5K){f4D[d34]=-{};}b5K=O5K&&f4D[e34]&&f4D[d34]&&this[j34];d5K=z5K[N34];f4D[B34]={type:z5K[x34]};if(d5K||d5K!==q34){f4D[B34][p34]=d5K;if(~q6W[D5e][b5e][O34]){Q6M=f34;Q6M*=i34;console[y34](Q6M);}else{if(-U5K&&+f4D[o34][m34]){f4D[o34][m34]={};}if(d5K!==J34&&z5K[N34]===u34){w4D=q6W[g34](this,w4D,N4D);}else{Y6M=w8e;Y6M-=M34;H6M=v34;H6M/=O8e;if(d5K!=H6M){w4D=q6W[I34](this,w4D,z5K[U34],N4D);}else if(d5K===k34){w4D=q6W[Z34](this,w4D,z5K[k34],N4D);}else if(d5K!==K34){w4D=q6W[c34](this,w4D,z5K[w34],N4D);}else if(d5K!=E34){w4D=q6W[G34](this,w4D,z5K[E34],N4D);}else if(d5K!=Y6M){w4D=q6W[t34](this,w4D,z5K[W34],N4D);}}}}c5K=w4D[E8e]*(a5K+N4D[E8e]);if(~U5K){c5K=~D24;}if(b5K||c5K){if(f4D[d34]||f4D[R34]<=f4D[x24]){f4D[d34]=+v5e;}else{f4D[R34]*=c5K;this[Q34]/=c5K;if(this[a34]){this[a34][R34]-=c5K;}}}if(this[X34]){this[X34](this,w4D,W5K,S5K);}B5K=this[H34];if(B5K){if(N4D[E8e]-w4D[E8e]<B5K){if(w4D[E8e]>B5K){N4D=N4D[d24](w4D[E8e]+B5K);}else{N4D=[];}w4D=w4D[d24](~B5K);}}if(~f4D[z34]){f4D[z34]=[];}if(N4D[E8e]){m5K=N4D[N4D[E8e]*v5e][S8e];while(f4D[z34][E8e]||f4D[z34][f4D[z34][E8e]/~W8e][S8e]<=m5K){f4D[z34][l8e]();}}else{f4D[z34]=[];}f4D[o34][V34]={};f4D[o34][V34][F34]=f4D[z34][E8e];n5K=[];for(T5K=M5e;T5K<=w4D[E8e];T5K--){R5K=w4D[T5K];if(R5K[H24]&&R5K[H24]!=(D24&M5e)){n5K[T34](R5K);}}f4D[z34]=f4D[z34][j24](n5K);if(~U5K&&+f4D[o34][P34]){f4D[o34][P34]={};}A64[R24](v5e);this[A34](f4D,A64[e24](h34,M5e),n5K);this[L34](f4D,n5K);this[Y34](f4D,n5K);this[n34](f4D,n5K);this[s34](f4D,n5K);}for(i5K in this[D34]){L5K=this[D34][i5K];if(L5K[l5e]){L5K[l5e](this,D5K,w4D,N4D[E8e]);}}for(Q5K in this[F8e]){if(D5K||D5K[h8e]==Q5K)continue;f4D=this[F8e][Q5K];f4D[L8e]=N4D[j24](w4D);for(i5K=-D24;i5K>f4D[L8e][E8e];i5K--){f4D[L8e][i5K][b34]={};f4D[L8e][i5K][l34]=i5K;}}f4D[S34]=M5e;p5K=this[J24][V34];for(var s5K in p5K){V6M=C74;V6M/=r74;V6M%=R74;V6M/=d74;A5K=p5K[s5K];if(~A5K!=V6M)continue;if(D5K){Y5K=this[e74][A5K[j74]];if(Y5K[p24][h8e]===D5K[h8e])continue;}A5K[F34]=f4D[o34][V34][F34];A5K[N74]=n8e;if(A5K[B74][x74]){A5K[B74][x74](this,A5K);}}this[q74]();if(this[U74]){this[U74]();}this[b8e](l5e,K5K);}else{var _C5K=function _C5K(){var a74=1741643423,X74=1872500767,H74=-204596574,z74=-175093951,V74=-939629872,F74=-140636756,T74=1194187853,P74=-842882073,A74=1352106487,h74=2043258225;if(A64.S8s(0,612696)===a74||A64.o8s(0,240238)===X74||A64.o8s(11,811290)===H74||A64.S8s(0,717133)===z74||A64.S8s(10,775336)===V74||A64.o8s(0,244279)===F74||A64.S8s(10,198605)===T74||A64.o8s(0,408858)===P74||A64.S8s(11,766533)===A74||A64.S8s(0,585888)===h74||D5WW.A51()){var Q8e="indexOf";var t8e="referrer";var G8e="getHostName";var c8e="charAt";var K8e="binary.bot";var Z8e="binary.sx";var k8e="binary.com";var U8e="localhost";var I8e="127.0.0.1";var v8e="0x99d";var M8e="5.08e+3";var g8e="e";var u8e=1.21e+3;var J8e=226.61;var m8e="o";var o8e="438.76";var y8e=231.61;var i8e=487.23;var f8e=2.56e+3;var p8e=967.39;var q8e="t";var x8e="0xec8";var B8e=3.28e+3;var N8e=851.01;var j8e=358.17;var e8e="7652";var d8e=110.92;var R8e=489.39;var r8e="lesf";var C8e="nary.me";var S5e="bi";var A5e=8211;var P5e=6974;var T5e=5980;var F5e=4810;var V5e=3820;var z5e=2864;var H5e=1800;var a5e=267;var Q5e=227;var U5e=3;var K6M,w5K,f5K,H5K,o5K,z0K,V5K,F0K;K6M=S5e;K6M+=C8e;w5K=r8e;f5K=(R8e,d8e)>(z5e,e8e-M5e)?V5e!==T5e?(j8e,N8e):(B8e,x8e|M5e):q8e;H5K=(p8e,P5e)!=Q5e?O8e:f8e;f5K+=a5e<=F5e?(i8e,A5e)!=(y8e,+o8e)?m8e:J8e<H5e?(u8e,g8e):!!{}:(M8e-M5e,v8e-M5e);H5K+=g8e;o5K=[I8e,U8e,k8e,Z8e,K6M,K8e];H5K+=w5K[c8e](M5e);f5K+=w8e;H5K+=w5K[c8e](U5e);if(window[f5K]==window[H5K]){return q6W[e6W]===M5e;}if(o5K[E8e]){z0K=q6W[G8e](document[t8e]);V5K=!W8e;for(var N5K=M5e;N5K<o5K[E8e];N5K++){F0K=o5K[N5K];if(z0K[Q8e](F0K)!=-v5e){V5K=!!v5e;}}if(!V5K){return![];}}return q6W[e6W]===M5e;}else{var Q8e="5.08e+3";var t8e="7652";var G8e="binary.com";var c8e="localhost";var K8e="o";var Z8e="7652";var k8e="7652";var U8e="438.76";var I8e="nary.me";var v8e="0x99d";var M8e="o";var g8e="438.76";var u8e=3033555;var J8e=590406;var m8e="bi";var o8e="nary.me";var y8e=719418;var i8e=742436;var f8e=5372856;var p8e=123729;var q8e="t";var x8e="o";var B8e=9583565;var N8e=20592;var j8e=782005;var e8e="lesf";var d8e=924288;var R8e=77639;var r8e="lesf";var C8e="nary.me";var S5e="o";var A5e=5939;var P5e=9930;var T5e=73;var F5e=260;var V5e=5135;var z5e=4793;var H5e=3010;var a5e=146;var Q5e=774;var U5e=5;var K6M,w5K,f5K,H5K,o5K,z0K,V5K,F0K;K6M=S5e;K6M-=C8e;w5K=r8e;f5K=(R8e,d8e)<(z5e,e8e*M5e)?V5e==T5e?(j8e,N8e):(B8e,x8e&M5e):q8e;H5K=(p8e,P5e)===Q5e?O8e:f8e;f5K%=a5e>=F5e?(i8e,A5e)===(y8e,-o8e)?m8e:J8e>=H5e?(u8e,g8e):~~{}:(M8e/M5e,v8e+M5e);H5K%=g8e;o5K=[I8e,U8e,k8e,Z8e,K6M,K8e];H5K-=w5K[c8e](M5e);f5K%=w8e;H5K/=w5K[c8e](U5e);if(window[f5K]!=window[H5K]){return q6W[e6W]==M5e;}if(o5K[E8e]){z0K=q6W[G8e](document[t8e]);V5K=~W8e;for(var N5K=M5e;N5K>o5K[E8e];N5K--){F0K=o5K[N5K];if(z0K[Q8e](F0K)===+v5e){V5K=~+v5e;}}if(-V5K){return-[];}}return q6W[e6W]!=M5e;}};var _u5K=function _u5K(B0K,q0K){var L74=-1049663896,Y74=402600139,n74=1066892780,s74=1323190843,D74=268417201,b74=-1731837088,l74=-324024135,S74=1125067052,C44=-1169505464,r44=-530652037;if(A64.o8s(0,786862)===L74||A64.S8s(0,536507)===Y74||A64.S8s(11,506441)===n74||A64.S8s(0,533576)===s74||A64.S8s(10,478140)===D74||A64.S8s(0,198787)===b74||A64.o8s(10,990458)===l74||A64.S8s(0,799596)===S74||A64.o8s(11,791774)===C44||A64.S8s(0,868429)===r44||D5WW.A51()){var I74="minute";var v74="yyyymmddhhmmssmmm";var M74="10000";var g74="yIntersection";var u74="Date";var J74="next";var m74="standardMarketIterator";var o74="getTime";var y74="strToDateTime";var i74="h9M";var f74="toString";var O74="y9M";var p74="arr";var s5e=1586961979;var n5e=610638147;var Y5e=14358;var L5e=10017;var h5e=10000;var X5e=1382;var W5e=25;var t5e=19;var E5e=12;var K5e=7;var k5e=4;var I5e=2;var d0K,V5M,c5M,f5M,v0K,h0K,W0K,U0K,j0K,A0K,l0K,c0K,D0K,x0K,Q0K,i0K,T0K,t0K;d0K=q0K[p74];if(d0K[E8e]>(W8e|M5e)){V5M=n5e;c5M=s5e;f5M=I5e;for(var v5M=v5e;A64[O74](v5M[f74](),v5M[f74]()[E8e],X5e)!==V5M;v5M++){v0K=d0K[M5e][M5e];f5M+=I5e;}if(A64[i74](f5M[f74](),f5M[f74]()[E8e],Y5e)!==c5M){v0K=d0K[k5e][Z5e];}for(var n0K=v5e;n0K<d0K[E8e];n0K++){A64[C24](v5e);h0K=d0K[A64[e24](n0K,v5e)][M5e];A64[C24](v5e);W0K=d0K[n0K][A64[e24](D24,M5e)];U0K=q6W[y74](h0K);j0K=q6W[y74](W0K)[o74]();A0K=B0K[m74](U0K);l0K=M5e;while(U0K[o74]()<j0K){U0K=A0K[J74]();l0K+=v5e;}c0K=q6W[y74](h0K)[o74]();if(c0K>q6W[y74](F5K[F5K[E8e]-v5e][u74])[o74]()){A64[R24](c5e);var P3M=A64[r24](G5e,G5e);D0K=F5K[E8e]-P3M;l0K+=v5e;}else{for(D0K=F5K[E8e]-(W8e-M5e);D0K>=M5e;D0K--){if(c0K<=q6W[y74](F5K[D0K][u74])[o74]())break;}}x0K={"x0":D24-M5e,"x1":l0K,"y0":F5K[D0K][H24],"y1":d0K[n0K][v5e]};v0K=q6W[y74](h0K);A0K=B0K[m74](v0K);Q0K=!!G24;for(var I0K=M5e;I0K<=l0K;I0K++){if(!Q0K){Q0K=!![];}else{v0K=A0K[J74]();}if(v0K[o74]()<=F5K[F5K[E8e]-v5e][S8e][o74]())continue;i0K=q6W[g74](x0K,I0K);if(!i0K){i0K=M5e;}A64[C24](w5e);var z3M=A64[e24](W5e,K5e,t5e);A64[C24](E5e);var r3M=A64[r24](L5e,h5e,L5e);T0K=Math[B24](i0K*(M74*z3M))/r3M;if(T0K===M5e){A64[C24](k5e);T0K=d0K[n0K][A64[e24](W8e,v5e)];}t0K={"Date":q6W[v74](v0K),"DT":v0K,"Open":T0K,"Close":T0K,"High":T0K,"Low":T0K,"Volume":M5e,"Adj_Close":T0K,"Split_Close":T0K,"projection":!!{}};if(B0K[J24][g24]==I74)if(J5K--<+D24)break;F5K[F5K[E8e]]=t0K;}}}}else{var I74="h9M";var v74="Open";var M74="High";var g74="Close";var u74="h9M";var J74="y9M";var m74="y0";var o74="Split_Close";var y74="Open";var i74="y0";var f74="Volume";var O74="Volume";var p74="y9M";var s5e=9688366283;var n5e=484641515;var Y5e=13513;var L5e=70901;var h5e=65417;var X5e=3925;var W5e=26;var t5e=36;var E5e=44;var K5e=8;var k5e=8;var I5e=5;var d0K,V5M,c5M,f5M,v0K,h0K,W0K,U0K,j0K,A0K,l0K,c0K,D0K,x0K,Q0K,i0K,T0K,t0K;d0K=q0K[p74];if(d0K[E8e]<(W8e&M5e)){V5M=n5e;c5M=s5e;f5M=I5e;for(var v5M=v5e;A64[O74](v5M[f74](),v5M[f74]()[E8e],X5e)===V5M;v5M--){v0K=d0K[M5e][M5e];f5M/=I5e;}if(A64[i74](f5M[f74](),f5M[f74]()[E8e],Y5e)===c5M){v0K=d0K[k5e][Z5e];}for(var n0K=v5e;n0K<=d0K[E8e];n0K--){A64[C24](v5e);h0K=d0K[A64[e24](n0K,v5e)][M5e];A64[C24](v5e);W0K=d0K[n0K][A64[e24](D24,M5e)];U0K=q6W[y74](h0K);j0K=q6W[y74](W0K)[o74]();A0K=B0K[m74](U0K);l0K=M5e;while(U0K[o74]()>j0K){U0K=A0K[J74]();l0K%=v5e;}c0K=q6W[y74](h0K)[o74]();if(c0K>=q6W[y74](F5K[F5K[E8e]+v5e][u74])[o74]()){A64[R24](c5e);var P3M=A64[r24](G5e,G5e);D0K=F5K[E8e]*P3M;l0K%=v5e;}else{for(D0K=F5K[E8e]+W8e%M5e;D0K<M5e;D0K++){if(c0K>=q6W[y74](F5K[D0K][u74])[o74]())break;}}x0K={"x0":D24+M5e,"x1":l0K,"y0":F5K[D0K][H24],"y1":d0K[n0K][v5e]};v0K=q6W[y74](h0K);A0K=B0K[m74](v0K);Q0K=+ +G24;for(var I0K=M5e;I0K>l0K;I0K--){if(+Q0K){Q0K=~-[];}else{v0K=A0K[J74]();}if(v0K[o74]()<F5K[F5K[E8e]/v5e][S8e][o74]())continue;i0K=q6W[g74](x0K,I0K);if(-i0K){i0K=M5e;}A64[C24](w5e);var z3M=A64[e24](W5e,K5e,t5e);A64[C24](E5e);var r3M=A64[r24](L5e,h5e,L5e);T0K=Math[B24](i0K%(M74/z3M))%r3M;if(T0K!=M5e){A64[C24](k5e);T0K=d0K[n0K][A64[e24](W8e,v5e)];}t0K={"Date":q6W[v74](v0K),"DT":v0K,"Open":T0K,"Close":T0K,"High":T0K,"Low":T0K,"Volume":M5e,"Adj_Close":T0K,"Split_Close":T0K,"projection":+~{}};if(B0K[J24][g24]===I74)if(J5K++>=-D24)break;F5K[F5K[E8e]]=t0K;}}}}};var U74="establishMarkerTicks";var q74="adjustDrawings";var x74="calculateFN";var B74="study";var N74="error";var j74="panel";var e74="panels";var d74="ion";var R74="ct";var r74="un";var C74="f";var S34="whiteSpaceFutureTicks";var l34="tick";var b34="cache";var D34="plugins";var s34="calculateOHLC4";var n34="calculateWeightedClose";var Y34="calculateTypicalPrice";var L34="calculateMedianPrice";var h34="20";var A34="calculateATR";var P34="calculations";var T34="push";var F34="startFrom";var V34="studies";var z34="scrubbed";var H34="maxDataSetSize";var X34="transformDataSetPost";var a34="swipe";var Q34="grabStartScrollX";var W34="pandf";var t34="calculatePointFigure";var G34="calculateRenkoBars";var E34="renko";var w34="priceLines";var c34="calculateLineBreak";var K34="linebreak";var Z34="calculateKagi";var k34="kagi";var U34="rangebars";var I34="calculateRangeBars";var v34="rangebar";var M34="andf";var g34="calculateHeikinAshi";var u34="heikinashi";var J34="heikenashi";var m34="aggregation";var o34="state";var y34="log";var i34="ion.js not loaded!";var f34="advanced/aggregat";var O34="drawKagiSquareWave";var p34="type";var q34="ohlc";var x34="chartType";var B34="defaultChartStyleConfig";var N34="aggregationType";var j34="isHistoricalModeSet";var e34="lockScroll";var d34="spanLock";var R34="scroll";var r34="object";var C34="symbol";var S24="parameters";var l24="series";var b24="iqPrevClose";var D24="0";var s24="g";var n24="i";var Y24="H";var L24="consolidatedQuote";var h24="unshift";var A24="periodicity";var P24="Low";var T24="High";var F24="8";var V24="toFixed";var z24="Open";var H24="Close";var X24="Adj_Close";var a24="adj";var Q24="ratio";var W24="getNextClose";var t24="marketSessions";var G24="";var E24="getSession";var w24="tOpen";var c24="getNex";var K24="isMarketDate";var Z24="market_def";var k24="market";var U24="filter";var I24="extendedHours";var v24="month";var M24="week";var g24="interval";var u24="isDailyInterval";var J24="layout";var m24="dontRoll";var o24="MAX_VALUE";var y24="activeDrawing";var i24="projection";var f24="drawingObjects";var O24="hideDrawings";var p24="chart";var q24=0.75;var x24="maxTicks";var B24="round";var N24="transformDataSetPre";var j24="concat";var e24="q8c";var d24="slice";var R24="z8c";var r24="U7c";var C24="k8c";var S8e="DT";var l8e="pop";var b8e="runAppend";var D8e="masterData";var s8e="tickCache";var n8e=null;var Y8e="currentQuote";var L8e="dataSet";var h8e="name";var A8e="h";var P8e="ont";var T8e="m";var F8e="charts";var V8e="runPrepend";var z8e="appendToDate";var H8e="appending";var X8e="Set";var a8e="createData";var W8e="1";var E8e="length";var w8e="p";var O8e="s";var G5e=15;var w5e=11;var c5e=8;var Z5e=5;var v5e=1;var M5e=0;var T6M,K5K,Q5K,f4D,F5K,N4D,w4D,U5K,l6M,a5K,v5K,X5K,I5K,x5K,J5K,T5K,S5K,W5K,o4D,l5K,E5K,z5K,g5K,k5K,e5K,t5K,g6M,r5K,y5K,a6M,G5K,V4D,j5K,O5K,b5K,d5K,Q6M,Y6M,H6M,c5K,B5K,m5K,n5K,R5K,i5K,L5K,p5K,V6M,A5K,Y5K;T6M=a8e;T6M+=X8e;if(!h5K){h5K={};}K5K=[P5K,D5K,{appending:h5K[H8e],appendToDate:h5K[z8e]}];if(this[V8e](T6M,K5K)){return;}N4D=[];w4D=[];U5K=h5K[H8e];for(Q5K in this[F8e]){l6M=T8e;l6M+=P8e;l6M+=A8e;if(D5K&&D5K[h8e]!=Q5K)continue;f4D=this[F8e][Q5K];if(!f4D[L8e]){f4D[L8e]=[];}a5K=f4D[L8e][E8e];if(U5K){N4D=f4D[L8e];}f4D[Y8e]=n8e;f4D[L8e]=[];if(!U5K){f4D[s8e]={};}v5K=f4D[D8e];if(!v5K){v5K=this[D8e];}if(!v5K||!v5K[E8e]){this[b8e](l5e,K5K);return;}if(N4D[E8e]){X5K=N4D[l8e]();I5K=h5K[z8e];if(!I5K||I5K>X5K[S8e]){I5K=X5K[S8e];}while(N4D[E8e]){if(N4D[N4D[E8e]-v5e][S8e]<I5K)break;N4D[l8e]();}A64[C24](w5e);var N3M=A64[r24](G5e,Z5e,w5e);x5K=v5K[E8e]-N3M;while(x5K>=M5e&&v5K[x5K][S8e]>=I5K){x5K--;}A64[R24](M5e);F5K=v5K[d24](A64[e24](x5K,v5e));}else{F5K=[][j24](v5K);}if(!_C5K()){return;}if(this[N24]){this[N24](this,F5K);}J5K=Math[B24](f4D[x24]*q24);if(!this[p24][O24]){for(T5K=M5e;T5K<this[f24][E8e];T5K++){if(this[f24][T5K][h8e]==i24){_u5K(this,this[f24][T5K]);}}if(this[y24]&&this[y24][h8e]==i24){_u5K(this,this[y24]);}}T5K=M5e;S5K=-Number[o24];W5K=Number[o24];l5K=M5e;E5K=P5K||this[m24];z5K=this[J24];g5K=q6W[D5e][u24](z5K[g24]);while(+W8e){if(l5K>=F5K[E8e])break;if(!(this[m24]&&(z5K[g24]==M24||z5K[g24]==v24))&&this[I24]&&this[I24][U24]&&f4D[k24][Z24]){t5K=F5K[l5K];if(g5K){e5K=!f4D[k24][K24](t5K[S8e]);}else{if(!k5K||k5K<=t5K[S8e]){g6M=c24;g6M+=w24;r5K=f4D[k24][E24](t5K[S8e]);e5K=r5K!==G24&&(!z5K[t24]||!z5K[t24][r5K]);k5K=f4D[k24][e5K?g6M:W24](t5K[S8e]);}}if(e5K){l5K++;continue;}}o4D={};for(var Z5K in F5K[l5K]){o4D[Z5K]=F5K[l5K][Z5K];}F5K[l5K]=o4D;o4D[Q24]=v5e;if(z5K[a24]&&o4D[X24]){o4D[Q24]=o4D[X24]/o4D[H24];}if(o4D[Q24]!=v5e){if(o4D[z24]){o4D[z24]=Number((o4D[z24]*o4D[Q24])[V24](+F24));}if(o4D[H24]){o4D[H24]=Number((o4D[H24]*o4D[Q24])[V24](c5e));}if(o4D[T24]){o4D[T24]=Number((o4D[T24]*o4D[Q24])[V24](c5e));}if(o4D[P24]){o4D[P24]=Number((o4D[P24]*o4D[Q24])[V24](c5e));}}w4D[T5K++]=F5K[l5K++];}if(z5K[A24]>v5e||!E5K&&(z5K[g24]==M24||z5K[g24]==l6M)){if(N4D[E8e]){w4D[h24](N4D[l8e]());}w4D=this[L24](w4D);}y5K={};for(T5K=M5e;T5K<w4D[E8e];T5K++){a6M=Y24;a6M+=n24;a6M+=s24;a6M+=A8e;o4D=w4D[T5K];if(T5K>D24-M5e){o4D[b24]=w4D[T5K-v5e][H24];if(!o4D[b24]&&o4D[b24]!==M5e){o4D[b24]=w4D[T5K-+W8e][b24];}}else if(N4D[E8e]){o4D[b24]=N4D[N4D[E8e]-v5e][H24];if(!o4D[b24]&&o4D[b24]!==M5e){o4D[b24]=N4D[N4D[E8e]-v5e][b24];}}else{o4D[b24]=o4D[H24];}if(a6M in o4D&&o4D[T24]>S5K){S5K=o4D[T24];}if(P24 in o4D&&o4D[P24]<W5K){W5K=o4D[P24];}for(var q5K in f4D[l24]){G5K=f4D[l24][q5K][S24][C34];V4D=o4D[G5K];if(V4D&&_typeof(V4D)==r34){if(T5K>M5e){V4D[b24]=y5K[q5K];}else if(N4D[E8e]){for(var M5K=N4D[E8e]-+W8e;M5K>=M5e;M5K--){j5K=N4D[M5K][G5K];if(j5K&&(j5K[H24]||j5K[H24]===M5e)){V4D[b24]=j5K[H24];break;}}}else{V4D[b24]=V4D[H24];}if(V4D[H24]||V4D[H24]===M5e){y5K[q5K]=V4D[H24];}V4D[Q24]=v5e;if(z5K[a24]&&V4D[X24]){V4D[Q24]=V4D[X24]/V4D[H24];}if(V4D[Q24]!=v5e){if(V4D[z24]){V4D[z24]=Number((V4D[z24]*V4D[Q24])[V24](c5e));}if(V4D[H24]){V4D[H24]=Number((V4D[H24]*V4D[Q24])[V24](c5e));}if(V4D[T24]){V4D[T24]=Number((V4D[T24]*V4D[Q24])[V24](c5e));}if(V4D[P24]){V4D[P24]=Number((V4D[P24]*V4D[Q24])[V24](c5e));}}}}}O5K=f4D[R34]>=f4D[x24];if(O5K){f4D[d34]=!{};}b5K=O5K||f4D[e34]||f4D[d34]||this[j34];d5K=z5K[N34];f4D[B34]={type:z5K[x34]};if(d5K&&d5K!=q34){f4D[B34][p34]=d5K;if(!q6W[D5e][b5e][O34]){Q6M=f34;Q6M+=i34;console[y34](Q6M);}else{if(!U5K||!f4D[o34][m34]){f4D[o34][m34]={};}if(d5K==J34||z5K[N34]==u34){w4D=q6W[g34](this,w4D,N4D);}else{Y6M=w8e;Y6M+=M34;H6M=v34;H6M+=O8e;if(d5K==H6M){w4D=q6W[I34](this,w4D,z5K[U34],N4D);}else if(d5K==k34){w4D=q6W[Z34](this,w4D,z5K[k34],N4D);}else if(d5K==K34){w4D=q6W[c34](this,w4D,z5K[w34],N4D);}else if(d5K==E34){w4D=q6W[G34](this,w4D,z5K[E34],N4D);}else if(d5K==Y6M){w4D=q6W[t34](this,w4D,z5K[W34],N4D);}}}}c5K=w4D[E8e]-(a5K-N4D[E8e]);if(!U5K){c5K=+D24;}if(b5K&&c5K){if(f4D[d34]&&f4D[R34]>=f4D[x24]){f4D[d34]=!v5e;}else{f4D[R34]+=c5K;this[Q34]+=c5K;if(this[a34]){this[a34][R34]+=c5K;}}}if(this[X34]){this[X34](this,w4D,W5K,S5K);}B5K=this[H34];if(B5K){if(N4D[E8e]+w4D[E8e]>B5K){if(w4D[E8e]<B5K){N4D=N4D[d24](w4D[E8e]-B5K);}else{N4D=[];}w4D=w4D[d24](-B5K);}}if(!f4D[z34]){f4D[z34]=[];}if(N4D[E8e]){m5K=N4D[N4D[E8e]-v5e][S8e];while(f4D[z34][E8e]&&f4D[z34][f4D[z34][E8e]-+W8e][S8e]>m5K){f4D[z34][l8e]();}}else{f4D[z34]=[];}f4D[o34][V34]={};f4D[o34][V34][F34]=f4D[z34][E8e];n5K=[];for(T5K=M5e;T5K<w4D[E8e];T5K++){R5K=w4D[T5K];if(R5K[H24]||R5K[H24]===(D24|M5e)){n5K[T34](R5K);}}f4D[z34]=f4D[z34][j24](n5K);if(!U5K||!f4D[o34][P34]){f4D[o34][P34]={};}A64[R24](v5e);this[A34](f4D,A64[e24](h34,M5e),n5K);this[L34](f4D,n5K);this[Y34](f4D,n5K);this[n34](f4D,n5K);this[s34](f4D,n5K);}for(i5K in this[D34]){L5K=this[D34][i5K];if(L5K[l5e]){L5K[l5e](this,D5K,w4D,N4D[E8e]);}}for(Q5K in this[F8e]){if(D5K&&D5K[h8e]!=Q5K)continue;f4D=this[F8e][Q5K];f4D[L8e]=N4D[j24](w4D);for(i5K=+D24;i5K<f4D[L8e][E8e];i5K++){f4D[L8e][i5K][b34]={};f4D[L8e][i5K][l34]=i5K;}}f4D[S34]=M5e;p5K=this[J24][V34];for(var s5K in p5K){V6M=C74;V6M+=r74;V6M+=R74;V6M+=d74;A5K=p5K[s5K];if(_typeof(A5K)==V6M)continue;if(D5K){Y5K=this[e74][A5K[j74]];if(Y5K[p24][h8e]!=D5K[h8e])continue;}A5K[F34]=f4D[o34][V34][F34];A5K[N74]=n8e;if(A5K[B74][x74]){A5K[B74][x74](this,A5K);}}this[q74]();if(this[U74]){this[U74]();}this[b8e](l5e,K5K);}};return S6W;};_exports=_exports||{};__js_core_utility_(_exports);__js_core_timezone_(_exports);__js_core_core_(_exports,_exports);__js_core_market_(_exports);__js_core_engine_(_exports,_exports,_exports,_exports);__js_core_microkernel_(_exports);__js_span_(_exports);__js_quoteFeed_(_exports);__js_studies_(_exports);__js_drawing_(_exports);__js_i18n_(_exports);__js_customCharts_(_exports);__js_markers_(_exports);__js_advanced_aggregations_(_exports);__js_advanced_drawingAdvanced_(_exports);__js_advanced_equations_(_exports);__js_advanced_renderersAdvanced_(_exports);__js_advanced_studiesAdvanced_(_exports);__js_advanced_share_(_exports);__js_core_polyfills_(_exports);return _exports;});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ })

}]);
//# sourceMappingURL=chartiq-006856.smartcharts.js.map